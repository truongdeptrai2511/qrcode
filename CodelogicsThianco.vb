Imports System.Text
Imports Code.Library
Imports Code.Library.Library
Imports Code.Logics.CodeLogics
Imports WXCore.Client
Imports WXCore.Server
Imports System.Net.Configuration
Imports System.Configuration
Imports System.Web.Script.Serialization
Imports System.Data.SqlClient
Imports System.IO
Imports System.Data.OleDb
Imports System.Net.Mail
Imports System
Imports System.Security.Cryptography
Imports System.Runtime.Serialization.Formatters.Binary
Imports System.Runtime.CompilerServices
Imports System.IO.Compression
Imports WXCore.Objects
Imports System.Text.RegularExpressions
Imports System.Net.Mime
Imports System.Net.Security
Imports ZXing.QrCode
Imports ZXing.Common
Imports ZXing
'Imports CodeLibrary


Public Class CodelogicThianco : Inherits CodeServer
#Region "General"
    Shared Function ISDBNULL(ByVal rs As Object, ByVal val As Object) As Object
        If rs Is System.DBNull.Value Then
            Return val
        Else
            Return rs
        End If

    End Function

    Public Shared Function IVCheckStockItemLotNoTransfer(ByVal DocNo As String, ByVal Location As String, ByRef ItemNotAVailable As String, ByRef QtyNotAvailable As Decimal, ByRef LotNo As String, ByRef VariantC As String) As String
        Dim BatchQty As Decimal
        Dim strCheckTransfer As New StringBuilder
        strCheckTransfer.AppendLine("   select A.[Item No_],B.[Lot No_],B.Quantity,B.[Unit of Measure Code],B.[Variant Code] [Variant Code] from [Transfer Order Line] A ")
        strCheckTransfer.AppendLine(" inner join( ")
        strCheckTransfer.AppendLine("   select distinct B.[Document No_],B.[Line No_]")
        strCheckTransfer.AppendLine("   ,B.[Item No_],B.[Lot No_],B.Quantity,B.[Unit of Measure Code],B.[Job Code] [Variant Code] ")
        strCheckTransfer.AppendLine("   from [Transfer Order Line Lot No] B ) B")
        strCheckTransfer.AppendLine("on A.[Document No_]=B.[Document No_]")
        strCheckTransfer.AppendLine("   and A.[Line No_]=B.[Line No_] and A.[Item No_]=B.[Item No_]")
        strCheckTransfer.AppendLine("   where A.[Document No_]='" & DocNo & "'")
        Dim q As Query = Query.Sql(strCheckTransfer.ToString()).Transaction(True)
        Dim ItemSource As DataTable = q.ToTable()
        Dim items As Object() = Code.Logics.CodeLogics.GetDistinctValues(ItemSource, "Item No_")
        For i As Integer = 0 To items.Length - 1
            Dim itemNo As String = items(i)("Item No_")
            Dim LotNo_ As String = items(i)("Lot No_")
            Dim VariantCode As String = items(i)("Variant Code")
            Dim rows As DataRow() = ItemSource.Select(String.Format("[Item No_]='{0}' and [Lot No_]='{1}' AND [Variant Code] ='{2}'", itemNo, LotNo_, VariantCode))
            BatchQty = 0
            For k As Integer = 0 To rows.Length - 1
                Dim itemCode As String = rows(k)("Item No_")
                Dim qty As Decimal = rows(k)("Quantity")
                'Dim location As String = rows(k)("Location Code")
                Dim UM As String = rows(k)("Unit of Measure Code")

                Dim QtyPerUnit As Decimal = GetQtyPer(itemCode, UM)

                BatchQty = BatchQty + qty * QtyPerUnit

                'Check this item allow negative out
                q = Query.From("Item")
                q.WhereAs("No_") = itemCode
                Dim saftystock As Decimal = q.Value("Safety Stock Quantity")

                q = Query.From("Standard Cost Worksheet")
                q.WhereAs("Item No_") = itemCode
                'q.WhereAs("Source Code") = item("Source Code")
                q.WhereAs("Location Code") = Location
                q.OrderBy("Date").DESC()
                Dim dataset As DataTable = q.ToTable
                If dataset.Rows.Count > 0 Then
                    For Each Data As DataColumn In dataset.Columns
                        If Data.ColumnName = "Safety Stock Quantity" Then
                            saftystock = dataset.Rows(0)("Safety Stock Quantity")
                            Exit For
                        End If
                    Next
                End If

                'If q.Value("Safety Stock Quantity") <> 0 Then saftystock = q.Value("Safety Stock Quantity")

                Dim Nonstock As Integer = q.Value("Nonstock")
                Dim StockZero As Integer = q.Value("Inventory Value Zero")
                If Nonstock = 1 Then Continue For

                q = Query.From("Value Entry").Select("SUM([Valued Quantity]) AS Quantity").Transaction(True)
                q.Where("Item No_").Is(itemCode)
                q.And("Location Code").Is(Location)
                q.And("Lot No_").Is(rows(k)("Lot No_"))
                q.And("Variant Code").Is(rows(k)("Variant Code"))
                Dim SumQty As Decimal = q.Value("Quantity")

                'Check this item allow negative out
                'q = query.from("Item")
                'q.WhereAs("No_") = itemCode
                'Dim saftystock As Decimal = q.Value("Safety Stock Quantity")
                QtyNotAvailable = RoundWithCurrency(SumQty - BatchQty)

                If QtyNotAvailable < 0 Then
                    ItemNotAVailable = itemCode
                    LotNo = rows(k)("Lot No_")
                    VariantC = rows(k)("Variant Code")
                    Select Case StockZero
                        Case 0
                            Return -1
                        Case 1 'Warning no
                            'warning khong tinh safety stock
                            Return 1
                    End Select
                Else
                    If QtyNotAvailable - saftystock < 0 Then 'warning with safety stock
                        'Warning co tinh safety stock 
                        Return 2
                    End If
                End If
            Next
        Next

        Return 0 ' All item is OK
    End Function
#End Region

#Region "QRCode Warehouse Picking and Puting"

    Public Shared Sub LogisticsDataInitFromBackEnd(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim r As Hashtable = sender.CurrentRow
        'If r Is Nothing Or r.Count = 0 Then Return
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        Dim OrderNo As String = r("No_")
        Dim LogisticsNo As String = r("Logistics No_")
        Dim PackingList As String = r("Packing List") ' sender.GetParameter("PackingList")

        Dim OrderTable As String = sender.TableName
        'Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = "" '  LineControler.TableName
        Dim Doctype As Integer = 0
        Dim DW As DataTable

        Select Case OrderTable
            Case "Logistics Purchase Order Header"
                Doctype = 0
                LineTable = "DataLink Purchase Order Line"
                If LogisticsNo = "" Then LogisticsNo = r("Picking No_")
            Case "Logistics Sales Order Header"
                Doctype = 1
                LineTable = "DataLink Sales Order Line"
                If LogisticsNo = "" Then LogisticsNo = r("Picking No_")
            Case "Logistics Sales Return Order Header"
                Doctype = 9
                LineTable = "DataLink Sales Return Order Line"
                If LogisticsNo = "" Then LogisticsNo = r("Picking No_")
            Case "Logistics Purchase Return Order Headerr"
                Doctype = 10
                LineTable = "DataLink Purchase Return Order Line"
                If LogisticsNo = "" Then LogisticsNo = r("Picking No_")

            Case "Logistics Transfer Order Header"
                Select Case r("Transaction Type")
                    Case 2
                        Doctype = 12
                    Case 3
                        Doctype = 14
                    Case 4
                        Doctype = 16
                    Case 5
                        Doctype = 18
                    Case Else
                        Doctype = 4
                End Select
                If LogisticsNo = "" Then LogisticsNo = r("Picking No_")
                LineTable = "DataLink Transfer Order Line"
            Case "Logistics Production Order Header"
                Doctype = 6
                LineTable = "DataLink Production Order Line"
                Dim qw As Query = Query.From("DataLink Production Order Component").Transaction(True)
                qw.Where("Document No_").Is(r("No_"))
                DW = qw.ToTable
                If LogisticsNo = "" Then LogisticsNo = r("Picking No_")

            Case "Mainternance Header"
                Doctype = 8
                LineTable = "DataLink Mainternance Line"

        End Select

        If LogisticsNo = "" Then LogisticsNo = r("No_")

        Dim exist As Query = Query.From("Logistics List").Transaction(True)
        exist.Where("Document No_").Is(r("No_"))
        'exist.And("Logistics No_").Is(LogisticsNo) ' 
        exist.And("Document Type").Is(Doctype)
        If exist.RecordCount > 0 Then Return

        'Dim TableDocumentEntryHeader As String = "Document Entry Header"
        'Dim TableDocumentEntry As String = "Document Entry"

        'Dim qq As Query = Query.From("Document Entry Header").Transaction(True)
        'qq.Where("No_").Is(r("No_"))
        ''qq.And("Logistics No_").Is(LogisticsNo) ' 
        'qq.And("Document Type").Is(Doctype)

        'If qq.RecordCount > 0 Then Return

        ''If Status = 0  Then
        ''    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
        ''    queryDelete.Where("No_").Is(r("No_"))
        ''    queryDelete.And("Document Type").Is(Doctype)
        ''    queryDelete.Execute()

        ''    queryDelete = Query.Delete(TableDocumentEntry)
        ''    queryDelete.Where("Document No_").Is(r("No_"))
        ''    queryDelete.And("Document Type").Is(Doctype)
        ''    queryDelete.Execute()

        ''End If

        Dim q As Query = Query.From(LineTable).Transaction(True)
        q.Where("Document No_").Is(r("No_"))
        Dim DTSource As DataTable = q.ToTable
        If DTSource.Rows.Count = 0 Then Return


        'If CheckOrderQRCodeInit(r("No_"), r("Logistics No_"), r("Picking No_"), Doctype) = 1 Then
        '    WorkSession.MsgML("Already Init !")
        '    Return
        'End If

        'lấy series
        'LogisticsNo = GetandUpdateSeriesNumber("PurchaseReturn", "", SaleSourceCode, ResponsibilityCenter, Location, PackingList)

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim insertLine As Query = Query.Entity("Logistics List").Insert
                'insertLine = Query.Entity("Logistics List").Insert
                insertLine.Fields("Document Type") = Doctype
                insertLine.Fields("Document No_") = r("No_")
                insertLine.Fields("Your Reference") = r("No_")
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Packing List") = PackingList
                insertLine.Fields("Picking No_") = LogisticsNo

                insertLine.Fields("Source Code") = r("Source Code")
                insertLine.Fields("Responsibility Center") = r("Responsibility Center")

                insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("Lot No_")
                insertLine.Fields("Real Expiration Date") = DTSource.Rows(i)("Expiration Date") '] [datetime] NULL,

                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure") 'UOM
                insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")

                insertLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("Outstanding Quantity")
                insertLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Outstanding Quantity")
                insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("Outstanding Quantity")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")

                insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code")
                insertLine.Fields("Description") = LogisticsNo
                insertLine.Fields("Expiration Date") = DTSource.Rows(i)("Expiration Date") '] [datetime] NULL,

                insertLine.Execute()

                'insert header
                'If i = 0 Then
                '    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                '    insert.Fields("No_") = r("No_")
                '    insert.Fields("Picking No_") = PackingList

                '    insert.Fields("Document No_") = r("No_")
                '    insert.Fields("External Document No_") = r("External Document No_")
                '    insert.Fields("Logistics No_") = LogisticsNo
                '    insert.Fields("Picking No_") = LogisticsNo
                '    insert.Fields("Reference No_") = r("No_")
                '    insert.Fields("Location Code") = r("Location Code")
                '    insert.Fields("Source Code") = r("Source Code")
                '    insert.Fields("Responsibility Center") = r("Responsibility Center")
                '    insert.Fields("Document Type") = Doctype
                '    insert.Fields("Posting Date") = r("Posting Date")
                '    insert.Fields("External Document No_") = r("External Document No_")
                '    insert.Fields("Status") = 0
                '    insert.Fields("Backend") = 1
                '    insert.Execute()
                'End If


                'insert line
                'insertLine = Query.Entity(TableDocumentEntry).Insert
                'Dim qqq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                'Dim EntryNo As Integer = qqq.Value("EntryNo")

                'For k As Integer = 0 To DTSource.Rows(i)("Quantity") - 1
                '    'Dim r As DataRow = Orderline.TakeRow(0)
                '    insertLine.Fields("Entry No_") = EntryNo
                '    insertLine.Fields("Document No_") = r("No_")
                '    insertLine.Fields("Logistics No_") = LogisticsNo
                '    insertLine.Fields("Packing List") = PackingList
                '    insertLine.Fields("Picking No_") = LogisticsNo
                '    'insertLine.Fields("Your Reference") = DocumentNo

                '    insertLine.Fields("Document Type") = Doctype
                '    insertLine.Fields("Source Code") = r("Source Code")
                '    insertLine.Fields("Responsibility Center") = r("Responsibility Center")
                '    insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code") ''rOrder("Location Code")
                '    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                '    insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                '    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                '    insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                '    insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("Lot No_")
                '    insertLine.Fields("Real Expired Date") = DTSource.Rows(i)("Expired Date") '] [datetime] NULL,
                '    insertLine.Fields("Posting Date") = r("Posting Date")
                '    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                '    'insertLine.Fields("Status") = 0
                '    insertLine.Fields("User ID") = Framework.UserID
                '    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                '    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure")
                '    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                '    insertLine.Fields("Line No_") = k
                '    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                '    insertLine.Fields("Quantity") = 1 'r("Quantity")
                '    insertLine.Fields("Scan Number") = 0
                '    insertLine.Fields("Backend") = 1
                '    insertLine.Execute()

                '    EntryNo += 1
                'Next

                If Doctype = 1 Or Doctype = 9 Then
                    insertLine = Query.Entity("Picking List").Insert
                    insertLine.Fields("Document Type") = Doctype
                    insertLine.Fields("Document No_") = r("No_")
                    insertLine.Fields("External Document No_") = r("External Document No_")
                    insertLine.Fields("Logistics No_") = LogisticsNo
                    insertLine.Fields("Packing List") = ""
                    insertLine.Fields("Picking No_") = LogisticsNo
                    insertLine.Fields("Your Reference") = r("No_")

                    'insertLine.Fields("Bin Code") = DTSource.Rows(i)("BinCode")

                    insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")

                    insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Expiration Date") = DTSource.Rows(i)("Expiration Date")
                    insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Real Expiration Date") = DTSource.Rows(i)("Expiration Date")

                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Outstanding Quantity")
                    insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("Outstanding Quantity")
                    insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code")
                    insertLine.Fields("Description") = r("No_")
                    insertLine.Execute()
                End If
            Next

            If Doctype = 6 Or Doctype = 4 Or Doctype = 14 Or Doctype = 16 Or Doctype = 18 Then

                For i As Integer = 0 To DW.Rows.Count - 1
                    Dim insertLine As Query = Query.Entity("Logistics List").Insert
                    insertLine.Fields("Document Type") = Doctype + 1

                    insertLine.Fields("Document No_") = r("No_")
                    insertLine.Fields("Your Reference") = r("No_")
                    insertLine.Fields("Logistics No_") = LogisticsNo
                    insertLine.Fields("Packing List") = PackingList
                    insertLine.Fields("Picking No_") = LogisticsNo
                    insertLine.Fields("Source Code") = r("Source Code")
                    insertLine.Fields("Responsibility Center") = r("Responsibility Center")
                    insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Expiration Date") = DTSource.Rows(i)("Expiration Date") '] [datetime] NULL,
                    insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Real Expiration Date") = DTSource.Rows(i)("Expiration Date") '] [datetime] NULL,
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure") 'UOM
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")

                    insertLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("Outstanding Quantity")
                    insertLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Outstanding Quantity")
                    insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("Outstanding Quantity")
                    insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code")
                    insertLine.Fields("Description") = LogisticsNo


                    insertLine.Execute()
                Next
            End If


            Query.EndTransaction()
            sender.RefreshSource()

            'WorkSession.Client.Close()
            'Doc lai bien session chua ID cua entity cha A
            'Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            'Framework.RefreshSource(parentID)
            'Framework.OpenEntity("Document Entry Header", String.Format("[No_]=N'{0}'", r("No_")))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    'Public Shared Sub LogisticsData(DTSource As Object, DocumentNo As String, Doctype As Integer, ExternalDocumentNo As String, LogisticsNo As String, PackingList As String,
    '                                SaleSourceCode As String, ResponsibilityCenter As String)
    '    Dim insert As Query = Query.Entity("Logistics List").Insert
    '    insert.Fields("Document No_") = DocumentNo
    '    insert.Fields("Document Type") = Doctype
    '    insert.Fields("External Document No_") = ExternalDocumentNo
    '    insert.Fields("Logistics No_") = LogisticsNo
    '    insert.Fields("Packing List") = PackingList
    '    insert.Fields("Picking No_") = LogisticsNo
    '    insert.Fields("Your Reference") = DocumentNo

    '    insert.Fields("Source Code") = SaleSourceCode
    '    insert.Fields("Responsibility Center") = ResponsibilityCenter
    '    insert.Fields("Location Code") = DTSource("LocationCode")
    '    insert.Fields("From Source Code") = SaleSourceCode
    '    insert.Fields("From Responsibility Center") = ResponsibilityCenter
    '    insert.Fields("From Location Code") = DTSource("LocationCode")
    '    insert.Fields("To Source Code") = SaleSourceCode
    '    insert.Fields("To Responsibility Center") = ResponsibilityCenter
    '    insert.Fields("To Location Code") = DTSource("LocationCode")

    '    insert.Fields("No_") = DTSource("No_")
    '    insert.Fields("Item No_") = DTSource("No_")

    '    insert.Fields("Variant Code") = DTSource("VariantCode")
    '    insert.Fields("Lot No_") = DTSource("LotNo_")
    '    insert.Fields("Real Lot No_") = DTSource("LotNo_")
    '    insert.Fields("Real Expiration Date") = DTSource("ExpiredDate") '] [datetime] NULL,

    '    insert.Fields("Unit of Measure") = DTSource("UOM") 'UOM
    '    insert.Fields("Qty_ per Unit of Measure") = DTSource("QtyPer")
    '    insert.Fields("Qty_ to Receive") = DTSource("QtyToReceive")
    '    insert.Fields("Outstanding Quantity") = DTSource("QtyToReceive")
    '    insert.Fields("Quantity") = DTSource("QtyToReceive")

    '    insert.Fields("Description") = DocumentNo   '] [nvarchar](50) NULL,
    '    insert.Fields("Expiration Date") = DTSource("ExpiredDate") '] [datetime] NULL,
    '    insert.Fields("MFG Date") = DTSource("MFGDate")
    '    insert.Fields("Work Center") = "" ' LogisticsNo  ' Dataset.Value("")
    '    'insertLine.Fields("Status") = 0
    '    'insertLine.Fields("Style") = "" '] [nvarchar](50) NULL,
    '    'insertLine.Fields("PO No_") = DocumentNo  '] [nvarchar](50) NULL,
    '    ''insertLine.Fields("External Document No_") = DocumentNo ' PackingList  '] [nvarchar](50) NULL,
    '    'insertLine.Fields("Posting Date") = PostingDate ' DTSource.Rows(i)("MFGDate")
    '    'insertLine.Fields("Item Category") = "" '] [nvarchar](50) NULL,
    '    'insertLine.Fields("Code Number") = "" '] [nvarchar](50) NULL,
    '    'insertLine.Fields("Component") = "" '] [nvarchar](50) NULL,
    '    'insertLine.Fields("Color") = ""  '] [nvarchar](50) NULL,
    '    'insertLine.Fields("Weight Of Length") = 0 '] [decimal](28, 10) NULL,
    '    'insertLine.Fields("Size") = 0 '] [Decimal](28, 10) NULL,
    '    'insertLine.Fields("Roll") = " " '] [nvarchar](50) NULL,
    '    'insertLine.Fields("Qty_ Weight") = 0 ' "'] [decimal](28, 10) NULL,
    '    'insertLine.Fields("Unit2") = 0 '] [Decimal](28, 10) NULL,
    '    'insertLine.Fields("Net Weight") = 0 ' "'] [decimal](28, 10) NULL,
    '    'insertLine.Fields("Gross Weight") = 0 ' "
    '    'insertLine.Fields("CBM") = 0
    '    'insertLine.Fields("Item Group") = ""
    '    'insertLine.Fields("QR Code") = ""
    '    'insertLine.Fields("Color light") = ""

    '    insert.Execute()
    'End Sub

    Public Shared Sub PurchaseReturnPickQRCodeOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        If rOrder("Status") < 2 Then
            WorkSession.MsgML("Not Yet Validate !")
            Return
        End If

        If rOrder("Status") >= 4 Then
            WorkSession.MsgML("Already Warehouse Pick up !")
            Return
        End If

        Dim OrderTable As String = sender.TableName

        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Document No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("TRDReturnOrderPickQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("DocType") = 0 'r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("DocumentDate") = r("Document Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("MCP") = r("MCP")
            parameters("TransportID") = r("Transport ID")
            parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = r("Source Code")
            parameters("ReasonCode") = r("Reason Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")
            parameters("ShippingAgence") = r("Transaction Type")
            parameters("ShippingAgenceService") = r("Transaction Specification")
            parameters("Date Received") = r("Date Received")
            parameters("Time Received") = r("Time Received")
            parameters("LocationCode") = r("Location Code")
            'End If
        End If

        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow

            Myrow("LineNo_") = OrderLine.Rows(i)("Line No_")
            Myrow("No_") = OrderLine.Rows(i)("No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LocationCode1") = OrderLine.Rows(i)("Location Code")
            Myrow("LotNo_") = OrderLine.Rows(i)("Lot No_")
            Myrow("MFGDate") = OrderLine.Rows(i)("FA Posting Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Expiration Date")
            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("OrderQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("PostedQuantity") = OrderLine.Rows(i)("Quantity Received")
            Myrow("Quantity") = OrderLine.Rows(i)("Qty_ to Receive")

            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 9
        gridView.FixColumnCount = 14
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        gridView.ColumnReadOnly(12) = True
        gridView.ColumnReadOnly(13) = True
        'gridView.ColumnReadOnly(14) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub SalesReturnOrderPutQROrderOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        If rOrder("Status") < 2 Then
            WorkSession.MsgML("Not Yet Validate !")
            Return
        End If

        If rOrder("Status") >= 4 Then
            WorkSession.MsgML("Already Warehouse Put In !")
            Return
        End If

        Dim OrderTable As String = sender.TableName

        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Document No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("TRDReturnPutOrderQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("DocType") = 1 'r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("DocumentDate") = r("Document Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("MCP") = r("MCP")
            parameters("TransportID") = r("Transport ID")
            parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = r("Source Code")
            parameters("ReasonCode") = r("Reason Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")

            'If OrderTable = "Sales Order Header" Or OrderTable = "Sales Return Order Header" Then
            parameters("ShippingAgence") = r("Shipping Agent Code")
            parameters("ShippingAgenceService") = r("Shipping Agent service Code")
            'Else
            '    parameters("ShippingAgence") = r("Transaction Type")
            '    parameters("ShippingAgenceService") = r("Transaction Specification")
            'End If
        End If

        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow

            Myrow("LineNo_") = OrderLine.Rows(i)("Line No_")
            Myrow("No_") = OrderLine.Rows(i)("No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LocationCode") = OrderLine.Rows(i)("Location Code")
            Myrow("BinCode") = OrderLine.Rows(i)("Bin Code")
            Myrow("MFGDate") = OrderLine.Rows(i)("FA Posting Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Expiration Date")
            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("LotNo_") = OrderLine.Rows(i)("Lot No_")
            Myrow("OrderQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("PostedQuantity") = OrderLine.Rows(i)("Quantity Shipped")
            Myrow("Quantity") = OrderLine.Rows(i)("Outstanding Quantity")
            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 10
        gridView.FixColumnCount = 13
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        gridView.ColumnReadOnly(12) = True
        gridView.ColumnReadOnly(13) = True
        'gridView.ColumnReadOnly(14) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Sub QRCodePickOrderLotProcess(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)

        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")

        Dim DTSource As DataTable = sender.DataSource
        Dim Datasource As DataTable = DTSource.Clone()
        If Datasource Is Nothing Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        Dim Myrow As DataRow
        Dim q As Query
        Dim TransportQty As Decimal
        Dim RoundQty As Decimal = 0
        Dim OddQty As Decimal = 0
        'Assign parameter to entity        
        For i As Integer = 0 To DTSource.Rows.Count - 1

            If DTSource.Rows(i)("LotNo_") = "" Then
                q = Query.From("Item Unit Of Measure").Transaction(True)
                q.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                q.WhereAs("Type") = 4 'Qui cách nguyên
                If Not q.ToTable() Is Nothing And q.ToTable().Rows.Count > 0 Then
                    TransportQty = ISDBNULL(q.Value("Qty_ per Unit of Measure"), 1)
                End If
                'chia phan nguyen
                If TransportQty > 1 Then
                    RoundQty = Decimal.Floor(DTSource.Rows(i)("Quantity") / TransportQty) * TransportQty

                    Myrow = Datasource.NewRow
                    Myrow("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                    Myrow("No_") = DTSource.Rows(i)("No_")
                    Myrow("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                    Myrow("LocationCode") = DTSource.Rows(i)("LocationCode")
                    Myrow("UOM") = DTSource.Rows(i)("UOM")
                    Myrow("QtyPer") = DTSource.Rows(i)("Qtyper")
                    Myrow("OrderQuantity") = DTSource.Rows(i)("Quantity")
                    Myrow("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")

                    'Get FEFO
                    Dim qq As Query = Query.StoredProc("dbo.SelectLotNumber4PickOrder")
                    qq.Parameters("@SourceCode") = SaleSourceCode
                    qq.Parameters("@Respon") = ResponsibilityCenter
                    qq.Parameters("@LocationCode") = DTSource.Rows(i)("LocationCode")
                    qq.Parameters("@ItemNo") = DTSource.Rows(i)("No_")

                    Dim LotDS As DataTable = qq.ToTable
                    Dim LotQty As Decimal = 0
                    Dim LotNo As String = ""
                    Dim LotqtyPer As Decimal = 0

                    If LotDS.Rows.Count > 0 Then
                        LotQty = LotDS.Rows(0)("Quantity")
                        LotqtyPer = LotDS.Rows(0)("Qty_ per Unit of Measure")
                        Dim LotQuantity As Decimal = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qtyper") = 0, 1, DTSource.Rows(i)("Qtyper"))

                        If LotQuantity >= RoundQty Then
                            Myrow("LotNo") = LotDS.Rows(0)("Lot No_")
                            Myrow("BinCode") = GetBinQuantity(DTSource.Rows(i)("LocationCode"), DTSource.Rows(i)("No_"), LotDS.Rows(0)("Lot No_")) 'Get Bin Code by Bin Ranking
                            Myrow("Quantity") = RoundQty
                            Datasource.Rows.Add(Myrow)
                        Else 'Phai che order line ra
                            Dim LotQuantityRemain As Decimal = RoundQty ' - LotQuantity

                            For j As Integer = 0 To LotDS.Rows.Count - 1
                                Dim rs As DataRow = Datasource.NewRow
                                rs("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                                rs("No_") = DTSource.Rows(i)("No_")
                                rs("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                                rs("LocationCode") = DTSource.Rows(i)("LocationCode")
                                rs("UOM") = DTSource.Rows(i)("UOM")
                                rs("QtyPer") = DTSource.Rows(i)("Qtyper")
                                rs("OrderQuantity") = RoundQty
                                rs("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
                                If LotQuantityRemain <= 0 Then Continue For

                                LotQty = RoundQty
                                LotqtyPer = LotDS.Rows(j)("Qty_ per Unit of Measure")
                                LotQuantity = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qtyper") = 0, 1, DTSource.Rows(i)("Qtyper"))
                                If LotQuantity >= LotQuantityRemain Then
                                    rs("LineNo_") = 100 + j
                                    rs("LotNo_") = LotDS.Rows(j)("Lot No_")
                                    rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"))
                                    rs("Quantity") = LotQuantityRemain
                                Else
                                    rs("LineNo_") = 100 + j
                                    rs("LotNo_") = LotDS.Rows(j)("Lot No_")
                                    rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"))
                                    rs("Quantity") = LotQuantity
                                    LotQuantityRemain -= LotQuantity 'LotQty * LotqtyPer  / Dataset.Value("Qty_ per Unit of Measure")
                                End If
                                Datasource.Rows.Add(rs)
                            Next
                        End If

                    Else ' Ton lot khong du
                        WorkSession.MsgML("Item Lot No_ is not enough to supply !")
                        Continue For
                    End If
                End If
                'end cua lo chan lo le
            End If

            'tinh lo le
            OddQty = DTSource.Rows(i)("Quantity") - RoundQty
            Dim strOddQuantity As String

            strOddQuantity = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock) "
            strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
            strOddQuantity &= " and Bin.[Bin Ranking] =0"
            strOddQuantity &= " and Bin.[Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
            strOddQuantity &= "and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
            strOddQuantity &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code]  "
            strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

            'strOddQuantity = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)  "
            ''strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
            ''strOddQuantity &= " and Bin.[Bin Ranking] =0"
            'strOddQuantity &= " where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
            'strOddQuantity &= "and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
            'strOddQuantity &= "  group by [Lot No_],[Location Code]  "
            'strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

            Dim r As DataRow

            If Not Query.Sql(strOddQuantity).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows.Count > 0 Then
                r = Datasource.NewRow
                r("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                r("No_") = DTSource.Rows(i)("No_")
                r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                r("LocationCode") = DTSource.Rows(i)("LocationCode")
                r("UOM") = DTSource.Rows(i)("UOM")
                r("QtyPer") = DTSource.Rows(i)("Qtyper")
                r("OrderQuantity") = DTSource.Rows(i)("Quantity")
                r("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
                r("LineNo_") = 100 + i
                r("LotNo_") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Lot No_") 'LotDS.Rows(j)("Lot No_")
                r("BinCode") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Name")
                r("Quantity") = OddQty
                Datasource.Rows.Add(r)
            Else
                Dim strOddQBin As String
                strOddQBin = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock)"
                strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
                strOddQBin &= " and Bin.[Bin Ranking] <> 0"
                strOddQBin &= "  and Bin.[Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
                strOddQBin &= "  and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
                strOddQBin &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code],[Expiration Date] "
                strOddQBin &= " order by [Expiration Date] "

                'strOddQBin = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)"
                ''strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
                ''strOddQBin &= " and Bin.[Bin Ranking] <> 0"
                'strOddQBin &= "  where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
                'strOddQBin &= "  and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
                'strOddQBin &= "  group by [Lot No_],[Location Code],[Expiration Date] "
                'strOddQBin &= " order by [Expiration Date] "

                If Not Query.Sql(strOddQBin).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQBin).Transaction(True).ToTable().Rows.Count > 0 Then
                    Dim dv As DataView = Query.Sql(strOddQBin).Transaction(True).ToTable().DefaultView
                    dv.RowFilter = " Quantity > 0"
                    Dim rss As DataRow = dv.ToTable().Rows(0)

                    r = Datasource.NewRow
                    r("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                    r("No_") = DTSource.Rows(i)("No_")
                    r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                    r("LocationCode") = DTSource.Rows(i)("LocationCode")
                    r("UOM") = DTSource.Rows(i)("UOM")
                    r("QtyPer") = DTSource.Rows(i)("Qtyper")
                    r("OrderQuantity") = DTSource.Rows(i)("Quantity")
                    r("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
                    r("LineNo_") = 100 + i
                    r("LotNo_") = rss("Lot No_") 'LotDS.Rows(j)("Lot No_")
                    r("BinCode") = rss("Name")
                    r("Quantity") = OddQty
                    Datasource.Rows.Add(r)
                End If
            End If
        Next

        If Not Datasource Is Nothing And Datasource.Rows.Count > 0 Then
            Datasource.AcceptChanges()
            WorkSession.Client.GridView.DataSource = Datasource
            WorkSession.Client.Refresh()
        End If

    End Sub

    Public Sub QRCodePickWOLotProcess(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)

        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")

        Dim DTSource As DataTable = sender.DataSource
        Dim Datasource As DataTable = DTSource.Clone()
        Dim Myrow As DataRow
        Dim q As Query
        Dim TransportQty As Decimal
        Dim RoundQty As Decimal = 0
        Dim OddQty As Decimal = 0
        'Assign parameter to entity        
        For i As Integer = 0 To DTSource.Rows.Count - 1

            If DTSource.Rows(i)("LotNo_") = "" Then
                q = Query.From("Item Unit Of Measure").Transaction(True)
                q.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                q.WhereAs("Type") = 4 'Qui cách nguyên
                If Not q.ToTable() Is Nothing And q.ToTable().Rows.Count > 0 Then
                    TransportQty = ISDBNULL(q.Value("Qty_ per Unit of Measure"), 1)
                End If
                'chia phan nguyen
                If TransportQty > 1 Then
                    RoundQty = Decimal.Floor(DTSource.Rows(i)("Quantity") / TransportQty) * TransportQty

                    Myrow = Datasource.NewRow
                    Myrow("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                    Myrow("No_") = DTSource.Rows(i)("No_")
                    Myrow("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                    Myrow("LocationCode") = DTSource.Rows(i)("LocationCode")
                    Myrow("UOM") = DTSource.Rows(i)("UOM")
                    Myrow("QtyPer") = DTSource.Rows(i)("Qtyper")
                    Myrow("OrderQuantity") = DTSource.Rows(i)("Quantity")
                    Myrow("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")

                    'Get FEFO
                    Dim qq As Query = Query.StoredProc("dbo.SelectLotNumber4PickOrder")
                    qq.Parameters("@SourceCode") = SaleSourceCode
                    qq.Parameters("@Respon") = ResponsibilityCenter
                    qq.Parameters("@LocationCode") = DTSource.Rows(i)("LocationCode")
                    qq.Parameters("@ItemNo") = DTSource.Rows(i)("No_")

                    Dim LotDS As DataTable = qq.ToTable
                    Dim LotQty As Decimal = 0
                    Dim LotNo As String = ""
                    Dim LotqtyPer As Decimal = 0

                    If LotDS.Rows.Count > 0 Then
                        LotQty = LotDS.Rows(0)("Quantity")
                        LotqtyPer = LotDS.Rows(0)("Qty_ per Unit of Measure")
                        Dim LotQuantity As Decimal = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qtyper") = 0, 1, DTSource.Rows(i)("Qtyper"))

                        If LotQuantity >= RoundQty Then
                            Myrow("LotNo") = LotDS.Rows(0)("Lot No_")
                            'Myrow("BinCode") = GetBinQuantity(DTSource.Rows(i)("LocationCode"), DTSource.Rows(i)("No_"), LotDS.Rows(0)("Lot No_")) 'Get Bin Code by Bin Ranking
                            Myrow("QtyToShip") = RoundQty
                            Datasource.Rows.Add(Myrow)
                        Else 'Phai che order line ra
                            Dim LotQuantityRemain As Decimal = RoundQty ' - LotQuantity

                            For j As Integer = 0 To LotDS.Rows.Count - 1
                                Dim rs As DataRow = Datasource.NewRow
                                rs("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                                rs("No_") = DTSource.Rows(i)("No_")
                                rs("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                                rs("LocationCode") = DTSource.Rows(i)("LocationCode")
                                rs("UOM") = DTSource.Rows(i)("UOM")
                                rs("QtyPer") = DTSource.Rows(i)("Qtyper")
                                rs("OrderQuantity") = RoundQty
                                rs("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
                                If LotQuantityRemain <= 0 Then Continue For

                                LotQty = RoundQty
                                LotqtyPer = LotDS.Rows(j)("Qty_ per Unit of Measure")
                                LotQuantity = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qtyper") = 0, 1, DTSource.Rows(i)("Qtyper"))
                                If LotQuantity >= LotQuantityRemain Then
                                    rs("LineNo_") = 100 + j
                                    rs("LotNo_") = LotDS.Rows(j)("Lot No_")
                                    'rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"))
                                    rs("QtyToShip") = LotQuantityRemain
                                Else
                                    rs("LineNo_") = 100 + j
                                    rs("LotNo_") = LotDS.Rows(j)("Lot No_")
                                    'rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"))
                                    rs("QtyToShip") = LotQuantity
                                    LotQuantityRemain -= LotQuantity 'LotQty * LotqtyPer  / Dataset.Value("Qty_ per Unit of Measure")
                                End If
                                Datasource.Rows.Add(rs)
                            Next
                        End If

                    Else ' Ton lot khong du
                        WorkSession.MsgML("Item Lot No_ is not enough to supply !")
                        Continue For
                    End If
                End If
                'end cua lo chan lo le
            End If

            'tinh lo le
            OddQty = DTSource.Rows(i)("Quantity") - RoundQty
            Dim strOddQuantity As String

            strOddQuantity = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock) "
            strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
            strOddQuantity &= " and Bin.[Bin Ranking] =0"
            strOddQuantity &= " and Bin.[Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
            strOddQuantity &= "and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
            strOddQuantity &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code]  "
            strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

            'strOddQuantity = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)  "
            ''strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
            ''strOddQuantity &= " and Bin.[Bin Ranking] =0"
            'strOddQuantity &= " where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
            'strOddQuantity &= "and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
            'strOddQuantity &= "  group by [Lot No_],[Location Code]  "
            'strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

            Dim r As DataRow

            If Not Query.Sql(strOddQuantity).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows.Count > 0 Then
                r = Datasource.NewRow
                r("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                r("No_") = DTSource.Rows(i)("No_")
                r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                r("LocationCode") = DTSource.Rows(i)("LocationCode")
                r("UOM") = DTSource.Rows(i)("UOM")
                r("QtyPer") = DTSource.Rows(i)("Qtyper")
                r("OrderQuantity") = DTSource.Rows(i)("Quantity")
                r("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
                r("LineNo_") = 100 + i
                r("LotNo_") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Lot No_") 'LotDS.Rows(j)("Lot No_")
                'r("BinCode") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Name")
                r("QtyToShip") = OddQty
                Datasource.Rows.Add(r)
            Else
                Dim strOddQBin As String
                strOddQBin = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock)"
                strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
                strOddQBin &= " and Bin.[Bin Ranking] <> 0"
                strOddQBin &= "  and Bin.[Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
                strOddQBin &= "  and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
                strOddQBin &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code],[Expiration Date] "
                strOddQBin &= " order by [Expiration Date] "

                'strOddQBin = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)"
                ''strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
                ''strOddQBin &= " and Bin.[Bin Ranking] <> 0"
                'strOddQBin &= "  where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
                'strOddQBin &= "  and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
                'strOddQBin &= "  group by [Lot No_],[Location Code],[Expiration Date] "
                'strOddQBin &= " order by [Expiration Date] "

                If Not Query.Sql(strOddQBin).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQBin).Transaction(True).ToTable().Rows.Count > 0 Then
                    Dim dv As DataView = Query.Sql(strOddQBin).Transaction(True).ToTable().DefaultView
                    dv.RowFilter = " Quantity > 0"
                    Dim rss As DataRow = dv.ToTable().Rows(0)

                    r = Datasource.NewRow
                    r("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                    r("No_") = DTSource.Rows(i)("No_")
                    r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                    r("LocationCode") = DTSource.Rows(i)("LocationCode")
                    r("UOM") = DTSource.Rows(i)("UOM")
                    r("QtyPer") = DTSource.Rows(i)("Qtyper")
                    r("OrderQuantity") = DTSource.Rows(i)("Quantity")
                    r("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
                    r("LineNo_") = 100 + i
                    r("LotNo_") = rss("Lot No_") 'LotDS.Rows(j)("Lot No_")
                    'r("BinCode") = rss("Name")
                    r("QtyToShip") = OddQty
                    Datasource.Rows.Add(r)
                End If
            End If
        Next

        If Not Datasource Is Nothing And Datasource.Rows.Count > 0 Then
            Datasource.AcceptChanges()
            WorkSession.Client.GridView.DataSource = Datasource
            WorkSession.Client.Refresh()
        End If

    End Sub

    Public Sub QRCodePickTOLotProcess(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)

        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        'Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then
        '    SaleSourceCode = sender.GetParameter("SourceCode")
        '    ResponsibilityCenter = sender.GetParameter("ResponsibilityCenter")
        'Else
        '    SaleSourceCode = rOrder("Source Code")
        '    ResponsibilityCenter = rOrder("Responsibility Center")
        'End If

        Dim DTSource As DataTable = sender.DataSource
        Dim Datasource As DataTable = DTSource.Clone()

        If Not Datasource Is Nothing Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        Dim Myrow As DataRow
        Dim q As Query
        Dim TransportQty As Decimal
        Dim RoundQty As Decimal = 0
        Dim OddQty As Decimal = 0
        'Assign parameter to entity        
        For i As Integer = 0 To DTSource.Rows.Count - 1

            If DTSource.Rows(i)("LotNo_") = "" Then
                q = Query.From("Item Unit Of Measure").Transaction(True)
                q.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                q.WhereAs("Type") = 4 'Qui cách nguyên
                If Not q.ToTable() Is Nothing And q.ToTable().Rows.Count > 0 Then
                    TransportQty = ISDBNULL(q.Value("Qty_ per Unit of Measure"), 1)
                End If
                'chia phan nguyen
                If TransportQty > 1 Then
                    RoundQty = Decimal.Floor(DTSource.Rows(i)("QtyToShip") / TransportQty) * TransportQty

                    Myrow = Datasource.NewRow
                    Myrow("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                    Myrow("No_") = DTSource.Rows(i)("No_")
                    Myrow("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                    Myrow("LocationCode") = DTSource.Rows(i)("LocationCode")
                    Myrow("UOM") = DTSource.Rows(i)("UOM")
                    Myrow("QtyPer") = DTSource.Rows(i)("Qtyper")
                    Myrow("OrderQuantity") = DTSource.Rows(i)("QtyToShip")
                    Myrow("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")

                    'Get FEFO
                    Dim qq As Query = Query.StoredProc("dbo.SelectLotNumber4PickOrder")
                    qq.Parameters("@SourceCode") = SaleSourceCode
                    qq.Parameters("@Respon") = ResponsibilityCenter
                    qq.Parameters("@LocationCode") = DTSource.Rows(i)("LocationCode")
                    qq.Parameters("@ItemNo") = DTSource.Rows(i)("No_")

                    Dim LotDS As DataTable = qq.ToTable
                    Dim LotQty As Decimal = 0
                    Dim LotNo As String = ""
                    Dim LotqtyPer As Decimal = 0

                    If LotDS.Rows.Count > 0 Then
                        LotQty = LotDS.Rows(0)("Quantity")
                        LotqtyPer = LotDS.Rows(0)("Qty_ per Unit of Measure")
                        Dim LotQuantity As Decimal = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qtyper") = 0, 1, DTSource.Rows(i)("Qtyper"))

                        If LotQuantity >= RoundQty Then
                            Myrow("LotNo") = LotDS.Rows(0)("Lot No_")
                            'Myrow("BinCode") = GetBinQuantity(DTSource.Rows(i)("LocationCode"), DTSource.Rows(i)("No_"), LotDS.Rows(0)("Lot No_")) 'Get Bin Code by Bin Ranking
                            Myrow("QtyToShip") = RoundQty
                            Datasource.Rows.Add(Myrow)
                        Else 'Phai che order line ra
                            Dim LotQuantityRemain As Decimal = RoundQty ' - LotQuantity

                            For j As Integer = 0 To LotDS.Rows.Count - 1
                                Dim rs As DataRow = Datasource.NewRow
                                rs("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                                rs("No_") = DTSource.Rows(i)("No_")
                                rs("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                                rs("LocationCode") = DTSource.Rows(i)("LocationCode")
                                rs("UOM") = DTSource.Rows(i)("UOM")
                                rs("QtyPer") = DTSource.Rows(i)("Qtyper")
                                rs("OrderQuantity") = RoundQty
                                rs("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
                                If LotQuantityRemain <= 0 Then Continue For

                                LotQty = RoundQty
                                LotqtyPer = LotDS.Rows(j)("Qty_ per Unit of Measure")
                                LotQuantity = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qtyper") = 0, 1, DTSource.Rows(i)("Qtyper"))
                                If LotQuantity >= LotQuantityRemain Then
                                    rs("LineNo_") = 100 + j
                                    rs("LotNo_") = LotDS.Rows(j)("Lot No_")
                                    'rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"))
                                    rs("QtyToShip") = LotQuantityRemain
                                Else
                                    rs("LineNo_") = 100 + j
                                    rs("LotNo_") = LotDS.Rows(j)("Lot No_")
                                    'rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"))
                                    rs("QtyToShip") = LotQuantity
                                    LotQuantityRemain -= LotQuantity 'LotQty * LotqtyPer  / Dataset.Value("Qty_ per Unit of Measure")
                                End If
                                Datasource.Rows.Add(rs)
                            Next
                        End If

                    Else ' Ton lot khong du
                        WorkSession.MsgML("Item Lot No_ is not enough to supply !")
                        Continue For
                    End If
                End If
                'end cua lo chan lo le
            End If

            'tinh lo le
            OddQty = DTSource.Rows(i)("QtyToShip") - RoundQty
            Dim strOddQuantity As String

            strOddQuantity = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock) "
            strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
            strOddQuantity &= " and Bin.[Bin Ranking] =0"
            strOddQuantity &= " and Bin.[Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
            strOddQuantity &= "and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
            strOddQuantity &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code]  "
            strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

            'strOddQuantity = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)  "
            ''strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
            ''strOddQuantity &= " and Bin.[Bin Ranking] =0"
            'strOddQuantity &= " where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
            'strOddQuantity &= "and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
            'strOddQuantity &= "  group by [Lot No_],[Location Code]  "
            'strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

            Dim r As DataRow

            If Not Query.Sql(strOddQuantity).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows.Count > 0 Then
                r = Datasource.NewRow
                r("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                r("No_") = DTSource.Rows(i)("No_")
                r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                r("LocationCode") = DTSource.Rows(i)("LocationCode")
                r("UOM") = DTSource.Rows(i)("UOM")
                r("QtyPer") = DTSource.Rows(i)("Qtyper")
                r("OrderQuantity") = DTSource.Rows(i)("QtyToShip")
                r("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
                r("LineNo_") = 100 + i
                r("LotNo_") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Lot No_") 'LotDS.Rows(j)("Lot No_")
                'r("BinCode") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Name")
                r("QtyToShip") = OddQty
                Datasource.Rows.Add(r)
            Else
                Dim strOddQBin As String
                strOddQBin = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock)"
                strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
                strOddQBin &= " and Bin.[Bin Ranking] <> 0"
                strOddQBin &= "  and Bin.[Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
                strOddQBin &= "  and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
                strOddQBin &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code],[Expiration Date] "
                strOddQBin &= " order by [Expiration Date] "

                'strOddQBin = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)"
                ''strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
                ''strOddQBin &= " and Bin.[Bin Ranking] <> 0"
                'strOddQBin &= "  where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
                'strOddQBin &= "  and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
                'strOddQBin &= "  group by [Lot No_],[Location Code],[Expiration Date] "
                'strOddQBin &= " order by [Expiration Date] "

                If Not Query.Sql(strOddQBin).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQBin).Transaction(True).ToTable().Rows.Count > 0 Then
                    Dim dv As DataView = Query.Sql(strOddQBin).Transaction(True).ToTable().DefaultView
                    dv.RowFilter = " Quantity > 0"
                    Dim rss As DataRow = dv.ToTable().Rows(0)

                    r = Datasource.NewRow
                    r("LineNo_") = DTSource.Rows(i)("LineNo_") + i
                    r("No_") = DTSource.Rows(i)("No_")
                    r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
                    r("LocationCode") = DTSource.Rows(i)("LocationCode")
                    r("UOM") = DTSource.Rows(i)("UOM")
                    r("QtyPer") = DTSource.Rows(i)("Qtyper")
                    r("OrderQuantity") = DTSource.Rows(i)("QtyToShip")
                    r("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
                    r("LineNo_") = 100 + i
                    r("LotNo_") = rss("Lot No_") 'LotDS.Rows(j)("Lot No_")
                    'r("BinCode") = rss("Name")
                    r("QtyToShip") = OddQty
                    Datasource.Rows.Add(r)
                End If
            End If
        Next

        If Not Datasource Is Nothing And Datasource.Rows.Count > 0 Then
            Datasource.AcceptChanges()
            WorkSession.Client.GridView.DataSource = Datasource
            WorkSession.Client.Refresh()
        End If

    End Sub

    Public Sub LogisticsPickOrderLotProcess(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rr As Hashtable = sender.CurrentRow

        If rr Is Nothing Or rr.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        Dim SaleSourceCode As String = rr("Source Code")
        Dim ResponsibilityCenter As String = rr("Responsibility Center")
        Dim Document As String = rr("No_")
        Dim LogisticsNo As String = rr("Logistics No_")
        Dim ExternalDocumentNo As String = rr("External Document No_")
        'Dim DocType As Integer = rr("Document Type")

        Dim ff As Query = Query.From("Logistics Data").Transaction(True)
        ff.Where("Document No_").Is(Document)
        ff.And("Logistics No_").Is(LogisticsNo)
        'ff.And("Document Type").Is(DocType)
        Dim DTSource As DataTable = ff.ToTable

        Dim ClientEntity As New ClientContext("LogisticsPickOrderLotProcess")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource
        If Not rr Is Nothing Then
            'parameters("TableLineName") = LineTable
            'parameters("TableName") = OrderTable
            parameters("DocumentNo") = rr("No_")
            'parameters("DocType") = rr("Document Type")
            parameters("ExternalDocumentNo") = rr("External Document No_")
            parameters("PostingDate") = rr("Posting Date")
            'parameters("DocumentDate") = r("Document Date")
            'parameters("CurrencyCode") = r("Currency Code")
            'parameters("CurrencyFactor") = r("Currency Factor")
            'parameters("MCP") = r("MCP")
            'parameters("TransportID") = r("Transport ID")
            'parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = rr("Source Code")
            parameters("ReasonCode") = rr("Logistics No_")
            parameters("ResponsibilityCenter") = rr("Responsibility Center")

            'If OrderTable = "Sales Order Header" Or OrderTable = "Sales Return Order Header" Then
            '    parameters("ShippingAgence") = r("Shipping Agent Code")
            '    parameters("ShippingAgenceService") = r("Shipping Agent service Code")
            'Else
            '    parameters("ShippingAgence") = r("Transaction Type")
            '    parameters("ShippingAgenceService") = r("Transaction Specification")
            'End If
        End If

        Dim Myrow As DataRow
        Dim q As Query
        Dim TransportQty As Decimal
        Dim RoundQty As Decimal = 0
        Dim OddQty As Decimal = 0
        'Assign parameter to entity        
        For i As Integer = 0 To DTSource.Rows.Count - 1

            If DTSource.Rows(i)("Lot No_") = "" Then
                q = Query.From("Item Unit Of Measure").Transaction(True)
                q.WhereAs("Item No_") = DTSource.Rows(i)("Item No_")
                q.WhereAs("Type") = 4 'Qui cách nguyên
                If Not q.ToTable() Is Nothing And q.ToTable().Rows.Count > 0 Then
                    TransportQty = ISDBNULL(q.Value("Qty_ per Unit of Measure"), 1)
                End If
                'chia phan nguyen
                If TransportQty > 1 Then
                    RoundQty = Decimal.Floor(DTSource.Rows(i)("Qty_ to Ship") / TransportQty) * TransportQty

                    Myrow = DataSource.NewRow
                    Myrow("LineNo_") = i
                    Myrow("No_") = DTSource.Rows(i)("No_")
                    Myrow("ItemName") = TradingSys.GetName(DTSource.Rows(i)("Item No_"), 4)
                    Myrow("LocationCode") = DTSource.Rows(i)("Location Code")
                    Myrow("UOM") = DTSource.Rows(i)("Unit of Measure")
                    Myrow("QtyPer") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    Myrow("OrderQuantity") = DTSource.Rows(i)("Qty_ to Ship")
                    Myrow("PostedQuantity") = 0 'DTSource.Rows(i)("Shipped Quantity")

                    'Get FEFO
                    Dim qq As Query = Query.StoredProc("dbo.SelectLotNumber4PickOrder")
                    qq.Parameters("@SourceCode") = SaleSourceCode
                    qq.Parameters("@Respon") = ResponsibilityCenter
                    qq.Parameters("@LocationCode") = DTSource.Rows(i)("Location Code")
                    qq.Parameters("@ItemNo") = DTSource.Rows(i)("Item No_")

                    Dim LotDS As DataTable = qq.ToTable
                    Dim LotQty As Decimal = 0
                    Dim LotNo As String = ""
                    Dim LotqtyPer As Decimal = 0

                    If LotDS.Rows.Count > 0 Then
                        LotQty = LotDS.Rows(0)("Quantity")
                        LotqtyPer = LotDS.Rows(0)("Qty_ per Unit of Measure")
                        Dim LotQuantity As Decimal = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qty_ per Unit of Measure") = 0, 1, DTSource.Rows(i)("Qty_ per Unit of Measure"))

                        If LotQuantity >= RoundQty Then
                            Myrow("LotNo") = LotDS.Rows(0)("Lot No_")
                            Myrow("BinCode") = GetBinQuantity(DTSource.Rows(i)("Location Code"), DTSource.Rows(i)("Item No_"), LotDS.Rows(0)("Lot No_")) 'Get Bin Code by Bin Ranking
                            Myrow("Quantity") = RoundQty
                            DataSource.Rows.Add(Myrow)
                        Else 'Phai che order line ra
                            Dim LotQuantityRemain As Decimal = RoundQty ' - LotQuantity

                            For j As Integer = 0 To LotDS.Rows.Count - 1
                                Dim rs As DataRow = DataSource.NewRow
                                rs("LineNo_") = i
                                rs("No_") = DTSource.Rows(i)("Item No_")
                                rs("ItemName") = TradingSys.GetName(DTSource.Rows(i)("Item No_"), 4)
                                rs("LocationCode") = DTSource.Rows(i)("Location Code")
                                rs("UOM") = DTSource.Rows(i)("Unit of Measure")
                                rs("QtyPer") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                                rs("OrderQuantity") = RoundQty
                                rs("PostedQuantity") = 0 'DTSource.Rows(i)("Posted Quantity")
                                If LotQuantityRemain <= 0 Then Continue For

                                LotQty = RoundQty
                                LotqtyPer = LotDS.Rows(j)("Qty_ per Unit of Measure")
                                LotQuantity = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qty_ per Unit of Measure") = 0, 1, DTSource.Rows(i)("Qty_ per Unit of Measure"))
                                If LotQuantity >= LotQuantityRemain Then
                                    rs("LineNo_") = 100 + j
                                    rs("LotNo_") = LotDS.Rows(j)("Lot No_")
                                    rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("Item No_"), LotDS.Rows(j)("Lot No_"))
                                    rs("Quantity") = LotQuantityRemain
                                Else
                                    rs("LineNo_") = 100 + j
                                    rs("LotNo_") = LotDS.Rows(j)("Lot No_")
                                    rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("Item No_"), LotDS.Rows(j)("Lot No_"))
                                    rs("Quantity") = LotQuantity
                                    LotQuantityRemain -= LotQuantity 'LotQty * LotqtyPer  / Dataset.Value("Qty_ per Unit of Measure")
                                End If
                                DataSource.Rows.Add(rs)
                            Next
                        End If

                    Else ' Ton lot khong du
                        WorkSession.MsgML("Item Lot No_ is not enough to supply !")
                        Continue For
                    End If
                End If
                'end cua lo chan lo le
            End If

            'tinh lo le
            OddQty = DTSource.Rows(i)("Qty_ to Ship") - RoundQty
            Dim strOddQuantity As String

            strOddQuantity = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock) "
            strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
            strOddQuantity &= " and Bin.[Bin Ranking] =0"
            strOddQuantity &= " and Bin.[Location Code] ='" & DTSource.Rows(i)("Location Code") & "'"
            strOddQuantity &= "and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("Item No_") & "'"
            strOddQuantity &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code]  "
            strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

            'strOddQuantity = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)  "
            ''strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
            ''strOddQuantity &= " and Bin.[Bin Ranking] =0"
            'strOddQuantity &= " where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
            'strOddQuantity &= "and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
            'strOddQuantity &= "  group by [Lot No_],[Location Code]  "
            'strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

            Dim r As DataRow

            If Not Query.Sql(strOddQuantity).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows.Count > 0 Then
                r = DataSource.NewRow
                r("LineNo_") = i
                r("No_") = DTSource.Rows(i)("Item No_")
                r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("Item No_"), 4)
                r("LocationCode") = DTSource.Rows(i)("Location Code")
                r("UOM") = DTSource.Rows(i)("Unit of Measure")
                r("QtyPer") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                r("OrderQuantity") = DTSource.Rows(i)("Qty_ to Ship")
                r("PostedQuantity") = 0 'DTSource.Rows(i)("PostedQuantity")
                r("LineNo_") = 100 + i
                r("LotNo_") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Lot No_") 'LotDS.Rows(j)("Lot No_")
                r("BinCode") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Name")
                r("Quantity") = OddQty
                DataSource.Rows.Add(r)
            Else
                Dim strOddQBin As String
                strOddQBin = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock)"
                strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
                strOddQBin &= " and Bin.[Bin Ranking] <> 0"
                strOddQBin &= "  and Bin.[Location Code] ='" & DTSource.Rows(i)("Location Code") & "'"
                strOddQBin &= "  and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("Item No_") & "'"
                strOddQBin &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code],[Expiration Date] "
                strOddQBin &= " order by [Expiration Date] "

                'strOddQBin = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)"
                ''strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
                ''strOddQBin &= " and Bin.[Bin Ranking] <> 0"
                'strOddQBin &= "  where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
                'strOddQBin &= "  and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
                'strOddQBin &= "  group by [Lot No_],[Location Code],[Expiration Date] "
                'strOddQBin &= " order by [Expiration Date] "

                If Not Query.Sql(strOddQBin).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQBin).Transaction(True).ToTable().Rows.Count > 0 Then
                    Dim dv As DataView = Query.Sql(strOddQBin).Transaction(True).ToTable().DefaultView
                    dv.RowFilter = " Quantity > 0"
                    Dim rss As DataRow = dv.ToTable().Rows(0)

                    r = DataSource.NewRow
                    r("LineNo_") = i
                    r("No_") = DTSource.Rows(i)("Item No_")
                    r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("Item No_"), 4)
                    r("LocationCode") = DTSource.Rows(i)("Location Code")
                    r("UOM") = DTSource.Rows(i)("Unit of Measure")
                    r("QtyPer") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    r("OrderQuantity") = DTSource.Rows(i)("Qty_ to Ship")
                    r("PostedQuantity") = 0 ' DTSource.Rows(i)("PostedQuantity")
                    r("LineNo_") = 100 + i
                    r("LotNo_") = rss("Lot No_") '
                    r("BinCode") = rss("Name")
                    r("Quantity") = OddQty
                    DataSource.Rows.Add(r)
                End If
            End If
        Next

        If Not DataSource Is Nothing And DataSource.Rows.Count > 0 Then
            DataSource.AcceptChanges()
            WorkSession.Client.GridView.DataSource = DataSource
            WorkSession.Client.Refresh()
        End If

    End Sub

    Public Shared Sub LogisticsPickingListPost(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim OrderTable As String = "Document Entry Header" ' sender.GetParameter("TableName")
        Dim LineTable As String = "Logistics Data" ' sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim LogisticsNo As String = sender.GetParameter("ReasonCode")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        'Dim DocumentDate As Date = sender.GetParameter("DocumentDate")
        'Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        'Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        'Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        'Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        'Dim TransportID As String = sender.GetParameter("TransportID")
        'Dim DriverName As String = sender.GetParameter("DriverName")
        'Dim MCP As String = sender.GetParameter("MCP")
        'Dim EntityOpen As String = ""
        'Dim DocType As Integer = sender.GetParameter("DocType")

        Dim DTSource As DataTable = WorkSession.Client.DataSource

        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update("Logistics List")
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.WhereAs("Logistics No_") = LogisticsNo
            'updateOrder.Fields("External Document No_") = ExternalDocumentNo
            'updateOrder.Fields("Posting Date") = PostingDate
            'updateOrder.Fields("Document Date") = DocumentDate
            'updateOrder.Fields("Currency Code") = CurrencyCode
            'updateOrder.Fields("Currency Factor") = CurrencyFactor
            'updateOrder.Fields("Login ID") = Framework.UserID
            'updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Status") = 3

            updateOrder.Execute()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim insertLine As Query = Query.Entity("Picking List").Insert
                'insertLine.Fields("Document Type") = DocType
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Packing List") = ""
                insertLine.Fields("Picking No_") = LogisticsNo
                insertLine.Fields("Your Reference") = DocumentNo

                insertLine.Fields("Bin Code") = DTSource.Rows(i)("BinCode")

                insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")

                insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                insertLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                insertLine.Fields("Description") = DocumentNo  ' '] [nvarchar](50) NULL,
                insertLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                insertLine.Fields("Work Center") = "" ' Dataset.Value("")
                insertLine.Fields("Status") = 0
                'insertLine.Fields("Style") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("PO No_") = DocumentNo  '] [nvarchar](50) NULL,
                'insertLine.Fields("Posting Date") = PostingDate ' DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Item Category") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Code Number") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Component") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Color") = ""  '] [nvarchar](50) NULL,
                'insertLine.Fields("Weight Of Length") = 0 '] [decimal](28, 10) NULL,
                'insertLine.Fields("Size") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Roll") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Qty_ Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Unit2") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Net Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Gross Weight") = 0 ' "
                'insertLine.Fields("CBM") = 0
                'insertLine.Fields("Item Group") = ""
                'insertLine.Fields("QR Code") = ""
                'insertLine.Fields("Color light") = ""

                insertLine.Execute()
            Next
            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)
            Query.EndTransaction()
            WorkSession.Client.Close()

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Shared Sub PurchaseOrderPutQRCodeOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        If rOrder("Status") < 2 Then
            WorkSession.MsgML("Not Yet Validate !")
            Return
        End If

        If rOrder("Status") >= 4 Then
            WorkSession.MsgML("Already Warehouse Put In !")
            Return
        End If

        Dim OrderTable As String = sender.TableName

        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Document No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("TRDOrderPutQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("DocType") = 0 'r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("DocumentDate") = r("Document Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("MCP") = r("MCP")
            parameters("TransportID") = r("Transport ID")
            parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = r("Source Code")
            parameters("ReasonCode") = r("Reason Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")
            parameters("ShippingAgence") = r("Transaction Type")
            parameters("ShippingAgenceService") = r("Transaction Specification")
            parameters("Date Received") = r("Date Received")
            parameters("Time Received") = r("Time Received")
            parameters("LocationCode") = r("Location Code")
            'End If
        End If

        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow
            Myrow("LineNo_") = OrderLine.Rows(i)("Line No_")
            Myrow("No_") = OrderLine.Rows(i)("No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LocationCode1") = OrderLine.Rows(i)("Location Code")
            Myrow("LotNo_") = OrderLine.Rows(i)("Lot No_")
            Myrow("MFGDate") = OrderLine.Rows(i)("FA Posting Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Expiration Date")
            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("OrderQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("PostedQuantity") = OrderLine.Rows(i)("Quantity Received")
            Myrow("Quantity") = OrderLine.Rows(i)("Qty_ to Receive")

            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 9
        gridView.FixColumnCount = 14
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        gridView.ColumnReadOnly(12) = True
        gridView.ColumnReadOnly(13) = True
        gridView.ColumnReadOnly(14) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub SalesOrderPickQROrderOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow

        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If rOrder("Status") < 2 Then
            WorkSession.MsgML("Not Yet Validate !")
            Return
        End If

        If rOrder("Status") >= 4 Then
            WorkSession.MsgML("Already Warehouse Pick up !")
            Return
        End If

        Dim OrderTable As String = sender.TableName

        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Document No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("TRDPickOrderQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("DocType") = 1 'r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("DocumentDate") = r("Document Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("MCP") = r("MCP")
            parameters("TransportID") = r("Transport ID")
            parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = r("Source Code")
            parameters("ReasonCode") = r("Reason Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")

            If OrderTable = "Sales Order Header" Or OrderTable = "Sales Return Order Header" Then
                parameters("ShippingAgence") = r("Shipping Agent Code")
                parameters("ShippingAgenceService") = r("Shipping Agent service Code")
            Else
                parameters("ShippingAgence") = r("Transaction Type")
                parameters("ShippingAgenceService") = r("Transaction Specification")
            End If
        End If

        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow
            Myrow("LineNo_") = OrderLine.Rows(i)("Line No_")
            Myrow("No_") = OrderLine.Rows(i)("No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LocationCode") = OrderLine.Rows(i)("Location Code")
            Myrow("BinCode") = OrderLine.Rows(i)("Bin Code")

            Myrow("MFGDate") = OrderLine.Rows(i)("FA Posting Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Expiration Date")

            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("LotNo_") = OrderLine.Rows(i)("Lot No_")
            Myrow("OrderQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("PostedQuantity") = OrderLine.Rows(i)("Quantity Shipped")
            Myrow("Quantity") = OrderLine.Rows(i)("Outstanding Quantity")
            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 10
        gridView.FixColumnCount = 13
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        gridView.ColumnReadOnly(12) = True
        gridView.ColumnReadOnly(13) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub TransferOrderPutQRCodeOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return

        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        If rOrder("Status") < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If
        If rOrder("Status") <> 3 Then
            WorkSession.MsgML("This Document must be shipment first!")
            Return
        End If

        Dim OrderTable As String = sender.TableName

        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Document No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("TransferOrderPutQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("Doctype") = r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("ShipmentDate") = r("Shipment Date")
            parameters("ReceiptDate") = r("Receipt Date")
            parameters("DocumentDate") = r("Document Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("MCP") = r("MCP")
            parameters("TransportID") = r("Transport ID")
            parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = r("To Source Code")
            parameters("ResponsibilityCenter") = r("To Responsibility Center")
            parameters("ShippingAgence") = r("Shipping Agent Code")
            parameters("ShippingAgenceService") = r("Shipping Agent Service Code")
        End If


        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow

            Myrow("LineNo_") = OrderLine.Rows(i)("Line No_")
            Myrow("No_") = OrderLine.Rows(i)("Item No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("Item No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("Item No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LotNo_") = OrderLine.Rows(i)("Lot No_")
            Myrow("LocationCode") = OrderLine.Rows(i)("To Location Code")

            Myrow("MFGDate") = OrderLine.Rows(i)("Receipt Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Expiration Date")

            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure Code")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("OrderQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("QuantityReceived") = OrderLine.Rows(i)("Quantity Received")
            Myrow("QtyToReceive") = OrderLine.Rows(i)("Qty_ To Receive")



            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 9
        gridView.FixColumnCount = 13
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        gridView.ColumnReadOnly(12) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub TransferOrderTPickQRCodeOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        If rOrder("Status") < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If
        If rOrder("Status") <> 2 Then
            WorkSession.MsgML("This Document must be Ordered Delevery first!")
            Return
        End If

        Dim OrderTable As String = sender.TableName
        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Document No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("TransferOrderPickQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("Doctype") = r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("ShipmentDate") = r("Shipment Date")
            parameters("ReceiptDate") = r("Receipt Date")
            parameters("DocumentDate") = r("Document Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("MCP") = r("MCP")
            parameters("TransportID") = r("Transport ID")
            parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = r("Source Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")
            parameters("ShippingAgence") = r("Shipping Agent Code")
            parameters("ShippingAgenceService") = r("Shipping Agent Service Code")
        End If


        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow

            Myrow("No_") = OrderLine.Rows(i)("Item No_")
            Myrow("LineNo_") = OrderLine.Rows(i)("Line No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("Item No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("Item No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LotNo_") = OrderLine.Rows(i)("Lot No_")

            Myrow("MFGDate") = OrderLine.Rows(i)("Receipt Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Expiration Date")

            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure Code")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("LocationCode") = OrderLine.Rows(i)("From Location Code")
            Myrow("OrderQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("QuantityShipped") = OrderLine.Rows(i)("Quantity Shipped")
            Myrow("QtyToShip") = OrderLine.Rows(i)("Qty_ to Ship")

            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 10
        gridView.FixColumnCount = 13
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        gridView.ColumnReadOnly(12) = True

        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub WorkOrderPickQRCodeOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow

        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        Dim Status As Integer = rOrder("Status")
        If Status < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If
        If Status = 7 Or Status >= 9 Then
            WorkSession.MsgML("Cannot modify the Order as process status!")
            Return
        End If

        Dim OrderTable As String = sender.TableName

        Dim LineTable As String = "Production Order Component" 'LineControler.TableName

        Dim q As Query = Query.From(LineTable).Transaction(True)
        q.Where("Prod_ Order No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("WorkOrderPickupQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("DocType") = 6 ' r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("StartingDate") = r("Starting Date")
            parameters("EndingDate") = r("Ending Date")
            parameters("DueDate") = r("Due Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("SourceCode") = r("Source Code")
            parameters("LocationCode") = r("RM Location Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")
        End If


        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow

            Myrow("No_") = OrderLine.Rows(i)("Item No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("Item No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("Item No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LotNo") = OrderLine.Rows(i)("Lot No_")

            Myrow("MFGDate") = OrderLine.Rows(i)("Due Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Due Date")

            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure Code")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("Quantity") = OrderLine.Rows(i)("Quantity")
            Myrow("Usage") = OrderLine.Rows(i)("Usage %")
            Myrow("TotalQuantity") = OrderLine.Rows(i)("Total Quantity")
            Myrow("Quantityshipped") = OrderLine.Rows(i)("Consumed Quantity")
            Myrow("QtyToShip") = OrderLine.Rows(i)("Remaining Quantity")

            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 8
        gridView.FixColumnCount = 13
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        gridView.ColumnReadOnly(12) = True
        gridView.ColumnReadOnly(13) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub WorkOrderPutQRCodeOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow

        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        Dim Status As Integer = rOrder("Status")
        If Status < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If

        If Status > 8 Then
            WorkSession.MsgML("Cannot modify the Order as process status!")
            Return
        End If

        If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        Dim OrderTable As String = sender.TableName

        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Prod_ Order No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("WorkOrderPutInQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("DocType") = 6 ' r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("StartingDate") = r("Starting Date")
            parameters("EndingDate") = r("Ending Date")
            parameters("DueDate") = r("Due Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("SourceCode") = r("Source Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")
            parameters("LocationCode") = r("Location Code")
        End If


        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow

            Myrow("No_") = OrderLine.Rows(i)("Item No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("Item No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("Item No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LotNo") = OrderLine.Rows(i)("Lot No_")
            Myrow("MFGDate") = OrderLine.Rows(i)("Ending Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Due Date")
            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure Code")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("Quantity") = OrderLine.Rows(i)("Remaining Quantity")
            Myrow("QuantityReceived") = OrderLine.Rows(i)("Finished Quantity")
            Myrow("QtyToReceive") = OrderLine.Rows(i)("Remaining Quantity")
            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 8
        gridView.FixColumnCount = 11
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub PurchaseOrderPutQRCodePost(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim r As Hashtable = sender.CurrentRow

        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim DocumentDate As Date = sender.GetParameter("DocumentDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        Dim TransportID As String = sender.GetParameter("TransportID")
        Dim DriverName As String = sender.GetParameter("DriverName")
        Dim MCP As String = sender.GetParameter("MCP")
        Dim Location As String = sender.GetParameter("LocationCode")
        Dim DateReceived As String = sender.GetParameter("Date Received")
        Dim TimeReceived As String = sender.GetParameter("Time Received")
        Dim DTSource As DataTable = WorkSession.Client.DataSource
        'Dim DocType As Integer = sender.GetParameter("Doctype")

        Dim LogisticsNo As String = ""
        Dim PackingList As String = sender.GetParameter("PackingList")
        'If CheckOrderQRCodeInit(DocumentNo, rOrder("Logistics No_"), rOrder("Picking No_"), doctype) = 1 Then
        '    WorkSession.MsgML("Already Init !")
        '    Return
        'End If
        ''lấy series
        LogisticsNo = GetandUpdateSeriesNumber("WhsReceipt", "", SaleSourceCode, ResponsibilityCenter, Location, PackingList)

        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Document Date") = DocumentDate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Picking User") = Framework.UserID
            updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Transaction Type") = ShippingAgent
            updateOrder.Fields("Transaction Specification") = ShippingAgentService
            updateOrder.Fields("Transport ID") = TransportID
            updateOrder.Fields("Driver Name") = DriverName
            'updateOrder.Fields("Receive") = 1
            updateOrder.Fields("Status") = 4 'Putted
            updateOrder.Fields("Location Code") = Location

            If PackingList = "" Then PackingList = LogisticsNo
            updateOrder.Fields("Last Receiving No_") = LogisticsNo
            'updateOrder.Fields("Your Reference") = DocumentNo

            updateOrder.Fields("Posting No_") = LogisticsNo
            updateOrder.Fields("Receiving No_", "+") = LogisticsNo + "|"

            updateOrder.Fields("Date Received") = Convert.ToDateTime(DateReceived)
            updateOrder.Fields("Time Received") = Convert.ToDateTime(TimeReceived)
            updateOrder.Execute()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim Dataset As Query = Query.From("Purchase Order Line").Transaction(True)
                If OrderTable = "Purchase Return Order Header" Then
                    Dataset = Query.From("Purchase Return Order Line").Transaction(True)
                End If
                Dataset.Where("Document No_").Is(DocumentNo)
                Dataset.And("Outstanding Quantity").GreaterThan(0)
                Dataset.And("Line No_").Is(DTSource.Rows(i)("LineNo_"))
                Dataset.And("No_").Is(DTSource.Rows(i)("No_"))

                Dim QTYPER As Integer = Dataset.Value("Qty_ per Unit of Measure")

                If Dataset.RecordCount <= 0 Then Continue For

                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Document No_") = DocumentNo
                updateLine.WhereAs("Line No_") = DTSource.Rows(i)("LineNo_")
                updateLine.WhereAs("No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                updateLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("Quantity")

                updateLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode1")
                updateLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                'updateLine.Fields("FA Posing Date") = DTSource.Rows(i)("MFGDate")
                'updateLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate")

                updateLine.Fields("Status") = 4 'Packing List
                updateLine.Execute()


                Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert
                If OrderTable <> "Purchase Return Order Header" Then
                    insertLine.Fields("Type") = 0
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("External Document No_") = ExternalDocumentNo

                    insertLine.Fields("Logistics No_") = LogisticsNo
                    insertLine.Fields("Packing List") = PackingList
                    insertLine.Fields("Picking No_") = LogisticsNo
                    insertLine.Fields("Your Reference") = DocumentNo



                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Item Variant") = DTSource.Rows(i)("VariantCode")
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                    insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("QtyPer")
                    insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")

                    insertLine.Fields("Login ID") = Framework.UserID
                    'insertLine.Fields("System Date") = Now()
                    'insertLine.Fields("URL") = ""

                    insertLine.Fields("Source Code") = SaleSourceCode
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                    'insertLine.Fields("QRCode") = ""
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                    insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFGDate")
                    'insertLine.Fields("Serial No_") = ""
                    'insertLine.Fields("Work Shift No_") = DTSource.Rows(i)("WorShift")
                    'insertLine.Fields("Routing No_") = DTSource.Rows(i)("WorkCenter")
                    'insertLine.Fields("Entry No_") = 0
                    'insertLine.Fields("Blocked") = 0
                    insertLine.Fields("Number No_") = DTSource.Rows(i)("Quantity")
                    insertLine.Fields("Description") = ""
                    insertLine.Fields("Post QRCode Entry") = 1
                    insertLine.Fields("Status") = 1
                    insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("QtyPer") > 1, 1, 0)
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode1")
                    insertLine.Execute()
                End If

                ''
                insertLine = Query.Entity("Logistics List").Insert
                insertLine.Fields("Document Type") = 0
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Your Reference") = DocumentNo
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Packing List") = PackingList
                insertLine.Fields("Picking No_") = LogisticsNo
                insertLine.Fields("Source Code") = SaleSourceCode
                insertLine.Fields("Responsibility Center") = ResponsibilityCenter

                insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")

                'insertLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("Quantity")
                'insertLine.Fields("Qty_ to Ship") = 0 ' DTSource.Rows(i)("Quantity")

                insertLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode1")
                insertLine.Fields("Description") = LogisticsNo  '] [nvarchar](50) NULL,
                insertLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                insertLine.Fields("Work Center") = ""  ' Dataset.Value("")
                'insertLine.Fields("Status") = 0
                'insertLine.Fields("Style") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("PO No_") = DocumentNo  '] [nvarchar](50) NULL,
                'insertLine.Fields("Posting Date") = PostingDate ' DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Item Category") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Code Number") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Component") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Color") = ""  '] [nvarchar](50) NULL,
                'insertLine.Fields("Weight Of Length") = 0 '] [decimal](28, 10) NULL,
                'insertLine.Fields("Size") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Roll") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Qty_ Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Unit2") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Net Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Gross Weight") = 0 ' "
                'insertLine.Fields("CBM") = 0
                'insertLine.Fields("Item Group") = ""
                'insertLine.Fields("QR Code") = ""
                'insertLine.Fields("Color light") = ""

                insertLine.Execute()
            Next

            Query.EndTransaction()
            WorkSession.Client.Close()

            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)


            Framework.OpenEntity("QRCode Generation", String.Format("[Document No_]=N'{0}' and [Type]=0", DocumentNo))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Shared Sub SalesOrderPickQROrderPost(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim DocumentDate As Date = sender.GetParameter("DocumentDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim LocationCode As String = sender.GetParameter("locationCode")

        Dim ReasonCode As String = sender.GetParameter("ReasonCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        Dim TransportID As String = sender.GetParameter("TransportID")
        Dim DriverName As String = sender.GetParameter("DriverName")
        Dim MCP As String = sender.GetParameter("MCP")
        Dim InvoiceType As Integer = sender.GetParameter("FFInvoiceType")
        'Dim DocType As Integer = sender.GetParameter("Doctype")

        Dim PackingList As String = ""
        Dim LogisticsNo As String = ""

        'If CheckOrderQRCodeInit(DocumentNo, rOrder("Logistics No_"), rOrder("Picking No_"), doctype) = 1 Then
        '    WorkSession.MsgML("Already Init !")
        '    Return
        'End If
        ''lấy và cập nhật series
        LogisticsNo = GetandUpdateSeriesNumber("WhsShipment", "", SaleSourceCode, ResponsibilityCenter, LocationCode, PackingList)


        Dim DTSource As DataTable = WorkSession.Client.DataSource
        Dim flate As Integer = 1


        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Document Date") = DocumentDate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Login ID") = Framework.UserID
            updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Status") = 4 'Pick
            updateOrder.Fields("Tax Liable") = InvoiceType
            If PackingList = "" Then PackingList = LogisticsNo

            updateOrder.Fields("Last Shipping No_") = LogisticsNo
            'updateOrder.Fields("Your Reference") = DocumentNo

            updateOrder.Fields("Posting No_") = LogisticsNo
            updateOrder.Fields("Shipping No_", "+") = LogisticsNo + "|"

            updateOrder.Fields("Shipping Agent Code") = ShippingAgent
            updateOrder.Fields("Shipping Agent Service Code") = ShippingAgentService
            updateOrder.Fields("Transport ID") = TransportID
            updateOrder.Fields("Driver Name") = DriverName
            updateOrder.Fields("Ordering User") = Framework.UserID
            updateOrder.Execute()


            ''Line region

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim DataSet As Query = Query.From("Sales Order Line").Transaction(True)
                If OrderTable = "Sales Return Order Header" Then
                    DataSet = Query.From("Sales Return Order Line").Transaction(True)
                End If
                DataSet.Where("Document No_").Is(DocumentNo)
                DataSet.And("Outstanding Quantity").GreaterThan(0)
                DataSet.And("Line No_").Is(DTSource.Rows(i)("LineNo_"))
                DataSet.And("No_").Is(DTSource.Rows(i)("No_"))
                DataSet.And("Variant Code").Is(DTSource.Rows(i)("VariantCode"))
                If DataSet.RecordCount <= 0 Then Continue For

                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Document No_") = DocumentNo
                updateLine.WhereAs("Line No_") = DTSource.Rows(i)("LineNo_")
                updateLine.WhereAs("No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                updateLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Quantity")
                updateLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                updateLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                'updateLine.Fields("FA Posing Date") = DTSource.Rows(i)("MFGDate")
                'updateLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate")

                updateLine.Fields("Status") = 4 'Pick order
                updateLine.Execute()

                Dim insertLine As Query = Query.Entity("Logistics List").Insert
                insertLine.Fields("Document Type") = 1
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Packing List") = PackingList
                insertLine.Fields("Picking No_") = LogisticsNo
                insertLine.Fields("Your Reference") = DocumentNo
                insertLine.Fields("Source Code") = SaleSourceCode
                insertLine.Fields("Responsibility Center") = ResponsibilityCenter

                insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")

                insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                insertLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                insertLine.Fields("Description") = DocumentNo  ' '] [nvarchar](50) NULL,
                insertLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                insertLine.Fields("Work Center") = "" ' Dataset.Value("")
                insertLine.Fields("Status") = 0
                'insertLine.Fields("Style") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("PO No_") = DocumentNo  '] [nvarchar](50) NULL,
                'insertLine.Fields("Posting Date") = PostingDate ' DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Item Category") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Code Number") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Component") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Color") = ""  '] [nvarchar](50) NULL,
                'insertLine.Fields("Weight Of Length") = 0 '] [decimal](28, 10) NULL,
                'insertLine.Fields("Size") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Roll") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Qty_ Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Unit2") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Net Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Gross Weight") = 0 ' "
                'insertLine.Fields("CBM") = 0
                'insertLine.Fields("Item Group") = ""
                'insertLine.Fields("QR Code") = ""
                'insertLine.Fields("Color light") = ""

                insertLine.Execute()


                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                'q.And("Logistics No_").Is(LogisticsNo) ' 
                q.And("Document Type").Is(1)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(1)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(1)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = PackingList

                    insert.Fields("Document No_") = DocumentNo
                    insert.Fields("External Document No_") = ExternalDocumentNo
                    insert.Fields("Logistics No_") = LogisticsNo
                    insert.Fields("Picking No_") = LogisticsNo
                    insert.Fields("Reference No_") = DocumentNo
                    insert.Fields("Location Code") = LocationCode
                    insert.Fields("Source Code") = SaleSourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter
                    insert.Fields("Document Type") = 1 ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If


                ''insert line
                insertLine = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Quantity") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Logistics No_") = LogisticsNo
                    insertLine.Fields("Packing List") = PackingList
                    insertLine.Fields("Picking No_") = LogisticsNo
                    'insertLine.Fields("Your Reference") = DocumentNo

                    insertLine.Fields("Document Type") = 1
                    insertLine.Fields("Source Code") = SaleSourceCode
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode") ' DTSource.Rows(i)("Location Code") ''rOrder("Location Code")
                    'insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")

                    insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Real Expired Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                    'insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                    'insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                    'insertLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                    'insertLine.Fields("Description") = DocumentNo  ' '] [nvarchar](50) NULL,
                    'insertLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                    'insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")

                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate") 'DTSource.Rows(i)("Expiration Date")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer") 'DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next

            Next


            Query.EndTransaction()
            WorkSession.Client.Close()

            Dim parentID As String = WorkSession.Read("parentEntityID")
            Framework.RefreshSource(parentID)

            'Framework.OpenEntity("Logistics Sales Order Header", String.Format("[No_]=N'{0}' ", DocumentNo))
            Framework.OpenEntity("Document Entry Header SO", String.Format("[No_]=N'{0}' and [Document Type]=1", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub
    'TO
    Public Shared Sub TransferOrderPutQRCodePost(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim ReceiptDate As Date = sender.GetParameter("ReceiptDate")
        Dim ShipmentDate As Date = sender.GetParameter("ShipmentDate")
        Dim Documentdate As Date = sender.GetParameter("DocumentDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        Dim TransportID As String = sender.GetParameter("TransportID")
        Dim DriverName As String = sender.GetParameter("DriverName")
        Dim MCP As String = sender.GetParameter("MCP")
        Dim DocType As Integer = sender.GetParameter("DocType")
        If DocType <= 10 Then DocType = 4

        Dim DTSource As DataTable = WorkSession.Client.DataSource
        Dim LogisticsNo As String = ""
        Dim PackingList As String = ""

        'If CheckOrderQRCodeInit(DocumentNo, rOrder("Logistics No_"), rOrder("Picking No_"), DocType) = 1 Then
        '    WorkSession.MsgML("Already Init !")
        '    Return
        'End If
        ''lấy series
        LogisticsNo = GetandUpdateSeriesNumber("TransferReceipt", "", SaleSourceCode, ResponsibilityCenter, "", PackingList)


        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Document Date") = Documentdate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Login ID") = Framework.UserID

            If PackingList = "" Then PackingList = LogisticsNo
            updateOrder.Fields("Receipt No_", "+") = LogisticsNo + "|"

            updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Shipping Agent Code") = ShippingAgent
            updateOrder.Fields("Shipping Agent Service Code") = ShippingAgentService
            updateOrder.Fields("Transport ID") = TransportID
            updateOrder.Fields("Driver Name") = DriverName
            updateOrder.Fields("Status") = 4
            updateOrder.Execute()


            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim Dataset As Query = Query.From("Transfer Order Line").Transaction(True)
                Dataset.Where("Document No_").Is(DocumentNo)
                Dataset.And("Outstanding Quantity").GreaterThan(0)
                Dataset.And("Line No_").Is(DTSource.Rows(i)("LineNo_"))
                Dataset.And("Variant Code").Is(DTSource.Rows(i)("VariantCode"))
                Dataset.And("Item No_").Is(DTSource.Rows(i)("No_"))

                'Dim qty As Integer = 1
                'Dim UOM As String = Dataset.Value("Unit of Measure Code")
                'Dim QTYPER As Integer = Dataset.Value("Qty_ per Unit of Measure")

                If Dataset.RecordCount <= 0 Then Continue For

                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Document No_") = DocumentNo
                updateLine.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Line No_") = DTSource.Rows(i)("LineNo_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                updateLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("QtyToReceive")
                updateLine.Execute()

                'insert line
                Dim insert As Query = Query.Entity("Logistics List").Insert
                insert.Fields("Document No_") = DocumentNo
                insert.Fields("Document Type") = DocType
                insert.Fields("External Document No_") = ExternalDocumentNo
                insert.Fields("Logistics No_") = LogisticsNo
                insert.Fields("Packing List") = PackingList
                insert.Fields("Picking No_") = LogisticsNo
                insert.Fields("Your Reference") = DocumentNo

                insert.Fields("Source Code") = SaleSourceCode
                insert.Fields("Responsibility Center") = ResponsibilityCenter
                insert.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                insert.Fields("From Source Code") = SaleSourceCode
                insert.Fields("From Responsibility Center") = ResponsibilityCenter
                insert.Fields("From Location Code") = DTSource.Rows(i)("LocationCode")
                insert.Fields("To Source Code") = SaleSourceCode
                insert.Fields("To Responsibility Center") = ResponsibilityCenter
                insert.Fields("To Location Code") = DTSource.Rows(i)("LocationCode")

                insert.Fields("No_") = DTSource.Rows(i)("No_")
                insert.Fields("Item No_") = DTSource.Rows(i)("No_")

                insert.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                insert.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                insert.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                insert.Fields("Real Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                insert.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                insert.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                insert.Fields("Qty_ to Receive") = DTSource.Rows(i)("QtyToReceive")
                insert.Fields("Outstanding Quantity") = DTSource.Rows(i)("QtyToReceive")
                insert.Fields("Quantity") = DTSource.Rows(i)("QtyToReceive")

                insert.Fields("Description") = DocumentNo   '] [nvarchar](50) NULL,
                insert.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                insert.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                insert.Fields("Work Center") = "" ' LogisticsNo  ' Dataset.Value("")
                'insertLine.Fields("Status") = 0
                'insertLine.Fields("Style") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("PO No_") = DocumentNo  '] [nvarchar](50) NULL,
                ''insertLine.Fields("External Document No_") = DocumentNo ' PackingList  '] [nvarchar](50) NULL,
                'insertLine.Fields("Posting Date") = PostingDate ' DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Item Category") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Code Number") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Component") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Color") = ""  '] [nvarchar](50) NULL,
                'insertLine.Fields("Weight Of Length") = 0 '] [decimal](28, 10) NULL,
                'insertLine.Fields("Size") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Roll") = " " '] [nvarchar](50) NULL,
                'insertLine.Fields("Qty_ Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Unit2") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Net Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Gross Weight") = 0 ' "
                'insertLine.Fields("CBM") = 0
                'insertLine.Fields("Item Group") = ""
                'insertLine.Fields("QR Code") = ""
                'insertLine.Fields("Color light") = ""

                insert.Execute()

                If DocType <> 4 Then
                    Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert
                    insertLine.Fields("Type") = 14
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Item Variant") = DTSource.Rows(i)("VariantCode")
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")

                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                    insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("QtyPer")
                    insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")

                    insertLine.Fields("Login ID") = Framework.UserID
                    'insertLine.Fields("System Date") = Now()
                    'insertLine.Fields("URL") = ""
                    'insertLine.Fields("External Document No_") = ExternalDocumentNo
                    'insertLine.Fields("Your Reference") = ""
                    insertLine.Fields("Source Code") = SaleSourceCode
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                    'insertLine.Fields("QRCode") = ""
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                    insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFGDate")
                    'insertLine.Fields("Serial No_") = ""
                    'insertLine.Fields("Work Shift No_") = DTSource.Rows(i)("WorShift")
                    'insertLine.Fields("Routing No_") = DTSource.Rows(i)("WorkCenter")
                    'insertLine.Fields("Entry No_") = 0
                    'insertLine.Fields("Blocked") = 0
                    insertLine.Fields("Number No_") = DTSource.Rows(i)("QtyToReceive") '* DTSource.Rows(i)("QtyPer")
                    insertLine.Fields("Description") = DocumentNo
                    insertLine.Fields("Post QRCode Entry") = 1
                    insertLine.Fields("Status") = 1
                    insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("QtyPer") > 1, 1, 0)
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")

                    insertLine.Fields("External Document No_") = ExternalDocumentNo
                    insertLine.Fields("Logistics No_") = LogisticsNo
                    insertLine.Fields("Packing List") = LogisticsNo
                    insertLine.Fields("Picking No_") = LogisticsNo
                    insertLine.Fields("Your Reference") = DocumentNo
                    insertLine.Execute()

                Else

                    Dim TableDocumentEntryHeader As String = "Document Entry Header"
                    Dim TableDocumentEntry As String = "Document Entry"

                    Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                    q.Where("No_").Is(DocumentNo)
                    q.And("Logistics No_").Is(LogisticsNo)
                    q.And("Document Type").Is(DocType)
                    Dim Status As Integer = q.Value("Status")

                    'chua quet ma QRCode
                    If Status = 0 And i = 0 Then
                        Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                        queryDelete.Where("No_").Is(DocumentNo)
                        queryDelete.And("Logistics No_").Is(LogisticsNo)
                        queryDelete.And("Document Type").Is(DocType)
                        queryDelete.Execute()

                        queryDelete = Query.Delete(TableDocumentEntry)
                        queryDelete.Where("Document No_").Is(DocumentNo)
                        queryDelete.And("Logistics No_").Is(LogisticsNo)
                        queryDelete.And("Document Type").Is(DocType)
                        queryDelete.Execute()

                        'queryDelete = Query.Delete("QRCode Buffer")
                        'queryDelete.Where("Document No_").Is(DocumentNo)
                        'queryDelete.And("Type").Is(4)
                        'queryDelete.Execute()
                    End If


                    'insert header
                    If i = 0 Then
                        insert = Query.Entity(TableDocumentEntryHeader).Insert
                        insert.Fields("No_") = DocumentNo
                        insert.Fields("Picking No_") = PackingList
                        insert.Fields("Packing List") = PackingList
                        insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")
                        insert.Fields("Reference No_") = DocumentNo

                        insert.Fields("Location Code") = DTSource.Rows(i)("LocationCode") 'DTSource.Rows(i)("To Location Code")
                        insert.Fields("Source Code") = SaleSourceCode
                        insert.Fields("Responsibility Center") = ResponsibilityCenter

                        insert.Fields("From Source Code") = SaleSourceCode
                        insert.Fields("From Responsibility Center") = ResponsibilityCenter
                        insert.Fields("From Location Code") = DTSource.Rows(i)("LocationCode")
                        insert.Fields("To Source Code") = SaleSourceCode
                        insert.Fields("To Responsibility Center") = ResponsibilityCenter
                        insert.Fields("To Location Code") = DTSource.Rows(i)("LocationCode")

                        insert.Fields("Document Type") = DocType ' rOrder("Bill-to Customer Template Code")
                        insert.Fields("Posting Date") = PostingDate
                        insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                        insert.Fields("Status") = 0
                        insert.Fields("Backend") = 1
                        insert.Execute()
                    End If

                    ''insert line
                    insert = Query.Entity(TableDocumentEntry).Insert

                    Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                    Dim EntryNo As Integer = qq.Value("EntryNo")

                    For k As Integer = 0 To DTSource.Rows(i)("QtyToReceive") - 1
                        'Dim r As DataRow = Orderline.TakeRow(0)

                        insert.Fields("Entry No_") = EntryNo
                        insert.Fields("Document No_") = DocumentNo

                        insert.Fields("Packing List") = PackingList
                        insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")
                        insert.Fields("Picking No_") = LogisticsNo

                        insert.Fields("Document Type") = DocType
                        insert.Fields("Source Code") = SaleSourceCode ' rOrder("Source Code")
                        insert.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                        'insert.Fields("Location Code") = DTSource.Rows(i)("To Location Code") ''rOrder("Location Code")
                        insert.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                        'insert.Fields("Status") = 0
                        insert.Fields("User ID") = Framework.UserID
                        'insert.Fields("Line No_") = k
                        insert.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                        insert.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                        insert.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                        insert.Fields("Real Expired Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                        insert.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                        insert.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")

                        'insertLine.Fields("Qty_ to Ship") = 1'DTSource.Rows(i)("Quantity")
                        'insertLine.Fields("Outstanding Quantity") =1' DTSource.Rows(i)("Quantity")
                        'insertLine.Fields("Quantity") = 1' DTSource.Rows(i)("Quantity")
                        insert.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                        'insertLine.Fields("Description") = DocumentNo

                        insert.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                        insert.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate") 'DTSource.Rows(i)("Expiration Date")
                        insert.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                        insert.Fields("Status") = 0
                        insert.Fields("User ID") = Framework.UserID
                        'insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                        'insert.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                        'insert.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer") 'DTSource.Rows(i)("Qty_ per Unit of Measure")
                        insert.Fields("Line No_") = k
                        insert.Fields("Item No_") = DTSource.Rows(i)("No_")

                        insert.Fields("Quantity") = 1 'r("Quantity")
                        insert.Fields("Scan Number") = 0
                        insert.Fields("Backend") = 1
                        insert.Execute()

                        EntryNo += 1
                    Next

                End If
            Next

            Query.EndTransaction()
            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)
            WorkSession.Client.Close()

            If DocType <> 4 Then '14,16,18,12
                Framework.OpenEntity("QRCode Generation", String.Format("[Document No_]=N'{0}' and [Type]={1}", DocumentNo, DocType))
            Else
                Framework.OpenEntity("Document Entry Header Receipt TO", String.Format("[No_]=N'{0}' and [Document Type]= 4", DocumentNo))
            End If

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Shared Sub TransferOrderTPickQRCodePost(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim ReceiptDate As Date = sender.GetParameter("ReceiptDate")
        Dim ShipmentDate As Date = sender.GetParameter("ShipmentDate")
        Dim Documentdate As Date = sender.GetParameter("DocumentDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        Dim TransportID As String = sender.GetParameter("TransportID")
        Dim DriverName As String = sender.GetParameter("DriverName")
        Dim MCP As String = sender.GetParameter("MCP")

        Dim DTSource As DataTable = WorkSession.Client.DataSource
        Dim DocType As Integer = sender.GetParameter("Doctype")
        If DocType <= 10 Then DocType = 5

        Dim LogisticsNo As String = ""
        Dim PackingList As String = ""
        'If CheckOrderQRCodeInit(DocumentNo, rOrder("Logistics No_"), rOrder("Picking No_"), DocType) = 1 Then
        '    WorkSession.MsgML("Already Init !")
        '    Return
        'End If
        ''lấy và cập nhật series
        LogisticsNo = GetandUpdateSeriesNumber("TransferShipment", "", SaleSourceCode, ResponsibilityCenter, "", PackingList)

        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Document Date") = Documentdate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Login ID") = Framework.UserID
            If PackingList = "" Then PackingList = LogisticsNo
            updateOrder.Fields("Shipment No_", "+") = LogisticsNo + "|"
            'updateOrder.Fields("Ship") = 1
            updateOrder.Fields("Shipping Agent Code") = ShippingAgent
            updateOrder.Fields("Shipping Agent Service Code") = ShippingAgentService
            updateOrder.Fields("Transport ID") = TransportID
            updateOrder.Fields("Driver Name") = DriverName
            updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Status") = 3
            updateOrder.Execute()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim Dataset As Query = Query.From("Transfer Order Line").Transaction(True)
                Dataset.Where("Document No_").Is(DocumentNo)
                Dataset.And("Outstanding Quantity").GreaterThan(0)
                Dataset.And("Line No_").Is(DTSource.Rows(i)("LineNo_"))
                Dataset.And("Variant Code").Is(DTSource.Rows(i)("VariantCode"))
                Dataset.And("Item No_").Is(DTSource.Rows(i)("No_"))

                'Dim qty As Integer = 1
                'Dim UOM As String = Dataset.Value("Unit of Measure Code")
                'Dim QTYPER As Integer = Dataset.Value("Qty_ per Unit of Measure")

                If Dataset.RecordCount <= 0 Then Continue For

                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Document No_") = DocumentNo
                updateLine.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Line No_") = DTSource.Rows(i)("LineNo_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                'updateLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("QtyToReceive")
                updateLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("QtyToShip")
                updateLine.Execute()

                Dim qty As Integer = DTSource.Rows(i)("QtyToShip")

                Dim insertLine As Query = Query.Entity("Logistics List").Insert
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Document Type") = DocType
                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Packing List") = PackingList
                insertLine.Fields("Picking No_") = LogisticsNo
                insertLine.Fields("Your Reference") = DocumentNo
                insertLine.Fields("Source Code") = SaleSourceCode
                insertLine.Fields("Responsibility Center") = ResponsibilityCenter

                insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                insertLine.Fields("From Source Code") = SaleSourceCode
                insertLine.Fields("From Responsibility Center") = ResponsibilityCenter
                insertLine.Fields("From Location Code") = DTSource.Rows(i)("LocationCode")
                insertLine.Fields("To Source Code") = SaleSourceCode
                insertLine.Fields("To Responsibility Center") = ResponsibilityCenter
                insertLine.Fields("To Location Code") = DTSource.Rows(i)("LocationCode")

                insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                insertLine.Fields("Qty_ to Ship") = qty ' DTSource.Rows(i)("Quantity")
                insertLine.Fields("Outstanding Quantity") = qty 'DTSource.Rows(i)("Quantity")
                insertLine.Fields("Quantity") = qty ' DTSource.Rows(i)("Quantity")
                'insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                insertLine.Fields("Description") = DocumentNo  ' '] [nvarchar](50) NULL,

                insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                insertLine.Fields("Work Center") = "" ' Dataset.Value("")
                insertLine.Fields("Status") = 0
                'insertLine.Fields("Style") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("PO No_") = "" '] [nvarchar](50) NULL,
                ''insertLine.Fields("External Document No_") = DocumentNo   '] [nvarchar](50) NULL,
                'insertLine.Fields("Posting Date") = PostingDate ' DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Item Category") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Code Number") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Component") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Color") = ""  '] [nvarchar](50) NULL,
                'insertLine.Fields("Weight Of Length") = 0 '] [decimal](28, 10) NULL,
                'insertLine.Fields("Size") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Roll") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Qty_ Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Unit2") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Net Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Gross Weight") = 0 ' "
                'insertLine.Fields("CBM") = 0
                'insertLine.Fields("Item Group") = ""
                'insertLine.Fields("QR Code") = ""
                'insertLine.Fields("Color light") = ""

                insertLine.Execute()
                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(DocType)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.And("Document Type").Is(DocType)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.And("Document Type").Is(DocType)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = LogisticsNo
                    insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                    insert.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                    insert.Fields("Source Code") = SaleSourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter

                    insert.Fields("From Source Code") = SaleSourceCode
                    insert.Fields("From Responsibility Center") = ResponsibilityCenter
                    insert.Fields("From Location Code") = DTSource.Rows(i)("LocationCode")
                    insert.Fields("To Source Code") = SaleSourceCode
                    insert.Fields("To Responsibility Center") = ResponsibilityCenter
                    insert.Fields("To Location Code") = DTSource.Rows(i)("LocationCode")

                    insert.Fields("Document Type") = DocType ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If


                ''insert line
                insertLine = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To qty - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo

                    insertLine.Fields("Packing List") = PackingList
                    insertLine.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")
                    insertLine.Fields("Picking No_") = LogisticsNo

                    insertLine.Fields("Document Type") = DocType
                    insertLine.Fields("Source Code") = SaleSourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode") ' DTSource.Rows(i)("From Location Code") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    'insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID

                    insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Real Expired Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")

                    'insertLine.Fields("Qty_ to Ship") = 1'DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Outstanding Quantity") =1' DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Quantity") = 1' DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                    'insertLine.Fields("Description") = DocumentNo

                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate") 'DTSource.Rows(i)("Expiration Date")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                    'insertLine.Fields("Status") = 0
                    'insertLine.Fields("User ID") = Framework.UserID
                    'insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer") 'DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")

                    'insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    'insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure Code")
                    'insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    'insertLine.Fields("Line No_") = k
                    'insertLine.Fields("Item No_") = DTSource.Rows(i)("Item No_")
                    ''insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    'insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                    'insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFG Date")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next



            Next

            Query.EndTransaction()
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)
            WorkSession.Client.Close()
            Framework.OpenEntity("Document Entry Header Shipped TO", String.Format("[No_]=N'{0}' and [Document Type]={1}", DocumentNo, Doctype))

            'Query.EndTransaction()
            ''Doc lai bien session chua ID cua entity cha A
            'Framework.OpenEntity("Document Entry Header Shipped TO", String.Format("[No_]=N'{0}'", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub
    'WO
    Public Shared Sub WorkOrderPickQRCodePost(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim EndingDate As Date = sender.GetParameter("EndingDate")
        Dim StartingDate As Date = sender.GetParameter("StartingDate")
        Dim DueDate As Date = sender.GetParameter("DueDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim SourceCode As String = sender.GetParameter("SourceCode")
        Dim WorkShop As String = sender.GetParameter("ResponsibilityCenter")
        Dim LocationCode As String = sender.GetParameter("LocationCode")
        Dim LogisticsNo As String = ""
        Dim PackingList As String = ""

        Dim DocType As Integer = sender.GetParameter("Doctype")
        'If CheckOrderQRCodeInit(DocumentNo, rOrder("Logistics No_"), rOrder("Picking No_"), DocType) = 1 Then
        '    WorkSession.MsgML("Already Init !")
        '    Return
        'End If
        'lấy và cập nhật series
        LogisticsNo = GetandUpdateSeriesNumber("WOConsumption", "", SourceCode, WorkShop, LocationCode, PackingList)


        Dim DTSource As DataTable = WorkSession.Client.DataSource

        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Starting Date") = StartingDate
            updateOrder.Fields("Ending Date") = EndingDate
            updateOrder.Fields("Due Date") = DueDate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Login ID") = Framework.UserID
            updateOrder.Fields("Status") = 5 ' Consumption Checked

            If PackingList = "" Then PackingList = LogisticsNo

            updateOrder.Fields("Simulated Order No_", "+") = LogisticsNo + "|"

            updateOrder.Execute()




            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim Dataset As Query = Query.From(LineTable).Transaction(True)
                Dataset.Where("Prod_ Order No_").Is(DocumentNo)
                Dataset.And("Remaining Quantity").GreaterThan(0)
                Dataset.And("Variant Code").Is(DTSource.Rows(i)("VariantCode"))
                Dataset.And("Item No_").Is(DTSource.Rows(i)("No_"))
                If Dataset.RecordCount <= 0 Then Continue For

                'Dim LineDataset As DataRow = Dataset.TakeRow(0)

                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Prod_ Order No_") = DocumentNo
                updateLine.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                updateLine.Fields("Quantity") = DTSource.Rows(i)("QtyToShip")
                updateLine.Fields("Shipment No_") = LogisticsNo
                updateLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo")
                updateLine.Fields("Usage %") = DTSource.Rows(i)("Usage")
                updateLine.Fields("Total Quantity") = DTSource.Rows(i)("QtyToShip") + DTSource.Rows(i)("Usage") * DTSource.Rows(i)("Usage") / 100
                updateLine.Fields("Status") = 5 'Consumption Checked

                Dim insertLine As Query = Query.Entity("Logistics List").Insert ' 4 WO Component
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Document Type") = 7
                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Packing List") = PackingList
                insertLine.Fields("Picking No_") = LogisticsNo
                insertLine.Fields("Your Reference") = DocumentNo
                insertLine.Fields("Source Code") = SourceCode
                insertLine.Fields("Responsibility Center") = WorkShop

                insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")

                insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                insertLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("QtyToShip")
                insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("QtyToShip")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("QtyToShip")
                insertLine.Fields("Source Code") = SourceCode
                insertLine.Fields("Responsibility Center") = WorkShop

                insertLine.Fields("Location Code") = LocationCode 'DTSource.Rows(i)("LocationCode")
                insertLine.Fields("Description") = DocumentNo  ' '] [nvarchar](50) NULL,
                insertLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                insertLine.Fields("Work Center") = "" ' Dataset.Value("")
                insertLine.Fields("Status") = 0
                'insertLine.Fields("Style") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("PO No_") = "" '] [nvarchar](50) NULL,
                ''insertLine.Fields("External Document No_") = DocumentNo   '] [nvarchar](50) NULL,
                'insertLine.Fields("Posting Date") = PostingDate ' DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Item Category") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Code Number") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Component") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Color") = ""  '] [nvarchar](50) NULL,
                'insertLine.Fields("Weight Of Length") = 0 '] [decimal](28, 10) NULL,
                'insertLine.Fields("Size") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Roll") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Qty_ Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Unit2") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Net Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Gross Weight") = 0 ' "
                'insertLine.Fields("CBM") = 0
                'insertLine.Fields("Item Group") = ""
                'insertLine.Fields("QR Code") = ""
                'insertLine.Fields("Color light") = ""

                insertLine.Execute()

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(7)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.And("Document Type").Is(7)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.And("Document Type").Is(7)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = PackingList

                    insert.Fields("Packing List") = PackingList
                    insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                    insert.Fields("Location Code") = LocationCode
                    insert.Fields("Source Code") = SourceCode
                    insert.Fields("Responsibility Center") = WorkShop
                    insert.Fields("Document Type") = 7 ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If


                ''insert line
                insertLine = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("QtyToShip") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo

                    insertLine.Fields("Packing List") = PackingList
                    insertLine.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")
                    insertLine.Fields("Picking No_") = LogisticsNo

                    insertLine.Fields("Document Type") = 7
                    insertLine.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = WorkShop ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode") ''rOrder("Location Code")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Real Expired Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate") 'DTSource.Rows(i)("Expiration Date")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")

                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next
            Next

            Query.EndTransaction()
            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)
            WorkSession.Client.Close()

            Framework.OpenEntity("Document Entry Header Shipped WO", String.Format("[No_]=N'{0}' and [Document Type]=7", DocumentNo))
            'Framework.OpenEntity("Document Entry Header Shipped WO", String.Format("[No_]=N'{0}' and [Document Type]=7", DocumentNo))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Shared Sub WorkOrderPutQRCodePost(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim EndingDate As Date = sender.GetParameter("EndingDate")
        Dim StartingDate As Date = sender.GetParameter("StartingDate")
        Dim DueDate As Date = sender.GetParameter("DueDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim SourceCode As String = sender.GetParameter("SourceCode")
        Dim WorkShop As String = sender.GetParameter("ResponsibilityCenter")
        Dim LocationCode As String = sender.GetParameter("LocationCode")
        Dim DTSource As DataTable = WorkSession.Client.DataSource
        Dim LogisticsNo As String = ""
        Dim PackingList As String = ""
        Dim DocType As Integer = sender.GetParameter("Doctype")

        'If CheckOrderQRCodeInit(DocumentNo, rOrder("Logistics No_"), rOrder("Picking No_"), DocType) = 1 Then
        '    WorkSession.MsgML("Already Init !")
        '    Return
        'End If
        ''lấy series
        LogisticsNo = GetandUpdateSeriesNumber("WOIssue", "", SourceCode, WorkShop, LocationCode, PackingList)


        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Starting Date") = StartingDate
            updateOrder.Fields("Ending Date") = EndingDate
            updateOrder.Fields("Due Date") = DueDate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Login ID") = Framework.UserID
            updateOrder.Fields("Status") = 7 'KSC Issue Approve

            If PackingList = "" Then PackingList = LogisticsNo

            updateOrder.Fields("Planned Order No_", "+") = LogisticsNo + "|"
            updateOrder.Execute()


            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim Dataset As Query = Query.From(LineTable).Transaction(True)
                Dataset.Where("Prod_ Order No_").Is(DocumentNo)
                Dataset.And("Remaining Quantity").GreaterThan(0)
                'Dataset.And("Variant Code").Is(DTSource.Rows(i)("VariantCode"))
                Dataset.And("Item No_").Is(DTSource.Rows(i)("No_"))
                If Dataset.RecordCount <= 0 Then Continue For

                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Prod_ Order No_") = DocumentNo
                updateLine.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")

                updateLine.Fields("Status") = 7
                updateLine.Fields("Quantity") = DTSource.Rows(i)("QtyToReceive")
                updateLine.Fields("Receipt No_") = LogisticsNo
                updateLine.Execute()

                'insert line
                Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert

                insertLine.Fields("Type") = 6
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Packing List") = PackingList
                insertLine.Fields("Picking No_") = LogisticsNo
                insertLine.Fields("Your Reference") = DocumentNo

                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                'insertLine.Fields("Item Variant") = ""
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo")
                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("QtyPer")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("QtyToReceive")

                insertLine.Fields("Login ID") = Framework.UserID
                'insertLine.Fields("System Date") = Now()
                'insertLine.Fields("URL") = ""
                'insertLine.Fields("External Document No_") = ExternalDocumentNo
                'insertLine.Fields("Your Reference") = ExternalDocumentNo
                insertLine.Fields("Source Code") = SourceCode
                insertLine.Fields("Responsibility Center") = WorkShop
                'insertLine.Fields("QRCode") = ""
                insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Serial No_") = ""
                'insertLine.Fields("Work Shift No_") = ""
                'insertLine.Fields("Work Center") = ""
                'insertLine.Fields("Entry No_") = 0
                'insertLine.Fields("Blocked") = 0
                insertLine.Fields("Number No_") = DTSource.Rows(i)("QtyToReceive")
                insertLine.Fields("Description") = PackingList
                insertLine.Fields("Post QRCode Entry") = 1
                insertLine.Fields("Status") = 1
                insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("QtyPer") > 1, 1, 0)
                insertLine.Fields("Location Code") = LocationCode ' DTSource.Rows(i)("LocationCode1")
                insertLine.Execute()

                insertLine = Query.Entity("Logistics List").Insert 'Logistics List 4 WO
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Document Type") = 6
                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Packing List") = PackingList
                insertLine.Fields("Picking No_") = LogisticsNo
                insertLine.Fields("Your Reference") = DocumentNo
                insertLine.Fields("Source Code") = SourceCode
                insertLine.Fields("Responsibility Center") = WorkShop

                insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                insertLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("QtyToReceive")
                insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("QtyToReceive")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("QtyToReceive")
                insertLine.Fields("Location Code") = LocationCode 'DTSource.Rows(i)("LocationCode")
                insertLine.Fields("Description") = DocumentNo   '] [nvarchar](50) NULL,
                insertLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                insertLine.Fields("Work Center") = ""  ' Dataset.Value("")
                'insertLine.Fields("Status") = 0
                'insertLine.Fields("Style") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("PO No_") = DocumentNo    '] [nvarchar](50) NULL,
                ''insertLine.Fields("External Document No_") = DocumentNo   '] [nvarchar](50) NULL,
                'insertLine.Fields("Posting Date") = PostingDate ' DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Item Category") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Code Number") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Component") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Color") = ""  '] [nvarchar](50) NULL,
                'insertLine.Fields("Weight Of Length") = 0 '] [decimal](28, 10) NULL,
                'insertLine.Fields("Size") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Roll") = " " '] [nvarchar](50) NULL,
                'insertLine.Fields("Qty_ Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Unit2") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Net Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Gross Weight") = 0 ' "
                'insertLine.Fields("CBM") = 0
                'insertLine.Fields("Item Group") = ""
                'insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                'insertLine.Fields("QR Code") = ""
                'insertLine.Fields("Color light") = ""


                insertLine.Execute()

            Next

            Query.EndTransaction()
            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)
            WorkSession.Client.Close()

            Framework.OpenEntity("QRCode Generation", String.Format("[Document No_]=N'{0}' and [Type]= 6", DocumentNo))


        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Shared Sub PurchaseReturnOrderPickQRCodePost(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim r As Hashtable = sender.CurrentRow
        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim DocumentDate As Date = sender.GetParameter("DocumentDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        Dim TransportID As String = sender.GetParameter("TransportID")
        Dim DriverName As String = sender.GetParameter("DriverName")
        Dim MCP As String = sender.GetParameter("MCP")
        Dim Location As String = sender.GetParameter("LocationCode")
        Dim DateReceived As String = sender.GetParameter("Date Received")
        Dim TimeReceived As String = sender.GetParameter("Time Received")
        Dim DTSource As DataTable = WorkSession.Client.DataSource
        'Dim DocType As Integer = sender.GetParameter("Doctype")

        Dim LogisticsNo As String = ""
        Dim PackingList As String = sender.GetParameter("PackingList")
        'If CheckOrderQRCodeInit(DocumentNo, rOrder("Logistics No_"), rOrder("Picking No_"), doctype) = 1 Then
        '    WorkSession.MsgML("Already Init !")
        '    Return
        'End If
        ''lấy series
        LogisticsNo = GetandUpdateSeriesNumber("PurchaseReturn", "", SaleSourceCode, ResponsibilityCenter, Location, PackingList)

        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Document Date") = DocumentDate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Picking User") = Framework.UserID
            updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Transaction Type") = ShippingAgent
            updateOrder.Fields("Transaction Specification") = ShippingAgentService
            updateOrder.Fields("Transport ID") = TransportID
            updateOrder.Fields("Driver Name") = DriverName
            'updateOrder.Fields("Receive") = 1
            updateOrder.Fields("Status") = 4 'Putted
            updateOrder.Fields("Location Code") = Location

            If PackingList = "" Then PackingList = LogisticsNo

            updateOrder.Fields("Last Return Shipment No_") = LogisticsNo
            updateOrder.Fields("Return Shipment No_", "+") = LogisticsNo + "|"

            updateOrder.Fields("Posting No_") = LogisticsNo
            updateOrder.Fields("Receiving No_", "+") = LogisticsNo + "|"

            updateOrder.Fields("Date Received") = Convert.ToDateTime(DateReceived)
            updateOrder.Fields("Time Received") = Convert.ToDateTime(TimeReceived)
            updateOrder.Execute()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim Dataset As Query = Query.From("Purchase Return Order Line").Transaction(True)
                Dataset.Where("Document No_").Is(DocumentNo)
                Dataset.And("Outstanding Quantity").GreaterThan(0)
                Dataset.And("Line No_").Is(DTSource.Rows(i)("LineNo_"))
                Dataset.And("No_").Is(DTSource.Rows(i)("No_"))

                Dim QTYPER As Integer = Dataset.Value("Qty_ per Unit of Measure")

                If Dataset.RecordCount <= 0 Then Continue For

                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Document No_") = DocumentNo
                updateLine.WhereAs("Line No_") = DTSource.Rows(i)("LineNo_")
                updateLine.WhereAs("No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                updateLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("Quantity")

                updateLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode1")
                updateLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                'updateLine.Fields("FA Posing Date") = DTSource.Rows(i)("MFGDate")
                'updateLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate")

                updateLine.Fields("Status") = 4 'Packing List
                updateLine.Execute()


                'Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert
                'If OrderTable <> "Purchase Return Order Header" Then
                '    insertLine.Fields("Type") = 9
                '    insertLine.Fields("Document No_") = DocumentNo
                '    insertLine.Fields("External Document No_") = ExternalDocumentNo

                '    insertLine.Fields("Logistics No_") = ReceiptNo
                '    insertLine.Fields("Packing List") = PackingList
                '    insertLine.Fields("Picking No_") = ReceiptNo
                '    insertLine.Fields("Your Reference") = DocumentNo



                '    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                '    insertLine.Fields("Item Variant") = DTSource.Rows(i)("VariantCode")
                '    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                '    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                '    insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("QtyPer")
                '    insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")

                '    insertLine.Fields("Login ID") = Framework.UserID
                '    'insertLine.Fields("System Date") = Now()
                '    'insertLine.Fields("URL") = ""

                '    insertLine.Fields("Source Code") = SaleSourceCode
                '    insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                '    'insertLine.Fields("QRCode") = ""
                '    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                '    insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFGDate")
                '    'insertLine.Fields("Serial No_") = ""
                '    'insertLine.Fields("Work Shift No_") = DTSource.Rows(i)("WorShift")
                '    'insertLine.Fields("Routing No_") = DTSource.Rows(i)("WorkCenter")
                '    'insertLine.Fields("Entry No_") = 0
                '    'insertLine.Fields("Blocked") = 0
                '    insertLine.Fields("Number No_") = DTSource.Rows(i)("Quantity")
                '    insertLine.Fields("Description") = ""
                '    insertLine.Fields("Post QRCode Entry") = 1
                '    insertLine.Fields("Status") = 1
                '    insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("QtyPer") > 1, 1, 0)
                '    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode1")
                '    insertLine.Execute()
                'End If

                ''
                Dim insertLine As Query = Query.Entity("Logistics List").Insert
                'insertLine = Query.Entity("Logistics List").Insert
                insertLine.Fields("Document Type") = 9
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Your Reference") = DocumentNo
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Packing List") = PackingList
                insertLine.Fields("Picking No_") = LogisticsNo

                insertLine.Fields("Source Code") = SaleSourceCode
                insertLine.Fields("Responsibility Center") = ResponsibilityCenter

                insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                insertLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode1")
                insertLine.Fields("Description") = LogisticsNo  '] [nvarchar](50) NULL,
                insertLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                insertLine.Fields("Work Center") = ""  ' Dataset.Value("")
                'insertLine.Fields("Status") = 0
                'insertLine.Fields("Style") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("PO No_") = DocumentNo  '] [nvarchar](50) NULL,
                'insertLine.Fields("Posting Date") = PostingDate ' DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Item Category") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Code Number") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Component") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Color") = ""  '] [nvarchar](50) NULL,
                'insertLine.Fields("Weight Of Length") = 0 '] [decimal](28, 10) NULL,
                'insertLine.Fields("Size") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Roll") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Qty_ Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Unit2") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Net Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Gross Weight") = 0 ' "
                'insertLine.Fields("CBM") = 0
                'insertLine.Fields("Item Group") = ""
                'insertLine.Fields("QR Code") = ""
                'insertLine.Fields("Color light") = ""

                insertLine.Execute()

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                'q.And("Logistics No_").Is(LogisticsNo) ' 
                q.And("Document Type").Is(9)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(9)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(9)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = PackingList

                    insert.Fields("Document No_") = DocumentNo
                    insert.Fields("External Document No_") = ExternalDocumentNo
                    insert.Fields("Logistics No_") = LogisticsNo
                    insert.Fields("Picking No_") = LogisticsNo
                    insert.Fields("Reference No_") = DocumentNo
                    insert.Fields("Location Code") = Location
                    insert.Fields("Source Code") = SaleSourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter
                    insert.Fields("Document Type") = 9 ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If


                ''insert line
                insertLine = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Quantity") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Logistics No_") = LogisticsNo
                    insertLine.Fields("Packing List") = PackingList
                    insertLine.Fields("Picking No_") = LogisticsNo
                    'insertLine.Fields("Your Reference") = DocumentNo

                    insertLine.Fields("Document Type") = 9
                    insertLine.Fields("Source Code") = SaleSourceCode
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode1") ' DTSource.Rows(i)("Location Code") ''rOrder("Location Code")
                    'insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")

                    insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Real Expired Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                    'insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                    'insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                    'insertLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                    'insertLine.Fields("Description") = DocumentNo  ' '] [nvarchar](50) NULL,
                    'insertLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                    'insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")

                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate") 'DTSource.Rows(i)("Expiration Date")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer") 'DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next

            Next

            Query.EndTransaction()
            WorkSession.Client.Close()

            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)
            Framework.OpenEntity("Document Entry Header PRO", String.Format("[No_]=N'{0}' and [Document Type]=9", DocumentNo))

            'Framework.OpenEntity("QRCode Generation", String.Format("[Document No_]=N'{0}' and [Type]=0", DocumentNo))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Shared Sub SalesReturnOrderPutQROrderPost(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim DocumentDate As Date = sender.GetParameter("DocumentDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim LocationCode As String = sender.GetParameter("locationCode")

        Dim ReasonCode As String = sender.GetParameter("ReasonCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        Dim TransportID As String = sender.GetParameter("TransportID")
        Dim DriverName As String = sender.GetParameter("DriverName")
        Dim MCP As String = sender.GetParameter("MCP")
        Dim InvoiceType As Integer = sender.GetParameter("FFInvoiceType")
        'Dim DocType As Integer = sender.GetParameter("Doctype")

        Dim PackingList As String = ""
        Dim LogisticsNo As String = ""

        'If CheckOrderQRCodeInit(DocumentNo, rOrder("Logistics No_"), rOrder("Picking No_"), doctype) = 1 Then
        '    WorkSession.MsgML("Already Init !")
        '    Return
        'End If
        ''lấy và cập nhật series
        LogisticsNo = GetandUpdateSeriesNumber("SaleReturn", "", SaleSourceCode, ResponsibilityCenter, LocationCode, PackingList)


        Dim DTSource As DataTable = WorkSession.Client.DataSource
        Dim flate As Integer = 1


        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Document Date") = DocumentDate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Login ID") = Framework.UserID
            updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Status") = 4 'Pick
            updateOrder.Fields("Tax Liable") = InvoiceType
            If PackingList = "" Then PackingList = LogisticsNo

            updateOrder.Fields("Posting No_") = LogisticsNo
            updateOrder.Fields("Shipping No_", "+") = LogisticsNo + "|"

            updateOrder.Fields("Last Return Receipt No_") = LogisticsNo
            updateOrder.Fields("Return Receipt No_", "+") = LogisticsNo + "|"

            updateOrder.Fields("Shipping Agent Code") = ShippingAgent
            updateOrder.Fields("Shipping Agent Service Code") = ShippingAgentService
            updateOrder.Fields("Transport ID") = TransportID
            updateOrder.Fields("Driver Name") = DriverName
            updateOrder.Fields("Ordering User") = Framework.UserID
            updateOrder.Execute()


            ''Line region

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim DataSet As Query = Query.From("Sales Return Order Line").Transaction(True)

                DataSet.Where("Document No_").Is(DocumentNo)
                DataSet.And("Outstanding Quantity").GreaterThan(0)
                DataSet.And("Line No_").Is(DTSource.Rows(i)("LineNo_"))
                DataSet.And("No_").Is(DTSource.Rows(i)("No_"))
                DataSet.And("Variant Code").Is(DTSource.Rows(i)("VariantCode"))
                If DataSet.RecordCount <= 0 Then Continue For

                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Document No_") = DocumentNo
                updateLine.WhereAs("Line No_") = DTSource.Rows(i)("LineNo_")
                updateLine.WhereAs("No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                updateLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Quantity")
                updateLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                updateLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                'updateLine.Fields("FA Posing Date") = DTSource.Rows(i)("MFGDate")
                'updateLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate")

                updateLine.Fields("Status") = 4 'Pick order
                updateLine.Execute()

                Dim insertLine As Query = Query.Entity("Logistics List").Insert
                insertLine.Fields("Document Type") = 10
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Packing List") = PackingList
                insertLine.Fields("Picking No_") = LogisticsNo
                insertLine.Fields("Your Reference") = DocumentNo
                insertLine.Fields("Source Code") = SaleSourceCode
                insertLine.Fields("Responsibility Center") = ResponsibilityCenter

                insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")

                insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Real Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                insertLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                insertLine.Fields("Description") = DocumentNo  ' '] [nvarchar](50) NULL,
                insertLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                insertLine.Fields("Work Center") = "" ' Dataset.Value("")
                insertLine.Fields("Status") = 0
                'insertLine.Fields("Style") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("PO No_") = DocumentNo  '] [nvarchar](50) NULL,
                'insertLine.Fields("Posting Date") = PostingDate ' DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Item Category") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Code Number") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Component") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Color") = ""  '] [nvarchar](50) NULL,
                'insertLine.Fields("Weight Of Length") = 0 '] [decimal](28, 10) NULL,
                'insertLine.Fields("Size") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Roll") = "" '] [nvarchar](50) NULL,
                'insertLine.Fields("Qty_ Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Unit2") = 0 '] [Decimal](28, 10) NULL,
                'insertLine.Fields("Net Weight") = 0 ' "'] [decimal](28, 10) NULL,
                'insertLine.Fields("Gross Weight") = 0 ' "
                'insertLine.Fields("CBM") = 0
                'insertLine.Fields("Item Group") = ""
                'insertLine.Fields("QR Code") = ""
                'insertLine.Fields("Color light") = ""

                insertLine.Execute()


                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                'q.And("Logistics No_").Is(LogisticsNo) ' 
                q.And("Document Type").Is(10)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(10)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(10)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = PackingList

                    insert.Fields("Document No_") = DocumentNo
                    insert.Fields("External Document No_") = ExternalDocumentNo
                    insert.Fields("Logistics No_") = LogisticsNo
                    insert.Fields("Picking No_") = LogisticsNo
                    insert.Fields("Reference No_") = DocumentNo
                    insert.Fields("Location Code") = LocationCode
                    insert.Fields("Source Code") = SaleSourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter
                    insert.Fields("Document Type") = 10 ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If


                ''insert line
                insertLine = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Quantity") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Logistics No_") = LogisticsNo
                    insertLine.Fields("Packing List") = PackingList
                    insertLine.Fields("Picking No_") = LogisticsNo
                    'insertLine.Fields("Your Reference") = DocumentNo

                    insertLine.Fields("Document Type") = 10
                    insertLine.Fields("Source Code") = SaleSourceCode
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode") ' DTSource.Rows(i)("Location Code") ''rOrder("Location Code")
                    'insertLine.Fields("No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")

                    insertLine.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Real Expired Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                    'insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                    'insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                    'insertLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Outstanding Quantity") = DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                    'insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                    'insertLine.Fields("Description") = DocumentNo  ' '] [nvarchar](50) NULL,
                    'insertLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,
                    'insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")

                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate") 'DTSource.Rows(i)("Expiration Date")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer") 'DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next

            Next


            Query.EndTransaction()
            WorkSession.Client.Close()

            Dim parentID As String = WorkSession.Read("parentEntityID")
            Framework.RefreshSource(parentID)

            Framework.OpenEntity("Document Entry Header SRO", String.Format("[No_]=N'{0}' and [Document Type]=10", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub


    Public Shared Sub TRDPickQRCodeOrderOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return

        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        If rOrder("Status") < 2 Then
            WorkSession.MsgML("Not Yet Validate !")
            Return
        End If

        If rOrder("Status") >= 4 Then
            WorkSession.MsgML("Already Warehouse Pick up !")
            Return
        End If

        Dim OrderTable As String = sender.TableName

        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Document No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("TRDPickOrderQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            'parameters("DocType") = r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("DocumentDate") = r("Document Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("MCP") = r("MCP")
            parameters("TransportID") = r("Transport ID")
            parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = r("Source Code")
            parameters("ReasonCode") = r("Reason Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")

            If OrderTable = "Sales Order Header" Or OrderTable = "Sales Return Order Header" Then
                parameters("ShippingAgence") = r("Shipping Agent Code")
                parameters("ShippingAgenceService") = r("Shipping Agent service Code")
            Else
                parameters("ShippingAgence") = r("Transaction Type")
                parameters("ShippingAgenceService") = r("Transaction Specification")
            End If
        End If

        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow
            Myrow("LineNo_") = OrderLine.Rows(i)("Line No_")
            Myrow("No_") = OrderLine.Rows(i)("No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LocationCode") = OrderLine.Rows(i)("Location Code")
            Myrow("BinCode") = OrderLine.Rows(i)("Bin Code")

            Myrow("MFGDate") = OrderLine.Rows(i)("FA Posting Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Expiration Date")

            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("LotNo_") = OrderLine.Rows(i)("Lot No_")
            Myrow("OrderQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("PostedQuantity") = OrderLine.Rows(i)("Quantity Shipped")
            Myrow("Quantity") = OrderLine.Rows(i)("Outstanding Quantity")
            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 10
        gridView.FixColumnCount = 13
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        gridView.ColumnReadOnly(12) = True
        gridView.ColumnReadOnly(13) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub TRDOrderPutQRCodeOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return

        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        If rOrder("Status") < 2 Then
            WorkSession.MsgML("Not Yet Validate !")
            Return
        End If

        If rOrder("Status") >= 4 Then
            WorkSession.MsgML("Already Warehouse Put In !")
            Return
        End If

        Dim OrderTable As String = sender.TableName

        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Document No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("TRDOrderPutQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            'parameters("DocType") = r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("DocumentDate") = r("Document Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("MCP") = r("MCP")
            parameters("TransportID") = r("Transport ID")
            parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = r("Source Code")
            parameters("ReasonCode") = r("Reason Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")
            parameters("ShippingAgence") = r("Transaction Type")
            parameters("ShippingAgenceService") = r("Transaction Specification")
            parameters("Date Received") = r("Date Received")
            parameters("Time Received") = r("Time Received")
            parameters("LocationCode") = r("Location Code")
            'End If
        End If

        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow
            Myrow("LineNo_") = OrderLine.Rows(i)("Line No_")
            Myrow("No_") = OrderLine.Rows(i)("No_")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("No_"), 4)
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LocationCode1") = OrderLine.Rows(i)("Location Code")
            Myrow("MFGDate") = OrderLine.Rows(i)("FA Posting Date")
            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("OrderQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("PostedQuantity") = OrderLine.Rows(i)("Quantity Received")
            Myrow("Quantity") = OrderLine.Rows(i)("Qty_ to Receive")
            Myrow("LotNo_") = OrderLine.Rows(i)("Lot No_")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Expiration Date")
            DataSource.Rows.Add(Myrow)

        Next
        DataSource.AcceptChanges()

        'Dim gridView As GridView = ClientEntity.GridView
        'gridView.DataSource = DataSource
        'gridView.NumericColumnFrom = 8
        'gridView.FixColumnCount = 14
        'gridView.ColumnReadOnly(0) = True
        'gridView.ColumnReadOnly(1) = True
        'gridView.ColumnReadOnly(2) = True
        'gridView.ColumnReadOnly(3) = True
        'gridView.ColumnReadOnly(4) = True
        'gridView.ColumnReadOnly(5) = True
        'gridView.ColumnReadOnly(6) = True
        'gridView.ColumnReadOnly(7) = True
        'gridView.ColumnReadOnly(8) = True
        'gridView.ColumnReadOnly(9) = True
        'gridView.ColumnReadOnly(10) = True
        'gridView.ColumnReadOnly(11) = True
        'gridView.ColumnReadOnly(12) = True
        ''gridView.ColumnReadOnly(13) = True
        ''gridView.ColumnReadOnly(14) = True
        'gridView.ColumnWidth(2) = 150
        'gridView.ColumnWidth(3) = 150
        'ClientEntity.Show()
        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 7
        gridView.NumericColumnTo = 11

        gridView.FixColumnCount = 10
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        'gridView.ColumnReadOnly(12) = True
        'gridView.ColumnReadOnly(13) = True
        'gridView.ColumnReadOnly(14) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(4) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub TRDOrderPutQRCodeEdit(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim r As Hashtable = sender.CurrentRow

        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim DocumentDate As Date = sender.GetParameter("DocumentDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        Dim TransportID As String = sender.GetParameter("TransportID")
        Dim DriverName As String = sender.GetParameter("DriverName")
        Dim MCP As String = sender.GetParameter("MCP")
        Dim Location As String = sender.GetParameter("LocationCode")
        Dim DateReceived As String = sender.GetParameter("Date Received")
        Dim TimeReceived As String = sender.GetParameter("Time Received")
        Dim DTSource As DataTable = WorkSession.Client.DataSource
        Dim StartingNo_ As String = ""
        Dim EndNo_ As Integer = 0
        Dim LastNoUesd As Integer = 0
        Dim InCry As Integer = 0
        Dim ReceiptNo As String = ""
        Dim Count As Integer = 0
        Dim q As New Query
        Dim flate As Integer = 1
        Dim JournalTemplate As String = ""
        Dim JournalBatch As String = ""
        Dim WHDocumentNo As String = ""

        q = Query.From("[No_ Series Line] a,[Number Sequence] b").Select.Top(1)
        q.Where("a.[Series Code]").Equal("b.[WhsReceipt]")
        q.WhereAs("Source Code") = sender.GetParameter("SourceCode")
        q.WhereAs("Responsibility Center") = sender.GetParameter("ResponsibilityCenter")
        Dim tbl As DataTable = q.ToTable
        StartingNo_ = q.Value("Starting No_")
        EndNo_ = q.Value("Ending No_")
        LastNoUesd = q.Value("Last No_ Used")
        InCry = q.Value("Increment-by No_")
        Count = q.Value("RowID")
        ReceiptNo = StartingNo_ & FormatDocumentNumber(EndNo_, LastNoUesd + InCry)

        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Document Date") = DocumentDate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Picking User") = Framework.UserID
            updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Transaction Type") = ShippingAgent
            updateOrder.Fields("Transaction Specification") = ShippingAgentService
            updateOrder.Fields("Transport ID") = TransportID
            updateOrder.Fields("Driver Name") = DriverName
            'updateOrder.Fields("Receive") = 1
            updateOrder.Fields("Status") = 4 'Putted
            updateOrder.Fields("Location Code") = Location
            updateOrder.Fields("Receiving No_") = ReceiptNo
            updateOrder.Fields("Date Received") = Convert.ToDateTime(DateReceived)
            updateOrder.Fields("Time Received") = Convert.ToDateTime(TimeReceived)
            updateOrder.Execute()

            For i As Integer = 0 To DTSource.Rows.Count - 1
                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Document No_") = DocumentNo
                updateLine.WhereAs("Line No_") = DTSource.Rows(i)("LineNo_")
                updateLine.WhereAs("No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                updateLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("Quantity")
                updateLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode1")
                updateLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                'updateLine.Fields("FA Posing Date") = DTSource.Rows(i)("MFGDate")
                'updateLine.Fields("Expiration Date") = DTSource.Rows(i)("ExpiredDate")

                updateLine.Fields("Status") = 4
                updateLine.Execute()

                Dim Dataset As Query = Query.From("Purchase Order Line").Transaction(True)
                If OrderTable = "Purchase Return Order Header" Then
                    Dataset = Query.From("Purchase Return Order Line").Transaction(True)
                End If
                Dataset.Where("Document No_").Is(DocumentNo)
                Dataset.And("Outstanding Quantity").GreaterThan(0)
                Dataset.And("Line No_").Is(DTSource.Rows(i)("LineNo_"))
                Dataset.And("No_").Is(DTSource.Rows(i)("No_"))
                'Dim qty As Integer = 1
                'Dim UOM As String = Dataset.Value("Unit of Measure Code")
                Dim QTYPER As Integer = Dataset.Value("Qty_ per Unit of Measure")

                If Dataset.RecordCount <= 0 Then Continue For


                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim qq As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                qq.Where("No_").Is(DocumentNo)
                qq.And("Document Type").Is(0)

                Dim Status As Integer = qq.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(0)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(0)
                    queryDelete.Execute()

                    queryDelete = Query.Delete("QRCode Buffer")
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Type").Is(0)
                    queryDelete.Execute()

                End If

                'If Status <> 0 Then
                '    Return
                'End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = ReceiptNo
                    insert.Fields("Logistics No_") = ReceiptNo 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Reference No_") = rOrder("Bill-to Name")
                    insert.Fields("Document Type") = 0
                    insert.Fields("Location Code") = DTSource.Rows(i)("LocationCode1")
                    insert.Fields("Source Code") = SaleSourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter

                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If

                'insert line
                Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert

                insertLine.Fields("Type") = 0
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                'insertLine.Fields("Item Variant") = ""
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("QtyPer")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")

                insertLine.Fields("Login ID") = Framework.UserID
                'insertLine.Fields("System Date") = Now()
                'insertLine.Fields("URL") = ""
                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Your Reference") = ""
                insertLine.Fields("Source Code") = SaleSourceCode
                insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                'insertLine.Fields("QRCode") = ""
                insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Serial No_") = ""
                'insertLine.Fields("Work Shift No_") = DTSource.Rows(i)("WorShift")
                'insertLine.Fields("Routing No_") = DTSource.Rows(i)("WorkCenter")
                'insertLine.Fields("Entry No_") = 0
                'insertLine.Fields("Blocked") = 0
                insertLine.Fields("Number No_") = DTSource.Rows(i)("Quantity")
                insertLine.Fields("Description") = ""
                insertLine.Fields("Post QRCode Entry") = 1
                insertLine.Fields("Status") = 1
                insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("QtyPer") > 1, 1, 0)
                insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode1")
                insertLine.Execute()

                insertLine = Query.Entity(TableDocumentEntry).Insert

                Dim qqq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qqq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Quantity") - 1
                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Document Type") = 0
                    insertLine.Fields("Source Code") = SaleSourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode1") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID

                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")

                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Quantity") = 1
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()
                Next

                EntryNo += 1

            Next

            Dim update_Sq As Query = Query.Update("No_ Series Line")

            update_Sq.Fields("Last No_ Used") = LastNoUesd + InCry
            update_Sq.WhereAs("RowID") = Count
            update_Sq.Execute()

            Query.EndTransaction()
            WorkSession.Client.Close()

            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)


            Framework.OpenEntity("QRCode Generation", String.Format("[Document No_]=N'{0}' and [Type]=0", DocumentNo))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    'Public Shared Sub SplitQRCodeSalesOrder(ByVal rinvoice As Object)
    '    ''Che don hang thanh nhieu don hang theo [Rows per Invoice] cai dat so luong dong toi da tren don hang
    '    Dim q As Query
    '    Dim delete As Query
    '    Dim maxLine As Integer = 0
    '    Dim totalLine As Integer = 0
    '    Try
    '        Dim ss As Query = Query.From("Sales Receivables Setup").Transaction(True)
    '        maxLine = ISDBNULL(ss.Value("Rows per Invoice"), 0)
    '        If maxLine = 0 Then Return

    '        Dim Dataset As Query = Query.From("Sales Order Line").Transaction(True)
    '        Dataset.Where("Document No_").Is(rinvoice("No_"))
    '        totalLine = Dataset.RecordCount
    '        If totalLine <= maxLine Then Return
    '        'bat dau che don hang
    '        Dim LineDataset As DataTable = Dataset.ToTable
    '        Dim numLoop As Integer = CInt(totalLine / maxLine)
    '        Query.BeginTransaction()
    '        For j As Integer = 1 To numLoop
    '            q = Query.From("Number Sequence").Select("SalesOrder").Transaction(True)
    '            If q.Value("SalesOrder") = "" Then
    '                'Query.RollBack()
    '                WorkSession.MsgML("Sales Order Sequence Number must setup first")
    '                Return
    '            End If

    '            Dim SaleSequence As String = q.Value("SalesOrder")

    '            q = Query.From("No_ Series Line").Transaction(True)
    '            q.WhereAs("Series Code") = SaleSequence
    '            q.WhereAs("Source Code") = rinvoice("Source Code")
    '            If rinvoice("Responsibility Center") <> "" Then
    '                q.WhereAs("Responsibility Center") = rinvoice("Responsibility Center")
    '            End If
    '            q.OrderBy("Code")

    '            If q.ToTable.Rows.Count = 0 Then
    '                WorkSession.MsgML("Sales Order Series number must setup first")
    '                Return
    '            End If

    '            Dim lastNumberUsed As Integer = q.Value("Last No_ Used")
    '            Dim incrementBy As Integer = q.Value("Increment-by No_")
    '            Dim startPrefix As String = q.Value("Starting No_")

    '            Dim SalesOrderCode As String = startPrefix & FormatDocumentNumber(q.Value("Ending No_"), lastNumberUsed + incrementBy)
    '            Dim SeriesRowID As Integer = q.Value("RowID")
    '            Dim updateSeries As Query = Query.Update("No_ Series Line")
    '            updateSeries.Fields("Last No_ Used") = lastNumberUsed + incrementBy
    '            updateSeries.WhereAs("RowID") = SeriesRowID
    '            updateSeries.Execute()

    '            Dim insertSalesHeader As Query = Query.Entity("TRD Sales Order").WithValues(rinvoice).Insert
    '            'Transfer Sale Header
    '            insertSalesHeader.Fields("No_") = SalesOrderCode
    '            insertSalesHeader.Fields("Document Type") = 2
    '            insertSalesHeader.Fields("Login ID") = Framework.UserID
    '            insertSalesHeader.Fields("Posting Description") = rinvoice("No_")
    '            If rinvoice("Your Reference") = "" Then
    '                insertSalesHeader.Fields("Your Reference") = rinvoice("No_")
    '            End If

    '            insertSalesHeader.Execute()

    '            For i As Integer = maxLine * j To Math.Min(LineDataset.Rows.Count - 1, maxLine * (j + 1))
    '                Dim rLine As DataRow = LineDataset.Rows(i)
    '                Dim insertSalesLine As Query = Query.Entity("TRD Sales Order Line").WithValues(rLine).Insert
    '                insertSalesLine.Fields("Document No_") = SalesOrderCode
    '                insertSalesLine.Execute()

    '                delete = Query.Delete("Sales Order Line")
    '                delete.WhereAs("Document No_") = rinvoice("No_")
    '                delete.WhereAs("Line No_") = rLine("Line No_")
    '                delete.WhereAs("No_") = rLine("No_")
    '                delete.Execute()
    '            Next
    '        Next
    '        Query.EndTransaction()
    '    Catch ex As Exception
    '        Query.RollBack()
    '        WorkSession.MsgML(ex.ToString)
    '    End Try

    'End Sub

    Public Shared Sub TRDPickQRCodeOrderEdit(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim DocumentDate As Date = sender.GetParameter("DocumentDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        'Dim LocationCode As String = sender.GetParameter("locationCode")

        Dim ReasonCode As String = sender.GetParameter("ReasonCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        Dim TransportID As String = sender.GetParameter("TransportID")
        Dim DriverName As String = sender.GetParameter("DriverName")
        Dim MCP As String = sender.GetParameter("MCP")
        Dim InvoiceType As Integer = sender.GetParameter("FFInvoiceType")

        Dim WHDocumentNo As String = ""
        Dim LogisticsNo As String = ""

        Dim DTSource As DataTable = WorkSession.Client.DataSource
        Dim flate As Integer = 1


        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Document Date") = DocumentDate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Login ID") = Framework.UserID
            updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Status") = 4 'Pick
            updateOrder.Fields("Tax Liable") = InvoiceType

            Dim queryseries As Query = Query.From("Number Sequence")
            If queryseries.Value("WhsShipment") <> "" Then
                Dim SaleSequence As String = queryseries.Value("WhsShipment")
                queryseries = Query.From("No_ Series Line").Transaction(True)
                queryseries.WhereAs("Series Code") = SaleSequence
                queryseries.WhereAs("Source Code") = SaleSourceCode
                If ResponsibilityCenter <> "" Then
                    queryseries.WhereAs("Responsibility Center") = ResponsibilityCenter
                End If
                queryseries.OrderBy("Code")
                If queryseries.RecordCount <> 0 Then
                    Dim SeriesRowID As Integer = queryseries.Value("RowID")
                    Dim StartDocPrefix As String = queryseries.Value("Starting No_")
                    Dim LastClientUsed As Integer = queryseries.Value("Last No_ Used")
                    Dim IncByNo As Integer = queryseries.Value("Increment-By No_")
                    Dim EndNo_ As Integer = queryseries.Value("Ending No_")
                    LastClientUsed = LastClientUsed + IncByNo
                    LogisticsNo = StartDocPrefix & FormatDocumentNumber(EndNo_, LastClientUsed)

                    updateOrder.Fields("Posting No_", "+") = LogisticsNo + ","
                End If
            End If
            updateOrder.Fields("Shipping Agent Code") = ShippingAgent
            updateOrder.Fields("Shipping Agent Service Code") = ShippingAgentService
            updateOrder.Fields("Transport ID") = TransportID
            updateOrder.Fields("Driver Name") = DriverName
            updateOrder.Fields("Ordering User") = Framework.UserID
            updateOrder.Execute()


            ''Line region

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim Orderline As Query = Query.From("Sales Order Line").Transaction(True)
                If OrderTable = "Sales Return Order Header" Then
                    Orderline = Query.From("Sales Return Order Line").Transaction(True)
                End If
                Orderline.Where("Document No_").Is(DocumentNo)
                Orderline.And("Outstanding Quantity").GreaterThan(0)
                Orderline.And("Line No_").Is(DTSource.Rows(i)("LineNo_"))
                Orderline.And("No_").Is(DTSource.Rows(i)("No_"))
                If Orderline.RecordCount <= 0 Then Continue For

                'Dim DataSet As DataTable = Orderline.ToTable

                'Dim updateLine As Query = Query.Entity(LineTable).Insert

                'If DTSource.Rows(i)("LotNo_") = "" Then
                '    Dim qqq As Query = Query.StoredProc("dbo.SelectLotNumber4PickOrder")
                '    qqq.Parameters("@SourceCode") = SaleSourceCode
                '    qqq.Parameters("@Respon") = ResponsibilityCenter
                '    qqq.Parameters("@LocationCode") = DTSource.Rows(i)("LocationCode")
                '    qqq.Parameters("@ItemNo") = DTSource.Rows(i)("No_")

                '    Dim LotDS As DataTable = qqq.ToTable
                '    Dim LotQty As Decimal = 0
                '    Dim LotNo As String = ""
                '    Dim LotqtyPer As Decimal = 0
                '    If DataSet.Value("Qty_ per Unit of Measure") = 0 Then
                '        WorkSession.MsgML("Kiểm tra quy cách  mặt hàng" & DTSource.Rows(i)("No_") & " !")
                '        Continue For
                '    End If

                '    If LotDS.Rows.Count > 0 Then
                '        LotQty = LotDS.Rows(0)("Quantity")
                '        'LotqtyPer = LotDS.Rows(0)("Qty_ Per Unit of Measure")
                '        Dim LotQuantity As Decimal = LotQty / DataSet.Value("Qty_ per Unit of Measure")

                '        If LotQuantity >= DataSet.Value("Quantity") Then
                '            'LotNo = LotInfor.Value("Lot No_")
                '            updateLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Quantity")
                '            updateLine.Fields("Lot No_") = LotDS.Rows(0)("Lot No_")
                '            updateLine.Fields("Expiration Date") = LotDS.Rows(0)("Expiration Date")
                '            updateLine.Fields("Bin Code") = GetBinQuantity(DataSet.Value("Location Code"), DataSet.Value("No_"), LotDS.Rows(0)("Lot No_")) 'Get Bin Code by Bin Ranking
                '            updateLine.Execute()
                '        Else 'Phai che order line ra

                '            updateLine.Fields("Outstanding Quantity") = LotQuantity 'LotQty * LotqtyPer / Dataset.Value("Qty_ per Unit of Measure")
                '            updateLine.Fields("Qty_ to Ship") = LotQuantity
                '            updateLine.Fields("Quantity") = LotQuantity

                '            updateLine.Fields("Amount") = LotQuantity * DataSet.Value("Unit Price")
                '            updateLine.Fields("Line Discount Amount") = LotQuantity * DataSet.Value("Unit Price") * DataSet.Value("Line Discount %") / 100
                '            updateLine.Fields("VAT Base Amount") = LotQuantity * DataSet.Value("Unit Price") - (LotQuantity * DataSet.Value("Unit Price") * DataSet.Value("Line Discount %") / 100)
                '            updateLine.Fields("VAT Amount") = RoundWithCurrency((LotQuantity * DataSet.Value("Unit Price") - (LotQuantity * DataSet.Value("Unit Price") * DataSet.Value("Line Discount %") / 100)) * DataSet.Value("VAT %") / 100)
                '            updateLine.Fields("Amount Including VAT") = RoundWithCurrency(LotQuantity * DataSet.Value("Unit Price") - LotQuantity * DataSet.Value("Unit Price") * DataSet.Value("Line Discount %") / 100)
                '            updateLine.Fields("Inv_ Discount Amount") = RoundWithCurrency(DataSet.Value("Profit %") * LotQuantity * DataSet.Value("Unit Price") / 100)

                '            updateLine.Fields("Qty_ to Invoice") = LotQuantity
                '            updateLine.Fields("Lot No_") = LotDS.Rows(0)("Lot No_")
                '            updateLine.Fields("Expiration Date") = LotDS.Rows(0)("Expiration Date")
                '            updateLine.Fields("Bin Code") = GetBinQuantity(DataSet.Value("Location Code"), DataSet.Value("No_"), LotDS.Rows(0)("Lot No_")) 'Get Bin Code by Bin Ranking

                '            updateLine.Execute()
                '            'Insert next line
                '            Dim LotQuantityRemain As Decimal = DataSet.Value("Quantity") - LotQuantity

                '            For j As Integer = 1 To LotDS.Rows.Count - 1
                '                If LotQuantityRemain <= 0 Then Continue For

                '                LotQty = LotDS.Rows(j)("Quantity")
                '                'LotqtyPer = LotDS.Rows(j)("Qty_ Per Unit of Measure")
                '                LotQuantity = LotQty / DataSet.Value("Qty_ per Unit of Measure")

                '                If LotQuantity >= LotQuantityRemain Then
                '                    Insert2OrderLine(LineDataset, DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"), LotQuantityRemain, SaleSourceCode, ResponsibilityCenter, LotDS.Rows(j)("Location Code"), MaxLine + i + j + 1, CurrencyFactor, LotDS.Rows(j)("Expiration Date"))
                '                    LotQuantityRemain = 0
                '                Else
                '                    Insert2OrderLine(LineDataset, DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"), LotQuantity, SaleSourceCode, ResponsibilityCenter, LotDS.Rows(j)("Location Code"), MaxLine + i + j + 1, CurrencyFactor, LotDS.Rows(j)("Expiration Date"))
                '                    LotQuantityRemain -= LotQuantity 'LotQty * LotqtyPer  / Dataset.Value("Qty_ per Unit of Measure")
                '                End If
                '            Next
                '        End If

                '    Else ' Ton lot khong du
                '        WorkSession.MsgML("Item Lot No_ is not enough to supply !")
                '        Continue For
                '    End If
                'Else
                '    updateLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Quantity")
                '    updateLine.Fields("Qty_ to Invoice") = DTSource.Rows(i)("Quantity")
                '    updateLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                '    updateLine.Execute()
                'End If

                Dim qty As Integer = DTSource.Rows(i)("Quantity")
                'Dim DocumentNo As String = rOrder("No_")

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                q.And("Document Type").Is(1)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(1)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(1)
                    queryDelete.Execute()

                    queryDelete = Query.Delete("Document Entry Buffer")
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Type").Is(1)
                    queryDelete.Execute()

                End If

                'If Status <> 0 Then

                '    Return
                'End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = LogisticsNo
                    insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                    insert.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                    insert.Fields("Source Code") = SaleSourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter
                    insert.Fields("Document Type") = 1 ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If

                'Dim insertLine As Query = Query.Entity("Document Entry Buffer").Insert

                'insertLine.Fields("Type") = 1
                'insertLine.Fields("Document No_") = DocumentNo
                'insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                ''insertLine.Fields("Item Variant") = ""
                'insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                'insertLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                'insertLine.Fields("Unit Of Measure") = DTSource.Rows(i)("UOM")
                'insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("QtyPer")
                'insertLine.Fields("Login ID") = Framework.UserID
                '' insertLine.Fields("System Date") = Now()

                'insertLine.Fields("External Document No_") = ExternalDocumentNo
                ''insertLine.Fields("Your Reference") = ""
                'insertLine.Fields("Source Code") = SaleSourceCode
                'insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                ''insertLine.Fields("QRCode") = ""
                'insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                'insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFGDate")
                ''insertLine.Fields("Serial No_") = ""
                ''insertLine.Fields("Work Shift No_") = ""
                ''insertLine.Fields("Work Center") = ""
                ''insertLine.Fields("Qty Unit Of Measure") = 0
                ''insertLine.Fields("Blocked") = 0
                'insertLine.Fields("Number No_") = DTSource.Rows(i)("Quantity")
                'insertLine.Fields("Description") = ""
                ''insertLine.Fields("Post QRCode Entry") = 1
                'insertLine.Fields("Status") = 1
                ''insertLine.Fields("Kit") =  IIf(DTSource.Rows(i)("QtyPer") > 1, 1, 0)
                'insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                'insertLine.Execute()

                'insert line
                Dim insertLine As Query = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To qty - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Document Type") = 1
                    insertLine.Fields("Source Code") = SaleSourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")

                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")

                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next



            Next

            'For i As Integer = 0 To DTSource.Rows.Count - 1

            '    Dim Dataset As Query = Query.From("Sales Order Line").Transaction(True)
            '    If OrderTable = "Sales Return Order Header" Then
            '        Dataset = Query.From("Sales Return Order Line").Transaction(True)
            '    End If
            '    Dataset.Where("Document No_").Is(DocumentNo)
            '    Dataset.And("Outstanding Quantity").GreaterThan(0)
            '    Dataset.And("Line No_").Is(DTSource.Rows(i)("LineNo_"))
            '    Dataset.And("No_").Is(DTSource.Rows(i)("No_"))
            '    If Dataset.RecordCount <= 0 Then Continue For
            ''insert 2 Journal Line
            'If flate = 1 Then
            '    Dim SelectWareHouseShipment As Query = Query.From("Item Journal Batch")
            '    SelectWareHouseShipment.WhereAs("Source Code") = SaleSourceCode
            '    'SelectWareHouseShipment.WhereAs("Responsibility Center") = ResponsibilityCenter
            '    SelectWareHouseShipment.WhereAs("Location Code") = DataSet.Value("Location Code")
            '    If OrderTable = "Sales Return Order Header" Then
            '        SelectWareHouseShipment.WhereAs("Document Type") = 10
            '    Else
            '        SelectWareHouseShipment.WhereAs("Document Type") = 1
            '    End If

            '    If SelectWareHouseShipment.ToTable.Rows.Count <= 0 Then Continue For


            '    JournalTemplate = SelectWareHouseShipment.Value("Journal Template Name")
            '    JournalBatch = SelectWareHouseShipment.Value("Name")

            '    Dim WHShipmentSequence As String = SelectWareHouseShipment.Value("No_ Series")
            '    Dim WHShipmentSeries As String = SelectWareHouseShipment.Value("Posting No_ Series")

            '    Dim q As Query = Query.From("No_ Series Line").Transaction(True)
            '    q.WhereAs("Series Code") = WHShipmentSequence
            '    q.WhereAs("Source Code") = SaleSourceCode
            '    q.WhereAs("Code") = WHShipmentSeries
            '    If ResponsibilityCenter <> "" Then
            '        q.WhereAs("Responsibility Center") = ResponsibilityCenter
            '    End If
            '    q.OrderBy("Code")

            '    If q.RecordCount <= 0 Then Continue For

            '    Dim SeriesRowID As Integer = q.Value("RowID")
            '    Dim StartDocumentPrefix As String = q.Value("Starting No_")
            '    Dim LastClientUsedNumber As Integer = q.Value("Last No_ Used")
            '    Dim IncByNumber As Integer = q.Value("Increment-By No_")
            '    Dim EndNumber As Integer = q.Value("Ending No_")
            '    LastClientUsedNumber = LastClientUsedNumber + IncByNumber
            '    WHDocumentNo = StartDocumentPrefix & FormatDocumentNumber(EndNumber, LastClientUsedNumber)
            '    'End If

            '    Dim deleteJournal As Query = Query.Delete("Item Journal Line")
            '    deleteJournal.WhereAs("Journal Template Name") = JournalTemplate
            '    deleteJournal.WhereAs("Journal Batch Name") = JournalBatch
            '    deleteJournal.WhereAs("Source Code") = SaleSourceCode
            '    deleteJournal.WhereAs("Responsibility Center") = ResponsibilityCenter
            '    deleteJournal.WhereAs("Location Code") = DataSet.Value("Location Code")
            '    deleteJournal.Execute()
            '    flate = 0
            'End If


            'Dim insert As Query = Query.Entity("WareHouse Shipment Line").Insert
            'If OrderTable = "Sales Return Order Header" Then
            '    insert = Query.Entity("WareHouse Receipt Line").Insert
            'End If
            'insert.Fields("Journal Template Name") = JournalTemplate
            'insert.Fields("Journal Batch Name") = JournalBatch
            'insert.Fields("Originally Ordered No_") = DocumentNo
            'insert.Fields("Line No_") = DTSource.Rows(i)("LineNo_")
            'insert.Fields("Document No_") = WHDocumentNo
            'insert.Fields("External Document No_") = ExternalDocumentNo
            'If OrderTable = "Sales Return Order Header" Then
            '    insert.Fields("Document Type") = 10

            'Else
            '    insert.Fields("Document Type") = 1

            'End If

            'If DTSource.Rows(i)("LotNo_") = "" Then
            '    insert.Fields("Lot No_") = DataSet.Value("Lot No_")
            '    insert.Fields("Expiration Date") = DataSet.Value("Expiration Date")
            'Else
            '    insert.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
            'End If

            'insert.Fields("Document Date") = DocumentDate
            'insert.Fields("Location Code") = DataSet.Value("Location Code")
            'insert.Fields("Source Code") = SaleSourceCode
            'insert.Fields("Reason Code") = ReasonCode
            'insert.Fields("Posting Date") = PostingDate
            'insert.Fields("Description") = LogisticsNo

            'insert.Fields("Source No_") = DataSet.Value("Sell-to Customer No_")
            'insert.Fields("Responsibility Center") = ResponsibilityCenter
            'insert.Fields("Salespers__Purch_ Code") = DataSet.Value("Salesperson Code")
            'insert.Fields("Item No_") = DTSource.Rows(i)("No_")
            'insert.Fields("Variant Code") = DTSource.Rows(i)("VariantCode")
            'insert.Fields("Qty_ Per Unit of Measure") = DataSet.Value("Qty_ Per Unit of Measure")
            'insert.Fields("Unit of Measure Code") = DataSet.Value("Unit of Measure")
            'insert.Fields("Unit Cost") = DataSet.Value("Unit Cost")
            'insert.Fields("Quantity") = DTSource.Rows(i)("Quantity")
            'insert.Fields("Unit Cost (LCY)") = DataSet.Value("Unit Cost") * CurrencyFactor
            'insert.Fields("Unit Amount") = DataSet.Value("Unit Cost") * DTSource.Rows(i)("Quantity")
            'insert.Fields("Discount Amount") = DataSet.Value("Line Discount Amount")
            'insert.Fields("Indirect Cost %") = DataSet.Value("Line Discount %")
            'insert.Fields("Amount") = DataSet.Value("Unit Cost") * DTSource.Rows(i)("Quantity")
            'insert.Fields("Amount (LCY)") = DataSet.Value("Unit Cost") * DTSource.Rows(i)("Quantity") * CurrencyFactor
            'insert.Fields("Currency Code") = CurrencyCode
            'insert.Fields("Overhead Rate") = CurrencyFactor
            'insert.Fields("Value Entry Type") = DataSet.Value("Document Type")
            'insert.Fields("Service Order No_") = DataSet.Value("Job No_")
            'insert.Fields("Cross-Reference No_") = DataSet.Value("Cross-Reference No_")
            'insert.Execute()

            'Next

            Query.EndTransaction()
            WorkSession.Client.Close()

            Dim parentID As String = WorkSession.Read("parentEntityID")
            Framework.RefreshSource(parentID)

            Framework.OpenEntity("Document Entry Header SO", String.Format("[No_]=N'{0}' and [Document Type]=1", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub DocumentEntryPost(ByVal rOrder As Hashtable, ByVal OrderLine As DataTable)
        Dim DocumentNo As String = rOrder("No_")

        Dim TableDocumentEntryHeader As String = "Document Entry Header"
        Dim TableDocumentEntry As String = "Document Entry"

        Try
            Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
            q.Where("No_").Is(DocumentNo)

            Dim Status As Integer = q.Value("Status")

            'chua quet ma QRCode
            If Status = 0 Then
                Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                queryDelete.Where("No_").Is(DocumentNo)
                queryDelete.Execute()

                queryDelete = Query.Delete(TableDocumentEntry)
                queryDelete.Where("Document No_").Is(DocumentNo)
                queryDelete.Execute()
            End If

            If Status <> 0 Then
                Return
            End If


            'insert header
            Dim insert As Query = Query.Insert(TableDocumentEntryHeader)
            insert.Fields("No_") = DocumentNo
            insert.Fields("Sell-to Customer No_") = rOrder("Sell-to Customer No_")
            insert.Fields("Bill-to Name") = rOrder("Bill-to Name")
            insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
            insert.Fields("Location Code") = rOrder("Location Code")
            insert.Fields("Source Code") = rOrder("Source Code")
            insert.Fields("Responsibility Center") = rOrder("Responsibility Center")
            insert.Fields("Bill-to Customer Template Code") = rOrder("Bill-to Customer Template Code")
            insert.Fields("Posting Date") = rOrder("Posting Date")
            insert.Fields("External Document No_") = rOrder("External Document No_")
            insert.Fields("Status") = 0
            insert.Fields("Backend") = 1
            insert.Execute()

            'insert line
            Dim insertLine As Query = Query.Insert(TableDocumentEntry)

            Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
            Dim EntryNo As Integer = qq.Value("EntryNo")

            For i As Integer = 0 To OrderLine.Rows.Count - 1
                Dim r As DataRow = OrderLine.Rows(i)

                insertLine.Fields("Entry No_") = EntryNo
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Document Type") = 1
                insertLine.Fields("Source Code") = rOrder("Source Code")
                insertLine.Fields("Responsibility Center") = rOrder("Responsibility Center")
                insertLine.Fields("Location Code") = rOrder("Location Code")
                insertLine.Fields("Posting Date") = rOrder("Posting Date")
                'insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                'insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")


                insertLine.Fields("Status") = 0
                insertLine.Fields("User ID") = Framework.UserID
                insertLine.Fields("Serial No_") = DocumentNo
                insertLine.Fields("Line No_") = i
                insertLine.Fields("Item No_") = r("No_")
                insertLine.Fields("Lot No_") = r("Lot No_")
                insertLine.Fields("Quantity") = r("Quantity")
                insertLine.Fields("Scan Number") = 0
                insertLine.Fields("Backend") = 1
                insertLine.Execute()

                EntryNo += 1
            Next

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    'For PO, TO In, WO
    Public Sub QRCodeEntryOrderInputApp(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow

        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        'If r Is Nothing Or r.Count = 0 Then Return
        If r("Status") >= 2 Then
            WorkSession.MsgML("Already Post !")
            Return
        End If


        Dim DocumentNo_ As String = r("No_")

        If (r("Document Type") Mod 2 <> 0) Then
            WorkSession.MsgML("Document must be in (Purchase Order, Transfer Order in or Production Order)")

            Return
        End If

        Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        Dim i As Integer = qqq.Value("EntryNo")
        Dim j As Integer = 0

        Try
            Query.BeginTransaction()

            Dim Finish As Integer = 1
            Dim tableID As Integer = 0
            Dim querrydata As Query = Query.From("Document Entry").Transaction(True)
            querrydata.Where("Document No_").Is(DocumentNo_)
            querrydata.And("Document Type").Is(r("Document Type"))

            Dim dbSource As DataTable = querrydata.ToTable

            For Each trow As DataRow In dbSource.Rows
                If trow("QRCode") = "" Or trow("Status") = 2 Then
                    WorkSession.MsgML("QRCode must be filled or scanned already for line {0}!", j)
                    j += 1
                    Continue For
                End If

                Dim QueryQRCode As Query = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("QRCode").Is(trow("QRCode"))
                'QueryQRCode.And("Location Code").Is(trow("Location Code"))

                Select Case r("Document Type")
                    Case 4
                        QueryQRCode.And("Document Type").Is(5)
                        If QueryQRCode.ToTable.Rows.Count = 0 Then
                            WorkSession.MsgML("QRCode must be created and picked up for line {0}!", j)
                            j += 1
                            Continue For
                        End If
                    Case 14
                        QueryQRCode.And("Document Type").Is(15)
                        If QueryQRCode.ToTable.Rows.Count = 0 Then
                            WorkSession.MsgML("QRCode must be created and picked up for line {0}!", j)
                            j += 1
                            Continue For
                        End If
                End Select


                QueryQRCode = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("QRCode").Is(trow("QRCode"))
                QueryQRCode.And("Document Type").Is(trow("Document Type"))
                QueryQRCode.And("Document No_").Is(DocumentNo_)
                'QueryQRCode.And("Location Code").Is(trow("Location Code"))

                If QueryQRCode.ToTable.Rows.Count > 0 Then
                    WorkSession.MsgML("QRCode already has be created and putted in for line {0}!", j)
                    j += 1
                    Continue For
                End If

                Dim QRCode = Query.From("QRCode").Transaction(True)
                QRCode.Where("QRCode").Is(trow("QRCode"))
                'QueryQRCode.Where("Document No_").Is(DocumentNo_)
                'QueryQRCode.And("Document Type").Is(trow("Document Type"))
                'QueryQRCode.And("Item No_").Is(trow("Item No_"))

                If QRCode.ToTable.Rows.Count > 0 Then
                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryInsertQREntry.Fields("Item No_") = trow("Item No_")
                    QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Document Type") = trow("Document Type")
                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Description") = r("External Document No_")
                    QueryInsertQREntry.Fields("Variant Code") = "" 'trow("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = "" 'trow("Work Center")

                    QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
                    QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

                    'QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    'QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Unit of Measure Code") = trow("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = trow("Qty_ per Unit of Measure")
                    QueryInsertQREntry.Fields("Source Code") = trow("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = trow("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = trow("Location Code")
                    QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")

                    'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    'QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Entry No_") = i
                    i = i + 1
                    QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                    QueryInsertQREntry.Fields("Document No_") = DocumentNo_
                    QueryInsertQREntry.Execute()

                    Dim QueryUpdate As Query = Query.Update("Document Entry")
                    QueryUpdate.WhereAs("Document No_") = DocumentNo_
                    QueryUpdate.WhereAs("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryUpdate.WhereAs("Item No_") = trow("Item No_")
                    QueryUpdate.WhereAs("Line No_") = j
                    QueryUpdate.WhereAs("Document Type") = trow("Document Type")
                    'QueryUpdate.WhereAs("Serial No_") = trow("Serial No_")
                    QueryUpdate.Fields("Scan Number", "+") = 1


                    QueryUpdate.Fields("Status") = 2

                    QueryUpdate.Fields("Attach File") = QRCode.Value("URL")
                    If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = QRCode.Value("Serial No_")
                    If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = QRCode.Value("Lot No_")
                    QueryUpdate.Execute()
                    j += 1
                End If
            Next

            For Each trow As DataRow In dbSource.Rows
                If trow("Status") <> 2 Then
                    Finish = 0
                    Exit For
                End If
            Next

            Dim update As Query = Query.Update("Document Entry Header")
            update.Where("No_").Is(r("No_"))
            update.And("Document Type").Is(r("Document Type"))
            update.Fields("Status") = IIf(Finish = 0, 1, 2)
            update.Execute()

            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub
    'For SO
    Public Sub QRCodeEntryOrderApp(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        'If r Is Nothing Or r.Count = 0 Then Return
        If r("Status") >= 2 Then
            WorkSession.MsgML("Already Post !")
            Return
        End If


        Dim DocumentNo_ As String = r("No_")

        If r("Document Type") Mod 2 = 0 Then
            WorkSession.MsgML("Document must be in (Sales Order, Transfer Out Order or Production Order Consumption)")
            Return
        End If

        Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        Dim i As Integer = qqq.Value("EntryNo")
        Dim j As Integer = 0

        Try
            Query.BeginTransaction()

            Dim Finish As Integer = 1
            Dim tableID As Integer = 0
            Dim querrydata As Query = Query.From("Document Entry").Transaction(True)
            querrydata.Where("Document No_").Is(DocumentNo_)
            querrydata.And("Document Type").Is(r("Document Type"))

            Dim dbSource As DataTable = querrydata.ToTable

            For Each trow As DataRow In dbSource.Rows
                If trow("QRCode") = "" Or trow("Status") = 2 Then
                    WorkSession.MsgML("QRCode must be filled or scanned already for line {0}!", j)
                    j += 1
                    Continue For
                End If

                Dim QueryQRCode As Query = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("QRCode").Is(trow("QRCode"))
                QueryQRCode.And("Document Type").In("0,4,6")
                QueryQRCode.And("Location Code").Is(trow("Location Code"))

                If QueryQRCode.ToTable.Rows.Count = 0 Then
                    WorkSession.MsgML("QRCode must be created and putted in for line {0}!", j)
                    j += 1
                    Continue For
                End If

                QueryQRCode = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("Document No_").Is(DocumentNo_)
                QueryQRCode.And("Document Type").Is(trow("Document Type"))
                QueryQRCode.And("QRCode").Is(trow("QRCode"))
                QueryQRCode.And("Item No_").Is(trow("Item No_"))
                QueryQRCode.And("Location Code").Is(trow("Location Code"))

                If QueryQRCode.ToTable.Rows.Count > 0 Then
                    WorkSession.MsgML("QRCode is already Posted in QRCode Entry line {0}!", j)
                    j += 1
                    Continue For
                Else
                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryInsertQREntry.Fields("Item No_") = trow("Item No_")
                    QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Document Type") = trow("Document Type")
                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Description") = r("External Document No_")
                    QueryInsertQREntry.Fields("Variant Code") = "" 'trow("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = "" 'trow("Work Center")

                    QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
                    QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

                    'QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    'QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Unit of Measure Code") = trow("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = trow("Qty_ per Unit of Measure")
                    QueryInsertQREntry.Fields("Source Code") = trow("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = trow("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = trow("Location Code")
                    QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")

                    'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    'QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Entry No_") = i
                    i = i + 1
                    QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                    QueryInsertQREntry.Fields("Document No_") = DocumentNo_
                    QueryInsertQREntry.Execute()

                    Dim QueryUpdate As Query = Query.Update("Document Entry")
                    QueryUpdate.WhereAs("Document No_") = DocumentNo_
                    QueryUpdate.WhereAs("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryUpdate.WhereAs("Item No_") = trow("Item No_")
                    QueryUpdate.WhereAs("Line No_") = j
                    QueryUpdate.WhereAs("Document Type") = trow("Document Type")
                    'QueryUpdate.WhereAs("Serial No_") = trow("Serial No_")
                    QueryUpdate.Fields("Scan Number", "+") = 1


                    QueryUpdate.Fields("Status") = 2

                    Dim ff As Query = Query.From("QRCode").Transaction(True)
                    ff.Where("QRCode").Is(trow("QRCode"))

                    QueryUpdate.Fields("Attach File") = ff.Value("URL")
                    If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = ff.Value("Serial No_")
                    If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = ff.Value("Lot No_")
                    QueryUpdate.Execute()
                    j += 1
                End If
            Next

            For Each trow As DataRow In dbSource.Rows
                If trow("Status") <> 2 Then
                    Finish = 0
                    Exit For
                End If
            Next

            Dim update As Query = Query.Update("Document Entry Header")
            update.Where("No_").Is(r("No_"))
            update.And("Document Type").Is(r("Document Type"))
            update.Fields("Status") = IIf(Finish = 0, 1, 2)
            update.Execute()

            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub
    'For TO Shipment
    Public Sub QRCodeEntryTransferOrder4App(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        'If r Is Nothing Or r.Count = 0 Then Return
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If r("Status") >= 2 Then
            WorkSession.MsgML("Already Post !")
            Return
        End If


        Dim DocumentNo_ As String = r("No_")

        If Not (r("Document Type") = 4 Or r("Document Type") = 14) Then
            WorkSession.MsgML("Must be Transaction Order Receipt !")
            Return
        End If

        Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        Dim i As Integer = qqq.Value("EntryNo")
        Dim j As Integer = 0

        Try
            Query.BeginTransaction()

            Dim Finish As Integer = 1
            Dim tableID As Integer = 0
            Dim querrydata As Query = Query.From("Document Entry").Transaction(True)
            querrydata.Where("Document No_").Is(DocumentNo_)
            querrydata.And("Document Type").Is(r("Document Type"))

            Dim dbSource As DataTable = querrydata.ToTable

            For Each trow As DataRow In dbSource.Rows
                If trow("QRCode") = "" Or trow("Status") = 2 Then
                    WorkSession.MsgML("QRCode must be filled or scanned already for line {0}!", j)
                    j += 1
                    Continue For
                End If

                Dim QueryQRCode As Query = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("QRCode").Is(trow("QRCode"))
                'QueryQRCode.And("Location Code").Is(trow("Location Code"))

                If r("Document Type") = 4 Then
                    QueryQRCode.And("Document Type").Is(5)
                Else
                    QueryQRCode.And("Document Type").Is(15)
                End If

                If QueryQRCode.ToTable.Rows.Count = 0 Then
                    WorkSession.MsgML("QRCode must be created and picked up for line {0}!", j)
                    j += 1
                    Continue For
                End If


                QueryQRCode = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("Document No_").Is(DocumentNo_)
                QueryQRCode.And("Document Type").Is(trow("Document Type"))
                QueryQRCode.And("QRCode").Is(trow("QRCode"))
                QueryQRCode.And("Item No_").Is(trow("Item No_"))
                QueryQRCode.And("Location Code").Is(trow("Location Code"))

                If QueryQRCode.ToTable.Rows.Count > 0 Then
                    WorkSession.MsgML("QRCode already has be created and putted in QRCode Entry for line {0}!", j)
                    j += 1
                    Continue For
                End If

                If QueryQRCode.ToTable.Rows.Count > 0 Then
                    WorkSession.MsgML("QRCode is already Posted in QRCode Entry line {0}!", j)
                    j += 1
                    Continue For
                Else
                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryInsertQREntry.Fields("Item No_") = trow("Item No_")
                    QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Document Type") = trow("Document Type")
                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Description") = r("External Document No_")
                    QueryInsertQREntry.Fields("Variant Code") = "" 'trow("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = "" 'trow("Work Center")
                    QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
                    'QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    'QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Unit of Measure Code") = trow("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = trow("Qty_ per Unit of Measure")
                    QueryInsertQREntry.Fields("Source Code") = trow("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = trow("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = trow("Location Code")
                    QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
                    QueryInsertQREntry.Fields("Production Date") = CDate(trow("MFG Date"))
                    'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    'QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Entry No_") = i
                    i = i + 1
                    QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                    QueryInsertQREntry.Fields("Document No_") = DocumentNo_
                    QueryInsertQREntry.Execute()

                    Dim QueryUpdate As Query = Query.Update("Document Entry")
                    QueryUpdate.WhereAs("Document No_") = DocumentNo_
                    QueryUpdate.WhereAs("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryUpdate.WhereAs("Item No_") = trow("Item No_")
                    QueryUpdate.WhereAs("Line No_") = j
                    QueryUpdate.WhereAs("Document Type") = trow("Document Type")
                    'QueryUpdate.WhereAs("Serial No_") = trow("Serial No_")
                    QueryUpdate.Fields("Scan Number", "+") = 1 'trow("Quantity")
                    QueryUpdate.Fields("Status") = 2

                    Dim ff As Query = Query.From("QRCode").Transaction(True)
                    ff.Where("QRCode").Is(trow("QRCode"))
                    QueryUpdate.Fields("Attach File") = ff.Value("URL")
                    If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = ff.Value("Serial No_")
                    If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = ff.Value("Lot No_")
                    QueryUpdate.Execute()
                    j += 1
                End If
            Next

            For Each trow As DataRow In dbSource.Rows
                If trow("Status") <> 2 Then
                    Finish = 0
                End If
            Next

            Dim update As Query = Query.Update("Document Entry Header")
            update.Where("No_").Is(r("No_"))
            update.And("Document Type").Is(4)
            update.Fields("Status") = IIf(Finish = 0, 1, 2)
            update.Execute()

            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub

    Public Shared Sub TransferQRCodeReceiptEditOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        If rOrder("Status") < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If
        If rOrder("Status") <> 3 Then
            WorkSession.MsgML("This Document must be shipment first!")
            Return
        End If

        Dim OrderTable As String = sender.TableName

        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Document No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("TransferOrderPutQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("Doctype") = r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("ShipmentDate") = r("Shipment Date")
            parameters("ReceiptDate") = r("Receipt Date")
            parameters("DocumentDate") = r("Document Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("MCP") = r("MCP")
            parameters("TransportID") = r("Transport ID")
            parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = r("To Source Code")
            parameters("ResponsibilityCenter") = r("To Responsibility Center")
            parameters("ShippingAgence") = r("Shipping Agent Code")
            parameters("ShippingAgenceService") = r("Shipping Agent Service Code")
        End If


        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow

            Myrow("LineNo_") = OrderLine.Rows(i)("Line No_")
            Myrow("No_") = OrderLine.Rows(i)("Item No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("Item No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("Item No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LotNo_") = OrderLine.Rows(i)("Lot No_")
            Myrow("LocationCode") = OrderLine.Rows(i)("To Location Code")

            Myrow("MFGDate") = OrderLine.Rows(i)("Receipt Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Expiration Date")

            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure Code")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("OrderQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("QuantityReceived") = OrderLine.Rows(i)("Quantity Received")
            Myrow("QtyToReceive") = OrderLine.Rows(i)("Qty_ To Receive")



            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 9
        gridView.FixColumnCount = 13
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        gridView.ColumnReadOnly(12) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub TransferQRCodeReceiptEdit(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim ReceiptDate As Date = sender.GetParameter("ReceiptDate")
        Dim ShipmentDate As Date = sender.GetParameter("ShipmentDate")
        Dim Documentdate As Date = sender.GetParameter("DocumentDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        Dim TransportID As String = sender.GetParameter("TransportID")
        Dim DriverName As String = sender.GetParameter("DriverName")
        Dim MCP As String = sender.GetParameter("MCP")
        Dim DTSource As DataTable = WorkSession.Client.DataSource
        Dim LogisticsNo As String = ""
        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Document Date") = Documentdate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Login ID") = Framework.UserID

            Dim queryseries As Query = Query.From("Number Sequence")
            If queryseries.Value("TransferReceipt") <> "" Then
                Dim SaleSequence As String = queryseries.Value("TransferReceipt")
                queryseries = Query.From("No_ Series Line").Transaction(True)
                queryseries.WhereAs("Series Code") = SaleSequence
                queryseries.WhereAs("Source Code") = SaleSourceCode
                If ResponsibilityCenter <> "" Then
                    queryseries.WhereAs("Responsibility Center") = ResponsibilityCenter
                End If
                queryseries.OrderBy("Code").AsC()
                If queryseries.RecordCount <> 0 Then
                    Dim SeriesRowID As Integer = queryseries.Value("RowID")
                    Dim StartDocPrefix As String = queryseries.Value("Starting No_")
                    Dim LastClientUsed As Integer = queryseries.Value("Last No_ Used")
                    Dim IncByNo As Integer = queryseries.Value("Increment-By No_")
                    Dim EndNo_ As Integer = queryseries.Value("Ending No_")
                    LastClientUsed = LastClientUsed + IncByNo
                    LogisticsNo = StartDocPrefix & FormatDocumentNumber(EndNo_, LastClientUsed)
                    updateOrder.Fields("Receipt No_") = LogisticsNo
                End If
            End If
            updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Shipping Agent Code") = ShippingAgent
            updateOrder.Fields("Shipping Agent Service Code") = ShippingAgentService
            updateOrder.Fields("Transport ID") = TransportID
            updateOrder.Fields("Driver Name") = DriverName
            updateOrder.Fields("Status") = 4
            updateOrder.Execute()


            For i As Integer = 0 To DTSource.Rows.Count - 1
                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Document No_") = DocumentNo
                updateLine.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Line No_") = DTSource.Rows(i)("LineNo_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                updateLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("QtyToReceive")
                updateLine.Execute()

                'Dim Dataset As Query = Query.From("Transfer Order Line").Transaction(True)

                'Dataset.Where("Document No_").Is(DocumentNo)
                'Dataset.And("Outstanding Quantity").GreaterThan(0)
                'Dataset.And("Line No_").Is(DTSource.Rows(i)("LineNo_"))
                'Dataset.And("No_").Is(DTSource.Rows(i)("No_"))

                ''Dim qty As Integer = 1
                ''Dim UOM As String = Dataset.Value("Unit of Measure Code")
                ''Dim QTYPER As Integer = Dataset.Value("Qty_ per Unit of Measure")

                'If Dataset.RecordCount <= 0 Then Continue For


                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim qq As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                qq.Where("No_").Is(DocumentNo)
                qq.And("Document Type").Is(4)

                Dim Status As Integer = qq.Value("Status")

                ''chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(4)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(4)
                    queryDelete.Execute()

                    queryDelete = Query.Delete("QRCode Buffer")
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Type").Is(4)
                    queryDelete.Execute()

                End If

                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity("Document Entry Header").Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = LogisticsNo
                    insert.Fields("Logistics No_") = LogisticsNo  'rOrder("Sell-to Customer No_")
                    'insert.Fields("Reference No_") = ExternalDocumentNo
                    insert.Fields("Document Type") = 4
                    insert.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                    insert.Fields("Source Code") = SaleSourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter

                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1

                    insert.Execute()
                End If

                'insert line
                Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert
                insertLine.Fields("Type") = 4
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                'insertLine.Fields("Item Variant") = ""
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("QtyPer")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("QtyToReceive")

                insertLine.Fields("Login ID") = Framework.UserID
                'insertLine.Fields("System Date") = Now()
                'insertLine.Fields("URL") = ""
                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Your Reference") = ExternalDocumentNo
                insertLine.Fields("Source Code") = SaleSourceCode
                insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                'insertLine.Fields("QRCode") = ""
                insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Serial No_") = ""
                'insertLine.Fields("Work Shift No_") = ""
                'insertLine.Fields("Work Center") = ""
                'insertLine.Fields("Entry No_") = 0
                'insertLine.Fields("Blocked") = 0
                insertLine.Fields("Number No_") = DTSource.Rows(i)("QtyToReceive")
                insertLine.Fields("Description") = ""
                insertLine.Fields("Post QRCode Entry") = 1
                insertLine.Fields("Status") = 1
                insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("QtyPer") > 1, 1, 0)
                insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                insertLine.Execute()

                insertLine = Query.Entity(TableDocumentEntry).Insert

                Dim qqq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qqq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("QtyToReceive") - 1
                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Document Type") = 4
                    insertLine.Fields("Source Code") = SaleSourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                    insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFGDate")

                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Quantity") = 1
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1

                    'Dim ff As Query = Query.From("Document Entry").Transaction(True)
                    'ff.Where("Document No_").Is(DocumentNo)
                    'ff.And("Item No_").Is(DTSource.Rows(i)("No_"))
                    'ff.And("Line No_").Is(k)
                    ''If DTSource.Rows(i)("Serial No_") = "" Then
                    'insertLine.Fields("Serial No_") = ff.Value("Serial No_")
                    ''If DTSource.Rows(i)("Lot No_") = "" Then
                    'insertLine.Fields("Lot No_") = ff.Value("Lot No_")
                    ''If r("Lot No_") = "" Then insertLine.Fields("Lot No_") = ff.Value("Lot No_")
                    'insertLine.Fields("QRCode") = ff.Value("QRCode")
                    'insertLine.Fields("Attach File") = ff.Value("Attach File")
                    insertLine.Execute()
                Next

                EntryNo += 1

            Next

            Query.EndTransaction()
            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)
            WorkSession.Client.Close()

            Framework.OpenEntity("Document Entry Header Receipt TO", String.Format("[No_]=N'{0}'", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Shared Sub TransferQRCodeShipmentEditOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If rOrder("Status") < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If
        If rOrder("Status") <> 2 Then
            WorkSession.MsgML("This Document must be Ordered Delevery first!")
            Return
        End If

        Dim OrderTable As String = sender.TableName
        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Document No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("TransferOrderPickQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("Doctype") = r("Document Type")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("ShipmentDate") = r("Shipment Date")
            parameters("ReceiptDate") = r("Receipt Date")
            parameters("DocumentDate") = r("Document Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("MCP") = r("MCP")
            parameters("TransportID") = r("Transport ID")
            parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = r("Source Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")
            parameters("ShippingAgence") = r("Shipping Agent Code")
            parameters("ShippingAgenceService") = r("Shipping Agent Service Code")
        End If


        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow

            Myrow("No_") = OrderLine.Rows(i)("Item No_")
            Myrow("LineNo_") = OrderLine.Rows(i)("Line No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("Item No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("Item No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LotNo_") = OrderLine.Rows(i)("Lot No_")

            Myrow("MFGDate") = OrderLine.Rows(i)("Receipt Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Expiration Date")

            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure Code")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("LocationCode") = OrderLine.Rows(i)("From Location Code")
            Myrow("OrderQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("QuantityShipped") = OrderLine.Rows(i)("Quantity Shipped")
            Myrow("QtyToShip") = OrderLine.Rows(i)("Qty_ to Ship")

            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 10
        gridView.FixColumnCount = 13
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        gridView.ColumnReadOnly(12) = True

        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub TransferQRCodeShipmentEdit(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim ReceiptDate As Date = sender.GetParameter("ReceiptDate")
        Dim ShipmentDate As Date = sender.GetParameter("ShipmentDate")
        Dim Documentdate As Date = sender.GetParameter("DocumentDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        Dim TransportID As String = sender.GetParameter("TransportID")
        Dim DriverName As String = sender.GetParameter("DriverName")
        Dim MCP As String = sender.GetParameter("MCP")
        Dim DTSource As DataTable = WorkSession.Client.DataSource

        Dim LogisticsNo_ As String = ""
        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Document Date") = Documentdate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Login ID") = Framework.UserID
            Dim queryseries As Query = Query.From("Number Sequence")
            If queryseries.Value("TransferShipment") <> "" Then
                Dim SaleSequence As String = queryseries.Value("TransferShipment")
                queryseries = Query.From("No_ Series Line").Transaction(True)
                queryseries.WhereAs("Series Code") = SaleSequence
                queryseries.WhereAs("Source Code") = SaleSourceCode
                If ResponsibilityCenter <> "" Then
                    queryseries.WhereAs("Responsibility Center") = ResponsibilityCenter
                End If
                queryseries.OrderBy("Code").AsC()
                If queryseries.RecordCount <> 0 Then
                    Dim SeriesRowID As Integer = queryseries.Value("RowID")
                    Dim StartDocPrefix As String = queryseries.Value("Starting No_")
                    Dim LastClientUsed As Integer = queryseries.Value("Last No_ Used")
                    Dim IncByNo As Integer = queryseries.Value("Increment-By No_")
                    Dim EndNo_ As Integer = queryseries.Value("Ending No_")
                    LastClientUsed = LastClientUsed + IncByNo
                    LogisticsNo_ = StartDocPrefix & FormatDocumentNumber(EndNo_, LastClientUsed)
                    updateOrder.Fields("Shipment No_") = LogisticsNo_
                End If
            End If
            'updateOrder.Fields("Ship") = 1
            updateOrder.Fields("Shipping Agent Code") = ShippingAgent
            updateOrder.Fields("Shipping Agent Service Code") = ShippingAgentService
            updateOrder.Fields("Transport ID") = TransportID
            updateOrder.Fields("Driver Name") = DriverName
            updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Status") = 3
            updateOrder.Execute()

            For i As Integer = 0 To DTSource.Rows.Count - 1
                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Document No_") = DocumentNo
                updateLine.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Line No_") = DTSource.Rows(i)("LineNo_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                'updateLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("QtyToReceive")
                updateLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("QtyToShip")
                updateLine.Execute()

                Dim qty As Integer = DTSource.Rows(i)("QtyToShip")
                'Dim DocumentNo As String = rOrder("No_")

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                q.And("Document Type").Is(5)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(5)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(5)
                    queryDelete.Execute()

                    queryDelete = Query.Delete("Document Entry Buffer")
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Type").Is(5)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = LogisticsNo_
                    insert.Fields("Logistics No_") = LogisticsNo_ 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Reference No_") = externaldocumentno
                    insert.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                    insert.Fields("Source Code") = SaleSourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter
                    insert.Fields("Document Type") = 5 ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If

                'Dim insertLine As Query = Query.Entity("Document Entry Buffer").Insert

                'insertLine.Fields("Type") = 5
                'insertLine.Fields("Document No_") = DocumentNo
                'insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                ''insertLine.Fields("Item Variant") = DTSource.Rows(i)("VariantCode")
                'insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                'insertLine.Fields("Quantity") = DTSource.Rows(i)("QtyToShip")
                'insertLine.Fields("Unit Of Measure") = DTSource.Rows(i)("UOM")
                'insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("QtyPer")
                'insertLine.Fields("Login ID") = Framework.UserID
                '' insertLine.Fields("System Date") = Now()

                'insertLine.Fields("External Document No_") = ExternalDocumentNo
                ''insertLine.Fields("Your Reference") = ""
                'insertLine.Fields("Source Code") = SaleSourceCode
                'insertLine.Fields("Responsibility Center") = ResponsibilityCenter

                'insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                'insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFGDate")

                ''insertLine.Fields("Expired Date") = Documentdate
                ''insertLine.Fields("Mfg Date") = Documentdate
                ''insertLine.Fields("Serial No_") = ""
                ''insertLine.Fields("Work Shift No_") = ""
                ''insertLine.Fields("Work Center") = ""
                ''insertLine.Fields("Qty Unit Of Measure") = 0
                ''insertLine.Fields("Blocked") = 0
                'insertLine.Fields("Number No_") = DTSource.Rows(i)("QtyToShip")
                'insertLine.Fields("Description") = ""
                ''insertLine.Fields("Post QRCode Entry") = 1
                'insertLine.Fields("Status") = 1
                ''insertLine.Fields("Kit") =  IIf(DTSource.Rows(i)("QtyPer") > 1, 1, 0)
                'insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode")
                'insertLine.Execute()

                'insert line
                Dim insertLine As Query = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To qty - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Document Type") = 5
                    insertLine.Fields("Source Code") = SaleSourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("LocationCode") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo_")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next


            Next

            Query.EndTransaction()
            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)
            WorkSession.Client.Close()

            Framework.OpenEntity("Document Entry Header Shipped TO", String.Format("[No_]=N'{0}'", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Shared Sub ProductionOrderPickupQRCodeOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        Dim Status As Integer = rOrder("Status")
        If Status < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If
        If Status = 7 Or Status >= 9 Then
            WorkSession.MsgML("Cannot modify the Order as process status!")
            Return
        End If

        Dim OrderTable As String = sender.TableName

        Dim LineTable As String = "Production Order Component" 'LineControler.TableName

        Dim q As Query = Query.From(LineTable).Transaction(True)
        q.Where("Prod_ Order No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("WorkOrderPickupQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("StartingDate") = r("Starting Date")
            parameters("EndingDate") = r("Ending Date")
            parameters("DueDate") = r("Due Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("SourceCode") = r("Source Code")
            parameters("LocationCode") = r("RM Location Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")
        End If


        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow

            Myrow("No_") = OrderLine.Rows(i)("Item No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("Item No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("Item No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LotNo") = OrderLine.Rows(i)("Lot No_")

            Myrow("MFGDate") = OrderLine.Rows(i)("Due Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Due Date")

            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure Code")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("Quantity") = OrderLine.Rows(i)("Quantity")
            Myrow("Usage") = OrderLine.Rows(i)("Usage %")
            Myrow("TotalQuantity") = OrderLine.Rows(i)("Total Quantity")
            Myrow("Quantityshipped") = OrderLine.Rows(i)("Consumed Quantity")
            Myrow("QtyToShip") = OrderLine.Rows(i)("Remaining Quantity")

            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 8
        gridView.FixColumnCount = 13
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True
        gridView.ColumnReadOnly(12) = True
        gridView.ColumnReadOnly(13) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub WorkOrderPickUpEditQRCode(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim EndingDate As Date = sender.GetParameter("EndingDate")
        Dim StartingDate As Date = sender.GetParameter("StartingDate")
        Dim DueDate As Date = sender.GetParameter("DueDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim SourceCode As String = sender.GetParameter("SourceCode")
        Dim WorkShop As String = sender.GetParameter("ResponsibilityCenter")
        Dim LocationCode As String = sender.GetParameter("LocationCode")
        Dim LogisticsNo_ As String = ""

        Dim DTSource As DataTable = WorkSession.Client.DataSource

        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Starting Date") = StartingDate
            updateOrder.Fields("Ending Date") = EndingDate
            updateOrder.Fields("Due Date") = DueDate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Login ID") = Framework.UserID
            updateOrder.Fields("Status") = 5 ' Consumption Checked
            updateOrder.Execute()

            Dim queryseries As Query = Query.From("Number Sequence")
            If queryseries.Value("WOConsumption") <> "" Then
                Dim SaleSequence As String = queryseries.Value("WOConsumption")

                queryseries = Query.From("No_ Series Line").Transaction(True)
                queryseries.WhereAs("Series Code") = SaleSequence
                queryseries.WhereAs("Source Code") = SourceCode
                If WorkShop <> "" Then
                    queryseries.WhereAs("Responsibility Center") = WorkShop
                End If
                queryseries.OrderBy("Code").AsC()

                If queryseries.RecordCount <> 0 Then
                    Dim SeriesRowID As Integer = queryseries.Value("RowID")
                    Dim StartDocPrefix As String = queryseries.Value("Starting No_")
                    Dim LastClientUsed As Integer = queryseries.Value("Last No_ Used")
                    Dim IncByNo As Integer = queryseries.Value("Increment-By No_")
                    Dim EndNo_ As Integer = queryseries.Value("Ending No_")
                    LastClientUsed = LastClientUsed + IncByNo
                    LogisticsNo_ = StartDocPrefix & FormatDocumentNumber(EndNo_, LastClientUsed)
                End If
            End If


            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim Dataset As Query = Query.From(LineTable).Transaction(True)
                Dataset.Where("Prod_ Order No_").Is(DocumentNo)
                Dataset.And("Remaining Quantity").GreaterThan(0)
                'Dataset.And("Variant Code").Is(DTSource.Rows(i)("VariantCode"))
                Dataset.And("Item No_").Is(DTSource.Rows(i)("No_"))
                If Dataset.RecordCount <= 0 Then Continue For

                Dim LineDataset As DataRow = Dataset.TakeRow(0)

                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Prod_ Order No_") = DocumentNo
                updateLine.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                updateLine.Fields("Quantity") = DTSource.Rows(i)("QtyToShip")
                updateLine.Fields("Shipment No_") = LogisticsNo_
                updateLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo")
                updateLine.Fields("Usage %") = DTSource.Rows(i)("Usage")
                updateLine.Fields("Total Quantity") = DTSource.Rows(i)("QtyToShip") + DTSource.Rows(i)("Usage") * DTSource.Rows(i)("Usage") / 100
                updateLine.Fields("Status") = 5 'Consumption Checked

                '    If DTSource.Rows(i)("LotNo") = "" Then
                '        'Get FEFO
                '        Dim LotInfor As Query = Query.From("Item Lot Number")
                '        LotInfor.Where("Item No_").Is(DTSource.Rows(i)("No_"))
                '        LotInfor.And("Source Code").Is(SourceCode)
                '        LotInfor.And("Responsibility Center").Is(WorkShop)
                '        LotInfor.And("Location Code").Is(LineDataset("Location Code"))
                '        'LotInfor.And("Quantity").GreaterEqual(DTSource.Rows(i)("Quantity"))
                '        LotInfor.And("Quantity").GreaterThan(0)
                '        LotInfor.OrderBy("Expiration Date")
                '        Dim LotDS As DataTable = LotInfor.ToTable
                '        Dim LotQty As Decimal = 0
                '        Dim LotNo As String = ""
                '        Dim LotqtyPer As Decimal = 0
                '        If LotDS.Rows.Count > 0 Then
                '            LotQty = LotDS.Rows(0)("Quantity")
                '            LotqtyPer = LotDS.Rows(0)("Qty_ Per Unit of Measure")
                '            Dim LotQuantity As Decimal = LotQty * LotqtyPer / Dataset.Value("Qty_ per Unit of Measure")

                '            If LotQuantity >= Dataset.Value("Quantity") Then
                '                'LotNo = LotInfor.Value("Lot No_")
                '                updateLine.Fields("Lot No_") = LotInfor.Value("Lot No_")
                '                updateLine.Fields("Bin Code") = GetBinQuantity(Dataset.Value("Location Code"), Dataset.Value("No_"), LotInfor.Value("Lot No_")) 'Get Bin Code by Bin Ranking
                '                updateLine.Execute()
                '            Else 'Phai che order line ra
                '                updateLine.Fields("Remaining Quantity") = LotQuantity 'LotQty * LotqtyPer / Dataset.Value("Qty_ per Unit of Measure")
                '                updateLine.Fields("Lot No_") = LotInfor.Value("Lot No_")
                '                updateLine.Fields("Bin Code") = GetBinQuantity(Dataset.Value("Location Code"), Dataset.Value("No_"), LotInfor.Value("Lot No_")) 'Get Bin Code by Bin Ranking

                '                updateLine.Execute()
                '                'Insert next line
                '                Dim LotQuantityRemain As Decimal = Dataset.Value("Quantity") - LotQuantity

                '                For j As Integer = 1 To LotDS.Rows.Count - 1
                '                    If LotQuantityRemain <= 0 Then Continue For

                '                    LotQty = LotDS.Rows(j)("Quantity")
                '                    LotqtyPer = LotDS.Rows(j)("Qty_ Per Unit of Measure")
                '                    LotQuantity = LotQty * LotqtyPer / Dataset.Value("Qty_ per Unit of Measure")

                '                    If LotQuantity >= LotQuantityRemain Then
                'Insert2WOComponent(LineDataset, DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"), LotQuantityRemain, SourceCode, WorkShop, LotDS.Rows(j)("Location Code"), 100 + j, CurrencyFactor)
                '                    Else
                '                        Insert2WOComponent(LineDataset, DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"), LotQuantity, SourceCode, WorkShop, LotDS.Rows(j)("Location Code"), 100 + j, CurrencyFactor)
                '                        LotQuantityRemain -= LotQuantity 'LotQty * LotqtyPer  / Dataset.Value("Qty_ per Unit of Measure")
                '                    End If
                '                Next
                '            End If

                '        Else ' Ton lot khong du
                '            WorkSession.MsgML("Item Lot No_ is not enough to supply !")
                '            Continue For
                '        End If
                '    End If

                Dim qty As Integer = DTSource.Rows(i)("QtyToShip")
                'Dim DocumentNo As String = rOrder("No_")

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                q.And("Document Type").Is(7)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(7)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(7)
                    queryDelete.Execute()

                    queryDelete = Query.Delete("Document Entry Buffer")
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Type").Is(7)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = LogisticsNo_
                    insert.Fields("Logistics No_") = LogisticsNo_ 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Reference No_") = externaldocumentno
                    insert.Fields("Location Code") = LocationCode ' DTSource.Rows(i)("LocationCode")
                    insert.Fields("Source Code") = SourceCode
                    insert.Fields("Responsibility Center") = WorkShop
                    insert.Fields("Document Type") = 7 ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If

                'Dim insertLine As Query = Query.Entity("Document Entry Buffer").Insert

                'insertLine.Fields("Type") = 7
                'insertLine.Fields("Document No_") = DocumentNo
                'insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                ''insertLine.Fields("Item Variant") = DTSource.Rows(i)("VariantCode")
                'insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo")
                'insertLine.Fields("Quantity") = DTSource.Rows(i)("QtyToShip")
                'insertLine.Fields("Unit Of Measure") = DTSource.Rows(i)("UOM")
                'insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("QtyPer")
                'insertLine.Fields("Login ID") = Framework.UserID
                '' insertLine.Fields("System Date") = Now()

                'insertLine.Fields("External Document No_") = ExternalDocumentNo
                ''insertLine.Fields("Your Reference") = ""
                'insertLine.Fields("Source Code") = SourceCode
                'insertLine.Fields("Responsibility Center") = WorkShop
                ''insertLine.Fields("QRCode") = ""
                'insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                'insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFGDate")
                ''insertLine.Fields("Serial No_") = ""
                ''insertLine.Fields("Work Shift No_") = ""
                ''insertLine.Fields("Work Center") = ""
                ''insertLine.Fields("Qty Unit Of Measure") = 0
                ''insertLine.Fields("Blocked") = 0
                'insertLine.Fields("Number No_") = DTSource.Rows(i)("QtyToShip")
                'insertLine.Fields("Description") = ""
                ''insertLine.Fields("Post QRCode Entry") = 1
                'insertLine.Fields("Status") = 1
                ''insertLine.Fields("Kit") =  IIf(DTSource.Rows(i)("QtyPer") > 1, 1, 0)
                'insertLine.Fields("Location Code") = LocationCode ' DTSource.Rows(i)("LocationCode")
                'insertLine.Execute()

                'insert line
                Dim insertLine As Query = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To qty - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Document Type") = 7
                    insertLine.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = WorkShop ' ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = LocationCode ' DTSource.Rows(i)("LocationCode") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next

                'Next

                'Query.EndTransaction()
                ''Doc lai bien session chua ID cua entity cha A
                'Dim parentID As String = WorkSession.Read("parentEntityID")
                ''Now refresh parent
                'Framework.RefreshSource(parentID)
                'WorkSession.Client.Close()




            Next

            Query.EndTransaction()
            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)
            WorkSession.Client.Close()

            Framework.OpenEntity("Document Entry Header Shipped WO", String.Format("[No_]=N'{0}' and [DOcument Type]=7", DocumentNo))


        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Shared Sub ProductionOrderPutInQRCodeOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        Dim Status As Integer = rOrder("Status")
        If Status < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If

        If Status > 8 Then
            WorkSession.MsgML("Cannot modify the Order as process status!")
            Return
        End If

        If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        Dim OrderTable As String = sender.TableName

        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim q As Query = Query.From(LineControler.TableName).Transaction(True)
        q.Where("Prod_ Order No_").Is(rOrder("No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("WorkOrderPutInQRCode")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = LineTable
            parameters("TableName") = OrderTable
            parameters("DocumentNo") = r("No_")
            parameters("ExternalDocumentNo") = r("External Document No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("StartingDate") = r("Starting Date")
            parameters("EndingDate") = r("Ending Date")
            parameters("DueDate") = r("Due Date")
            parameters("CurrencyCode") = r("Currency Code")
            parameters("CurrencyFactor") = r("Currency Factor")
            parameters("SourceCode") = r("Source Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")
            parameters("LocationCode") = r("Location Code")
        End If


        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow

            Myrow("No_") = OrderLine.Rows(i)("Item No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("Item No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("Item No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("LotNo") = OrderLine.Rows(i)("Lot No_")
            Myrow("MFGDate") = OrderLine.Rows(i)("Ending Date")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Due Date")
            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure Code")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("Quantity") = OrderLine.Rows(i)("Remaining Quantity")
            Myrow("QuantityReceived") = OrderLine.Rows(i)("Finished Quantity")
            Myrow("QtyToReceive") = OrderLine.Rows(i)("Remaining Quantity")
            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 8
        gridView.FixColumnCount = 11
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub WorkOrderPutInQRCodeEdit(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim OrderTable As String = sender.GetParameter("TableName")
        Dim LineTable As String = sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        Dim EndingDate As Date = sender.GetParameter("EndingDate")
        Dim StartingDate As Date = sender.GetParameter("StartingDate")
        Dim DueDate As Date = sender.GetParameter("DueDate")
        Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        Dim SourceCode As String = sender.GetParameter("SourceCode")
        Dim WorkShop As String = sender.GetParameter("ResponsibilityCenter")
        Dim LocationCode As String = sender.GetParameter("LocationCode")
        Dim DTSource As DataTable = WorkSession.Client.DataSource

        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update(OrderTable)
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.Fields("External Document No_") = ExternalDocumentNo
            updateOrder.Fields("Posting Date") = PostingDate
            updateOrder.Fields("Starting Date") = StartingDate
            updateOrder.Fields("Ending Date") = EndingDate
            updateOrder.Fields("Due Date") = DueDate
            updateOrder.Fields("Currency Code") = CurrencyCode
            updateOrder.Fields("Currency Factor") = CurrencyFactor
            updateOrder.Fields("Login ID") = Framework.UserID
            updateOrder.Fields("Status") = 7 'KSC Issue Approve
            updateOrder.Execute()

            Dim LogisticsNo As String = ""

            Dim queryseries As Query = Query.From("Number Sequence")
            If queryseries.Value("WOIssue") <> "" Then
                Dim SaleSequence As String = queryseries.Value("WOIssue")

                queryseries = Query.From("No_ Series Line").Transaction(True)
                queryseries.WhereAs("Series Code") = SaleSequence
                queryseries.WhereAs("Source Code") = SourceCode
                If WorkShop <> "" Then
                    queryseries.WhereAs("Responsibility Center") = WorkShop
                End If
                queryseries.OrderBy("Code")

                If queryseries.RecordCount <> 0 Then
                    Dim SeriesRowID As Integer = queryseries.Value("RowID")

                    Dim StartDocPrefix As String = queryseries.Value("Starting No_")
                    Dim LastClientUsed As Integer = queryseries.Value("Last No_ Used")
                    Dim IncByNo As Integer = queryseries.Value("Increment-By No_")
                    Dim EndNo_ As Integer = queryseries.Value("Ending No_")
                    LastClientUsed = LastClientUsed + IncByNo

                    LogisticsNo = StartDocPrefix & FormatDocumentNumber(EndNo_, LastClientUsed)

                End If

            End If


            For i As Integer = 0 To DTSource.Rows.Count - 1
                Dim updateLine As Query = Query.Update(LineTable)
                updateLine.WhereAs("Prod_ Order No_") = DocumentNo
                updateLine.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")

                updateLine.Fields("Status") = 7
                updateLine.Fields("Quantity") = DTSource.Rows(i)("QtyToReceive")
                updateLine.Fields("Receipt No_") = LogisticsNo
                updateLine.Execute()
                'Dim Dataset As Query = Query.From("Transfer Order Line").Transaction(True)

                'Dataset.Where("Document No_").Is(DocumentNo)
                'Dataset.And("Outstanding Quantity").GreaterThan(0)
                'Dataset.And("Line No_").Is(DTSource.Rows(i)("LineNo_"))
                'Dataset.And("No_").Is(DTSource.Rows(i)("No_"))

                ''Dim qty As Integer = 1
                ''Dim UOM As String = Dataset.Value("Unit of Measure Code")
                ''Dim QTYPER As Integer = Dataset.Value("Qty_ per Unit of Measure")

                'If Dataset.RecordCount <= 0 Then Continue For


                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim qq As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                qq.Where("No_").Is(DocumentNo)
                qq.And("Document Type").Is(6)

                Dim Status As Integer = qq.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(6)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(6)
                    queryDelete.Execute()

                    queryDelete = Query.Delete("QRCode Buffer")
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Type").Is(6)
                    queryDelete.Execute()

                End If

                'If Status <> 0 Then
                '    Return
                'End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = LogisticsNo
                    insert.Fields("Logistics No_") = LogisticsNo  'rOrder("Sell-to Customer No_")
                    'insert.Fields("Reference No_") = ExternalDocumentNo
                    insert.Fields("Document Type") = 6
                    insert.Fields("Location Code") = LocationCode 'DTSource.Rows(i)("LocationCode")
                    insert.Fields("Source Code") = SourceCode
                    insert.Fields("Responsibility Center") = WorkShop

                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If

                'insert line
                Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert

                insertLine.Fields("Type") = 6
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                'insertLine.Fields("Item Variant") = ""
                insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo")
                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM")
                insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("QtyPer")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("QtyToReceive")

                insertLine.Fields("Login ID") = Framework.UserID
                'insertLine.Fields("System Date") = Now()
                'insertLine.Fields("URL") = ""
                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Your Reference") = ExternalDocumentNo
                insertLine.Fields("Source Code") = SourceCode
                insertLine.Fields("Responsibility Center") = WorkShop
                'insertLine.Fields("QRCode") = ""
                insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFGDate")
                'insertLine.Fields("Serial No_") = ""
                'insertLine.Fields("Work Shift No_") = ""
                'insertLine.Fields("Work Center") = ""
                'insertLine.Fields("Entry No_") = 0
                'insertLine.Fields("Blocked") = 0
                insertLine.Fields("Number No_") = DTSource.Rows(i)("QtyToReceive")
                insertLine.Fields("Description") = ""
                insertLine.Fields("Post QRCode Entry") = 1
                insertLine.Fields("Status") = 1
                insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("QtyPer") > 1, 1, 0)
                insertLine.Fields("Location Code") = LocationCode ' DTSource.Rows(i)("LocationCode1")
                insertLine.Execute()

                insertLine = Query.Entity(TableDocumentEntry).Insert

                Dim qqq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qqq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("QtyToReceive") - 1
                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Document Type") = 6
                    insertLine.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = WorkShop  ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = LocationCode 'DTSource.Rows(i)("LocationCode1") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFGDate")

                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("LotNo")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("UOM") 'UOM
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("QtyPer")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    insertLine.Fields("Quantity") = 1
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()
                Next

                EntryNo += 1

            Next

            Query.EndTransaction()
            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)
            WorkSession.Client.Close()

            Framework.OpenEntity("QRCode Generation", String.Format("[Document No_]=N'{0}' and [Type]= 6", DocumentNo))

            'Next

            'Dim Update As Query = Query.Update(OrderTable)
            'Update.Where("No_").Is(DocumentNo)
            'Update.Fields("Status") = 7 'KSC Issue Approve
            'Update.Execute()

            'Query.EndTransaction()
            ''Doc lai bien session chua ID cua entity cha A
            'Dim parentID As String = WorkSession.Read("parentEntityID")
            ''Now refresh parent
            'Framework.RefreshSource(parentID)
            'WorkSession.Client.Close()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    'Public Function CheckOrderQRCodeInit(Order As String, Logistics As String, PickingNo As String, Type As Integer) As Integer
    '    Dim SS As Integer = 0

    '    'If Logistics <> "" Then
    '    Dim q As Query = Query.From("Document Entry Header").Transaction(True)
    '    q = Query.From("Document Entry Header").Transaction(True)
    '    q.Where("No_").Is(Order)
    '    q.And("Logistics No_").IsNot("")
    '    q.And("Picking No_").Is(PickingNo)
    '    q.And("Document Type").Is(Type)
    '    'q.And("Status").GreaterThan(0)
    '    If q.RecordCount > 0 Then
    '        SS = 1
    '    End If

    '    Select Case Type
    '        Case 0, 6, 14, 16, 18
    '            Dim qq = Query.Delete("QRCode Buffer")
    '            qq.Where("Document No_").Is(Order)
    '            qq.And("Logistics No_").Is(Logistics)
    '            'qq.And("Picking No_").Is(PickingNo)
    '            qq.And("Type").Is(Type)
    '            qq.execute

    '    End Select

    '    Return SS
    'End Function

    ''For datalink Item Order Header
    'Public Sub PurchaseOrderQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

    '    Dim rOrder As Hashtable = sender.CurrentRow
    '    'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
    '    If rOrder Is Nothing Or rOrder.Count = 0 Then
    '        WorkSession.MsgML("Empty !")
    '        Return
    '    End If
    '    If CheckOrderQRCodeInit(rOrder("No_"), rOrder("Logistics No_"), rOrder("Picking No_"), 0) = 1 Then
    '        WorkSession.MsgML("Already Init !")
    '        Return
    '    End If

    '    Dim ExternalDocumentNo As String = rOrder("External Document No_")
    '    Dim PostingDate As Date = rOrder("Posting Date")
    '    Dim EndingDate As Date = rOrder("Posting Date")
    '    Dim StartingDate As Date = rOrder("Posting Date")
    '    Dim DueDate As Date = rOrder("Posting Date")
    '    Dim CurrencyCode As String = rOrder("Currency Code")
    '    Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
    '    Dim SourceCode As String = rOrder("Source Code")
    '    Dim ResponsibilityCenter As String = rOrder("Responsibility Center")
    '    Dim LocationCode As String = rOrder("Location Code")
    '    Dim DocumentNo As String = rOrder("No_")
    '    Dim LogisticsNo As String = rOrder("Logistics No_")
    '    Dim PickingNo As String = rOrder("Picking No_")
    '    Dim PackingList As String = "" ' rOrder("Packing List")

    '    If LogisticsNo = "" Then LogisticsNo = DocumentNo
    '    ''lấy series
    '    If LogisticsNo = "" Then LogisticsNo = GetandUpdateSeriesNumber("WhsReceipt", "", SourceCode, ResponsibilityCenter, LocationCode, PackingList)


    '    Dim qqq As Query = Query.From("Logistics Purchase Order")
    '    qqq.Where("Document No_").Is(DocumentNo)
    '    'qqq.And("Logistics No_").Is(LogisticsNo)
    '    qqq.And("Document Type").Is(0)
    '    Dim DTSource As DataTable = qqq.ToTable

    '    Try
    '        Query.BeginTransaction()

    '        For i As Integer = 0 To DTSource.Rows.Count - 1

    '            Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert
    '            insertLine.Fields("Type") = 0
    '            insertLine.Fields("Source Type") = 3 'NCC

    '            insertLine.Fields("Document No_") = DocumentNo
    '            insertLine.Fields("Logistics No_") = LogisticsNo
    '            insertLine.Fields("Picking No_") = IIf(PackingList = "", LogisticsNo, PackingList)
    '            insertLine.Fields("Packing List") = PackingList
    '            insertLine.Fields("External Document No_") = ExternalDocumentNo
    '            insertLine.Fields("Your Reference") = insertLine.Fields("Picking No_")
    '            insertLine.Fields("Source Code") = SourceCode
    '            insertLine.Fields("Responsibility Center") = ResponsibilityCenter
    '            insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code")

    '            insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
    '            insertLine.Fields("Item Variant") = DTSource.Rows(i)("Variant Code")

    '            insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
    '            insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("Lot No_")
    '            insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
    '            insertLine.Fields("Real Expired Date") = DTSource.Rows(i)("Expiration Date")

    '            insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure")
    '            insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
    '            insertLine.Fields("Quantity") = DTSource.Rows(i)("Qty_ to Receive")

    '            insertLine.Fields("Login ID") = Framework.UserID
    '            'insertLine.Fields("System Date") = Now()
    '            'insertLine.Fields("URL") = ""

    '            'insertLine.Fields("QRCode") = ""
    '            'insertLine.Fields("Serial No_") = ""

    '            insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFG Date")
    '            'insertLine.Fields("Work Shift No_") = DTSource.Rows(i)("Work Shift No_")
    '            'insertLine.Fields("Work Center") = DTSource.Rows(i)("Work Center")
    '            'insertLine.Fields("Entry No_") = 0
    '            'insertLine.Fields("Blocked") = 0
    '            insertLine.Fields("Number No_") = DTSource.Rows(i)("Qty_ to Receive")
    '            insertLine.Fields("Description") = ExternalDocumentNo

    '            insertLine.Fields("Post QRCode Entry") = 1
    '            insertLine.Fields("Status") = 0
    '            insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("Qty_ per Unit of Measure") > 1, 1, 0)
    '            insertLine.Fields("Parent") = IIf(DTSource.Rows(i)("Qty_ per Unit of Measure") > 1, 1, 0)

    '            insertLine.Execute()


    '        Next

    '        Query.EndTransaction()

    '        Framework.OpenEntity("QRCode Generation", String.Format("[Document No_]=N'{0}' and [Type]=0", DocumentNo))

    '    Catch ex As Exception
    '        Query.RollBack()
    '        WorkSession.MsgML(ex.ToString)
    '    End Try

    'End Sub

    Public Sub SalesOrderQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If CheckOrderQRCodeInit(rOrder("No_"), rOrder("Logistics No_"), rOrder("Picking No_"), 1) = 1 Then
            WorkSession.MsgML("Already Init !")
            Return
        End If

        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting Date")
        Dim EndingDate As Date = rOrder("Posting Date")
        Dim StartingDate As Date = rOrder("Posting Date")
        Dim DueDate As Date = rOrder("Posting Date")
        Dim CurrencyCode As String = rOrder("Currency Code")
        Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
        Dim SourceCode As String = rOrder("Source Code")
        Dim ResponsibilityCenter As String = rOrder("Responsibility Center")
        Dim LocationCode As String = rOrder("Location Code")

        Dim DocumentNo As String = rOrder("No_")
        Dim LogisticsNo As String = rOrder("Logistics No_")
        Dim PickingNo As String = rOrder("Picking No_")
        Dim PackingList As String = "" ' rOrder("Packing List")

        If LogisticsNo = "" Then LogisticsNo = DocumentNo

        ''lấy và cập nhật series
        If LogisticsNo = "" Then LogisticsNo = GetandUpdateSeriesNumber("WhsShipment", "", SourceCode, ResponsibilityCenter, LocationCode, PackingList)

        Dim qqq As Query = Query.From("Logistics Sales Order")
        qqq.Where("Document No_").Is(DocumentNo)
        'qqq.And("Logistics No_").Is(LogisticsNo)
        qqq.And("Document Type").Is(1)
        Dim DTSource As DataTable = qqq.ToTable

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                'q.And("Packing List").Is(PackingList)
                q.And("Document Type").Is(1)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(1)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(1)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = PackingList

                    insert.Fields("Logistics No_") = logisticsNo 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                    insert.Fields("Location Code") = LocationCode
                    insert.Fields("Source Code") = SourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter
                    insert.Fields("Document Type") = 1 ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If


                ''insert line
                Dim insertLine As Query = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Quantity") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo

                    insertLine.Fields("Picking No_") = PackingList
                    insertLine.Fields("Logistics No_") = logisticsNo

                    insertLine.Fields("Document Type") = 1
                    insertLine.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFG Date")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next



            Next

            Query.EndTransaction()

            Framework.OpenEntity("Document Entry Header SO", String.Format("[No_]=N'{0}' and [Document Type]=1", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub TOPickQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        Dim Doctype As Integer = rOrder("Document Type")
        If Doctype < 10 Then Doctype = 5

        If CheckOrderQRCodeInit(rOrder("No_"), rOrder("Logistics No_"), rOrder("Picking No_"), Doctype) = 1 Then
            WorkSession.MsgML("Already Init !")
            Return
        End If

        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting Date")
        Dim EndingDate As Date = rOrder("Posting Date")
        Dim StartingDate As Date = rOrder("Posting Date")
        Dim DueDate As Date = rOrder("Posting Date")
        Dim CurrencyCode As String = rOrder("Currency Code")
        Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
        Dim SourceCode As String = rOrder("From Source Code")
        Dim ResponsibilityCenter As String = rOrder("From Responsibility Center")
        Dim LocationCode As String = rOrder("From Location Code")

        Dim DocumentNo As String = rOrder("No_")
        Dim LogisticsNo As String = rOrder("Logistics No_")
        Dim PickingNo As String = rOrder("Picking No_")
        Dim PackingList As String = "" ' rOrder("Packing List")
        If LogisticsNo = "" Then LogisticsNo = DocumentNo

        ''lấy và cập nhật series
        If LogisticsNo = "" Then LogisticsNo = GetandUpdateSeriesNumber("TransferShipment", "", SourceCode, ResponsibilityCenter, LocationCode, PackingList)

        Dim qqq As Query = Query.From("Logistics Transfer Order")
        qqq.Where("Document No_").Is(DocumentNo)
        'qqq.And("PackingList").Is(PackingList)
        'qqq.And("Logistics No_").Is(LogisticsNo)
        qqq.And("Document Type").Is(Doctype)
        Dim DTSource As DataTable = qqq.ToTable

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(Doctype)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.And("Document Type").Is(Doctype)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.And("Document Type").Is(Doctype)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = logisticsNo
                    insert.Fields("Logistics No_") = logisticsNo 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                    insert.Fields("Location Code") = LocationCode
                    insert.Fields("Source Code") = SourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter

                    insert.Fields("From Source Code") = rOrder("From Source Code")
                    insert.Fields("From Responsibility Center") = rOrder("From Responsibility Center")
                    insert.Fields("From Location Code") = rOrder("From Location Code")
                    insert.Fields("To Source Code") = rOrder("To Source Code")
                    insert.Fields("To Responsibility Center") = rOrder("To Responsibility Center")
                    insert.Fields("To Location Code") = rOrder("To Location Code")

                    insert.Fields("Document Type") = Doctype ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If


                ''insert line
                Dim insertLine As Query = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Quantity") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo

                    insertLine.Fields("Packing List") = PackingList
                    insertLine.Fields("Logistics No_") = logisticsNo 'rOrder("Sell-to Customer No_")

                    insertLine.Fields("Document Type") = Doctype
                    insertLine.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("From Location Code") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure Code")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("Item No_")
                    'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFG Date")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next



            Next

            Query.EndTransaction()

            Framework.OpenEntity("Document Entry Header Shipped TO", String.Format("[No_]=N'{0}' and [Document Type]={1}", DocumentNo, Doctype))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub TOPutQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        Dim Doctype As Integer = rOrder("Document Type")
        If Doctype < 11 Then Doctype = 4

        If CheckOrderQRCodeInit(rOrder("No_"), rOrder("Logistics No_"), rOrder("Picking No_"), Doctype) = 1 Then
            WorkSession.MsgML("Already Init !")
            Return
        End If

        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting Date")
        Dim EndingDate As Date = rOrder("Posting Date")
        Dim StartingDate As Date = rOrder("Posting Date")
        Dim DueDate As Date = rOrder("Posting Date")
        Dim CurrencyCode As String = rOrder("Currency Code")
        Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
        Dim SourceCode As String = rOrder("To Source Code")
        Dim ResponsibilityCenter As String = rOrder("To Responsibility Center")
        Dim LocationCode As String = rOrder("To Location Code")

        Dim DocumentNo As String = rOrder("No_")
        Dim LogisticsNo As String = rOrder("Logistics No_")
        Dim PickingNo As String = rOrder("Picking No_")
        Dim PackingList As String = "" ' rOrder("Packing List")

        If LogisticsNo = "" Then LogisticsNo = DocumentNo
        ''lấy series
        LogisticsNo = GetandUpdateSeriesNumber("TransferReceipt", "", SourceCode, ResponsibilityCenter, LocationCode, PackingList)

        Dim qqq As Query = Query.From("Logistics Transfer Order")
        qqq.Where("Document No_").Is(DocumentNo)
        'qqq.And("Logistics No_").Is(LogisticsNo)
        'qqq.And("Packing List").Is(PackingList)
        qqq.And("Document Type").Is(DocType)
        Dim DTSource As DataTable = qqq.ToTable
        Dim insert As Query

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                q.And("Document Type").Is(Doctype)
                q.And("Logistics No_").Is(LogisticsNo)
                'q.And("Packing List").Is(PackingList)
                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(Doctype)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.And("Document Type").Is(Doctype)
                    queryDelete.Execute()

                    'queryDelete = Query.Delete("QRCode Buffer")
                    'queryDelete.Where("Document No_").Is(DocumentNo)
                    'queryDelete.And("Type").Is(4)
                    'queryDelete.Execute()
                End If


                'insert header
                If i = 0 Then
                    insert = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = PackingList
                    insert.Fields("Packing List") = PackingList
                    insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")

                    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                    insert.Fields("Location Code") = DTSource.Rows(i)("To Location Code")
                    insert.Fields("Source Code") = SourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter

                    insert.Fields("From Source Code") = rOrder("From Source Code")
                    insert.Fields("From Responsibility Center") = rOrder("From Responsibility Center")
                    insert.Fields("From Location Code") = rOrder("From Location Code")
                    insert.Fields("To Source Code") = rOrder("To Source Code")
                    insert.Fields("To Responsibility Center") = rOrder("To Responsibility Center")
                    insert.Fields("To Location Code") = rOrder("To Location Code")

                    'insert.Fields("From Source Code") = SourceCode
                    'insert.Fields("From Responsibility Center") = ResponsibilityCenter
                    'insert.Fields("From Location Code") = DTSource.Rows(i)("To Location Code")
                    'insert.Fields("To Source Code") = SourceCode
                    'insert.Fields("To Responsibility Center") = ResponsibilityCenter
                    'insert.Fields("To Location Code") = DTSource.Rows(i)("To Location Code")

                    insert.Fields("Document Type") = Doctype ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If

                If Doctype >= 14 Then
                    Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert
                    insertLine.Fields("Type") = Doctype
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Logistics No_") = LogisticsNo
                    insertLine.Fields("Picking No_") = IIf(PackingList = "", LogisticsNo, PackingList)
                    insertLine.Fields("Packing List") = PackingList

                    insertLine.Fields("Item No_") = DTSource.Rows(i)("Item No_")
                    insertLine.Fields("Item Variant") = ""
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure Code")
                    insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Quantity") = DTSource.Rows(i)("Qty_ to Receive")

                    insertLine.Fields("Login ID") = Framework.UserID
                    'insertLine.Fields("System Date") = Now()
                    'insertLine.Fields("URL") = ""
                    insertLine.Fields("External Document No_") = ExternalDocumentNo
                    insertLine.Fields("Your Reference") = ExternalDocumentNo
                    insertLine.Fields("Source Code") = SourceCode
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                    'insertLine.Fields("QRCode") = ""
                    'insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                    'insertLine.Fields("Mfg Date") = DTSource.Rows(i)("ExpiredDate")
                    'insertLine.Fields("Serial No_") = ""
                    'insertLine.Fields("Work Shift No_") = ""
                    'insertLine.Fields("Work Center") = ""
                    'insertLine.Fields("Entry No_") = 0
                    'insertLine.Fields("Blocked") = 0
                    insertLine.Fields("Number No_") = DTSource.Rows(i)("Qty_ to Receive")
                    insertLine.Fields("Description") = ""
                    insertLine.Fields("Post QRCode Entry") = 1
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("Qty_ per Unit of Measure") > 1, 1, 0)
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("To Location Code")
                    insertLine.Execute()
                End If

                ''insert line
                insert = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Qty_ To Receive") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insert.Fields("Entry No_") = EntryNo
                    insert.Fields("Document No_") = DocumentNo

                    insert.Fields("Packing List") = PackingList
                    insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")

                    insert.Fields("Document Type") = Doctype
                    insert.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                    insert.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insert.Fields("Location Code") = DTSource.Rows(i)("To Location Code") ''rOrder("Location Code")
                    insert.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insert.Fields("Status") = 0
                    insert.Fields("User ID") = Framework.UserID
                    insert.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insert.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure Code")
                    insert.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insert.Fields("Line No_") = k
                    insert.Fields("Item No_") = DTSource.Rows(i)("Item No_")

                    insert.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insert.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                    insert.Fields("MFG Date") = DTSource.Rows(i)("MFG Date")
                    insert.Fields("Quantity") = 1 'r("Quantity")
                    insert.Fields("Scan Number") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()

                    EntryNo += 1
                Next

            Next

            Query.EndTransaction()

            Framework.OpenEntity("Document Entry Header Receipt TO", String.Format("[No_]=N'{0}' and [Document Type]= {1}", DocumentNo, Doctype))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub WOPickQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If CheckOrderQRCodeInit(rOrder("No_"), rOrder("Logistics No_"), rOrder("Picking No_"), 7) = 1 Then
            WorkSession.MsgML("Already Init !")
            Return
        End If

        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting Date")
        Dim EndingDate As Date = rOrder("Posting Date")
        Dim StartingDate As Date = rOrder("Posting Date")
        Dim DueDate As Date = rOrder("Posting Date")
        Dim CurrencyCode As String = rOrder("Currency Code")
        Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
        Dim SourceCode As String = rOrder("Source Code")
        Dim ResponsibilityCenter As String = rOrder("Responsibility Center")
        Dim LocationCode As String = rOrder("RM Location Code")

        Dim DocumentNo As String = rOrder("No_")
        Dim LogisticsNo As String = rOrder("Logistics No_")
        Dim PickingNo As String = rOrder("Picking No_")
        Dim PackingList As String = "" ' rOrder("Packing List")

        If LogisticsNo = "" Then LogisticsNo = DocumentNo
        ''lấy và cập nhật series
        If LogisticsNo = "" Then LogisticsNo = GetandUpdateSeriesNumber("WOConsumption", "", SourceCode, ResponsibilityCenter, LocationCode, PackingList)

        Dim qqq As Query = Query.From("Logistics Production Order Component")
        qqq.Where("Prod_ Order No_").Is(DocumentNo)
        'qqq.And("Logistics No_").Is(LogisticsNo)
        qqq.And("Document Type").Is(7)
        Dim DTSource As DataTable = qqq.ToTable

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                'q.And("Packing List").Is(PackingList)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(7)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(7)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.And("Document Type").Is(7)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = PackingList

                    insert.Fields("Packing List") = PackingList
                    insert.Fields("Logistics No_") = logisticsNo 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                    insert.Fields("Location Code") = LocationCode
                    insert.Fields("Source Code") = SourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter
                    insert.Fields("Document Type") = 7 ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If


                ''insert line
                Dim insertLine As Query = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Remaining Quantity") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo

                    insertLine.Fields("Packing List") = PackingList
                    insertLine.Fields("Logistics No_") = logisticsNo 'rOrder("Sell-to Customer No_")

                    insertLine.Fields("Document Type") = 7
                    insertLine.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure Code")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("Item No_")
                    'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("Due Date")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFG Date")
                    'insertLine.Fields("Work Shift No_") = DTSource.Rows(i)("Work Shift Code")
                    'insertLine.Fields("Work Center") = DTSource.Rows(i)("Work Center")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next



            Next

            Query.EndTransaction()

            Framework.OpenEntity("Document Entry Header Shipped WO", String.Format("[No_]=N'{0}' and [Document Type]=7", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub WOPutQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If CheckOrderQRCodeInit(rOrder("No_"), rOrder("Logistics No_"), rOrder("Picking No_"), 6) = 1 Then
            WorkSession.MsgML("Already Init !")
            Return
        End If

        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting Date")
        Dim EndingDate As Date = rOrder("Posting Date")
        Dim StartingDate As Date = rOrder("Posting Date")
        Dim DueDate As Date = rOrder("Posting Date")
        Dim CurrencyCode As String = rOrder("Currency Code")
        Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
        Dim SourceCode As String = rOrder("Source Code")
        Dim ResponsibilityCenter As String = rOrder("Responsibility Center")
        Dim LocationCode As String = rOrder("Location Code")

        Dim DocumentNo As String = rOrder("No_")
        Dim LogisticsNo As String = rOrder("Logistics No_")
        Dim PickingNo As String = rOrder("Picking No_")
        Dim PackingList As String = "" ' rOrder("Packing List")

        If LogisticsNo = "" Then LogisticsNo = DocumentNo
        ''lấy series
        If LogisticsNo = "" Then LogisticsNo = GetandUpdateSeriesNumber("WOIssue", "", SourceCode, ResponsibilityCenter, LocationCode, PackingList)

        Dim qqq As Query = Query.From("Logistics Production Order")
        qqq.Where("Prod_ Order No_").Is(DocumentNo)
        qqq.And("Logistics No_").Is(LogisticsNo)
        qqq.And("Document Type").Is(6)
        'qqq.And("Logistics No_").Is(LogisticsNo)
        'qqq.And("Packing List").Is(PackingList)
        'qqq.And("Document Type").Is(DocType)
        Dim DTSource As DataTable = qqq.ToTable

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To DTSource.Rows.Count - 1
                Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert
                insertLine.Fields("Type") = 6
                insertLine.Fields("Source Type") = 4 'TP
                insertLine.Fields("Source No_") = DTSource.Rows(i)("Item No_")

                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Picking No_") = IIf(PackingList = "", LogisticsNo, PackingList)
                insertLine.Fields("Packing List") = PackingList

                insertLine.Fields("Item No_") = DTSource.Rows(i)("Item No_")
                insertLine.Fields("Item Variant") = DTSource.Rows(i)("Variant Code")

                insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("Lot No_")
                insertLine.Fields("Real Expired Date") = DTSource.Rows(i)("Expiration Date")

                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure Code")
                insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("Remaining Quantity")

                insertLine.Fields("Login ID") = Framework.UserID

                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Your Reference") = ExternalDocumentNo
                insertLine.Fields("Source Code") = SourceCode
                insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code")

                'insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFG Date")
                insertLine.Fields("Work Shift No_") = DTSource.Rows(i)("Work Shift Code")
                insertLine.Fields("Work Center") = DTSource.Rows(i)("Work Center")

                insertLine.Fields("Number No_") = DTSource.Rows(i)("Remaining Quantity")
                insertLine.Fields("Description") = DocumentNo + ExternalDocumentNo
                insertLine.Fields("Post QRCode Entry") = 1
                insertLine.Fields("Status") = 0
                insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("Qty_ per Unit of Measure") > 1, 1, 0)
                insertLine.Fields("Parent") = IIf(DTSource.Rows(i)("Qty_ per Unit of Measure") > 1, 1, 0)

                insertLine.Execute()

                'Dim TableDocumentEntryHeader As String = "Document Entry Header"
                'Dim TableDocumentEntry As String = "Document Entry"

                'Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                'q.Where("No_").Is(DocumentNo)
                'q.And("Document Type").Is(6)

                'Dim Status As Integer = q.Value("Status")

                ''chua quet ma QRCode
                'If Status = 0 And i = 0 Then
                '    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                '    queryDelete.Where("No_").Is(DocumentNo)
                '    queryDelete.And("Document Type").Is(6)
                '    queryDelete.Execute()

                '    queryDelete = Query.Delete(TableDocumentEntry)
                '    queryDelete.Where("Document No_").Is(DocumentNo)
                '    queryDelete.And("Document Type").Is(6)
                '    queryDelete.Execute()

                '    queryDelete = Query.Delete("QRCode Buffer")
                '    queryDelete.Where("Document No_").Is(DocumentNo)
                '    queryDelete.And("Type").Is(6)
                '    queryDelete.Execute()
                'End If


                ''insert header
                'If i = 0 Then
                '    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                '    insert.Fields("No_") = DocumentNo
                '    insert.Fields("Picking No_") = LogisticsNo
                '    insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")
                '    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                '    insert.Fields("Location Code") = LocationCode
                '    insert.Fields("Source Code") = SourceCode
                '    insert.Fields("Responsibility Center") = ResponsibilityCenter
                '    insert.Fields("Document Type") = 6 ' rOrder("Bill-to Customer Template Code")
                '    insert.Fields("Posting Date") = PostingDate
                '    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                '    insert.Fields("Status") = 0
                '    insert.Fields("Backend") = 1
                '    insert.Execute()
                'End If



                ''insert line
                'insertLine = Query.Entity(TableDocumentEntry).Insert

                'Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                'Dim EntryNo As Integer = qq.Value("EntryNo")

                'For k As Integer = 0 To DTSource.Rows(i)("Remaining Quantity") - 1
                '    'Dim r As DataRow = Orderline.TakeRow(0)

                '    insertLine.Fields("Entry No_") = EntryNo
                '    insertLine.Fields("Document No_") = DocumentNo
                '    insertLine.Fields("Document Type") = 6
                '    insertLine.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                '    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                '    insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code") ''rOrder("Location Code")
                '    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                '    insertLine.Fields("Status") = 0
                '    insertLine.Fields("User ID") = Framework.UserID
                '    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                '    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure Code")
                '    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                '    insertLine.Fields("Line No_") = k
                '    insertLine.Fields("Item No_") = DTSource.Rows(i)("Item No_")
                '    'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                '    insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                '    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFG Date")
                '    'insertLine.Fields("Work Shift No_") = DTSource.Rows(i)("Work Shift Code")
                '    'insertLine.Fields("Work Center") = DTSource.Rows(i)("Work Center")
                '    insertLine.Fields("Quantity") = 1 'r("Quantity")
                '    insertLine.Fields("Scan Number") = 0
                '    insertLine.Fields("Backend") = 1
                '    insertLine.Execute()

                '    EntryNo += 1
                'Next



            Next

            Query.EndTransaction()

            Framework.OpenEntity("QRCode Generation", String.Format("[Document No_]=N'{0}' and [Type]=6", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub SalesReturnedOrderQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If CheckOrderQRCodeInit(rOrder("No_"), rOrder("Logistics No_"), rOrder("Picking No_"), 10) = 1 Then
            WorkSession.MsgML("Already Init !")
            Return
        End If

        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting Date")
        Dim EndingDate As Date = rOrder("Posting Date")
        Dim StartingDate As Date = rOrder("Posting Date")
        Dim DueDate As Date = rOrder("Posting Date")
        Dim CurrencyCode As String = rOrder("Currency Code")
        Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
        Dim SourceCode As String = rOrder("Source Code")
        Dim ResponsibilityCenter As String = rOrder("Responsibility Center")
        Dim LocationCode As String = rOrder("Location Code")

        Dim DocumentNo As String = rOrder("No_")
        Dim LogisticsNo As String = rOrder("Logistics No_")
        Dim PickingNo As String = rOrder("Picking No_")
        Dim PackingList As String = "" ' rOrder("Packing List")

        If LogisticsNo = "" Then LogisticsNo = DocumentNo
        ''lấy và cập nhật series
        If LogisticsNo = "" Then LogisticsNo = GetandUpdateSeriesNumber("SaleReturn", "", SourceCode, ResponsibilityCenter, LocationCode, PackingList)

        Dim qqq As Query = Query.From("Logistics Sales Return Order")
        qqq.Where("Document No_").Is(DocumentNo)
        'qqq.And("Logistics No_").Is(LogisticsNo)
        qqq.And("Document Type").Is(10)
        'qqq.And("Packing List").Is(PackingList)
        'qqq.And("Logistics No_").Is(logisticsNo)
        'qqq.And("Document Type").Is(DocType)
        Dim DTSource As DataTable = qqq.ToTable

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                'q.And("Packing List").Is(PackingList)
                q.And("Document Type").Is(10)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(10)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(10)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = PackingList

                    insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                    insert.Fields("Location Code") = LocationCode
                    insert.Fields("Source Code") = SourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter
                    insert.Fields("Document Type") = 10 ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If


                ''insert line
                Dim insertLine As Query = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Quantity") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo

                    insertLine.Fields("Picking No_") = PackingList
                    insertLine.Fields("Logistics No_") = LogisticsNo

                    insertLine.Fields("Document Type") = 10
                    insertLine.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFG Date")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next



            Next

            Query.EndTransaction()

            Framework.OpenEntity("Document Entry Header SRO", String.Format("[No_]=N'{0}' and [Document Type]=10", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub PurchaseReturnOrderQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If CheckOrderQRCodeInit(rOrder("No_"), rOrder("Logistics No_"), rOrder("Picking No_"), 9) = 1 Then
            WorkSession.MsgML("Already Init !")
            Return
        End If

        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting Date")
        Dim EndingDate As Date = rOrder("Posting Date")
        Dim StartingDate As Date = rOrder("Posting Date")
        Dim DueDate As Date = rOrder("Posting Date")
        Dim CurrencyCode As String = rOrder("Currency Code")
        Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
        Dim SourceCode As String = rOrder("Source Code")
        Dim ResponsibilityCenter As String = rOrder("Responsibility Center")
        Dim LocationCode As String = rOrder("Location Code")

        Dim DocumentNo As String = rOrder("No_")
        Dim LogisticsNo As String = rOrder("Logistics No_")
        Dim PickingNo As String = rOrder("Picking No_")
        Dim PackingList As String = "" ' rOrder("Packing List")

        If LogisticsNo = "" Then LogisticsNo = DocumentNo

        ''lấy và cập nhật series
        If LogisticsNo = "" Then LogisticsNo = GetandUpdateSeriesNumber("PurchaseReturn", "", SourceCode, ResponsibilityCenter, LocationCode, PackingList)

        Dim qqq As Query = Query.From("Logistics Purchase Return Order")
        qqq.Where("Document No_").Is(DocumentNo)
        'qqq.And("Logistics No_").Is(LogisticsNo)
        qqq.And("Document Type").Is(9)

        'qqq.And("Packing List").Is(PackingList)
        'qqq.And("Logistics No_").Is(logisticsNo)
        'qqq.And("Document Type").Is(DocType)
        Dim DTSource As DataTable = qqq.ToTable

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                'q.And("Packing List").Is(PackingList)
                q.And("Document Type").Is(9)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(10)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(9)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = PackingList

                    insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                    insert.Fields("Location Code") = LocationCode
                    insert.Fields("Source Code") = SourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter
                    insert.Fields("Document Type") = 9 ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If


                ''insert line
                Dim insertLine As Query = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Quantity") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo

                    insertLine.Fields("Picking No_") = PackingList
                    insertLine.Fields("Logistics No_") = LogisticsNo

                    insertLine.Fields("Document Type") = 9
                    insertLine.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFG Date")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                    'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next



            Next

            Query.EndTransaction()

            Framework.OpenEntity("Document Entry Header PRO", String.Format("[No_]=N'{0}' and [Document Type]=9", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub OTOPickQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        Dim Doctype As Integer = rOrder("Document Type")
        If Doctype < 10 Then Doctype = 5

        If CheckOrderQRCodeInit(rOrder("No_"), rOrder("Logistics No_"), rOrder("Picking No_"), Doctype) = 1 Then
            WorkSession.MsgML("Already Init !")
            Return
        End If

        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting Date")
        Dim EndingDate As Date = rOrder("Posting Date")
        Dim StartingDate As Date = rOrder("Posting Date")
        Dim DueDate As Date = rOrder("Posting Date")
        Dim CurrencyCode As String = rOrder("Currency Code")
        Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
        Dim SourceCode As String = rOrder("From Source Code")
        Dim ResponsibilityCenter As String = rOrder("From Responsibility Center")
        Dim LocationCode As String = rOrder("From Location Code")

        Dim DocumentNo As String = rOrder("No_")
        Dim LogisticsNo As String = rOrder("Logistics No_")
        Dim PickingNo As String = rOrder("Picking No_")
        Dim PackingList As String = "" ' rOrder("Packing List")
        If LogisticsNo = "" Then LogisticsNo = DocumentNo

        ''lấy và cập nhật series
        If LogisticsNo = "" Then LogisticsNo = GetandUpdateSeriesNumber("TransferShipment", "", SourceCode, ResponsibilityCenter, LocationCode, PackingList)

        Dim qqq As Query = Query.From("Logistics Transfer Order")
        qqq.Where("Document No_").Is(DocumentNo)
        'qqq.And("PackingList").Is(PackingList)
        'qqq.And("Logistics No_").Is(LogisticsNo)
        qqq.And("Document Type").Is(Doctype)
        Dim DTSource As DataTable = qqq.ToTable

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(Doctype)

                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.And("Document Type").Is(Doctype)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.And("Document Type").Is(Doctype)
                    queryDelete.Execute()

                End If


                'insert header
                If i = 0 Then
                    Dim insert As Query = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = LogisticsNo
                    insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")
                    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                    insert.Fields("Location Code") = LocationCode
                    insert.Fields("Source Code") = SourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter
                    insert.Fields("Document Type") = Doctype ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If


                ''insert line
                Dim insertLine As Query = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Quantity") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insertLine.Fields("Entry No_") = EntryNo
                    insertLine.Fields("Document No_") = DocumentNo

                    insertLine.Fields("Packing List") = PackingList
                    insertLine.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")

                    insertLine.Fields("Document Type") = Doctype
                    insertLine.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("From Location Code") ''rOrder("Location Code")
                    insertLine.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("User ID") = Framework.UserID
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure Code")
                    insertLine.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Line No_") = k
                    insertLine.Fields("Item No_") = DTSource.Rows(i)("Item No_")
                    'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                    insertLine.Fields("MFG Date") = DTSource.Rows(i)("MFG Date")
                    insertLine.Fields("Quantity") = 1 'r("Quantity")
                    insertLine.Fields("Scan Number") = 0
                    insertLine.Fields("Backend") = 1
                    insertLine.Execute()

                    EntryNo += 1
                Next



            Next

            Query.EndTransaction()

            Framework.OpenEntity("Document Entry Header Shipped TO", String.Format("[No_]=N'{0}' and [Document Type]={1}", DocumentNo, Doctype))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub OTOPutQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        Dim Doctype As Integer = rOrder("Document Type")
        If Doctype < 11 Then Doctype = 4

        If CheckOrderQRCodeInit(rOrder("No_"), rOrder("Logistics No_"), rOrder("Picking No_"), Doctype) = 1 Then
            WorkSession.MsgML("Already Init !")
            Return
        End If

        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting Date")
        Dim EndingDate As Date = rOrder("Posting Date")
        Dim StartingDate As Date = rOrder("Posting Date")
        Dim DueDate As Date = rOrder("Posting Date")
        Dim CurrencyCode As String = rOrder("Currency Code")
        Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
        Dim SourceCode As String = rOrder("To Source Code")
        Dim ResponsibilityCenter As String = rOrder("To Responsibility Center")
        Dim LocationCode As String = rOrder("To Location Code")


        Dim DocumentNo As String = rOrder("No_")
        Dim LogisticsNo As String = rOrder("Logistics No_")
        Dim PickingNo As String = rOrder("Picking No_")
        Dim PackingList As String = "" ' rOrder("Packing List")

        If LogisticsNo = "" Then LogisticsNo = DocumentNo

        ''lấy series
        If LogisticsNo = "" Then LogisticsNo = GetandUpdateSeriesNumber("TransferReceipt", "", SourceCode, ResponsibilityCenter, LocationCode, PackingList)

        Dim qqq As Query = Query.From("Logistics Transfer Order")
        qqq.Where("Document No_").Is(DocumentNo)
        'qqq.And("Logistics No_").Is(LogisticsNo)
        'qqq.And("Packing List").Is(PackingList)
        qqq.And("Document Type").Is(Doctype)
        Dim DTSource As DataTable = qqq.ToTable
        Dim insert As Query

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim TableDocumentEntryHeader As String = "Document Entry Header"
                Dim TableDocumentEntry As String = "Document Entry"

                Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
                q.Where("No_").Is(DocumentNo)
                q.And("Document Type").Is(Doctype)
                q.And("Logistics No_").Is(LogisticsNo)
                'q.And("Packing List").Is(PackingList)
                Dim Status As Integer = q.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                    queryDelete.Where("No_").Is(DocumentNo)
                    queryDelete.And("Document Type").Is(Doctype)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.Execute()

                    queryDelete = Query.Delete(TableDocumentEntry)
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Logistics No_").Is(LogisticsNo)
                    queryDelete.And("Document Type").Is(Doctype)
                    queryDelete.Execute()

                    'queryDelete = Query.Delete("QRCode Buffer")
                    'queryDelete.Where("Document No_").Is(DocumentNo)
                    'queryDelete.And("Type").Is(4)
                    'queryDelete.Execute()
                End If


                'insert header
                If i = 0 Then
                    insert = Query.Entity(TableDocumentEntryHeader).Insert
                    insert.Fields("No_") = DocumentNo
                    insert.Fields("Picking No_") = PackingList
                    insert.Fields("Packing List") = PackingList
                    insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")

                    'insert.Fields("Bill-to Address") = rOrder("Bill-to Address")
                    insert.Fields("Location Code") = DTSource.Rows(i)("To Location Code")
                    insert.Fields("Source Code") = SourceCode
                    insert.Fields("Responsibility Center") = ResponsibilityCenter
                    insert.Fields("Document Type") = Doctype ' rOrder("Bill-to Customer Template Code")
                    insert.Fields("Posting Date") = PostingDate
                    insert.Fields("External Document No_") = ExternalDocumentNo ' rOrder("External Document No_")
                    insert.Fields("Status") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()
                End If

                If Doctype >= 14 Then
                    Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert
                    insertLine.Fields("Type") = Doctype
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Logistics No_") = LogisticsNo
                    insertLine.Fields("Picking No_") = IIf(PackingList = "", LogisticsNo, PackingList)
                    insertLine.Fields("Packing List") = PackingList

                    insertLine.Fields("Item No_") = DTSource.Rows(i)("Item No_")
                    insertLine.Fields("Item Variant") = ""
                    insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure Code")
                    insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insertLine.Fields("Quantity") = DTSource.Rows(i)("Qty_ to Receive")

                    insertLine.Fields("Login ID") = Framework.UserID
                    'insertLine.Fields("System Date") = Now()
                    'insertLine.Fields("URL") = ""
                    insertLine.Fields("External Document No_") = ExternalDocumentNo
                    insertLine.Fields("Your Reference") = ExternalDocumentNo
                    insertLine.Fields("Source Code") = SourceCode
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                    'insertLine.Fields("QRCode") = ""
                    'insertLine.Fields("Expired Date") = DTSource.Rows(i)("ExpiredDate")
                    'insertLine.Fields("Mfg Date") = DTSource.Rows(i)("ExpiredDate")
                    'insertLine.Fields("Serial No_") = ""
                    'insertLine.Fields("Work Shift No_") = ""
                    'insertLine.Fields("Work Center") = ""
                    'insertLine.Fields("Entry No_") = 0
                    'insertLine.Fields("Blocked") = 0
                    insertLine.Fields("Number No_") = DTSource.Rows(i)("Qty_ to Receive")
                    insertLine.Fields("Description") = ""
                    insertLine.Fields("Post QRCode Entry") = 1
                    insertLine.Fields("Status") = 0
                    insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("Qty_ per Unit of Measure") > 1, 1, 0)
                    insertLine.Fields("Location Code") = DTSource.Rows(i)("To Location Code")
                    insertLine.Execute()
                End If

                ''insert line
                insert = Query.Entity(TableDocumentEntry).Insert

                Dim qq As Query = Query.From(TableDocumentEntry).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim EntryNo As Integer = qq.Value("EntryNo")

                For k As Integer = 0 To DTSource.Rows(i)("Qty_ To Receive") - 1
                    'Dim r As DataRow = Orderline.TakeRow(0)

                    insert.Fields("Entry No_") = EntryNo
                    insert.Fields("Document No_") = DocumentNo

                    insert.Fields("Packing List") = PackingList
                    insert.Fields("Logistics No_") = LogisticsNo 'rOrder("Sell-to Customer No_")

                    insert.Fields("Document Type") = Doctype
                    insert.Fields("Source Code") = SourceCode ' rOrder("Source Code")
                    insert.Fields("Responsibility Center") = ResponsibilityCenter ' rOrder("Responsibility Center")
                    insert.Fields("Location Code") = DTSource.Rows(i)("To Location Code") ''rOrder("Location Code")
                    insert.Fields("Posting Date") = PostingDate ' Now() 'rOrder("Posting Date")
                    insert.Fields("Status") = 0
                    insert.Fields("User ID") = Framework.UserID
                    insert.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                    insert.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure Code")
                    insert.Fields("Qty_ per Unit of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                    insert.Fields("Line No_") = k
                    insert.Fields("Item No_") = DTSource.Rows(i)("Item No_")

                    insert.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")
                    insert.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                    insert.Fields("MFG Date") = DTSource.Rows(i)("MFG Date")
                    insert.Fields("Quantity") = 1 'r("Quantity")
                    insert.Fields("Scan Number") = 0
                    insert.Fields("Backend") = 1
                    insert.Execute()

                    EntryNo += 1
                Next

            Next

            Query.EndTransaction()

            Framework.OpenEntity("Document Entry Header Receipt TO", String.Format("[No_]=N'{0}' and [Document Type]= {1}", DocumentNo, Doctype))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub



    '------
    Public Sub QRCodeNPPOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        'Dim entityname As String = "QRCode Ap Sale"
        Dim ClientEntity As New ClientContext("QRCode NPP SO")
        Dim parameters As DataRow = ClientEntity.Parameters

        parameters("FDocumentNo") = rOrder("No_")
        parameters("FPostingDate") = rOrder("Posting Date")
        parameters("FSourceCode") = rOrder("Source Code")
        parameters("FResponsibilityCenter") = rOrder("Responsibility Center")
        parameters("FLocationCode") = rOrder("Location Code")
        parameters("FBackend") = rOrder("Backend")

        ClientEntity.Show()


    End Sub
    Public Sub QRCodeCSMOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        'Dim entityname As String = "QRCode Ap Sale"
        Dim ClientEntity As New ClientContext("QRCode CSMN SO")
        Dim parameters As DataRow = ClientEntity.Parameters

        parameters("FDocumentNo") = rOrder("No_")
        parameters("FPostingDate") = rOrder("Posting Date")
        parameters("FSourceCode") = rOrder("Source Code")
        parameters("FResponsibilityCenter") = rOrder("Responsibility Center")
        parameters("FLocationCode") = rOrder("Location Code")
        parameters("FBackend") = rOrder("Backend")

        ClientEntity.Show()


    End Sub

    Public Sub FindItemDesktopByQrCode4SO(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim Datasource = WorkSession.Client.DataSource
        Dim DocumentNo As String = sender.GetParameter("FDocumentNo")
        Dim Backend As Integer = sender.GetParameter("FBackend")
        Dim TableDocumentEntryHeader As String = "DataLinked" & Backend & " Document Entry Header"
        'Dim TableScan As String = ""

        Dim QRNumber As Integer = Datasource.Rows.Count
        If QRNumber = 0 Then
            WorkSession.MsgML("Chua co QRCode nao duoc scan !")
            Return
        End If

        'Select Case Backend
        '    Case 1 'CSMN
        '        TableScan = "QRCode CSMN SO"
        '    Case 2 'NPP
        '        TableScan = "QRCode NPP SO"
        'End Select

        Dim q As Query = Query.From(TableDocumentEntryHeader)
        q.Where("No_").Is(DocumentNo)
        Dim DS As DataTable = q.ToTable
        Dim rOrder As DataRow = DS.Rows(0)

        Dim Success As Integer = 0
        Dim strError As String = ""

        Try
            For i As Integer = 0 To QRNumber - 1
                Dim QRCode As String = Datasource.Rows(i)("QRCode")

                Dim ErrNo As Integer = PostQrCode4SO(QRCode, rOrder)
                If ErrNo = 0 Then
                    'xoa qrcode scan
                    'delete = Query.Delete(TableScan)
                    'delete.Where("RowID").Is(RowID)
                    'delete.Execute()

                    Success += 1
                Else
                    strError &= QRCode & ","
                End If
            Next

            WorkSession.MsgML("QRCode xuất kho thành công : {0}!", Success)

            If strError <> "" Then
                WorkSession.MsgML("QRCode chưa xuất kho : {0}!", strError)
            End If

            sender.RefreshSource()


        Catch ex As Exception

            WorkSession.MsgML(ex.ToString)

        End Try

    End Sub
    Public Sub FindItemByQrCode4SO_CSM(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then Return

        Dim DocumentNo As String = rOrder("No_")
        Dim Backend As Integer = rOrder("Backend")
        Dim TableDocumentEntryHeader As String = "DataLinked" & Backend & " Document Entry Header"

        Dim q As Query = Query.From(TableDocumentEntryHeader)
        q.Where("No_").Is(DocumentNo)
        Dim DS As DataTable = q.ToTable
        Dim r As DataRow = DS.Rows(0)

        Try

            Dim ErrNo As Integer = PostQrCode4SO(qrCode, r)

            If ErrNo = 0 Then
                WorkSession.MsgML("QRCode xuat kho thanh cong {0}!", qrCode)
            End If



        Catch ex As Exception

            WorkSession.MsgML(ex.ToString)

        End Try

    End Sub
    Public Function PostQrCode4SO(ByVal qrCode As String, ByVal rOrder As DataRow) As Integer
        Dim DocumentNo As String = rOrder("No_")
        Dim Status As String = rOrder("Status")
        Dim Backend As Integer = rOrder("Backend")
        Dim DocType As Integer = ISDBNULL(rOrder("Document Type"), 1)

        Dim TableQRCode As String = "DataLinked" & Backend & " QRCode"
        Dim TableQRCodeEntry1 As String = "DataLinked1 QRCode Entry"
        Dim TableQRCodeEntry As String = "DataLinked" & Backend & " QRCode Entry"
        Dim TableDocumentEntryHeader As String = "DataLinked" & Backend & " Document Entry Header"
        Dim TableDocumentEntry As String = "DataLinked" & Backend & " Document Entry"

        'kiem tra xem don hang da hoan tat chua
        If Status = 2 Then
            WorkSession.MsgML("Don hang da quet het roi !")
            Return 1
        End If

        'kiem tra xem QRCode da nhap kho chua
        Dim q As Query = Query.From(TableQRCodeEntry1).Transaction(True)
        q.Where("QRCode").Is(qrCode)
        q.And("Document Type").Is(6)
        q.And("Status").Is(1)
        If q.ToTable.Rows.Count = 0 Then
            WorkSession.MsgML("QRCode chua nhap kho {0}!", qrCode)
            Return 1
        End If

        'lay QRCode dua vao datasource
        Dim DS As DataTable = q.ToTable
        Dim r As DataRow = DS.Rows(0)

        Dim ItemNo As String = q.Value("Item No_")

        'kiem tra xem da khoi tao chua
        q = Query.From(TableDocumentEntry).Transaction(True)
        q.Where("Document No_").Is(DocumentNo)
        q.And("Item No_").Is(ItemNo)
        If q.ToTable.Rows.Count = 0 Then
            WorkSession.MsgML("QRCode chua khoi tao {0}!", ItemNo)
            Return 1
        End If

        Dim Quantity As Integer = q.Value("Quantity")
        Dim ScanNumber As Integer = q.Value("Scan Number")

        If ScanNumber = Quantity Then
            WorkSession.MsgML("QRCode da scan het cho san pham {0}!", ItemNo)
            Return 1
        End If

        'kiem tra QRCode nay da xuat chua
        q = Query.From(TableQRCodeEntry).Transaction(True)
        q.Where("QRCode").Is(qrCode)
        q.And("Document Type").Is(1)
        If q.ToTable.Rows.Count > 0 Then
            WorkSession.MsgML("QRCode da ton tai {0}!", qrCode)
            Return 1
        End If

        Try

            Select Case Backend
                Case 1 'CSMN
                    Select Case DocType
                        Case 1 'xuat ban SO
                            InsertQRCodeEntry(TableQRCodeEntry, r, rOrder, qrCode, 1)
                        Case 19 'nhap xuat noi bo TO
                            InsertQRCodeEntry(TableQRCodeEntry, r, rOrder, qrCode, 4)
                            InsertQRCodeEntry(TableQRCodeEntry, r, rOrder, qrCode, 5)
                    End Select

                    'Case 2 'NPP
                    '    InsertQRCodeEntry(TableQRCodeEntry, r, rOrder, qrCode, 1) 'xuat ban
                    '    InsertQRCodeEntry(TableQRCodeEntry, r, rOrder, qrCode, 0) 'nhap mua

                    'q = Query.From(TableQRCode).Transaction(True)
                    'q.Where("QRCode").Is(qrCode)
                    'If q.ToTable.Rows.Count = 0 Then
                    '    InsertQRCode(TableQRCode, r, rOrder, qrCode, 6) 'master
                    'End If

            End Select


            'cap nhat trang thai Document Entry Header
            Dim update As Query = Query.Update(TableDocumentEntryHeader)
            If Status = 0 Then
                update.Where("No_").Is(DocumentNo)
                update.Fields("Status") = 1
                update.Execute()
            End If

            'cap nhat so luong QRCode
            update = Query.Update(TableDocumentEntry)
            update.Where("Document No_").Is(DocumentNo)
            update.And("Item No_").Is(ItemNo)
            update.Fields("Scan Number") = ScanNumber + 1
            update.Fields("Status") = 1
            update.Execute()

            'kiem tra xem qrcode quet het chua
            q = Query.From(TableDocumentEntry).Transaction(True)
            q.Where("Document No_").Is(DocumentNo)
            Dim OrderLine As DataTable = q.ToTable

            Dim Finish As Integer = 1
            For i As Integer = 0 To OrderLine.Rows.Count - 1
                Quantity = OrderLine.Rows(i)("Quantity")
                ScanNumber = OrderLine.Rows(i)("Scan Number")
                If Quantity <> ScanNumber Then
                    Finish = 0
                    Exit For
                End If
            Next

            Dim updateHeader As Query = Query.Update(TableDocumentEntryHeader)
            Dim updateLine As Query = Query.Update(TableDocumentEntry)
            If Finish = 1 Then
                updateHeader.Where("No_").Is(DocumentNo)
                updateHeader.Fields("Status") = 2
                updateHeader.Execute()

                updateLine.Where("Document No_").Is(DocumentNo)
                updateLine.Fields("Status") = 2
                updateLine.Execute()
            End If

            Return 0

        Catch ex As Exception
            Return 0
            WorkSession.MsgML(ex.ToString)
        End Try

    End Function
    Public Sub InsertQRCodeEntry(ByVal TableName As String, ByVal r As DataRow, ByVal rOrder As DataRow, ByVal qrCode As String, ByVal DocumentType As Integer)
        'lay so EntryNo cua TableName
        Dim qq As Query = Query.From(TableName).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        Dim EntryNo As Integer = qq.Value("EntryNo")

        Dim SourceCode As String = ISDBNULL(rOrder("Source Code"), "")
        Dim FromSourceCode As String = ISDBNULL(rOrder("From Source Code"), "")
        Dim ToSourceCode As String = ISDBNULL(rOrder("To Source Code"), "")
        Dim LocationCode As String = ISDBNULL(rOrder("Location Code"), "")
        Dim FromLocationCode As String = ISDBNULL(rOrder("From Location Code"), "")
        Dim ToLocationCode As String = ISDBNULL(rOrder("To Location Code"), "")
        Dim ResponsibilityCenter As String = ISDBNULL(rOrder("Responsibility Center"), "")
        Dim FromResponsibilityCenter As String = ISDBNULL(rOrder("From Responsibility Center"), "")
        Dim ToResponsibilityCenter As String = ISDBNULL(rOrder("To Responsibility Center"), "")

        'insert vao QRCode Entry
        Dim QueryInsert As Query = Query.Entity(TableName).Insert
        Dim QRCodeValue As Integer = -1

        Select Case DocumentType
            Case 0 'nhap mua
                QRCodeValue = 1
            Case 6 'nhap TP
                QRCodeValue = 1
            Case 1 'xuat SO
                QRCodeValue = -1
            Case 4 'nhap TO
                QRCodeValue = 1
                SourceCode = ToSourceCode
                LocationCode = ToLocationCode
                ResponsibilityCenter = ToResponsibilityCenter
            Case 5 'xuat TO
                QRCodeValue = -1
                SourceCode = FromSourceCode
                LocationCode = FromLocationCode
                ResponsibilityCenter = FromResponsibilityCenter
        End Select

        QueryInsert.Fields("QRCode") = qrCode
        QueryInsert.Fields("Item No_") = r("Item No_")
        QueryInsert.Fields("Lot No_") = r("Lot No_")
        QueryInsert.Fields("Document No_") = rOrder("No_")
        QueryInsert.Fields("Customer No_") = rOrder("Sell-to Customer No_")
        QueryInsert.Fields("Document Type") = DocumentType
        QueryInsert.Fields("External Document No_") = rOrder("External Document No_")
        QueryInsert.Fields("Source Code") = SourceCode
        QueryInsert.Fields("Responsibility Center") = ResponsibilityCenter
        QueryInsert.Fields("Location Code") = LocationCode
        QueryInsert.Fields("Serial No_") = r("Serial No_")
        QueryInsert.Fields("Number No_") = r("Number No_")
        QueryInsert.Fields("Description") = r("Description")
        QueryInsert.Fields("Variant Code") = r("Variant Code")
        QueryInsert.Fields("Manufacturer Code") = r("Manufacturer Code")
        QueryInsert.Fields("Expiration Date") = CDate(r("Expiration Date"))
        QueryInsert.Fields("Usage %") = 0
        QueryInsert.Fields("Status") = 1
        QueryInsert.Fields("Created Date") = Now
        QueryInsert.Fields("Quantity") = r("Quantity")
        QueryInsert.Fields("Begin Quantity") = r("Begin Quantity")
        QueryInsert.Fields("Unit of Measure Code") = r("Unit of Measure Code")
        QueryInsert.Fields("Qty_ per Unit of Measure") = r("Qty_ per Unit of Measure")
        QueryInsert.Fields("Production Date") = CDate(r("Production Date"))
        QueryInsert.Fields("Qty_not Temped") = 0
        QueryInsert.Fields("Last Date Checked") = Now
        QueryInsert.Fields("Valued Quantity") = r("Valued Quantity")
        QueryInsert.Fields("Entry No_") = EntryNo
        QueryInsert.Fields("QRCode Value") = QRCodeValue

        QueryInsert.Execute()
    End Sub

    Public Shared Sub QRCodePurchaseProcessPost(ByVal sender As WXSource, ByVal e As WXArgs)

        If Not TRDPostingDateValid(sender, e) Then Return
        If Not TRDExchangeRateValid(sender, e) Then Return

        Dim LineControler As WXSource = sender.Relations(0)

        Dim HeaderTable As String = sender.TableName
        Dim LineTable As String = LineControler.TableName

        Dim rInvoice As Hashtable = sender.CurrentRow
        If rInvoice Is Nothing Or rInvoice.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        'If rInvoice Is Nothing Then Return
        If rInvoice("Status") < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If
        If rInvoice("Correction") = 0 Then
            WorkSession.MsgML("This Document must be Signed first !")
            Return
        End If

        'If rInvoice("Invoice") = 1 Then
        '    WorkSession.MsgML("This Document is Already posted")
        '    Return
        'End If

        Dim Q As Query = Query.From("Vendor")
        Q.WhereAs("No_") = rInvoice("Pay-to Vendor No_")
        Dim rVendorAP As DataRow = Q.TakeRow
        Dim VATRegistrationNo As String = rInvoice("VAT Registration No_")
        If VATRegistrationNo = "" Then
            VATRegistrationNo = rVendorAP("VAT Registration No_")
        End If

        If rVendorAP Is Nothing Then
            WorkSession.MsgML("Posting group is not setting for this Vendor")
            Return
        End If

        'Check is Direct posting to GL

        Dim querySetup As Query = Query.From("Inventory Setup").Select("[Automatic Cost Posting],[Expected Cost Posting to G_L]")
        Dim rsSetup As DataTable = querySetup.ToTable()
        'Dim expectedCost As Integer = rsSetup.Rows(0)("Expected Cost Posting to G_L")
        Dim isDirectPosting As Integer = 1

        Q = Query.From("Purchases Payables Setup")
        Dim GLPosting As Integer = Q.WithDefault(1).Value("GL Posting")
        Dim ExtDocMandatory As Integer = Q.Value("Ext_ Doc_ No_ Mandatory")
        Dim ReceiptOnVendorLedger As Integer = Q.Value("Receipt On Vendor Ledger")

        If ExtDocMandatory = 1 And rInvoice("External Document No_") = "" Then
            WorkSession.MsgML("External Document must be input")
            Return
        End If

        Q = Query.From(LineTable)
        Q.WhereAs("Document No_") = rInvoice("No_")
        Q.WhereAs("Document Type") = rInvoice("Document Type")
        Dim InvoiceLine As DataTable = Q.ToTable
        If InvoiceLine.Rows.Count = 0 Then
            WorkSession.MsgML("Purchase line must input!")
            Return
        End If

        ''============================== check dieu kien Quota============================
        'Dim Tbl_Quota As New DataTable
        'Dim Tbl_Temp2 As New DataTable
        'Dim StrSql As String = ""

        'For i As Integer = 0 To InvoiceLine.Rows.Count - 1
        '    StrSql = " select Q.[Document No_],Q.[Source No_],Q.[Item No_], "
        '    StrSql &= " sum(q.[Quota Remaining Quantity]) as [Remaining Quantity],SUM( P.[Qty_ to Receive]) as Quantity"
        '    StrSql &= " from [Quota] Q, [Purchase Order Line] P, [Purchase Order Header] H"
        '    StrSql &= " where Q.[Item No_] = P.[No_] AND"
        '    StrSql &= " P.[Document No_] = H.[No_] AND"
        '    StrSql &= " H.[Buy-from Vendor No_] = Q.[Source No_] AND"
        '    StrSql &= " P.[Cross-Reference No_] = Q.[Document No_] and q.[Item No_] = '" & InvoiceLine.Rows(i)("No_") & "' "
        '    StrSql &= " and q.[Document No_]='" & InvoiceLine.Rows(i)("Cross-Reference No_") & "'"
        '    StrSql &= " and Q.[Source Type]= 0"
        '    StrSql &= " and Q.[Quota Type]= 0"
        '    StrSql &= " and Q.[Source No_]='" & rInvoice("Buy-from Vendor No_") & "'"
        '    StrSql &= " AND P.[Document No_] = '" & InvoiceLine.Rows(i)("Document No_") & "'"
        '    StrSql &= " Group by (P.[Cross-Reference No_]),Q.[Document No_],Q.[Source No_],Q.[Item No_]"
        '    Tbl_Temp2 = Query.Sql(StrSql).ToTable
        '    For j As Integer = 0 To Tbl_Temp2.Rows.Count - 1
        '        If Tbl_Temp2.Rows(j)("Quantity") > Tbl_Temp2.Rows(j)("Remaining Quantity") Then
        '            WorkSession.MsgML("Quantity Remaining of Quota not enough !")
        '            Exit Sub
        '        End If
        '    Next
        'Next

        ''=================================================================================

        For Each rLine As DataRow In InvoiceLine.Rows
            If rLine("Quantity Invoiced") > 0 Then
                WorkSession.MsgML("Purchase Order has Partial Invoiced for Item {0} !", rLine("No_"))
                Return
            End If
            If rLine("Outstanding Quantity") = 0 Then
                WorkSession.MsgML("already Receipt !")
                Return
            End If
        Next

        Dim SourceCode As String = rInvoice("Source Code")
        Dim BatchCode As String = Framework.Translate("Purchase-INV")

        Dim EntryNo As Integer = 1
        Dim TransNo As Integer = 1
        EntryNo = GetMaxEntry(0, TransNo)

        Dim GLFromEntry As Integer = EntryNo
        Dim GLToEntry As Integer = EntryNo
        'Dim doc As String = ""

        Dim ItemEntryNo As Integer = GetMaxEntry(4, 0)

        Dim ItemFromEntry As Integer = -1
        Dim ItemToEntry As Integer = -1
        Dim VATFromEntry As Integer = 0
        Dim VATToEntry As Integer = 0

        'If WorkSession.MsgML("Post invoice now?") Then Return
        Try

            Dim exchRate As Decimal '= GetExchangeRate(rInvoice("Currency Code"), rInvoice("Document Date"))
            'If exchRate = 0 Then exchRate = 1
            If rInvoice("Currency Factor") <> 0 Then
                exchRate = rInvoice("Currency Factor")
            Else
                exchRate = GetExchangeRate(rInvoice("Currency Code"), rInvoice("Posting Date"))
                If exchRate = 0 Then exchRate = 1
            End If

            Dim ExchRate2 As Decimal = rInvoice("Overhead Rate")
            If ExchRate2 = 0 Then ExchRate2 = exchRate

            Dim VATAmount As Decimal = 0
            Dim TotalAmount As Decimal = 0
            Dim CostAmount As Decimal = 0
            Dim dimline As Integer = 0
            Dim NONVAT As Integer = 0

            Query.BeginTransaction()

            'Dim errMsg As New ArrayList
            For Each rLine As DataRow In InvoiceLine.Rows

                If rLine("Status") < 3 And (ValidateWarehousePutIn(rLine("Location Code")) = 1) Then
                    WorkSession.MsgML("Yêu cầu kiểm lô cho SP {0} và Lo số {1}!", rLine("No_"), rLine("Lot No_"))
                    Continue For
                End If

                Dim IVAccount As String = GetGLAccount(rLine("No_"), enTableModule.asInventory, 0, rLine("Location Code"))

                'Q = Query.From("VAT Posting Setup")
                'Q.WhereAs("VAT Bus_ Posting Group") = rLine("VAT Bus_ Posting Group")
                'Q.WhereAs("VAT Prod_ Posting Group") = rLine("VAT Prod_ Posting Group")
                'Dim PurchaseVATAccount As String = Q.Value("Purchase VAT Account")
                Dim APAccount As String = ""

                If rLine("Quantity") = 0 Then
                    Query.RollBack()
                    WorkSession.MsgML("Quantity must be input")
                    Return
                End If

                CostAmount = rLine("Amount") - rLine("Line Discount Amount")
                VATAmount = rLine("VAT Amount")

                'Post 2 entry to GL for sales and AR
                If GLPosting = 1 Then

                    Dim QVAT As Query = Query.From("VAT Posting Setup")
                    QVAT.WhereAs("VAT Bus_ Posting Group") = rLine("VAT Bus_ Posting Group")
                    QVAT.WhereAs("VAT Prod_ Posting Group") = rLine("VAT Prod_ Posting Group")
                    Dim PurchaseVATAccount As String = QVAT.Value("Purchase VAT Account")

                    If rLine("Amount") <> 0 Then
                        If rLine("Document Type") = 1 Then
                            APAccount = GetGLAccount(rInvoice("Pay-to Vendor No_"), enTableModule.asVendor, 4)
                            If APAccount = "" Then
                                Query.RollBack()
                                WorkSession.MsgML("Other Profit is empty", rLine("No_"))
                                Return
                            End If
                        Else
                            Q = Query.From("Vendor Posting Group")
                            If rInvoice("Vendor Posting Group") <> "" Then
                                Q.WhereAs("Code") = rInvoice("Vendor Posting Group")
                            Else
                                Q.WhereAs("Code") = rVendorAP("Vendor Posting Group")
                            End If
                            APAccount = Q.Value("Payables Account")

                            If APAccount = "" Then
                                Query.RollBack()
                                WorkSession.MsgML("AP Account is empty")
                                Return
                            End If
                        End If

                        If IVAccount = "" Then
                            Query.RollBack()
                            WorkSession.MsgML("Inventory Account is empty")
                            Return
                        End If

                        TRDGLPost(rLine("Line No_"), rInvoice, CostAmount, IVAccount, APAccount, EntryNo, TransNo, exchRate, 5, SourceCode, BatchCode, rInvoice("Posting Description"), 2, 0, rLine("No_"), rInvoice("Pay-to Vendor No_"), -1, "")

                        If rLine("Document Type") <> 1 Then
                            If VATAmount + CostAmount <> 0 Then

                                If rLine("Line Amount") <> 0 Then
                                    TRDVendorLedgerPost(rInvoice, CostAmount, 0, rInvoice("Pay-to Vendor No_"), EntryNo, TransNo, exchRate, SourceCode, BatchCode, 0, "Item and VAT", 2, rLine("No_"), 0, "", rLine("Line No_"))
                                Else
                                    TRDVendorLedgerPost(rInvoice, CostAmount, VATAmount, rInvoice("Pay-to Vendor No_"), EntryNo, TransNo, exchRate, SourceCode, BatchCode, 0, "Item and VAT", 2, rLine("No_"), 0, "", rLine("Line No_"))
                                End If

                            End If
                        End If
                        EntryNo = EntryNo + 2
                        GLToEntry = EntryNo - 1
                    End If

                    'Post 2 entry to GL for VAT and AR
                    If rLine("VAT Amount") <> 0 Then
                        If PurchaseVATAccount = "" Then
                            Query.RollBack()
                            WorkSession.MsgML("Purchase VAT Account not setting up")
                            Return
                        End If

                        If rLine("Line Amount") = 0 Then
                            TRDGLPost(rLine("Line No_"), rInvoice, rLine("VAT Amount"), PurchaseVATAccount, APAccount, EntryNo, TransNo, 1, -5, SourceCode, BatchCode, rInvoice("Posting Description"), 2, 0, rLine("No_"), rInvoice("Pay-to Vendor No_"), -1, "")
                            TRDVATPost(2, 3, rInvoice, rLine, VATRegistrationNo, PurchaseVATAccount, IVAccount, 1, SourceCode, BatchCode, EntryNo + 1)

                        Else
                            Dim DutyVatAccount As String = QVAT.Value("Purchase Tax VAT Acc_")
                            If DutyVatAccount = "" Then
                                Query.RollBack()
                                WorkSession.MsgML("Purchase Tax VAT Acc_ not setting up")
                                Return
                            End If
                            TRDGLPost(rLine("Line No_"), rInvoice, rLine("VAT Amount"), PurchaseVATAccount, DutyVatAccount, EntryNo, TransNo, 1, -5, SourceCode, BatchCode, rInvoice("Posting Description"), 2, 0, rLine("No_"), rInvoice("Pay-to Vendor No_"), -1, "")
                            TRDVATPost(2, 3, rInvoice, rLine, VATRegistrationNo, DutyVatAccount, IVAccount, 1, SourceCode, BatchCode, EntryNo + 1)
                        End If

                        EntryNo = EntryNo + 2
                        GLToEntry = EntryNo - 1
                    Else 'VAT =0
                        'If GLFromEntry = GLToEntry Then
                        TRDVATPost(2, 3, rInvoice, rLine, VATRegistrationNo, "", APAccount, 1, SourceCode, BatchCode, GLToEntry)
                    End If

                    If rLine("Line Amount") <> 0 Then 'Duty Tax
                        Dim PurchaseImportAccount As String = QVAT.Value("Purchase Tax Account")

                        If PurchaseImportAccount = "" Then
                            Query.RollBack()
                            WorkSession.MsgML("Purchase Duty Tax Account is empty")
                            Return
                        End If

                        TRDGLPost(rLine("Line No_"), rInvoice, rLine("Line Amount"), IVAccount, PurchaseImportAccount, EntryNo, TransNo, 1, 5, SourceCode, BatchCode, "Import Tax", 0, 0, rLine("No_"), "", 1, rInvoice("No_"))

                        EntryNo = EntryNo + 2
                        GLToEntry = EntryNo - 1
                    End If


                    'Post 2 entry to GL for invoice distcount and cost
                    'If rLine("Line Discount Amount") <> 0 Then
                    '    Dim PurchaseInvDiscAccount As String = GetGLAccount(rInvoice("Pay-to Vendor No_"), 3, 4)
                    '    If PurchaseInvDiscAccount = "" Then 'errMsg.Add("Inventory Interim Account is empty")
                    '        Query.RollBack()
                    '        WorkSession.MsgML("Purchase Invoice Discount Account is empty")
                    '        Return
                    '    End If
                    '    TRDGLPost(dimline, rInvoice, -rLine("Line Discount Amount"), PurchaseInvDiscAccount, APAccount, EntryNo, TransNo, exchRate, -2, SourceCode, BatchCode, rInvoice("Posting Description"), 2, 0, rLine("No_"), rInvoice("Pay-to Vendor No_"), -1, rInvoice("No_"))
                    '    EntryNo = EntryNo + 2
                    '    GLToEntry = EntryNo - 1
                    'End If


                Else ' Don't post to GL
                    'Post Vendor Ledger entry"
                    If VATAmount + CostAmount <> 0 Then
                        Dim VendEntry As Integer = 0
                        If rLine("Document Type") <> 1 Then
                            'Dim queryEntry As Query = Query.From("Vendor Ledger Entry").Select("([Entry No_]+1) AS EntryNo").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                            VendEntry = GetMaxEntry(3, 0) 'queryEntry.Value("EntryNo")
                            TRDVendorLedgerPost(rInvoice, CostAmount, VATAmount, rInvoice("Pay-to Vendor No_"), VendEntry, TransNo, exchRate, SourceCode, BatchCode, 0, "Item and VAT", 2, rLine("No_"), 0, "", rLine("Line No_"))
                        End If
                        'For VAT = 0 or Non VAT
                        TRDVATPost(2, 3, rInvoice, rLine, VATRegistrationNo, "", APAccount, 1, SourceCode, BatchCode, VendEntry)
                    End If
                End If

                TRDInventoryValuePost(rInvoice("No_"), rInvoice, rLine, APAccount, IVAccount, ItemEntryNo, exchRate, rLine("Qty_ per Unit of Measure"), SourceCode, BatchCode, dimline, isDirectPosting, 1, 1, 0, 1)

                Dim LotNo As String = rLine("Lot No_")
                Dim p_itemexist As Query = Query.From("Item Lot Number").Transaction(True)
                p_itemexist.WhereAs("Lot No_") = LotNo
                p_itemexist.WhereAs("Item No_") = rLine("No_")
                p_itemexist.WhereAs("Source Code") = rInvoice("Source Code")
                p_itemexist.WhereAs("Location Code") = rLine("Location Code")
                'p_itemexist.WhereAs("External Document No_") = rLine("Cross-Reference No_")

                If p_itemexist.RecordCount <= 0 And LotNo <> "" Then
                    Dim InsertItemLotNo As Query = Query.Entity("Item Lot Number").Insert
                    InsertItemLotNo.Fields("Lot No_") = LotNo
                    InsertItemLotNo.Fields("Item No_") = rLine("No_")
                    InsertItemLotNo.Fields("Variant Code") = rLine("Variant Code")
                    InsertItemLotNo.Fields("External Document No_") = rLine("Cross-Reference No_")
                    InsertItemLotNo.Fields("Source Code") = rInvoice("Source Code")
                    InsertItemLotNo.Fields("Responsibility Center") = rInvoice("Responsibility Center")
                    InsertItemLotNo.Fields("Location Code") = rLine("Location Code")
                    InsertItemLotNo.Fields("Description") = "Created from Purchase Order"
                    InsertItemLotNo.Fields("Created Date") = Now()
                    InsertItemLotNo.Fields("Usage %") = rLine("Overhead Rate")
                    InsertItemLotNo.Fields("Expiration Date") = rLine("Expiration Date")
                    InsertItemLotNo.Fields("External Document No_") = rLine("Experiment No_")
                    InsertItemLotNo.Fields("Quantity") = rLine("Quantity")
                    InsertItemLotNo.Fields("Valued Quantity") = rLine("Quantity") * rLine("Qty_ per Unit of Measure")
                    InsertItemLotNo.Fields("Begin Quantity") = rLine("Quantity")
                    InsertItemLotNo.Fields("Unit of Measure Code") = rLine("Unit of Measure")
                    InsertItemLotNo.Fields("Qty_ per Unit of Measure") = rLine("Qty_ per Unit of Measure")
                    InsertItemLotNo.Execute()
                Else 'Update if same lot no_
                    If LotNo <> "" And p_itemexist.RecordCount > 0 Then
                        Dim QtyPerLotNo As Decimal = p_itemexist.Value("Qty_ per Unit of Measure")
                        If QtyPerLotNo = 0 Then QtyPerLotNo = 1
                        Dim Qty As Decimal = rLine("Quantity") * rLine("Qty_ per Unit of Measure") / QtyPerLotNo

                        Dim updateLotTable As Query = Query.Update("Item Lot Number")
                        updateLotTable.WhereAs("Lot No_") = LotNo
                        updateLotTable.WhereAs("Item No_") = rLine("No_")
                        updateLotTable.Fields("Quantity", "+") = Qty
                        updateLotTable.Fields("Valued Quantity", "+") = rLine("Quantity") * rLine("Qty_ per Unit of Measure")

                        updateLotTable.Execute()
                    End If
                End If

                ItemToEntry = ItemEntryNo
                ItemEntryNo += 1
                'Else
                'Query.RollBack()
                'WorkSession.MsgML("Posting group not yet setting up", MsgBoxStyle.OkOnly)
                'Return
                'End If
                dimline = dimline + 1
            Next

            If GLFromEntry < GLToEntry Then
                'Post information to GL Register

                Dim regNo As Integer = GetMaxEntry(-1, 0)
                'If regNo = 0 Then regNo = 1

                Dim insertReg As Query = Query.Entity("G_L Register").Insert

                insertReg.Fields("No_") = regNo
                insertReg.Fields("From Entry No_") = GLFromEntry
                insertReg.Fields("To Entry No_") = GLToEntry
                insertReg.Fields("From VAT Entry No_") = VATFromEntry
                insertReg.Fields("To VAT Entry No_") = VATToEntry
                insertReg.Fields("User ID") = Framework.UserID
                insertReg.Fields("Creation Date") = Now.Date
                insertReg.Fields("Reversed") = 0
                insertReg.Fields("Journal Batch Name") = BatchCode
                insertReg.Fields("Source Code") = SourceCode
                insertReg.Fields("Responsibility Center") = rInvoice("Responsibility Center")
                insertReg.Fields("Document No_") = rInvoice("No_")
                insertReg.Fields("External Document No_") = rInvoice("External Document No_")
                insertReg.Execute()

            End If
            If ItemFromEntry <= ItemToEntry Then
                'Post information to Item Register

                Dim regItemNo As Integer = GetMaxEntry(-2, 0)
                'If regItemNo = 0 Then regItemNo = 1

                Dim insertItemReg As Query = Query.Entity("Item Register").Insert

                insertItemReg.Fields("No_") = regItemNo
                insertItemReg.Fields("From Entry No_") = ItemFromEntry
                insertItemReg.Fields("To Entry No_") = ItemToEntry
                insertItemReg.Fields("From Value Entry No_") = 0
                insertItemReg.Fields("To Value Entry No_") = 0
                insertItemReg.Fields("User ID") = Framework.UserID
                insertItemReg.Fields("Creation Date") = Now.Date
                insertItemReg.Fields("Journal Batch Name") = BatchCode
                insertItemReg.Fields("Source Code") = SourceCode
                insertItemReg.Fields("Responsibility Center") = rInvoice("Responsibility Center")
                insertItemReg.Fields("From Capacity Entry No_") = 0
                insertItemReg.Fields("To Capacity Entry No_") = 0
                insertItemReg.Fields("Document No_") = rInvoice("No_")
                insertItemReg.Fields("External Document No_") = rInvoice("External Document No_")
                insertItemReg.Execute()
            End If

            Dim insertHeader As Query = Query.Entity("TRD Purchase Posted Invoice").WithValues(rInvoice).Insert

            insertHeader.Execute()

            Dim insertLine As Query = Query.Entity("TRD Purchase Posted Invoice Line").Insert
            For Each rLine As DataRow In InvoiceLine.Rows
                insertLine.WithValues(rLine)
                insertLine.Execute()
            Next
            Dim queryDim As Query = Query.From("Document Dimension")
            queryDim.Where("Document No_").Is(rInvoice("No_"))
            Dim DimDataSource As DataTable = queryDim.ToTable
            Dim insertDimension As Query = Query.Entity("Document Dimension Released").Insert
            For Each rDim As DataRow In DimDataSource.Rows
                insertDimension.WithValues(rDim)
                insertDimension.Execute()
            Next

            'Update As Invoice
            Dim Update As Query = Query.Update(HeaderTable)
            Update.WhereAs("No_") = rInvoice("No_")
            Update.Fields("Invoice") = 1
            'Update.Fields("Status") = 2
            Update.Execute()

            'delete(dimension)
            Dim delete As Query = Query.Delete("Document Dimension")
            delete.WhereAs("Document No_") = rInvoice("No_")
            'delete.WhereAS("Document Type") = rInvoice("Document Type")
            delete.Execute()

            'Delete line
            delete = Query.Delete(LineTable)
            delete.WhereAs("Document No_") = rInvoice("No_")
            'delete.WhereAS("Document Type") = rInvoice("Document Type")
            delete.Execute()

            'delete(header)
            delete = Query.Delete(HeaderTable)
            delete.WhereAs("No_") = rInvoice("No_")
            'delete.WhereAS("Document Type") = rInvoice("Document Type")
            delete.Execute()

            Query.EndTransaction()

            'Update display
            sender.RefreshSource()
            WorkSession.MsgML("Post invoice completed")

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub
    'Post Item Receipt update Expiration and Quantity, begin qty on Item Lot Number table
    Public Shared Sub QRCodePurchaseReceiptPost(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim Headertable As String = sender.TableName
        If Not TRDPostingDateValid(sender, e) Then Return
        If Not TRDExchangeRateValid(sender, e) Then Return

        Dim LineControler As WXSource = sender.Relations(0)
        Dim linetable As String = LineControler.TableName

        Dim rInvoice As Hashtable = sender.CurrentRow
        'If rInvoice Is Nothing Then Return
        If rInvoice Is Nothing Or rInvoice.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        If rInvoice("Status") < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If

        'If rInvoice("Correction") = 0 Then
        '    WorkSession.MsgML("This Document must be Signed first !")
        '    Return
        'End If


        'Dim Q As Query = Query.From("Vendor")
        'Q.WhereAs("No_") = rInvoice("Pay-to Vendor No_")
        'Dim BizPostingGroup As String = (Q.Value("Gen_ Bus_ Posting Group"))
        'Dim APAccount As String = GetGLAccount(rInvoice("Pay-to Vendor No_"), enTableModule.asVendor, 0)

        'Check is Direct posting to GL
        Dim querySetup As Query = Query.From("Inventory Setup").Select("[Automatic Cost Posting],[Expected Cost Posting to G_L]")
        Dim rsSetup As DataTable = querySetup.ToTable()
        'Dim expectedCost As Integer = rsSetup.Rows(0)("Expected Cost Posting to G_L")
        Dim isDirectPosting As Integer = 1


        Dim Q As Query = Query.From("Purchases Payables Setup")
        Dim GLPosting As Integer = Q.WithDefault(1).Value("GL Posting")
        Dim ReceiptOnVendorLedger As Integer = Q.Value("Receipt On Vendor Ledger")
        Dim QtyTolerant As Decimal = Q.Value("Quantity Tolerant Percent")

        'Dim ExtDocMandatory As Integer = (Q.Value("Ext_ Doc_ No_ Mandatory")

        'If rInvoice("External Document No_") = "" Then
        '    WorkSession.MsgML("External Document must be input")
        '    Return
        'End If

        Q = Query.From(linetable).Transaction(True)
        Q.WhereAs("Document No_") = rInvoice("No_")
        'q.Whereas("Document Type") = rInvoice("Document Type")
        Dim InvoiceLine As DataTable = Q.ToTable
        If InvoiceLine.Rows.Count = 0 Then
            WorkSession.MsgML("Purchase line must input!")
            Return
        End If

        Dim SaleSourceCode As String = rInvoice("Source Code")
        Dim SaleBatchCode As String = Framework.Translate("Purchase-Receipt")

        Dim queryseries As Query = Query.From("Number Sequence")
        If queryseries.Value("WhsReceipt") = "" Then
            WorkSession.MsgML("Warehouse Receipt Sequence Number must setup first")
            Return
        End If
        Dim SaleSequence As String = queryseries.Value("WhsReceipt")

        queryseries = Query.From("No_ Series Line").Transaction(True)
        queryseries.WhereAs("Series Code") = SaleSequence
        queryseries.WhereAs("Source Code") = SaleSourceCode
        If rInvoice("Responsibility Center") <> "" Then
            queryseries.WhereAs("Responsibility Center") = rInvoice("Responsibility Center")
        End If
        queryseries.OrderBy("Code")

        If queryseries.ToTable.Rows.Count = 0 Then
            WorkSession.MsgML("Inventory Counting Series number must setup first")
            'Query.RollBack()
            Return
        End If
        Dim SeriesRowID As Integer = queryseries.Value("RowID")

        Dim StartDocPrefix As String = queryseries.Value("Starting No_")
        Dim LastClientUsed As Integer = queryseries.Value("Last No_ Used")
        Dim IncByNo As Integer = queryseries.Value("Increment-By No_")
        Dim EndNo_ As Integer = queryseries.Value("Ending No_")
        LastClientUsed = LastClientUsed + IncByNo

        Dim DocumentNo As String = StartDocPrefix & FormatDocumentNumber(EndNo_, LastClientUsed)


        Dim EntryNo As Integer = 1
        Dim TransNo As Integer = 1
        EntryNo = GetMaxEntry(0, TransNo)

        Dim GLFromEntry As Integer = EntryNo
        Dim GLToEntry As Integer = EntryNo

        Dim ItemEntryNo As Integer = GetMaxEntry(4, 0)

        Dim ItemFromEntry As Integer = ItemEntryNo
        Dim ItemToEntry As Integer = -1
        Dim LocationInterrim As Integer = 0

        '============================== check dieu kien Quota============================

        Dim Tbl_Quota As New DataTable
        Dim Tbl_Temp2 As New DataTable
        Dim StrSql As String = ""

        For i As Integer = 0 To InvoiceLine.Rows.Count - 1
            StrSql = " select Q.[Document No_],Q.[Source No_],Q.[Item No_], "
            StrSql &= " sum(q.[Quota Remaining Quantity]) as [Remaining Quantity],SUM( P.[Qty_ to Receive]) as Quantity"
            StrSql &= " from [Quota] Q, [Purchase Order Line] P, [Purchase Order Header] H"
            StrSql &= " where Q.[Item No_] = P.[No_] AND"
            StrSql &= " P.[Document No_] = H.[No_] AND"
            StrSql &= " H.[Buy-from Vendor No_] = Q.[Source No_] AND"
            StrSql &= " P.[Cross-Reference No_] = Q.[Document No_] and q.[Item No_] = '" & InvoiceLine.Rows(i)("No_") & "' "
            StrSql &= " and q.[Document No_]='" & InvoiceLine.Rows(i)("Cross-Reference No_") & "'"
            StrSql &= " and Q.[Source Type]= 0"
            StrSql &= " and Q.[Quota Type]= 0"
            StrSql &= " and Q.[Source No_]='" & rInvoice("Buy-from Vendor No_") & "'"
            StrSql &= " AND P.[Document No_] = '" & InvoiceLine.Rows(i)("Document No_") & "'"
            StrSql &= " Group by (P.[Cross-Reference No_]),Q.[Document No_],Q.[Source No_],Q.[Item No_]"
            Tbl_Temp2 = Query.Sql(StrSql).ToTable
            For j As Integer = 0 To Tbl_Temp2.Rows.Count - 1
                If Tbl_Temp2.Rows(j)("Quantity") > Tbl_Temp2.Rows(j)("Remaining Quantity") Then
                    WorkSession.MsgML("Quantity Remaining of Quota not enough !")
                    Exit Sub
                End If
            Next
        Next

        '=================================================================================

        'If WorkSession.MsgML("Post Receipt now?") Then Return
        Try
            Query.BeginTransaction()

            Dim exchRate As Decimal '= GetExchangeRate(rInvoice("Currency Code"), rInvoice("Document Date"))
            'If exchRate = 0 Then exchRate = 1
            If rInvoice("Currency Factor") <> 0 Then
                exchRate = rInvoice("Currency Factor")
            Else
                exchRate = GetExchangeRate(rInvoice("Currency Code"), rInvoice("Posting Date"))
                If exchRate = 0 Then exchRate = 1
            End If

            Dim PriceAmount As Decimal = 0
            Dim CostAmount As Decimal = 0
            Dim VATAmount As Decimal = 0
            Dim dimline As Integer = 0
            Dim Flag As Integer = 0

            For Each rLine As DataRow In InvoiceLine.Rows
                If rLine("Status") < 3 And (ValidateWarehousePutIn(rLine("Location Code")) = 1) Then
                    WorkSession.MsgML("Yêu cầu kiểm lô cho SP {0} và Lo số {1}!", rLine("No_"), rLine("Lot No_"))
                    Continue For
                End If

                If rLine("Outstanding Quantity") <= 0 Then
                    'Query.RollBack()
                    WorkSession.MsgML("Quantity outstanding =0 for Item {0}!", rLine("No_"))
                    Continue For
                Else
                    Dim QuantityTolerant = rLine("Quantity") * QtyTolerant / 100
                    If rLine("Qty_ to Receive") > rLine("Outstanding Quantity") + QuantityTolerant Then
                        'Query.RollBack()
                        WorkSession.MsgML("Quantity Over permitted for Item {0}!", rLine("No_"))
                        Continue For
                    End If

                    If rLine("Quantity") <= rLine("Quantity Received") Then
                        Flag = 0 'Da nhap okla
                    Else
                        Flag = 1 'Chua het
                    End If

                    Q = Query.From("Item")
                    Q.WhereAs("No_") = rLine("No_")
                    Dim APAccount As String = ""
                    Dim IVAccount As String = ""

                    If Q.RecordCount > 0 Then
                        'Check account if GLPosting

                        If GLPosting = 1 Then
                            If rLine("Document Type") = 1 Then
                                APAccount = GetGLAccount(rInvoice("Pay-to Vendor No_"), enTableModule.asVendor, 4)
                                If APAccount = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Other Profit is empty", rLine("No_"))
                                    Return
                                End If
                            Else
                                Q = Query.From("Vendor")
                                Q.WhereAs("No_") = rInvoice("Pay-to Vendor No_")
                                Dim VendorPostingGroup As String = Q.Value("Vendor Posting Group")
                                Q = Query.From("Vendor Posting Group")
                                If rInvoice("Vendor Posting Group") <> "" Then
                                    Q.WhereAs("Code") = rInvoice("Vendor Posting Group")
                                Else
                                    Q.WhereAs("Code") = VendorPostingGroup
                                End If
                                APAccount = Q.Value("Payables Account")

                                If APAccount = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("AP Account is empty")
                                    Return
                                End If
                            End If

                            IVAccount = GetGLAccount(rLine("No_"), enTableModule.asInventory, 0, rLine("Location Code"))

                            If IVAccount = "" Then
                                Query.RollBack()
                                WorkSession.MsgML("Inventory Account is empty", rLine("No_"))
                                Return
                            End If

                            'post to GL entry
                            Dim IVInterim As String = GetGLAccount(rLine("No_"), enTableModule.asInventory, 10, rLine("Location Code")) 'Inventory interrim account

                            If CheckLocationType(rLine("Location Code")) = 1 And IVInterim <> "" And IVInterim <> IVAccount Then
                                If IVInterim = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Interim Purchase Account is empty", rLine("No_"))
                                    Return
                                End If

                                TRDGLPost(rLine("Line No_"), rInvoice, rLine("Qty_ to Receive") * rLine("Unit Cost") - rLine("Qty_ to Receive") * rLine("Unit Cost") * rLine("Line Discount %") / 100, IVInterim, APAccount, EntryNo, TransNo, exchRate, 5, SaleSourceCode, SaleBatchCode, rInvoice("Posting Description"), 2, 0, rLine("No_"), rInvoice("Pay-to Vendor No_"), -1, DocumentNo)
                            Else
                                TRDGLPost(rLine("Line No_"), rInvoice, rLine("Qty_ to Receive") * rLine("Unit Cost") - rLine("Qty_ to Receive") * rLine("Unit Cost") * rLine("Line Discount %") / 100, IVAccount, APAccount, EntryNo, TransNo, exchRate, 5, SaleSourceCode, SaleBatchCode, rInvoice("Posting Description"), 2, 0, rLine("No_"), rInvoice("Pay-to Vendor No_"), -1, DocumentNo)
                            End If

                            If ReceiptOnVendorLedger = 1 And rLine("Document Type") <> 1 Then 'post Inventory only
                                TRDVendorLedgerPost(rInvoice, rLine("Qty_ to Receive") * rLine("Unit Cost") - rLine("Qty_ to Receive") * rLine("Unit Cost") * rLine("Line Discount %") / 100, 0, rInvoice("Pay-to Vendor No_"), GLToEntry, TransNo, exchRate, SaleSourceCode, SaleBatchCode, 0, "Item Purchased", 2, rLine("No_"), 0, DocumentNo, rLine("Line No_"))
                            End If

                            EntryNo = EntryNo + 2

                            GLToEntry = EntryNo - 1

                        Else 'don't post to gl
                            '    Dim queryEntry As Query = Query.From("Vendor Ledger Entry").Select("([Entry No_]+1) AS EntryNo").Top(1).OrderBy("EntryNo").DESC
                            '    Dim VendEntry As Integer = queryEntry.Value("EntryNo")
                            '    TRDVendorLedgerPost(rInvoice, rline("Amount"), 0, rInvoice("Pay-to Vendor No_"), VendEntry, TransNo, exchRate, SaleSourceCode, SaleBatchCode, 0)
                        End If

                        'Post inventory 2 entry: Item Ledger entry and value entry
                        If rLine("Qty_ to Receive") <> 0 Then
                            'Post to Value entry
                            TRDInventoryValuePost(DocumentNo, rInvoice, rLine, APAccount, IVAccount, ItemEntryNo, exchRate, rLine("Qty_ per Unit of Measure"), SaleSourceCode, SaleBatchCode, dimline, isDirectPosting, 1, 1, 0, 1)
                            ItemToEntry = ItemEntryNo
                            ItemEntryNo += 1

                            Dim updateline As Query = Query.Update(linetable)
                            updateline.WhereAs("RowId") = rLine("RowID")
                            Dim strdoc As String = DocumentNo

                            If rLine("Receipt No_") <> "" Then strdoc = rLine("Receipt No_") + "," + DocumentNo

                            updateline.Fields("Receipt No_") = strdoc
                            updateline.Fields("Quantity Received") = rLine("Quantity Received") + rLine("Qty_ to Receive")
                            updateline.Fields("Outstanding Quantity") = rLine("Outstanding Quantity") - rLine("Qty_ to Receive")
                            updateline.Fields("Qty_ to Receive") = rLine("Outstanding Quantity") - rLine("Qty_ to Receive")
                            'updateline.Fields("Receive") = 1
                            updateline.Fields("Qty_ to Invoice") = rLine("Quantity Received") + rLine("Qty_ to Receive") - rLine("Quantity Invoiced")

                            updateline.Execute()

                            Dim LotNo As String = rLine("Lot No_")
                            Dim LotNo_itemexist As Query = Query.From("Item Lot Number").Transaction(True)
                            LotNo_itemexist.WhereAs("Lot No_") = LotNo
                            LotNo_itemexist.WhereAs("Item No_") = rLine("No_")
                            LotNo_itemexist.WhereAs("Source Code") = SaleSourceCode
                            LotNo_itemexist.WhereAs("Location Code") = rLine("Location Code")

                            'LotNo_itemexist.WhereAs("External Document No_") = rLine("Experiment No_")
                            If LotNo_itemexist.RecordCount <= 0 And LotNo <> "" Then
                                Dim InsertItemLotNo As Query = Query.Entity("Item Lot Number").Insert
                                InsertItemLotNo.Fields("Lot No_") = LotNo
                                InsertItemLotNo.Fields("Item No_") = rLine("No_")
                                InsertItemLotNo.Fields("Variant Code") = rLine("Variant Code")
                                InsertItemLotNo.Fields("External Document No_") = rLine("Experiment No_")
                                InsertItemLotNo.Fields("Source Code") = rInvoice("Source Code")
                                InsertItemLotNo.Fields("Responsibility Center") = rInvoice("Responsibility Center")
                                InsertItemLotNo.Fields("Location Code") = rLine("Location Code")
                                InsertItemLotNo.Fields("Description") = "Created from Purchase Order"
                                InsertItemLotNo.Fields("Created Date") = Now()
                                InsertItemLotNo.Fields("Usage %") = rLine("Overhead Rate")
                                InsertItemLotNo.Fields("Expiration Date") = rLine("Expiration Date")
                                InsertItemLotNo.Fields("Production Date") = rLine("FA Posting Date")
                                InsertItemLotNo.Fields("Valued Quantity") = rLine("Qty_ to Receive") * rLine("Qty_ per Unit of Measure")
                                InsertItemLotNo.Fields("Quantity") = rLine("Qty_ to Receive") ' * rLine("Qty_ per Unit of Measure")
                                InsertItemLotNo.Fields("Begin Quantity") = rLine("Qty_ to Receive") '* rLine("Qty_ per Unit of Measure")
                                InsertItemLotNo.Fields("Unit of Measure Code") = rLine("Unit of Measure")
                                InsertItemLotNo.Fields("Qty_ per Unit of Measure") = rLine("Qty_ per Unit of Measure")
                                InsertItemLotNo.Execute()
                            Else 'Update if same lot no_
                                If LotNo <> "" And LotNo_itemexist.RecordCount > 0 Then
                                    Dim QtyPerLotNo As Decimal = LotNo_itemexist.Value("Qty_ per Unit of Measure")
                                    If QtyPerLotNo = 0 Then QtyPerLotNo = 1
                                    Dim Qty As Decimal = rLine("Quantity") * rLine("Qty_ per Unit of Measure") / QtyPerLotNo

                                    Dim updateLotTable As Query = Query.Update("Item Lot Number")
                                    updateLotTable.WhereAs("Lot No_") = LotNo
                                    updateLotTable.WhereAs("Item No_") = rLine("No_")
                                    updateLotTable.WhereAs("Source Code") = SaleSourceCode
                                    updateLotTable.WhereAs("Location Code") = rLine("Location Code")
                                    updateLotTable.Fields("Quantity", "+") = Qty
                                    updateLotTable.Fields("Valued Quantity", "+") = rLine("Qty_ to Receive") * rLine("Qty_ per Unit of Measure")
                                    updateLotTable.Execute()
                                End If
                            End If

                            Dim JobNo As String = rLine("Job No_")
                            Dim project_exist As Query = Query.From("Item By Project").Transaction(True)
                            project_exist.WhereAs("Project No_") = JobNo
                            project_exist.WhereAs("Item No_") = rLine("No_")
                            If JobNo <> "" And project_exist.RecordCount > 0 Then
                                Dim updateItemByProjectTable As Query = Query.Update("Item By Project")
                                updateItemByProjectTable.WhereAs("Project No_") = JobNo
                                updateItemByProjectTable.WhereAs("Item No_") = rLine("No_")
                                updateItemByProjectTable.Fields("Purchased Quantity", "+") = rLine("Qty_ to Receive") * rLine("Qty_ per Unit of Measure")
                                'updateItemByProjectTable.Fields("Remaining Quantity", "-") = rLine("Qty_ to Receive")
                                updateItemByProjectTable.Execute()
                            End If

                            'Dim Importlicense As String 
                            Dim Quota_exist As Query = Query.From("Quota").Transaction(True)
                            Quota_exist.WhereAs("Source No_") = rInvoice("Buy-from Vendor No_")
                            Quota_exist.WhereAs("Item No_") = rLine("No_")
                            Quota_exist.WhereAs("License No_") = rLine("Cross-Reference No_")
                            Quota_exist.WhereAs("Source Type") = 0 'Hang mua
                            If rLine("Cross-Reference No_") <> "" And Quota_exist.RecordCount > 0 Then
                                Dim Quantity As Decimal = Quota_exist.Value("Quota Remaining Quantity")
                                If Quantity < rLine("Qty_ to Receive") * rLine("Qty_ per Unit of Measure") Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Out of Quota {0}", rLine("No_"))
                                    Return
                                End If
                                Dim updateQuotaTable As Query = Query.Update("Quota")
                                updateQuotaTable.WhereAs("Source No_") = rInvoice("Buy-from Vendor No_")
                                updateQuotaTable.WhereAs("Item No_") = rLine("No_")
                                updateQuotaTable.WhereAs("License No_") = rLine("Cross-Reference No_")
                                updateQuotaTable.WhereAs("Source Type") = 0 'Hang mua
                                updateQuotaTable.Fields("License Quantity", "-") = rLine("Qty_ to Receive") * rLine("Qty_ per Unit of Measure")
                                updateQuotaTable.Fields("Quota Remaining Quantity", "-") = rLine("Qty_ to Receive") * rLine("Qty_ per Unit of Measure")
                                updateQuotaTable.Execute()
                            End If

                            dimline = dimline + 1
                        End If
                    Else
                        Query.RollBack()
                        WorkSession.MsgML("Posting Group not set up for Item {0}!", rLine("No_"))
                        Return
                    End If
                End If
            Next

            If GLFromEntry < GLToEntry Then
                'Post information to GL Register

                Dim regNo As Integer = GetMaxEntry(-1, 0)
                'If regNo = 0 Then regNo = 1

                Dim insertReg As Query = Query.Entity("G_L Register").Insert

                insertReg.Fields("No_") = regNo
                insertReg.Fields("From Entry No_") = GLFromEntry
                insertReg.Fields("To Entry No_") = GLToEntry
                insertReg.Fields("From VAT Entry No_") = 0
                insertReg.Fields("To VAT Entry No_") = 0
                insertReg.Fields("User ID") = Framework.UserID
                insertReg.Fields("Creation Date") = Now.Date
                insertReg.Fields("Reversed") = 0
                insertReg.Fields("Journal Batch Name") = SaleBatchCode
                insertReg.Fields("Source Code") = SaleSourceCode
                insertReg.Fields("Responsibility Center") = rInvoice("Responsibility Center")
                insertReg.Fields("Document No_") = DocumentNo
                insertReg.Fields("External Document No_") = rInvoice("External Document No_")
                insertReg.Execute()
            End If
            If (ItemFromEntry <= ItemToEntry) And ItemToEntry <> -1 Then
                'Post information to Item Register

                Dim regItemNo As Integer = GetMaxEntry(-2, 0)
                'If regItemNo = 0 Then regItemNo = 1

                Dim insertItemReg As Query = Query.Entity("Item Register").Insert

                insertItemReg.Fields("No_") = regItemNo
                insertItemReg.Fields("From Entry No_") = ItemFromEntry
                insertItemReg.Fields("To Entry No_") = ItemToEntry
                insertItemReg.Fields("From Value Entry No_") = 0
                insertItemReg.Fields("To Value Entry No_") = 0
                insertItemReg.Fields("User ID") = Framework.UserID
                insertItemReg.Fields("Creation Date") = Now.Date
                insertItemReg.Fields("Journal Batch Name") = SaleBatchCode
                insertItemReg.Fields("Source Code") = SaleSourceCode
                insertItemReg.Fields("Responsibility Center") = rInvoice("Responsibility Center")
                insertItemReg.Fields("From Capacity Entry No_") = 0
                insertItemReg.Fields("To Capacity Entry No_") = 0
                insertItemReg.Fields("Document No_") = DocumentNo
                insertItemReg.Fields("External Document No_") = rInvoice("External Document No_")
                insertItemReg.Execute()

                Dim Update As Query = Query.Update("No_ Series Line")
                Update.Where("RowID").Is(SeriesRowID)
                Update.Fields("Last No_ Used") = LastClientUsed
                'Update.WhereAs("Series Code") = SaleSequence
                'Update.WhereAs("Code") = r("Code")
                Update.Execute()

                Update = Query.Update(sender.TableName)
                Update.Where("No_").Is(rInvoice("No_"))
                If Flag = 1 Then
                    Update.Fields("Receive") = 2 'Uncomplete
                Else
                    Update.Fields("Receive") = 1 'Complete
                End If

                Update.Execute()
            End If


            Query.EndTransaction()

            'Update display
            sender.RefreshSource()
            WorkSession.MsgML("Post Receipt completed")

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    'sales Shipment and update Quantity on Item Lot Number table
    Public Shared Sub QRCodeSalesShipmentPost(ByVal sender As WXSource, ByVal e As WXArgs)
        If Not TRDPostingDateValid(sender, e) Then Return
        If Not TRDExchangeRateValid(sender, e) Then Return

        Dim LineControler As WXSource = sender.Relations(0)
        Dim linetable As String = LineControler.TableName

        Dim rInvoice As Hashtable = sender.CurrentRow
        'If rInvoice Is Nothing Then Return
        If rInvoice Is Nothing Or rInvoice.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        If rInvoice("Status") < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If
        If rInvoice("Correction") = 0 Then
            WorkSession.MsgML("This Document must be Signed first !")
            Return
        End If
        Dim Q As Query = Query.From("Customer")
        Q.WhereAs("No_") = rInvoice("Bill-to Customer No_")
        'Dim CustPostingGroup As String = Q.Value("Gen_ Bus_ Posting Group")

        'Check is Direct posting to GL
        Q = Query.From("Inventory Setup")
        Dim isDirectPosting As Integer = 1 'Q.Value("Automatic Cost Posting")
        'Dim expectedCost As Integer = Q.Value("Expected Cost Posting to G_L")
        'If isDirectPosting = 0 Then expectedCost = 0

        Q = Query.From("Sales Receivables Setup").Select("[GL Posting],[Ext_ Doc_ No_ Mandatory]")
        Dim GLPosting As Integer = Q.WithDefault(1).Value("GL Posting")
        'Dim ExtDocMandatory As Integer = (Q.Value("Ext_ Doc_ No_ Mandatory")

        'If rInvoice("External Document No_") = "" Then
        '    WorkSession.MsgML("External Document must be input")
        '    Return
        'End If

        Q = Query.From(linetable).Transaction(True)
        Q.WhereAs("Document No_") = rInvoice("No_")
        'q.Whereas("Document Type") = rInvoice("Document Type")
        Dim InvoiceLine As DataTable = Q.ToTable
        If InvoiceLine.Rows.Count = 0 Then
            WorkSession.MsgML("Sales line must input!")
            Return
        End If

        '============================== check dieu kien Quota============================
        Dim Tbl_Quota As New DataTable
        Dim Tbl_Temp2 As New DataTable
        Dim StrSql As String = ""


        For i As Integer = 0 To InvoiceLine.Rows.Count - 1
            StrSql = " select Q.[Document No_],Q.[Source No_], Q.[Common Item No_],"
            StrSql &= " sum(q.[Quota Remaining Quantity]) as [Remaining Quantity], SUM(S.[Qty_ to Ship]) as Quantity"
            StrSql &= " from [Quota] Q, [Sales Order Line] S, [Sales Order Header] H, [Item] I"
            StrSql &= " where I.[No_] = S.[No_] AND " '--vat tu co trong Sales Line"
            StrSql &= " I.[Common Item No_] = Q.[Common Item No_] AND " '--hoac la common hoac la item
            StrSql &= " S.[Document No_] = H.[No_] AND " '-- tim kiem ma khach hang
            StrSql &= " H.[Sell-to Customer No_] = Q.[Source No_] AND " '---- ma khach hang la dung dan
            StrSql &= " Q.[Source Type] = 1 AND Q.[Quota Type] = 1 AND"
            StrSql &= " S.[Cross-Reference No_] = Q.[Document No_] " '--- kiem tra chung chi quota
            StrSql &= " and I.[No_]='" & InvoiceLine.Rows(i)("No_") & "'"
            StrSql &= " and Q.[Document No_]='" & InvoiceLine.Rows(i)("Cross-Reference No_") & "'"
            StrSql &= " and Q.[Source No_]='" & rInvoice("Buy-from Vendor No_") & "'"
            StrSql &= " and Q.[Source Type]=1"
            StrSql &= " and Q.[Quota Type]=1"
            StrSql &= " Group by Q.[Document No_],Q.[Source No_],Q.[Common Item No_]"
            StrSql &= " Order by Q.[Document No_]"
            Tbl_Temp2 = Query.Sql(StrSql).ToTable
            For j As Integer = 0 To Tbl_Temp2.Rows.Count - 1
                If Tbl_Temp2.Rows(j)("Quantity") > Tbl_Temp2.Rows(j)("Remaining Quantity") Then
                    WorkSession.MsgML("Quantity Remaining of Quota not enough !")
                    Exit Sub
                End If
            Next
        Next

        '=================================================================================
        'Customize for CSMN
        'If rInvoice("Ship-to Address 2") <> "" Then
        '    For Each rLine As DataRow In InvoiceLine.Rows
        '        If rLine("Drop Shipment") <> 1 Then
        '            WorkSession.MsgML("Drop Shipment !")
        '            Return
        '        End If
        '    Next
        'End If
        If CheckItemAvailableSalesShipment(sender, e) = 0 Then Return

        Dim SaleSourceCode As String = rInvoice("Source Code")
        Dim ResponsibilityCenter As String = rInvoice("Responsibility Center")
        Dim SaleBatchCode As String = Framework.Translate("SALES-Shipment")

        Dim queryseries As Query = Query.From("Number Sequence")
        If queryseries.Value("WhsShipment") = "" Then
            WorkSession.MsgML("Warehouse Shipment Sequence Number must setup first")
            Return
        End If
        Dim SaleSequence As String = queryseries.Value("WhsShipment")

        queryseries = Query.From("No_ Series Line").Transaction(True)
        queryseries.WhereAs("Series Code") = SaleSequence
        queryseries.WhereAs("Source Code") = SaleSourceCode
        If ResponsibilityCenter <> "" Then
            queryseries.WhereAs("Responsibility Center") = ResponsibilityCenter
        End If
        queryseries.OrderBy("Code")

        If queryseries.ToTable.Rows.Count = 0 Then
            WorkSession.MsgML("Inventory Counting Series number must setup first")
            Return
        End If
        Dim SeriesRowID As Integer = queryseries.Value("RowID")

        Dim StartDocPrefix As String = queryseries.Value("Starting No_")
        Dim LastClientUsed As Integer = queryseries.Value("Last No_ Used")
        Dim IncByNo As Integer = queryseries.Value("Increment-By No_")
        Dim EndNo_ As Integer = queryseries.Value("Ending No_")
        LastClientUsed = LastClientUsed + IncByNo

        Dim DocumentNo As String = StartDocPrefix & FormatDocumentNumber(EndNo_, LastClientUsed)

        Dim EntryNo As Integer = 1
        Dim TransNo As Integer = 1
        EntryNo = GetMaxEntry(0, TransNo)

        Dim GLFromEntry As Integer = EntryNo
        Dim GLToEntry As Integer = EntryNo

        Dim ItemEntryNo As Integer = GetMaxEntry(4, 0)

        Dim ItemFromEntry As Integer = ItemEntryNo
        Dim ItemToEntry As Integer = -1

        'If WorkSession.MsgML("Post Shipment now?") Then Return
        Try
            Query.BeginTransaction()

            Dim exchRate As Decimal '= GetExchangeRate(rInvoice("Currency Code"), rInvoice("Document Date"))
            'If exchRate = 0 Then exchRate = 1

            If rInvoice("Currency Factor") <> 0 Then
                exchRate = rInvoice("Currency Factor")
            Else
                exchRate = GetExchangeRate(rInvoice("Currency Code"), rInvoice("Document Date"))
                If exchRate = 0 Then exchRate = 1
            End If

            Dim PriceAmount As Decimal = 0
            Dim CostAmount As Decimal = 0
            Dim VATAmount As Decimal = 0
            Dim dimline As Integer = 0
            Dim Flag As Integer = 0

            For Each rLine As DataRow In InvoiceLine.Rows

                If rLine("Status") < 3 And (ValidateWarehousePickup(rLine("Location Code")) = 1) Then
                    WorkSession.MsgML("Yêu cầu bốc lô cho SP {0} và Lo số {1}!", rLine("No_"), rLine("Lot No_"))
                    Continue For
                End If

                If rLine("Outstanding Quantity") = 0 Then
                    'Query.RollBack()
                    'WorkSession.MsgML("Quantity outstanding =0 for Item {0}!", rLine("No_"))
                    Continue For
                Else
                    If rLine("Qty_ to Ship") > rLine("Outstanding Quantity") Then
                        'Query.RollBack()
                        ' WorkSession.MsgML("Quantity Over permitted for Item {0}!", rLine("No_"))
                        Continue For 'Return
                    End If

                    If rLine("Quantity") - rLine("Qty_ to Ship") - rLine("Quantity Shipped") > 0 Then
                        Flag = 1
                    Else
                        Flag = 0
                    End If

                    Q = Query.From("Item")
                    Q.WhereAs("No_") = rLine("No_")

                    If Q.RecordCount > 0 Then
                        Dim IVAccount As String = GetGLAccount(rLine("No_"), enTableModule.asInventory, 0, rLine("Location Code"))
                        Dim COGSAccount As String = GetGLAccount(rLine("No_"), enTableModule.asInventory, 1, rLine("Location Code"))

                        'Check account if GLPosting
                        If GLPosting = 1 Then
                            If COGSAccount = "" Then
                                Query.RollBack()
                                WorkSession.MsgML("COGS Account is empty", rLine("No_"))
                                Return
                            End If
                            If IVAccount = "" Then
                                Query.RollBack()
                                WorkSession.MsgML("Inventory Account is empty", rLine("No_"))
                                Return
                            End If
                        End If

                        If isDirectPosting = 1 And RoundWithCurrency(rLine("Qty_ to Ship") * rLine("Unit Cost")) <> 0 Then
                            'Post 2 entry to GL for COGS and Inventory
                            TRDGLPost(dimline, rInvoice, rLine("Qty_ to Ship") * rLine("Unit Cost"), COGSAccount, IVAccount, EntryNo, TransNo, exchRate, -3, SaleSourceCode, SaleBatchCode, rLine("Description"), 2, ItemEntryNo, rLine("No_"), rInvoice("Bill-to Customer No_"), 1, DocumentNo)
                            EntryNo = EntryNo + 2
                            GLToEntry = EntryNo - 1
                        End If

                        'Post inventory 2 entry: Item Ledger entry and value entry
                        If rLine("Qty_ to Ship") <> 0 Then
                            TRDInventoryValuePost(DocumentNo, rInvoice, rLine, IVAccount, COGSAccount, ItemEntryNo, exchRate, rLine("Qty_ per Unit of Measure"), SaleSourceCode, SaleBatchCode, dimline, isDirectPosting, -1, 1, 0, 1)
                            ItemToEntry = ItemEntryNo
                            ItemEntryNo += 1

                            If CheckLocationType(rLine("Location Code")) = 1 And rLine("Qty_ to Ship") * rLine("Unit Price") <> 0 Then
                                Dim InterrimSalesAccount As String = GetGLAccount(rLine("No_"), enTableModule.asInventory, 17, rLine("Location Code"))
                                Dim ARAccount As String = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 0)
                                Select Case CInt(rLine("Document Type"))
                                    Case 1 'Commission Account with Tax
                                        ARAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 6)
                                    Case 7, 8, 9, 10
                                        ARAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, rLine("Document Type"))
                                End Select

                                If ARAccount <> "" And InterrimSalesAccount <> "" And ARAccount <> InterrimSalesAccount Then
                                    TRDGLPost(rLine("Line No_"), rInvoice, rLine("Qty_ to Ship") * rLine("Unit Price"), ARAccount, InterrimSalesAccount, EntryNo, TransNo, exchRate, 4, SaleSourceCode, SaleBatchCode, rInvoice("Posting Description"), 2, 0, rLine("No_"), rInvoice("Bill-to Customer No_"), 1) '1 is line dimension
                                    EntryNo = EntryNo + 2
                                    GLToEntry = EntryNo - 1
                                End If
                            End If

                            Dim updateline As Query = Query.Update(linetable)
                            updateline.WhereAs("RowId") = rLine("RowID")

                            Dim strdoc As String = DocumentNo
                            If rLine("Shipment No_") <> "" Then strdoc = rLine("Shipment No_") + "," + DocumentNo

                            updateline.Fields("Shipment No_") = strdoc
                            updateline.Fields("Quantity Shipped") = rLine("Quantity Shipped") + rLine("Qty_ to Ship")
                            updateline.Fields("Outstanding Quantity") = rLine("Outstanding Quantity") - rLine("Qty_ to Ship")
                            updateline.Fields("Qty_ to Ship") = rLine("Outstanding Quantity") - rLine("Qty_ to Ship")
                            '---
                            updateline.Fields("Qty_ to Invoice") = rLine("Quantity Shipped") + rLine("Qty_ to Ship") - rLine("Quantity Invoiced")

                            'updateline.Fields("Ship") = 1
                            updateline.Execute()

                            'Update Item Lot Number - Quanity
                            Dim p_itemexist As Query = Query.From("Item Lot Number").Transaction(True)
                            p_itemexist.WhereAs("Lot No_") = rLine("Lot No_")
                            p_itemexist.WhereAs("Item No_") = rLine("No_")
                            p_itemexist.WhereAs("Source Code") = rInvoice("Source Code")
                            p_itemexist.WhereAs("Location Code") = rLine("Location Code")

                            If rLine("Lot No_") <> "" And p_itemexist.RecordCount > 0 Then
                                Dim QtyPerLotNo As Decimal = p_itemexist.Value("Qty_ per Unit of Measure")
                                If QtyPerLotNo = 0 Then QtyPerLotNo = 1
                                Dim Qty As Decimal = rLine("Qty_ to Ship") * rLine("Qty_ per Unit of Measure") / QtyPerLotNo

                                Dim updateLotInfor As Query = Query.Update("Item Lot Number")

                                updateLotInfor.Where("Item No_").Is(rLine("No_")).And("Lot No_").Is(rLine("Lot No_"))
                                updateLotInfor.And("Source Code").Is(SaleSourceCode)
                                updateLotInfor.And("Responsibility Center").Is(ResponsibilityCenter)
                                updateLotInfor.And("Location Code").Is(rLine("Location Code")).And("Quantity").GreaterThan(0)
                                updateLotInfor.Fields("Quantity", "-") = Qty
                                updateLotInfor.Fields("Valued Quantity", "-") = rLine("Qty_ to Ship") * rLine("Qty_ per Unit of Measure")
                                updateLotInfor.Execute()
                            End If


                            Dim JobNo As String = rLine("Job No_")
                            Dim project_exist As Query = Query.From("Item By Project").Transaction(True)
                            project_exist.WhereAs("Project No_") = JobNo
                            project_exist.WhereAs("Item No_") = rLine("No_")
                            If JobNo <> "" And project_exist.RecordCount > 0 Then
                                Dim updateItemByProjectTable As Query = Query.Update("Item By Project")
                                updateItemByProjectTable.WhereAs("Project No_") = JobNo
                                updateItemByProjectTable.WhereAs("Item No_") = rLine("No_")
                                'updateItemByProjectTable.Fields("Purchased Quantity", "+") =  String.Format("{0}*{1}/[Qty_ per Unit of Measure])", Str(Rate))rLine("Qty_ to Ship") * rLine("Qty_ per Unit of Measure")
                                updateItemByProjectTable.Fields("Remaining Quantity", "-") = rLine("Qty_ to Ship") * rLine("Qty_ per Unit of Measure")
                                updateItemByProjectTable.Execute()
                            End If


                            'Dim Importlicense As String 
                            Dim Quota_exist As Query = Query.From("Quota").Transaction(True)
                            Quota_exist.WhereAs("Source No_") = rInvoice("Sell-to Customer No_")
                            Quota_exist.WhereAs("Item No_") = rLine("No_")
                            Quota_exist.WhereAs("License No_") = rLine("Cross-Reference No_")
                            Quota_exist.WhereAs("Source Type") = 1 'Quota hang ban
                            If rLine("Cross-Reference No_") <> "" And Quota_exist.RecordCount > 0 Then
                                Dim ReaminingQuantity As Decimal = Quota_exist.Value("Quota Remaining Quantity")
                                'Dim Quota As Decimal = Quota_exist.Value("Quota Quantity")
                                If ReaminingQuantity < rLine("Qty_ to Ship") * rLine("Qty_ per Unit of Measure") Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Out of Quota {0}", rLine("No_"))
                                    Return
                                End If
                            End If

                            Dim updateQuota As Query = Query.Update("Quota")
                            updateQuota.Where("Item No_").Is(rLine("No_")).And("Source No_").Is(rInvoice("Sell-to Customer No_"))
                            updateQuota.And("Source Type").Is(1) 'Quota Hang ban
                            updateQuota.Fields("Quota Remaining Quantity", "-") = rLine("Qty_ to Ship") * rLine("Qty_ per Unit of Measure")
                            updateQuota.Execute()

                        End If
                    Else
                        Query.RollBack()
                        WorkSession.MsgML("Posting Group not set up for Item {0}!", rLine("No_"))
                        Return
                    End If
                    'dimline = dimline + 1
                End If
            Next

            'Dim queryDim As Query = Query.From("Document Dimension")
            'queryDim.Where("Document No_").Is(rInvoice("No_"))
            'Dim DimDataSource As DataTable = queryDim.ToTable
            'Dim insertDimension As Query = Query.Entity("Document Dimension Released").Insert
            'For Each rDim As DataRow In DimDataSource.Rows
            '    insertDimension.WithValues(rDim)
            '    insertDimension.Execute()
            'Next

            ''delete(dimension)
            'Dim delete As Query = Query.Delete("Document Dimension")
            'delete.WhereAs("Document No_") = rInvoice("No_")
            'delete.Execute()

            If GLFromEntry < GLToEntry Then
                'Post information to GL Register

                Dim regNo As Integer = GetMaxEntry(-1, 0)
                'If regNo = 0 Then regNo = 1

                Dim insertReg As Query = Query.Entity("G_L Register").Insert

                insertReg.Fields("No_") = regNo
                insertReg.Fields("From Entry No_") = GLFromEntry
                insertReg.Fields("To Entry No_") = GLToEntry
                insertReg.Fields("From VAT Entry No_") = 0
                insertReg.Fields("To VAT Entry No_") = 0
                insertReg.Fields("User ID") = Framework.UserID
                insertReg.Fields("Creation Date") = Now.Date
                insertReg.Fields("Reversed") = 0
                insertReg.Fields("Journal Batch Name") = SaleBatchCode
                insertReg.Fields("Source Code") = SaleSourceCode
                insertReg.Fields("Document No_") = DocumentNo
                insertReg.Fields("External Document No_") = rInvoice("External Document No_")

                insertReg.Execute()
            End If

            If (ItemFromEntry <= ItemToEntry) And ItemToEntry <> -1 Then
                'Post information to Item Register

                Dim regItemNo As Integer = GetMaxEntry(-2, 0)
                'If regItemNo = 0 Then regItemNo = 1

                Dim insertItemReg As Query = Query.Entity("Item Register").Insert

                insertItemReg.Fields("No_") = regItemNo
                insertItemReg.Fields("From Entry No_") = ItemFromEntry
                insertItemReg.Fields("To Entry No_") = ItemToEntry
                insertItemReg.Fields("From Value Entry No_") = 0
                insertItemReg.Fields("To Value Entry No_") = 0
                insertItemReg.Fields("User ID") = Framework.UserID
                insertItemReg.Fields("Creation Date") = Now.Date
                insertItemReg.Fields("Journal Batch Name") = SaleBatchCode
                insertItemReg.Fields("Source Code") = SaleSourceCode
                insertItemReg.Fields("From Capacity Entry No_") = 0
                insertItemReg.Fields("To Capacity Entry No_") = 0
                insertItemReg.Fields("Document No_") = DocumentNo
                insertItemReg.Fields("External Document No_") = rInvoice("External Document No_")

                insertItemReg.Execute()

                Dim Update As Query = Query.Update("No_ Series Line")
                Update.Where("RowID").Is(SeriesRowID)
                Update.Fields("Last No_ Used") = LastClientUsed
                'Update.WhereAs("Series Code") = SaleSequence
                'Update.WhereAs("Code") = r("Code")
                Update.Execute()

                Update = Query.Update(sender.TableName)
                Update.Where("No_").Is(rInvoice("No_"))
                If Flag = 0 Then
                    Update.Fields("Ship") = 1
                Else
                    Update.Fields("Ship") = 2
                End If

                Update.Execute()
            End If


            Query.EndTransaction()

            'Update display
            sender.RefreshSource()
            WorkSession.MsgML("Post shipment completed")

        Catch ex As Exception
            Query.RollBack()

            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    'Post GL for Invoice and shipment also update Quantity on Item Lot Number table
    Public Shared Sub QRCodeSalesProcessPost(ByVal sender As WXSource, ByVal e As WXArgs)
        If Not TRDPostingDateValid(sender, e) Then Return
        If Not TRDExchangeRateValid(sender, e) Then Return

        Dim LineControler As WXSource = sender.Relations(0)
        Dim LineTable As String = LineControler.TableName

        Dim rInvoice As Hashtable = sender.CurrentRow
        'If rInvoice Is Nothing Then Return
        If rInvoice Is Nothing Or rInvoice.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If

        If rInvoice("Status") < 2 Then
            WorkSession.MsgML("This Document must be Released first !")
            Return
        End If

        'If rInvoice("Correction") = 0 Then
        '    WorkSession.MsgML("This Document must be Signed first !")
        '    Return
        'End If

        If CheckItemAvailableSalesShipment(sender, e) = 0 Then Return

        Dim q As Query = Query.From("Customer")
        q.WhereAs("No_") = rInvoice("Bill-to Customer No_")
        Dim rCustomerAR As DataRow = q.TakeRow

        If rCustomerAR Is Nothing Then
            WorkSession.MsgML("Posting group is not setting for this customer")
            Return
        End If


        'Check is Direct posting to GL
        q = Query.From("Inventory Setup").Select("[Automatic Cost Posting]")
        Dim isDirectPosting As Integer = q.Value("Automatic Cost Posting")

        q = Query.From("Sales Receivables Setup")
        Dim GLPosting As Integer = q.WithDefault(1).Value("GL Posting")
        Dim ExtDocMandatory As Integer = q.Value("Ext_ Doc_ No_ Mandatory")
        Dim Cal_Inv_Disc As Integer = q.Value("Calc_ Inv_ Discount")

        If ExtDocMandatory = 1 And rInvoice("External Document No_") = "" Then
            WorkSession.MsgML("External Document must be input")
            Return
        End If

        q = Query.From("Customer Posting Group")
        If rInvoice("Customer Posting Group") <> "" Then
            q.WhereAs("Code") = rInvoice("Customer Posting Group")
        Else
            q.WhereAs("Code") = rCustomerAR("Customer Posting Group")
        End If
        Dim ARAccount As String = q.Value("Receivables Account")


        q = Query.From(LineTable).Transaction(True)
        q.WhereAs("Document No_") = rInvoice("No_")
        'q.whereas("Document Type") = rInvoice("Document Type")
        Dim InvoiceLine As DataTable = q.ToTable
        If InvoiceLine.Rows.Count = 0 Then
            WorkSession.MsgML("Sales line must input!")
            Return
        End If

        '============================== check dieu kien Quota============================
        Dim Tbl_Quota As New DataTable
        Dim Tbl_Temp2 As New DataTable
        Dim StrSql As String = ""

        For i As Integer = 0 To InvoiceLine.Rows.Count - 1
            StrSql = " select Q.[Document No_],Q.[Source No_], Q.[Common Item No_],"
            StrSql &= " sum(q.[Quota Remaining Quantity]) as [Remaining Quantity], SUM(S.[Qty_ to Ship]) as Quantity"
            StrSql &= " from [Quota] Q, [Sales Order Line] S, [Sales Order Header] H, [Item] I"
            StrSql &= " where I.[No_] = S.[No_] AND " '--vat tu co trong Sales Line"
            StrSql &= " I.[Common Item No_] = Q.[Common Item No_] AND " '--hoac la common hoac la item
            StrSql &= " S.[Document No_] = H.[No_] AND " '-- tim kiem ma khach hang
            StrSql &= " H.[Sell-to Customer No_] = Q.[Source No_] AND " '---- ma khach hang la dung dan
            StrSql &= " Q.[Source Type] = 1 AND Q.[Quota Type] = 1 AND"
            StrSql &= " S.[Cross-Reference No_] = Q.[Document No_] " '--- kiem tra chung chi quota
            StrSql &= " and I.[No_]='" & InvoiceLine.Rows(i)("No_") & "'"
            StrSql &= " and Q.[Document No_]='" & InvoiceLine.Rows(i)("Cross-Reference No_") & "'"
            StrSql &= " and Q.[Source No_]='" & rInvoice("Buy-from Vendor No_") & "'"
            StrSql &= " and Q.[Source Type]=1"
            StrSql &= " and Q.[Quota Type]=1"
            StrSql &= " Group by Q.[Document No_],Q.[Source No_],Q.[Common Item No_]"
            StrSql &= " Order by Q.[Document No_]"
            Tbl_Temp2 = Query.Sql(StrSql).ToTable
            For j As Integer = 0 To Tbl_Temp2.Rows.Count - 1
                If Tbl_Temp2.Rows(j)("Quantity") > Tbl_Temp2.Rows(j)("Remaining Quantity") Then
                    WorkSession.MsgML("Quantity Remaining of Quota not enough !")
                    Exit Sub
                End If
            Next
        Next

        '=================================================================================

        For Each rLine As DataRow In InvoiceLine.Rows
            If rLine("Quantity Invoiced") > 0 Then
                WorkSession.MsgML("Purchase Order has Partial Invoiced for Item {0} !", rLine("No_"))
                Return
            End If

            If rLine("Outstanding Quantity") = 0 Then
                WorkSession.MsgML("already Shipped !")
                Return
            End If
        Next

        Dim VATRegistrationNo As String = rInvoice("VAT Registration No_")
        If VATRegistrationNo = "" Then
            VATRegistrationNo = rCustomerAR("VAT Registration No_")
        End If

        Dim SaleSourceCode As String = rInvoice("Source Code")
        Dim SaleBatchCode As String = Framework.Translate("SALES-INV")
        'Dim entity As EntityInfo = ApplicationBase.App.Entities.GetByName("G_L Entry", GetType(EntityInfo))

        Dim EntryNo As Integer = 1
        Dim TransNo As Integer = 1
        EntryNo = GetMaxEntry(0, TransNo)

        Dim GLFromEntry As Integer = EntryNo
        Dim GLToEntry As Integer = EntryNo

        Dim ItemEntryNo As Integer = GetMaxEntry(4, 0)

        Dim ItemFromEntry As Integer = ItemEntryNo
        Dim ItemToEntry As Integer = -1

        '        If WorkSession.MsgML("Post invoice now?", MsgBoxStyle.YesNo) = DialogResult.No Then Return
        Try

            Query.BeginTransaction()

            Dim exchRate As Decimal '= GetExchangeRate(rInvoice("Currency Code"), rInvoice("Document Date"))
            'If exchRate = 0 Then exchRate = 1
            If rInvoice("Currency Factor") <> 0 Then
                exchRate = rInvoice("Currency Factor")
            Else
                exchRate = GetExchangeRate(rInvoice("Currency Code"), rInvoice("Document Date"))
                If exchRate = 0 Then exchRate = 1
            End If

            Dim PriceAmount, SalesAmount, CostAmount, VATAmount, Commission As Decimal
            Dim dimline As Integer = 0
            Dim PostCustomerLedger As Integer
            'Dim errMsg As New ArrayList

            For Each rLine As DataRow In InvoiceLine.Rows

                If rLine("Status") < 3 And (ValidateWarehousePickup(rLine("Location Code")) = 1) Then
                    WorkSession.MsgML("Yêu cầu bốc lô cho SP {0} và Lo số {1}!", rLine("No_"), rLine("Lot No_"))
                    Continue For
                End If

                PostCustomerLedger = 1
                'q = Query.From("Item")
                'q.WhereAs("No_") = rLine("No_")
                'Dim rLinePostingGroup As DataRow = q.TakeRow
                'If Not rLinePostingGroup Is Nothing Then
                Dim IVAccount As String = GetGLAccount(rLine("No_"), enTableModule.asInventory, 0, rLine("Location Code"))
                Dim COGSAccount As String = GetGLAccount(rLine("No_"), enTableModule.asInventory, 1, rLine("Location Code"))
                Dim SalesAccount As String = "" 'GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 10)
                'Dim SalesInvDiscAccount As String = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 4)

                q = Query.From("VAT Posting Setup")
                q.WhereAs("VAT Bus_ Posting Group") = rLine("VAT Bus_ Posting Group")
                q.WhereAs("VAT Prod_ Posting Group") = rLine("VAT Prod_ Posting Group")
                Dim SalesVATAccount As String = q.Value("Sales VAT Account")

                'Check account if GLPosting
                'If GLPosting = 1 Then
                '    If ARAccount = "" Then
                '        errMsg.Add("AR Account is empty")
                '    End If
                '    If COGSAccount = "" Then
                '        errMsg.Add("COGS Account is empty")
                '    End If

                '    If IVAccount = "" Then
                '        errMsg.Add("Inventory Account is empty")
                '    End If
                '    'If SalesAccount = "" Then errMsg.Add("Sales Account Account is empty")
                '    'If CommissionAccount = "" Then errMsg.Add("Sales Commission Account is empty")
                '    'If SalesInvDiscAccount = "" Then errMsg.Add("Sales Invoice Discount Account is empty")
                '    If SalesVATAccount = "" Then
                '        errMsg.Add("VAT Account is empty")
                '    End If
                'End If

                If rLine("Amount") = 0 Then
                    Query.RollBack()
                    WorkSession.MsgML("Amount is zero, Continue to Post?")
                    Return
                End If

                If rLine("Quantity") = 0 Then
                    Query.RollBack()
                    WorkSession.MsgML("Quantity must be input")
                    Return
                End If

                SalesAmount = rLine("Amount")
                PriceAmount = rLine("Amount") - rLine("Line Discount Amount")

                Commission = rLine("Inv_ Discount Amount") + rLine("Inv_ Discount Amount") * rLine("VAT %") / 100
                VATAmount = VATAmount + rLine("VAT Amount")
                CostAmount = CostAmount + rLine("Line Amount")

                'Post 2 entry to GL for sales and AR
                If GLPosting = 1 Then
                    If rLine("Amount") <> 0 Then
                        Select Case CInt(rLine("Document Type"))
                            Case 0 'dt noi dia
                                SalesAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 20)
                                If Trim(SalesAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Sales Domestics Account not setting up")
                                    Return
                                End If
                            Case 1 'Commission Account with Tax
                                PostCustomerLedger = 0
                                SalesAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 21)
                                ARAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 6)
                                If Trim(SalesAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Commission Account not setting up")
                                    Return
                                End If
                                If Trim(ARAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Commission with tax Account not setting up")
                                    Return
                                End If
                            Case 3 'Revenue Item Account
                                SalesAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 23)
                                If Trim(SalesAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Revenue Item Account not setting up")
                                    Return
                                End If
                            Case 4 'Revenue Goods Account
                                SalesAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 24)
                                If Trim(SalesAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Revenue Goods Account not setting up")
                                    Return
                                End If
                            Case 5 'Revenue Account Export
                                SalesAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 25)
                                If Trim(SalesAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Revenue Export Account not setting up")
                                    Return
                                End If
                            Case 6 'Scrapt Product
                                SalesAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 26)
                                If Trim(SalesAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Other Revenue Account not setting up")
                                    Return
                                End If
                            Case 7 'Mau
                                PostCustomerLedger = 0
                                SalesAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 27)
                                ARAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 7)
                                If Trim(SalesAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Sample Revenue Account not setting up")
                                    Return
                                End If
                                If Trim(ARAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Sample Expense Account not setting up")
                                    Return
                                End If
                            Case 8 'Hang bao hanh
                                PostCustomerLedger = 0
                                SalesAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 28)
                                ARAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 8)
                                If Trim(SalesAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Warranty Revenue Account not setting up")
                                    Return
                                End If
                                If Trim(ARAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Warranty Expense Account not setting up")
                                    Return
                                End If
                            Case 9 'Hang Doi/Bu
                                PostCustomerLedger = 0
                                SalesAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 29)
                                ARAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 9)
                                If Trim(SalesAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Change-Over Revenue Account not setting up")
                                    Return
                                End If
                                If Trim(ARAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Change-Over Expense Account not setting up")
                                    Return
                                End If
                            Case 10 'other
                                SalesAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 30)
                                ARAccount = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 10)
                                If Trim(SalesAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Commission with tax Account not setting up")
                                    Return
                                End If
                                If Trim(ARAccount) = "" Then
                                    Query.RollBack()
                                    WorkSession.MsgML("Sample Expense Account not setting up")
                                    Return
                                End If
                        End Select
                        If Cal_Inv_Disc = 1 Then SalesAccount = PriceAmount
                        TRDGLPost(rLine("Line No_"), rInvoice, SalesAmount, ARAccount, SalesAccount, EntryNo, TransNo, exchRate, -4, SaleSourceCode, SaleBatchCode, rInvoice("Posting Description"), 2, 0, rLine("No_"), rInvoice("Bill-to Customer No_"), 1, "") '2 is header line dimension

                        'Post to suledger
                        If (PriceAmount) <> 0 And PostCustomerLedger <> 0 Then
                            TRDCustomerLedgerPost(rInvoice, PriceAmount + Commission, rLine("Line Amount"), rLine("VAT Amount"), rInvoice("Bill-to Customer No_"), EntryNo, TransNo, exchRate, SaleSourceCode, SaleBatchCode, rInvoice("Posting Description"), 2, rLine("No_"), rLine("Line Discount Amount"), rLine("Line No_"))
                        End If

                        EntryNo = EntryNo + 2
                        GLToEntry = EntryNo - 1
                    End If

                    If isDirectPosting = 1 And rLine("Line Amount") <> 0 Then
                        'Post 2 entry to GL for COGS and Inventory
                        TRDGLPost(rLine("Line No_"), rInvoice, rLine("Line Amount"), COGSAccount, IVAccount, EntryNo, TransNo, exchRate, -3, SaleSourceCode, SaleBatchCode, rInvoice("Posting Description"), 2, 0, rLine("No_"), rInvoice("Bill-to Customer No_"), 1, "") '4 is Line dimension
                        EntryNo = EntryNo + 2
                        GLToEntry = EntryNo - 1
                    End If

                    'Post 2 entry to GL for VAT and AR
                    If rLine("VAT Amount") <> 0 Then
                        If SalesVATAccount = "" Then
                            Query.RollBack()
                            WorkSession.MsgML("Sales VAT Account not setting up")
                            Return
                        End If

                        TRDGLPost(rLine("Line No_"), rInvoice, rLine("VAT Amount"), ARAccount, SalesVATAccount, EntryNo, TransNo, exchRate, -4, SaleSourceCode, SaleBatchCode, rInvoice("Posting Description"), 2, 0, rLine("No_"), rInvoice("Bill-to Customer No_"), 2, "") '-1 is no dimension
                        TRDVATPost(2, 2, rInvoice, rLine, VATRegistrationNo, SalesVATAccount, SalesAccount, exchRate, SaleSourceCode, SaleBatchCode, EntryNo + 1)
                        EntryNo = EntryNo + 2
                        GLToEntry = EntryNo - 1
                    Else 'VAT =0
                        TRDVATPost(2, 2, rInvoice, rLine, VATRegistrationNo, SalesVATAccount, SalesAccount, exchRate, SaleSourceCode, SaleBatchCode, GLToEntry)
                    End If

                    If rLine("Line Discount Amount") <> 0 And Cal_Inv_Disc = 0 Then
                        Dim SalesInvDiscAccount As String = GetGLAccount(rInvoice("Bill-to Customer No_"), 2, 4)
                        If Trim(SalesInvDiscAccount) = "" Then
                            Query.RollBack()
                            WorkSession.MsgML("Sales Invoice Discount Account is empty")
                            Return
                        End If
                        TRDGLPost(rLine("Line No_"), rInvoice, rLine("Line Discount Amount"), SalesInvDiscAccount, ARAccount, EntryNo, TransNo, exchRate, 6, SaleSourceCode, SaleBatchCode, rLine("Description"), 2, 0, rLine("No_"), rInvoice("Bill-to Customer No_"), 1, "") '2 is header dimension
                        EntryNo = EntryNo + 2
                        GLToEntry = EntryNo - 1
                    End If

                    If rLine("Inv_ Discount Amount") <> 0 Then
                        Dim SalesInterrim As String = GetGLAccount(rLine("No_"), enTableModule.asInventory, 17, rLine("Location Code"))
                        If Trim(SalesInterrim) = "" Then
                            Query.RollBack()
                            WorkSession.MsgML("Interrim Revenue Account is empty")
                            Return
                        End If
                        TRDGLPost(rLine("Line No_"), rInvoice, Commission, ARAccount, SalesInterrim, EntryNo, TransNo, exchRate, 4, SaleSourceCode, SaleBatchCode, rLine("Description"), 2, 0, rLine("No_"), rInvoice("Bill-to Customer No_"), 1, "") '2 is header dimension

                        'insert 2 commission ledger for comission %
                        CampaignLedgerPost(rInvoice, rLine, Commission)
                        EntryNo = EntryNo + 2
                        GLToEntry = EntryNo - 1
                    End If
                Else 'don't post to GL
                    'Post to "cust_ Ledger entry" and "Cust_ Ledger Entry"
                    Dim queryEntry As Query = Query.From("Cust_ Ledger Entry").Select("([Entry No_] +1 ) as EntryNo").Top(1).OrderBy("EntryNo").DESC
                    Dim CustEntry As Integer = queryEntry.Value("EntryNo")
                    If PriceAmount <> 0 Then
                        TRDCustomerLedgerPost(rInvoice, PriceAmount, CostAmount, VATAmount, rInvoice("Bill-to Customer No_"), CustEntry, TransNo, exchRate, SaleSourceCode, SaleBatchCode, rInvoice("Posting Description"), 2, rLine("No_"), rLine("Line Discount Amount"), rLine("Line No_"))
                    End If
                    TRDVATPost(2, 2, rInvoice, rLine, VATRegistrationNo, SalesVATAccount, SalesAccount, exchRate, SaleSourceCode, SaleBatchCode, CustEntry)
                End If
                'Post inventory 2 entry: Item Ledger entry and value entry

                TRDInventoryValuePost(rInvoice("No_"), rInvoice, rLine, IVAccount, COGSAccount, ItemEntryNo, exchRate, rLine("Qty_ per Unit of measure"), SaleSourceCode, SaleBatchCode, dimline, isDirectPosting, -1, 1, 0, 1)

                'Update Item Lot Number - Quanity
                Dim p_itemexist As Query = Query.From("Item Lot Number").Transaction(True)
                p_itemexist.WhereAs("Lot No_") = rLine("Lot No_")
                p_itemexist.WhereAs("Item No_") = rLine("No_")
                p_itemexist.WhereAs("Source Code") = rInvoice("Source Code")
                p_itemexist.WhereAs("Location Code") = rLine("Location Code")

                If rLine("Lot No_") <> "" And p_itemexist.RecordCount > 0 Then
                    Dim QtyPerLotNo As Decimal = p_itemexist.Value("Qty_ per Unit of Measure")
                    If QtyPerLotNo = 0 Then QtyPerLotNo = 1
                    Dim Qty As Decimal = rLine("Quantity") * rLine("Qty_ per Unit of Measure") / QtyPerLotNo

                    Dim updateLotInfor As Query = Query.Update("Item Lot Number")
                    updateLotInfor.Where("Item No_").Is(rLine("No_")).And("Lot No_").Is(rLine("Lot No_"))
                    updateLotInfor.And("Source Code").Is(SaleSourceCode)
                    'updateLotInfor.And("Responsibility Center").Is(rInvoice("Responsibility Center"))
                    updateLotInfor.And("Location Code").Is(rLine("Location Code")).And("Quantity").GreaterThan(0)
                    updateLotInfor.Fields("Quantity", "-") = Qty
                    updateLotInfor.Fields("Valued Quantity", "-") = rLine("Quantity") * rLine("Qty_ per Unit of Measure")
                    updateLotInfor.Execute()
                End If

                Dim JobNo As String = rLine("Job No_")
                Dim project_exist As Query = Query.From("Item By Project").Transaction(True)
                project_exist.WhereAs("Project No_") = JobNo
                project_exist.WhereAs("Item No_") = rLine("No_")
                If JobNo <> "" And project_exist.RecordCount > 0 Then
                    Dim updateItemByProjectTable As Query = Query.Update("Item By Project")
                    updateItemByProjectTable.WhereAs("Project No_") = JobNo
                    updateItemByProjectTable.WhereAs("Item No_") = rLine("No_")
                    'updateItemByProjectTable.Fields("Purchased Quantity", "+") =  rLine("Qty_ to Ship") * rLine("Qty_ per Unit of Measure")
                    updateItemByProjectTable.Fields("Remaining Quantity", "-") = rLine("Quantity") * rLine("Qty_ per Unit of Measure")
                    updateItemByProjectTable.Execute()
                End If


                'Dim Importlicense As String 
                Dim Quota_exist As Query = Query.From("Quota").Transaction(True)
                Quota_exist.WhereAs("Source No_") = rInvoice("Sell-to Customer No_")
                Quota_exist.WhereAs("Item No_") = rLine("No_")
                Quota_exist.WhereAs("License No_") = rLine("Cross-Reference No_")
                Quota_exist.WhereAs("Source Type") = 1 'Quota hang ban
                If rLine("Cross-Reference No_") <> "" And Quota_exist.RecordCount > 0 Then
                    Dim ReaminingQuantity As Decimal = Quota_exist.Value("Quota Remaining Quantity")
                    'Dim Quota As Decimal = Quota_exist.Value("Quota Quantity")
                    If ReaminingQuantity < rLine("Quantity") * rLine("Qty_ per Unit of Measure") Then
                        Query.RollBack()
                        WorkSession.MsgML("Out of Quota {0}", rLine("No_"))
                        Return
                    End If
                End If

                Dim updateQuota As Query = Query.Update("Quota")
                updateQuota.Where("Item No_").Is(rLine("No_")).And("Source No_").Is(rInvoice("Sell-to Customer No_"))
                updateQuota.And("Source Type").Is(1) 'Quota Hang ban
                updateQuota.Fields("Quota Remaining Quantity", "-") = rLine("Quantity") * rLine("Qty_ per Unit of Measure")
                updateQuota.Execute()

                ItemToEntry = ItemEntryNo
                ItemEntryNo += 1

                'Else
                'Query.RollBack()
                'WorkSession.MsgML("Posting group not yet setting up")
                'Return
                'End If
                dimline = dimline + 1
            Next

            'update invoice discount
            CampaignLedgerUpdate(rInvoice)

            If GLFromEntry < GLToEntry Then

                Dim regNo As Integer = GetMaxEntry(-1, 0)
                If regNo <= 0 Then regNo = 1

                Dim insertReg As Query = Query.Entity("G_L Register").Insert

                insertReg.Fields("No_") = regNo
                insertReg.Fields("From Entry No_") = GLFromEntry
                insertReg.Fields("To Entry No_") = GLToEntry
                insertReg.Fields("From VAT Entry No_") = 0
                insertReg.Fields("To VAT Entry No_") = 0
                insertReg.Fields("User ID") = Framework.UserID
                insertReg.Fields("Creation Date") = Now.Date
                insertReg.Fields("Reversed") = 0
                insertReg.Fields("Journal Batch Name") = SaleBatchCode
                insertReg.Fields("Source Code") = SaleSourceCode
                insertReg.Fields("Responsibility Center") = rInvoice("Responsibility Center")
                insertReg.Fields("Document No_") = rInvoice("No_")
                insertReg.Fields("External Document No_") = rInvoice("External Document No_")
                insertReg.Execute()
            End If

            If (ItemFromEntry <= ItemToEntry) And ItemToEntry <> -1 Then
                'Post information to Item Register
                Dim queryItemEntry As Query = Query.From("Item Register").Select(" ([No_]+1) AS RegItemNo").Top(1).OrderBy("RegItemNo").DESC
                Dim regItemNo As Integer = queryItemEntry.Value("RegItemNo")
                If regItemNo <= 0 Then regItemNo = 1

                Dim insertItemReg As Query = Query.Entity("Item Register").Insert

                insertItemReg.Fields("No_") = regItemNo
                insertItemReg.Fields("From Entry No_") = ItemFromEntry
                insertItemReg.Fields("To Entry No_") = ItemToEntry
                insertItemReg.Fields("From Value Entry No_") = 0
                insertItemReg.Fields("To Value Entry No_") = 0
                insertItemReg.Fields("User ID") = Framework.UserID
                insertItemReg.Fields("Creation Date") = Now.Date
                insertItemReg.Fields("Journal Batch Name") = SaleBatchCode
                insertItemReg.Fields("Source Code") = SaleSourceCode
                insertItemReg.Fields("Responsibility Center") = rInvoice("Responsibility Center")
                insertItemReg.Fields("Document No_") = rInvoice("No_")
                insertItemReg.Fields("External Document No_") = rInvoice("External Document No_")
                insertItemReg.Execute()
            End If

            'Transfer data to posted table
            Dim insertSalesHeader As Query = Query.Entity("TRD Sales Posted Invoice").Insert

            insertSalesHeader.Select.WithValues(rInvoice)

            insertSalesHeader.Execute()

            Dim insertSalesLine As Query = Query.Entity("TRD Sales Posted Invoice Line").Insert
            For Each rLine As DataRow In InvoiceLine.Rows
                insertSalesLine.WithValues(rLine)
                insertSalesLine.Execute()
            Next

            Dim queryDim As Query = Query.From("Document Dimension")
            queryDim.Where("Document No_").Is(rInvoice("No_"))
            Dim DimDataSource As DataTable = queryDim.ToTable
            Dim insertDimension As Query = Query.Entity("Document Dimension Released").Insert
            For Each rDim As DataRow In DimDataSource.Rows
                insertDimension.WithValues(rDim)
                insertDimension.Execute()
            Next

            'Delete dimension
            Dim delete As Query = Query.Delete("Document Dimension")
            delete.WhereAs("Document No_") = rInvoice("No_")
            'delete.Where("Document Type") = rInvoice("Document Type")
            delete.Execute()

            'Delete line
            delete = Query.Delete(LineTable)
            delete.WhereAs("Document No_") = rInvoice("No_")
            'delete.Where("Document Type") = rInvoice("Document Type")
            delete.Execute()

            'Delete header
            delete = Query.Delete(sender.TableName)
            delete.WhereAs("No_") = rInvoice("No_")
            'delete.Where("Document Type") = rInvoice("Document Type")
            delete.Execute()

            Query.EndTransaction()

            'Update display
            sender.RefreshSource()
            WorkSession.MsgML("Post invoice completed")

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    'For PO
    Public Sub QRCodeEntryPurchaseOrderInputApp(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        'If r Is Nothing Or r.Count = 0 Then Return
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If r("Status") >= 2 Then
            WorkSession.MsgML("Already Post !")
            Return
        End If


        Dim DocumentNo_ As String = r("No_")

        If (r("Document Type") Mod 2 <> 0) Then
            WorkSession.MsgML("Document must be in Purchase Order !")

            Return
        End If

        Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        Dim i As Integer = qqq.Value("EntryNo")
        Dim j As Integer = 0

        Try
            Query.BeginTransaction()

            Dim Finish As Integer = 1
            Dim tableID As Integer = 0
            Dim querrydata As Query = Query.From("Document Entry").Transaction(True)
            querrydata.Where("Document No_").Is(DocumentNo_)
            querrydata.And("Document Type").Is(0)

            Dim dbSource As DataTable = querrydata.ToTable

            For Each trow As DataRow In dbSource.Rows
                If trow("QRCode") = "" Or trow("Status") = 2 Then
                    WorkSession.MsgML("QRCode must be filled or scanned already for line {0}!", j)
                    j += 1
                    Continue For
                End If

                Dim QueryQRCode As Query = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("QRCode").Is(trow("QRCode"))
                'QueryQRCode.And("Location Code").Is(trow("Location Code"))

                'Select Case r("Document Type")
                '    Case 4
                '        QueryQRCode.And("Document Type").Is(5)
                '        If QueryQRCode.ToTable.Rows.Count = 0 Then
                '            WorkSession.MsgML("QRCode must be created and picked up for line {0}!", j)
                '            j += 1
                '            Continue For
                '        End If
                '    Case 14
                '        QueryQRCode.And("Document Type").Is(15)
                '        If QueryQRCode.ToTable.Rows.Count = 0 Then
                '            WorkSession.MsgML("QRCode must be created and picked up for line {0}!", j)
                '            j += 1
                '            Continue For
                '        End If
                'End Select


                QueryQRCode = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("QRCode").Is(trow("QRCode"))
                QueryQRCode.And("Document Type").Is(0)
                QueryQRCode.And("Document No_").Is(DocumentNo_)
                'QueryQRCode.And("Location Code").Is(trow("Location Code"))

                If QueryQRCode.ToTable.Rows.Count > 0 Then
                    WorkSession.MsgML("QRCode already has be created and putted in for line {0}!", j)
                    j += 1
                    Continue For
                End If

                Dim QRCode = Query.From("QRCode").Transaction(True)
                QRCode.Where("QRCode").Is(trow("QRCode"))
                'QueryQRCode.Where("Document No_").Is(DocumentNo_)
                'QueryQRCode.And("Document Type").Is(trow("Document Type"))
                'QueryQRCode.And("Item No_").Is(trow("Item No_"))

                If QRCode.ToTable.Rows.Count > 0 Then
                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryInsertQREntry.Fields("Item No_") = trow("Item No_")
                    QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Document Type") = 0 'trow("Document Type")
                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Description") = r("External Document No_")
                    QueryInsertQREntry.Fields("Variant Code") = "" 'trow("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = "" 'trow("Work Center")

                    QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
                    QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

                    'QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    'QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Unit of Measure Code") = trow("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = trow("Qty_ per Unit of Measure")
                    QueryInsertQREntry.Fields("Source Code") = trow("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = trow("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = trow("Location Code")
                    QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")

                    'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    'QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Entry No_") = i
                    i = i + 1
                    QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                    QueryInsertQREntry.Fields("Document No_") = DocumentNo_
                    QueryInsertQREntry.Execute()

                    Dim QueryUpdate As Query = Query.Update("Document Entry")
                    QueryUpdate.WhereAs("Document No_") = DocumentNo_
                    QueryUpdate.WhereAs("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryUpdate.WhereAs("Item No_") = trow("Item No_")
                    QueryUpdate.WhereAs("Line No_") = j
                    QueryUpdate.WhereAs("Document Type") = 0 ' trow("Document Type")
                    'QueryUpdate.WhereAs("Serial No_") = trow("Serial No_")
                    QueryUpdate.Fields("Scan Number", "+") = 1


                    QueryUpdate.Fields("Status") = 2

                    QueryUpdate.Fields("Attach File") = QRCode.Value("URL")
                    If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = QRCode.Value("Serial No_")
                    If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = QRCode.Value("Lot No_")
                    QueryUpdate.Execute()
                    j += 1
                End If
            Next

            For Each trow As DataRow In dbSource.Rows
                If trow("Status") <> 2 Then
                    Finish = 0
                    Exit For
                End If
            Next

            Dim update As Query = Query.Update("Document Entry Header")
            update.Where("No_").Is(r("No_"))
            update.And("Document Type").Is(r("Document Type"))
            update.Fields("Status") = IIf(Finish = 0, 1, 2)
            update.Execute()

            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub
    'For TO In
    Public Sub QRCodeEntryTransferOrderInputApp(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        'If r Is Nothing Or r.Count = 0 Then Return
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If r("Status") >= 2 Then
            WorkSession.MsgML("Already Post !")
            Return
        End If


        Dim DocumentNo_ As String = r("No_")

        If (r("Document Type") Mod 2 <> 0) Then
            WorkSession.MsgML("Document must be in (Purchase Order, Transfer Order in or Production Order)")

            Return
        End If

        Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        Dim i As Integer = qqq.Value("EntryNo")
        Dim j As Integer = 0

        Try
            Query.BeginTransaction()

            Dim Finish As Integer = 1
            Dim tableID As Integer = 0
            Dim querrydata As Query = Query.From("Document Entry").Transaction(True)
            querrydata.Where("Document No_").Is(DocumentNo_)
            querrydata.And("Document Type").Is(r("Document Type"))

            Dim dbSource As DataTable = querrydata.ToTable

            For Each trow As DataRow In dbSource.Rows
                If trow("QRCode") = "" Or trow("Status") = 2 Then
                    WorkSession.MsgML("QRCode must be filled or scanned already for line {0}!", j)
                    j += 1
                    Continue For
                End If

                Dim QueryQRCode As Query = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("QRCode").Is(trow("QRCode"))
                'QueryQRCode.And("Location Code").Is(trow("Location Code"))

                Select Case r("Document Type")
                    Case 4
                        QueryQRCode.And("Document Type").Is(5)
                        If QueryQRCode.ToTable.Rows.Count = 0 Then
                            WorkSession.MsgML("QRCode must be created and picked up for line {0}!", j)
                            j += 1
                            Continue For
                        End If
                    Case 14
                        QueryQRCode.And("Document Type").Is(15)
                        If QueryQRCode.ToTable.Rows.Count = 0 Then
                            WorkSession.MsgML("QRCode must be created and picked up for line {0}!", j)
                            j += 1
                            Continue For
                        End If
                End Select


                QueryQRCode = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("QRCode").Is(trow("QRCode"))
                QueryQRCode.And("Document Type").Is(trow("Document Type"))
                QueryQRCode.And("Document No_").Is(DocumentNo_)
                'QueryQRCode.And("Location Code").Is(trow("Location Code"))

                If QueryQRCode.ToTable.Rows.Count > 0 Then
                    WorkSession.MsgML("QRCode already has be created and putted in for line {0}!", j)
                    j += 1
                    Continue For
                End If

                Dim QRCode = Query.From("QRCode").Transaction(True)
                QRCode.Where("QRCode").Is(trow("QRCode"))
                'QueryQRCode.Where("Document No_").Is(DocumentNo_)
                'QueryQRCode.And("Document Type").Is(trow("Document Type"))
                'QueryQRCode.And("Item No_").Is(trow("Item No_"))

                If QRCode.ToTable.Rows.Count > 0 Then
                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryInsertQREntry.Fields("Item No_") = trow("Item No_")
                    QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Document Type") = trow("Document Type")
                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Description") = r("External Document No_")
                    QueryInsertQREntry.Fields("Variant Code") = "" 'trow("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = "" 'trow("Work Center")

                    QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
                    QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

                    'QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    'QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Unit of Measure Code") = trow("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = trow("Qty_ per Unit of Measure")
                    QueryInsertQREntry.Fields("Source Code") = trow("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = trow("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = trow("Location Code")
                    QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")

                    'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    'QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Entry No_") = i
                    i = i + 1
                    QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                    QueryInsertQREntry.Fields("Document No_") = DocumentNo_
                    QueryInsertQREntry.Execute()

                    Dim QueryUpdate As Query = Query.Update("Document Entry")
                    QueryUpdate.WhereAs("Document No_") = DocumentNo_
                    QueryUpdate.WhereAs("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryUpdate.WhereAs("Item No_") = trow("Item No_")
                    QueryUpdate.WhereAs("Line No_") = j
                    QueryUpdate.WhereAs("Document Type") = trow("Document Type")
                    'QueryUpdate.WhereAs("Serial No_") = trow("Serial No_")
                    QueryUpdate.Fields("Scan Number", "+") = 1


                    QueryUpdate.Fields("Status") = 2

                    QueryUpdate.Fields("Attach File") = QRCode.Value("URL")
                    If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = QRCode.Value("Serial No_")
                    If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = QRCode.Value("Lot No_")
                    QueryUpdate.Execute()
                    j += 1
                End If
            Next

            For Each trow As DataRow In dbSource.Rows
                If trow("Status") <> 2 Then
                    Finish = 0
                    Exit For
                End If
            Next

            Dim update As Query = Query.Update("Document Entry Header")
            update.Where("No_").Is(r("No_"))
            update.And("Document Type").Is(r("Document Type"))
            update.Fields("Status") = IIf(Finish = 0, 1, 2)
            update.Execute()

            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub
    'For WO
    Public Sub QRCodeEntryWorkOrderInputApp(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        'If r Is Nothing Or r.Count = 0 Then Return
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If r("Status") >= 2 Then
            WorkSession.MsgML("Already Post !")
            Return
        End If


        Dim DocumentNo_ As String = r("No_")

        If (r("Document Type") <> 6) Then
            WorkSession.MsgML("Document must be in Production Order)")

            Return
        End If

        Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        Dim i As Integer = qqq.Value("EntryNo")
        Dim j As Integer = 0

        Try
            Query.BeginTransaction()

            Dim Finish As Integer = 1
            Dim tableID As Integer = 0
            Dim querrydata As Query = Query.From("Document Entry").Transaction(True)
            querrydata.Where("Document No_").Is(DocumentNo_)
            querrydata.And("Document Type").Is(6)

            Dim dbSource As DataTable = querrydata.ToTable

            For Each trow As DataRow In dbSource.Rows
                If trow("QRCode") = "" Or trow("Status") = 2 Then
                    WorkSession.MsgML("QRCode must be filled or scanned already for line {0}!", j)
                    j += 1
                    Continue For
                End If

                Dim QueryQRCode As Query = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("QRCode").Is(trow("QRCode"))
                'QueryQRCode.And("Location Code").Is(trow("Location Code"))

                'Select Case r("Document Type")
                '    Case 4
                '        QueryQRCode.And("Document Type").Is(5)
                '        If QueryQRCode.ToTable.Rows.Count = 0 Then
                '            WorkSession.MsgML("QRCode must be created and picked up for line {0}!", j)
                '            j += 1
                '            Continue For
                '        End If
                '    Case 14
                '        QueryQRCode.And("Document Type").Is(15)
                '        If QueryQRCode.ToTable.Rows.Count = 0 Then
                '            WorkSession.MsgML("QRCode must be created and picked up for line {0}!", j)
                '            j += 1
                '            Continue For
                '        End If
                'End Select


                QueryQRCode = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("QRCode").Is(trow("QRCode"))
                QueryQRCode.And("Document Type").Is(6)
                QueryQRCode.And("Document No_").Is(DocumentNo_)
                'QueryQRCode.And("Location Code").Is(trow("Location Code"))

                If QueryQRCode.ToTable.Rows.Count > 0 Then
                    WorkSession.MsgML("QRCode already has be created and putted in for line {0}!", j)
                    j += 1
                    Continue For
                End If

                Dim QRCode = Query.From("QRCode").Transaction(True)
                QRCode.Where("QRCode").Is(trow("QRCode"))
                'QueryQRCode.Where("Document No_").Is(DocumentNo_)
                'QueryQRCode.And("Document Type").Is(trow("Document Type"))
                'QueryQRCode.And("Item No_").Is(trow("Item No_"))

                If QRCode.ToTable.Rows.Count > 0 Then
                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryInsertQREntry.Fields("Item No_") = trow("Item No_")
                    QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Document Type") = 6 'trow("Document Type")
                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Description") = r("External Document No_")
                    QueryInsertQREntry.Fields("Variant Code") = "" 'trow("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = "" 'trow("Work Center")
                    ' QueryInsertQREntry.Fields("Source Type") = 6 
                    QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
                    QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

                    'QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    'QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Unit of Measure Code") = trow("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = trow("Qty_ per Unit of Measure")
                    QueryInsertQREntry.Fields("Source Code") = trow("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = trow("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = trow("Location Code")
                    QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")

                    'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    'QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Entry No_") = i
                    i = i + 1
                    QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                    QueryInsertQREntry.Fields("Document No_") = DocumentNo_
                    QueryInsertQREntry.Execute()

                    Dim QueryUpdate As Query = Query.Update("Document Entry")
                    QueryUpdate.WhereAs("Document No_") = DocumentNo_
                    QueryUpdate.WhereAs("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryUpdate.WhereAs("Item No_") = trow("Item No_")
                    QueryUpdate.WhereAs("Line No_") = j
                    QueryUpdate.WhereAs("Document Type") = trow("Document Type")
                    'QueryUpdate.WhereAs("Serial No_") = trow("Serial No_")
                    QueryUpdate.Fields("Scan Number", "+") = 1

                    QueryUpdate.Fields("Status") = 2

                    QueryUpdate.Fields("Attach File") = QRCode.Value("URL")
                    If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = QRCode.Value("Serial No_")
                    If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = QRCode.Value("Lot No_")
                    QueryUpdate.Execute()
                    j += 1
                End If
            Next

            For Each trow As DataRow In dbSource.Rows
                If trow("Status") <> 2 Then
                    Finish = 0
                    Exit For
                End If
            Next

            Dim update As Query = Query.Update("Document Entry Header")
            update.Where("No_").Is(r("No_"))
            update.And("Document Type").Is(r("Document Type"))
            update.Fields("Status") = IIf(Finish = 0, 1, 2)
            update.Execute()

            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub

    'Public Sub scanStock_Newtonjson(ByVal sender As WXSource, ByVal e As WXArgs)
    '    WorkSession.MsgML("scanStock function!")

    '    Dim Data As String = ISDBNULL(sender.Request("__DATA__"), "")
    '    'WorkSession.MsgML("scanStock function! data {0}", Data)

    '    If Data = "" Then Return

    '    Dim order_items As List(Of TQR_Code)
    '    order_items = JsonConvert.DeserializeObject(Of List(Of TQR_Code))(Data)
    '    If order_items.Count <= 0 Then Return

    '    'WorkSession.MsgML("scanStock function! data Item {0}", order_items.Count)
    '    If order_items.Count <= 0 Then Return

    '    For Each TQR_Curr As TQR_Code In order_items

    '        Dim Qr As String = TQR_Curr.Qr
    '        Dim Name As String = TQR_Curr.Name
    '        Dim Qty As String = TQR_Curr.Qty
    '        Dim Bin As String = TQR_Curr.Bin
    '        Dim docType As Integer = TQR_Curr.docType
    '        Dim logistics As String = TQR_Curr.logistics

    '        WorkSession.MsgML("Mã QR SP {0}", Qr)
    '        WorkSession.MsgML("Số lươngj {0}", Qty)
    '        WorkSession.MsgML("Mã QR ngăn kệ {0}", Bin)
    '        WorkSession.MsgML("Loại nghiệp vụ {0}", docType)
    '        WorkSession.MsgML("Mã giao nhận (Logistics No_) {0}", logistics)

    '    Next

    'End Sub

    'Public Class TQR_Code
    '    Public Qr As String
    '    Public Name As String
    '    Public Qty As String
    '    Public Bin As String
    '    Public docType As Integer
    '    Public logistics As String
    'End Class

    'Public Shared Function scanStockCheck(QRcode As String, Doctype As Integer, Optional Voucher As String = "", Optional QTy As Decimal = 1) As Integer
    '    Dim q As Query = Query.From("QRCode Entry").Transaction(True)
    '    Dim tblline As DataTable
    '    Dim Flag As Integer = 0

    '    Select Case Doctype
    '        Case 0, 2, 6
    '            Return 1 'okla
    '        Case 1 'sales shipment
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '                'q = Query.From("QRCode Entry").Transaction(True)
    '                'q.Where("QRCode").Is(QRcode)
    '                'q.And("Document Type").Is(1)
    '                'If q.ToTable.Rows.Count > 0 Then Return 0
    '        Case 5
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '                'q = Query.From("QRCode Entry").Transaction(True)
    '                'q.Where("QRCode").Is(QRcode)
    '                'q.And("Document Type").Is(Doctype)
    '                'If q.ToTable.Rows.Count > 0 Then Return 0
    '        Case 3, 7, 9, 11, 13, 15, 17, 19
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '                'q = Query.From("QRCode Entry").Transaction(True)
    '                'q.Where("QRCode").Is(QRcode)
    '                'q.And("Document Type").Is(Doctype)
    '                               'If q.ToTable.Rows.Count > 0 Then
    '                '    WorkSession.MsgML("QRCode đã xuất bán : {0} !", QRcode)
    '                '    Return 0
    '                'End If
    '        Case 8, 10
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(1)
    '            'If q.ToTable.Rows.Count <= 0 Then Return 0
    '            If q.ToTable.Rows.Count <= 0 Then
    '                WorkSession.MsgML("QRCode chưa xuất bán : {0} !", QRcode)
    '                Return 0
    '            End If

    '        Case 4, 12, 14, 16, 18
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(Doctype + 1)
    '            'If q.ToTable.Rows.Count <= 0 Then Return 0
    '            If q.ToTable.Rows.Count <= 0 Then
    '                WorkSession.MsgML("QRCode chưa xuất điều đi : {0} !", QRcode)
    '                Return 0
    '            End If

    '        Case Else
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6,10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(Doctype)
    '            'If q.ToTable.Rows.Count > 0 Then Return 0
    '            If q.ToTable.Rows.Count > 0 Then
    '                WorkSession.MsgML("QRCode đã xuất bán : {0} !", QRcode)
    '                Return 0
    '            End If
    '    End Select

    '    Return 1

    'End Function

    'Public Shared Function scanStockPost(QRcode As String, Doctype As Integer, Logistics As String, QTy As Decimal, BinCode As String, LineNo As Integer, DocumentEntry As Integer, Optional NewBinCode As String = "") As Integer
    '    Dim Finish As Integer = 1
    '    Dim tableID As Integer = 0

    '    Dim q As Query = Query.From("QRCode").Transaction(True)
    '    q.Where("QRCode").Is(QRcode)
    '    If q.RecordCount <= 0 Then Return 0

    '    Dim trow As DataRow = q.TakeRow
    '    Dim ItemCode As String = q.Value("Item No_")
    '    'Dim LocationCode As String = q.Value("Location Code")

    '    Dim rr As Query = Query.From("Logistics Data").Transaction(True)
    '    rr.Where("Logistics No_").Is(Logistics)
    '    rr.And("Document Type").Is(Doctype)
    '    rr.And("Item No_").Is(ItemCode)

    '    Dim SourceCode As String = rr.Value("Source Code")
    '    Dim Respon As String = rr.Value("Responsibility Center")
    '    Dim LocationCode As String = rr.Value("Location Code")

    '    If SourceCode = "" Then SourceCode = q.Value("Source Code")
    '    If Respon = "" Then Respon = q.Value("Responsibility Center")
    '    If LocationCode = "" Then LocationCode = q.Value("Location Code")

    '    Dim Update As Query
    '    Dim querrydata As Query

    '    Select Case Doctype
    '        Case 4, 5
    '            Dim Zone As String = ""
    '            Dim qr As Query = Query.From("Bin").Transaction(True)
    '            qr.Where("Code").Is(BinCode)
    '            Zone = qr.Value("Zone")
    '            If LocationCode = "" Then LocationCode = qr.Value("Location Code")

    '            querrydata = Query.From("QRCode Entry").Transaction(True)
    '            querrydata.Where("QRCode").Is(QRcode)
    '            querrydata.And("Bin").Is(BinCode)
    '            querrydata.And("Document Type").Is(Doctype)

    '            If querrydata.RecordCount > 0 Then
    '                Update = Query.Update("QRCode Entry")
    '                Update.Where("QRCode").Is(QRcode)
    '                Update.And("Document Type").Is(Doctype)
    '                'querrydata.And("Item No_").Is(ItemCode)
    '                Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                Update.Fields("Location Code") = LocationCode
    '                Update.Fields("Zone") = Zone
    '                Update.Fields("Zone History", "+") = Zone + "|"
    '                Update.Fields("Bin Status") = IIf(Doctype = 5, 1, 0)
    '                Update.Execute()

    '                Update = Query.Update("Document Entry")
    '                Update.Where("Logistics No_").Is(Logistics)
    '                Update.And("Document Type").Is(Doctype)
    '                Update.And("Item No_").Is(ItemCode)
    '                Update.And("QRCode").Is(QRcode)
    '                'Update.And("Line No_").Is(LineNo)
    '                'Update.And("Entry No_").Is(DocumentEntry)

    '                Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                Update.Fields("Zone") = Zone
    '                Update.Fields("Zone History", "+") = Zone + "|"
    '                Update.Fields("Location Code") = LocationCode

    '                Update.Fields("Scan Number", "+") = 1
    '                Update.Fields("Status") = 2
    '                If trow("URL") = "" Then Update.Fields("Attach File") = trow("URL")
    '                If trow("Serial No_") = "" Then Update.Fields("Serial No_") = trow("Serial No_")
    '                If trow("Lot No_") = "" Then Update.Fields("Lot No_") = trow("Lot No_")
    '                'If trow("Real Lot No_") = "" Then Update.Fields("Real Lot No_") = trow("Real Lot No_")

    '                Update.Execute()

    '            Else 'Insert QRCode Entry

    '                Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
    '                QueryInsertQREntry.Fields("QRCode") = QRcode
    '                QueryInsertQREntry.Fields("Item No_") = ItemCode
    '                QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
    '                QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
    '                QueryInsertQREntry.Fields("Real Lot No_") = trow("Lot No_")
    '                QueryInsertQREntry.Fields("Real Expiration Date") = CDate(trow("Expired Date"))

    '                QueryInsertQREntry.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                QueryInsertQREntry.Fields("Zone") = Zone
    '                QueryInsertQREntry.Fields("Bin Status") = IIf(Doctype = 5, 1, 0)
    '                QueryInsertQREntry.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                QueryInsertQREntry.Fields("Zone History", "+") = Zone + "|"

    '                QueryInsertQREntry.Fields("Document Type") = Doctype
    '                QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
    '                QueryInsertQREntry.Fields("Description") = trow("Name")
    '                QueryInsertQREntry.Fields("Variant Code") = trow("Item Variant")
    '                QueryInsertQREntry.Fields("Manufacturer Code") = trow("Work Center")

    '                QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

    '                'QueryInsertQREntry.Fields("Usage %") = 0
    '                QueryInsertQREntry.Fields("Status") = 1
    '                'QueryInsertQREntry.Fields("Created Date") = Now
    '                QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Unit Of Measure Code") = trow("Unit Of Measure")
    '                QueryInsertQREntry.Fields("Qty_ per Unit Of Measure") = trow("Qty Unit Of Measure")
    '                QueryInsertQREntry.Fields("Source Code") = SourceCode
    '                QueryInsertQREntry.Fields("Responsibility Center") = Respon
    '                QueryInsertQREntry.Fields("Location Code") = LocationCode
    '                QueryInsertQREntry.Fields("External Document No_") = trow("External Document No_")
    '                'QueryInsertQREntry.Fields("Qty_not Temped") = 0
    '                'QueryInsertQREntry.Fields("Last Date Checked") = Now
    '                QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Entry No_") = DocumentEntry
    '                QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
    '                QueryInsertQREntry.Fields("Logistics No_") = Logistics
    '                QueryInsertQREntry.Fields("Document No_") = trow("Document No_")
    '                QueryInsertQREntry.Fields("Packing List") = trow("Packing List")
    '                'QueryInsertQREntry.Fields("Picking No_") = trow("Picking No_")
    '                QueryInsertQREntry.Fields("Source Type") = trow("Source Type")
    '                QueryInsertQREntry.Fields("Source No_") = trow("Source No_")
    '                QueryInsertQREntry.Execute()

    '                Dim QueryUpdate As Query = Query.Update("Document Entry")
    '                QueryUpdate.WhereAs("Logistics No_") = Logistics
    '                QueryUpdate.WhereAs("QRCode") = trow("QRCode")
    '                QueryUpdate.WhereAs("Item No_") = trow("Item No_")
    '                'QueryUpdate.WhereAs("Line No_") = lineno
    '                QueryUpdate.WhereAs("Document Type") = Doctype

    '                QueryUpdate.Fields("Location Code") = LocationCode
    '                QueryUpdate.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                QueryUpdate.Fields("Zone") = Zone
    '                QueryUpdate.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                QueryUpdate.Fields("Zone History", "+") = Zone + "|"

    '                QueryUpdate.Fields("Scan Number", "+") = 1
    '                QueryUpdate.Fields("Status") = 2
    '                If trow("URL") = "" Then QueryUpdate.Fields("Attach File") = trow("URL")
    '                If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = trow("Serial No_")
    '                If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = trow("Lot No_")
    '                'If trow("Real Lot No_") = "" Then QueryUpdate.Fields("Real Lot No_") = trow("Real Lot No_")

    '                QueryUpdate.Execute()

    '            End If
    '        Case 0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19

    '            Dim Zone As String = ""
    '            Dim qr As Query = Query.From("Bin").Transaction(True)
    '            qr.Where("Code").Is(BinCode)
    '            Zone = qr.Value("Zone")
    '            If LocationCode = "" Then LocationCode = qr.Value("Location Code")

    '            querrydata = Query.From("QRCode Entry").Transaction(True)
    '            querrydata.Where("QRCode").Is(QRcode)
    '            querrydata.And("Bin").Is(BinCode)
    '            querrydata.And("Document Type").Is(Doctype)

    '            If querrydata.RecordCount > 0 Then
    '                Update = Query.Update("QRCode Entry")
    '                Update.Where("QRCode").Is(QRcode)
    '                Update.And("Document Type").Is(Doctype)
    '                'querrydata.And("Item No_").Is(ItemCode)

    '                Update.Fields("Location Code") = LocationCode

    '                Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                'Update.Fields("Bin History") = BinCode
    '                Update.Fields("Zone") = Zone
    '                'Update.Fields("Zone History") = BinCode

    '                Select Case Doctype
    '                    Case 1, 3, 5, 7, 9, 11, 13, 15, 17, 19
    '                        Update.Fields("Bin Status") = 1
    '                        Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                        Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                        Update.Fields("Zone") = Zone
    '                        Update.Fields("Zone History", "+") = Zone + "|"

    '                    Case Else
    '                        Update.Fields("Bin Status") = 0
    '                        Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                        Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                        Update.Fields("Zone") = Zone
    '                        Update.Fields("Zone History", "+") = Zone + "|"
    '                End Select

    '                Update.Execute()

    '                Update = Query.Update("Document Entry")
    '                Update.Where("Logistics No_").Is(Logistics)
    '                Update.And("Document Type").Is(Doctype)
    '                Update.And("Item No_").Is(ItemCode)
    '                Update.And("QRCode").Is(QRcode)
    '                'Update.And("Line No_").Is(LineNo)
    '                'Update.And("Entry No_").Is(DocumentEntry)

    '                Update.Fields("Bin") = BinCode
    '                'Update.Fields("Bin History") = BinCode
    '                Update.Fields("Zone") = Zone
    '                'Update.Fields("Zone History") = BinCode
    '                Update.Fields("Location Code") = LocationCode

    '                Select Case Doctype
    '                    Case 1, 3, 5, 7, 9, 11, 13, 15, 17, 19
    '                        'Update.Fields("Bin Status") = 1
    '                        Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                        Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                        Update.Fields("Zone") = Zone
    '                        Update.Fields("Zone History", "+") = Zone + "|"
    '                    Case Else
    '                        'Update.Fields("Bin Status") = 0
    '                        Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                        Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                        Update.Fields("Zone") = Zone
    '                        Update.Fields("Zone History", "+") = Zone + "|"
    '                End Select

    '                Update.Fields("Scan Number", "+") = 1
    '                Update.Fields("Status") = 2
    '                If trow("URL") = "" Then Update.Fields("Attach File") = trow("URL")
    '                If trow("Serial No_") = "" Then Update.Fields("Serial No_") = trow("Serial No_")
    '                If trow("Lot No_") = "" Then Update.Fields("Lot No_") = trow("Lot No_")
    '                'If trow("Real Lot No_") = "" Then Update.Fields("Real Lot No_") = trow("Real Lot No_")
    '                Update.Execute()

    '            Else 'Insert QRCode Entry

    '                Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
    '                QueryInsertQREntry.Fields("QRCode") = QRcode
    '                QueryInsertQREntry.Fields("Item No_") = ItemCode
    '                QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
    '                QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
    '                QueryInsertQREntry.Fields("Real Lot No_") = trow("Lot No_")
    '                QueryInsertQREntry.Fields("Real Expiration Date") = CDate(trow("Expired Date"))

    '                QueryInsertQREntry.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                QueryInsertQREntry.Fields("Zone") = Zone
    '                QueryInsertQREntry.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                QueryInsertQREntry.Fields("Zone History", "+") = Zone + "|"

    '                QueryInsertQREntry.Fields("Document Type") = Doctype
    '                QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
    '                QueryInsertQREntry.Fields("Description") = trow("Name")
    '                QueryInsertQREntry.Fields("Variant Code") = trow("Item Variant")
    '                QueryInsertQREntry.Fields("Manufacturer Code") = trow("Work Center")

    '                QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

    '                'QueryInsertQREntry.Fields("Usage %") = 0
    '                QueryInsertQREntry.Fields("Status") = 1
    '                'QueryInsertQREntry.Fields("Created Date") = Now
    '                QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Unit Of Measure Code") = trow("Unit Of Measure")
    '                QueryInsertQREntry.Fields("Qty_ per Unit Of Measure") = trow("Qty Unit Of Measure")
    '                QueryInsertQREntry.Fields("Source Code") = SourceCode
    '                QueryInsertQREntry.Fields("Responsibility Center") = Respon
    '                QueryInsertQREntry.Fields("Location Code") = LocationCode
    '                QueryInsertQREntry.Fields("External Document No_") = trow("External Document No_")
    '                'QueryInsertQREntry.Fields("Qty_not Temped") = 0
    '                'QueryInsertQREntry.Fields("Last Date Checked") = Now
    '                QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Entry No_") = DocumentEntry
    '                QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
    '                QueryInsertQREntry.Fields("Logistics No_") = Logistics
    '                QueryInsertQREntry.Fields("Document No_") = trow("Document No_")
    '                QueryInsertQREntry.Fields("Packing List") = trow("Packing List")
    '                'QueryInsertQREntry.Fields("Picking No_") = trow("Picking No_")
    '                QueryInsertQREntry.Fields("Source Type") = trow("Source Type")
    '                QueryInsertQREntry.Fields("Source No_") = trow("Source No_")
    '                QueryInsertQREntry.Execute()

    '                Dim QueryUpdate As Query = Query.Update("Document Entry")
    '                QueryUpdate.WhereAs("Logistics No_") = Logistics
    '                QueryUpdate.WhereAs("QRCode") = trow("QRCode")
    '                QueryUpdate.WhereAs("Item No_") = trow("Item No_")
    '                'QueryUpdate.WhereAs("Line No_") = lineno
    '                QueryUpdate.WhereAs("Document Type") = Doctype

    '                QueryUpdate.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                QueryUpdate.Fields("Zone") = Zone
    '                QueryUpdate.Fields("Location Code") = LocationCode
    '                QueryUpdate.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                QueryUpdate.Fields("Zone History", "+") = Zone + "|"

    '                QueryUpdate.Fields("Scan Number", "+") = 1
    '                QueryUpdate.Fields("Status") = 2
    '                If trow("URL") = "" Then QueryUpdate.Fields("Attach File") = trow("URL")
    '                If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = trow("Serial No_")
    '                If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = trow("Lot No_")
    '                'If trow("Real Lot No_") = "" Then QueryUpdate.Fields("Real Lot No_") = trow("Real Lot No_")

    '                QueryUpdate.Execute()

    '            End If

    '        Case Else

    '    End Select

    '    Update = Query.Update("Document Entry Header")
    '    Update.Where("Logistics No_").Is(Logistics)
    '    Update.And("Document Type").Is(Doctype)
    '    Update.Fields("Status") = 2
    '    Update.Execute()

    '    Return 1
    'End Function

    Public Sub CheckscanStock(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim QRCode As String = ISDBNULL(sender.Request("__Qr__"), "")
        Dim LogisticsNo As String = ISDBNULL(sender.Request("__logistics__"), "")
        Dim Doctype As Integer = ISDBNULL(sender.Request("__docType__"), 0)
        Dim BinQRCode As String = ISDBNULL(sender.Request("__Bin__"), "")
        Dim Qty As Decimal = ISDBNULL(sender.Request("__Qty__"), 1)

        'WorkSession.MsgML("QRCode '{0}'", QRCode)
        'WorkSession.MsgML("Logistic '{0}'", LogisticsNo)
        'WorkSession.MsgML("Doctype {0}", Doctype)
        'WorkSession.MsgML("BinQRCode '{0}'", BinQRCode)
        'WorkSession.MsgML("Qty {0}", Qty)

        Dim qr As Query = Query.From("Bin").Transaction(True)
        qr.Where("QRCode").Is(BinQRCode)
        Dim Zone As String = qr.Value("Zone")
        Dim LocationCode As String = qr.Value("Location Code")

        If qr.RecordCount <= 0 Then
            WorkSession.MsgML("QRCode BIN is not correct !")
            'sender.Response("message”) = “QRCode BIN is not correct ! ”
            sender.Response("valid”) = 0
            Return
        End If

        Dim q As Query = Query.From("QRCode View").Transaction(True)
        q.Where("QRCode").Is(QRCode)
        Dim ItemCode As String = ""
        Dim ItemName As String = ""
        Dim QRcodeParent As Integer = 0
        Dim UOM As String = ""
        Dim Qtyper As Decimal = 0

        If q.RecordCount <= 0 Then
            WorkSession.MsgML("QRCode is not belong to company !")
            'sender.Response("message”) = “QRCode is not belong to company! ”
            sender.Response("valid”) = 0
            Return
        Else
            ItemCode = q.Value("Item No_")
            UOM = q.Value("Unit Of Measure")
            Qtyper = q.Value("Qty Unit Of Measure")
            Qty = q.Value("Quantity")
            QRcodeParent = q.Value("Parent") '= 0 not allowed to add anymore, 1 is allowed to add more
            ItemName = ItemCode + " product name: " + q.Value("Name")

            'sender.Response("item”) = ItemName
            'sender.Response("parent”) = QRcodeParent
            'sender.Response("qty”) = Qty
            'sender.Response("uom”) = UOM
            'sender.Response("qtyper”) = Qtyper
            'sender.Response("message”) = “Successful !”
            'sender.Response("valid”) = 1
            'WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
            'WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
            'WorkSession.MsgML("Product Name '{0}'", ItemName)
            'WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
            'WorkSession.MsgML("Product Quantity:  {0}", Qty)
            'WorkSession.MsgML("Product UOM: '{0}'", UOM)
            'WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)
        End If

        q = Query.From("Logistics Data").Transaction(True) ' q = Query.From("QRCode Tracking").Transaction(True)
        q.Where("Item No_").Is(ItemCode)
        q.And("Logistics No_").Is(LogisticsNo)
        If q.RecordCount <= 0 Then
            Select Case CInt(Doctype)
                Case 0, 10
                    'sender.Response("message”) = "QRCode is not belong to Receipt Order!"
                    WorkSession.MsgML("QRCode is not belong to Receipt Order!")
                Case 1, 9
                    'sender.Response("message”) = "QRCode is not belong to Delivery Order!"
                    WorkSession.MsgML("QRCode is not belong to Delivery Order!")
                Case 4, 5, 11, 12, 14, 15, 17, 18
                    'sender.Response("message”) = "QRCode is not belong to Transfer Order!"
                    WorkSession.MsgML("QRCode is not belong to Transfer Order!")
                Case 6, 7
                    'sender.Response("message”) = "QRCode is not belong to Work Order!"
                    WorkSession.MsgML("QRCode is not belong to Work Order!")
                Case 8
                    'sender.Response("message”) = "QRCode is not belong to Maintennace Order!"
                    WorkSession.MsgML("QRCode is not belong to Maintennace Order!")
                Case Else
                    'sender.Response("message”) = "QRCode is not belong to Receipt Order or Delivery Order!"
                    WorkSession.MsgML("QRCode is not belong to Receipt Order or Delivery Order!")
            End Select

            'sender.Response("item”) = ItemName
            'sender.Response("parent”) = QRcodeParent
            'sender.Response("qty”) = Qty
            'sender.Response("uom”) = UOM
            'sender.Response("qtyper”) = Qtyper
            WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
            WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
            WorkSession.MsgML("Product Name '{0}'", ItemName)
            WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
            WorkSession.MsgML("Product Quantity:  {0}", Qty)
            WorkSession.MsgML("Product UOM: '{0}'", UOM)
            WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

            sender.Response("valid”) = 0
            Return
        End If

        Select Case Doctype

            Case 8, 10
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                'q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(1) 'Sold
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not sold yet!")
                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper

                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    sender.Response("valid”) = 0
                    Return
                End If
            Case 9
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                'q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(0) 'Purchased
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not purchased!")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 4
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                'q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").In("5,11,15,17,19") 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not transfered Order shippment! ")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 12, 14, 16, 18
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").In("11,15,17,19") 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not transfered Order shippment! ")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 12
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(11) 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not Consignee shippment ! ")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 14
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(15) 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not transfered Order shippment ! ")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 16
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(17) 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not Outsource Order shippment ! ")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 18
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(19) 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not Company Outsourced Order shippment !")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
        End Select

        ''===
        ''Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        ''Dim Entry As Integer = qqq.Value("EntryNo")

        'Dim exist As Query = Query.From("QRCode Line").Transaction(True)
        'exist.WhereAs("Document Type") = CInt(Doctype)
        'exist.WhereAs("Logistics No_") = LogisticsNo
        'exist.WhereAs("QRCode") = QRCode

        'If exist.RecordCount <= 0 Or QRcodeParent = 1 Then
        '    Dim insert As Query = Query.Entity("QRCode Line").Insert

        '    'Select Case CInt(Doctype)
        '    '    Case 0, 1, 4, 5, 6, 7
        '    '        Flag = scanStockCheck(QRCodeItem, Doctype, Logistics, 1)
        '    '        If Flag <> 0 Then scanStockPost(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
        '    '    Case Else
        '    'End Select

        '    insert.Fields("Document Type") = CInt(Doctype)
        '    insert.Fields("Logistics No_") = LogisticsNo
        '    insert.Fields("Location Code") = LocationCode
        '    insert.Fields("Zone Code") = Zone

        '    Select Case CInt(Doctype)
        '        Case 4
        '            insert.Fields("From Bin Code") = GetBinCodeFromQRCodeEntry(QRCode, Doctype, Zone)
        '            insert.Fields("From Zone") = Zone
        '            insert.Fields("From Location Code") = LocationCode 'MasterRow("From Location Code")
        '            insert.Fields("Bin Code") = insert.Fields("From Bin Code")
        '            insert.Fields("Zone") = Zone
        '            insert.Fields("To Bin Code") = BinQRCode
        '            insert.Fields("Location Code") = LocationCode
        '        Case 5
        '            insert.Fields("Bin Code") = BinQRCode
        '            'insert.Fields("Location Code") = LocationCode
        '            'insert.Fields("Zone Code") = Zone
        '            insert.Fields("From Bin Code") = BinQRCode
        '            'insert.Fields("To Bin Code") = GetBinCodeFromInTransitLocation(r("Source Code"), r("Responsibility Center"), Zone, InTransit)
        '            'insert.Fields("To Zone") = Zone
        '            'insert.Fields("To Location Code") = InTransit
        '        Case Else
        '            insert.Fields("Bin Code") = BinQRCode
        '            'insert.Fields("Location Code") = LocationCode
        '            'insert.Fields("Zone Code") = Zone
        '    End Select

        '    insert.Fields("Item No_") = ItemCode
        '    insert.Fields("QRCode") = QRCode
        '    insert.Fields("Quantity") = CInt(Qty)
        '    insert.Fields("Unit Of Measure") = UOM
        '    insert.Fields("Qty_ per Unit of Measure") = Qtyper

        '    insert.Execute()
        'End If


        'exist = Query.From("QRCode Header").Transaction(True)
        'exist.WhereAs("Document Type") = CInt(Doctype)
        'exist.WhereAs("Logistics No_") = LogisticsNo
        'If exist.RecordCount <= 0 Then
        '    Dim Hinsert As Query = Query.Entity("QRCode Header").Insert
        '    Hinsert.Fields("Document Type") = CInt(Doctype)
        '    Hinsert.Fields("Logistics No_") = LogisticsNo
        '    Hinsert.Fields("Location Code") = LocationCode
        '    Hinsert.Fields("Zone Code") = Zone
        '    Hinsert.Fields("Bin Code") = BinQRCode
        '    Hinsert.Execute()
        'End If

        sender.Response("valid”) = 1
    End Sub

    Public Sub scanStock(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("scanStock function!")

        Dim Data = ISDBNULL(sender.Request("__DATA__"), "")
        WorkSession.MsgML("scanStock function! data {0}", Data)
        If Data = "" Then Return

        Dim js As New JavaScriptSerializer()
        Dim items = js.Deserialize(Of ArrayList)(Data)
        'WorkSession.MsgML("scanStock function! data Item {0}", items.Count)
        If items.Count <= 0 Then Return

        Try
            Query.BeginTransaction()

            Dim Doctype As Integer = 0
            Dim BinQRCode As String = ""
            Dim Logistics As String = ""
            Dim Qty As Integer = 0
            Dim UOM As String = ""
            Dim QRCodeItem As String = ""
            Dim Flag As Integer = 0

            Dim i As Integer = 0
            Dim Loopqty As Integer = 0

            Dim productDict = New Dictionary(Of String, Integer)

            For Each item As Object In items
                If Not productDict.ContainsKey(item("Qr")) Then
                    productDict.Add(item("Qr"), item("Qty"))
                Else
                    productDict(item("Qr")) += item("Qty")
                    Loopqty += 1
                End If
            Next


            If Loopqty = 0 Then
                Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim Entry As Integer = qqq.Value("EntryNo")

                For Each item As Object In items
                    BinQRCode = items(0)("Bin")

                    Dim qr As Query = Query.From("Bin").Transaction(True)
                    qr.Where("Code").Is(BinQRCode)
                    Dim Zone As String = qr.Value("Zone")

                    QRCodeItem = item("Qr")
                    WorkSession.MsgML("Mã QR SP {0}", QRCodeItem)
                    Qty = CInt(item("Qty"))
                    'WorkSession.MsgML("Số lượng {0}", Qty)
                    'BinQRCode = item("Bin")
                    'WorkSession.MsgML("Mã QR ngăn kệ {0}", BinQRCode)
                    Doctype = CInt(item("docType"))
                    'WorkSession.MsgML("Loại nghiệp vụ {0}", Doctype)
                    Logistics = item("logistics")
                    'WorkSession.MsgML("Mã giao nhận (Logistics No_ {0}", Logistics)

                    Select Case CInt(Doctype)
                        Case 0, 1, 4, 5, 6, 7
                            Flag = scanStockCheck(QRCodeItem, Doctype, Logistics, 1)
                            If Flag <> 0 Then scanStockPost(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
                        Case Else

                    End Select
                    Entry += 1
                    i += 1
                Next
                WorkSession.MsgML("scanStock Successfully !")

            Else
                WorkSession.MsgML("QRCode Parent need edit before post !")

                'Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                'Dim Entry As Integer = qqq.Value("EntryNo")

                Dim insert As Query = Query.Entity("QRCode Line").Insert

                BinQRCode = items(0)("Bin")
                'WorkSession.MsgML("Mã QR ngăn kệ {0}", BinQRCode)
                Doctype = CInt(items(0)("docType"))
                'WorkSession.MsgML("Loại nghiệp vụ {0}", Doctype)
                Logistics = items(0)("logistics")

                Dim qr As Query = Query.From("Bin").Transaction(True)
                qr.Where("Code").Is(BinQRCode)
                Dim Zone As String = qr.Value("Zone")
                Dim LocationCode As String = qr.Value("Location Code")

                'For Each qrcode As String In productDict.Keys
                '    QRCodeItem = qrcode
                '    ' WorkSession.MsgML("Mã QR SP {0}", QRCodeItem)
                '    Qty = CInt(productDict(qrcode))
                '    'WorkSession.MsgML("Số lượng {0}", Qty)
                'next

                For Each kvp As KeyValuePair(Of String, Integer) In productDict
                    'Dim key As String = kvp.Key
                    'Dim val As Integer = kvp.Value
                    'WorkSession.MsgML("Key QRCode '{0}'", key)
                    'WorkSession.MsgML("Số lượng {0}", Val)

                    QRCodeItem = kvp.Key
                    Qty = kvp.Value

                    'Select Case CInt(Doctype)
                    '    Case 0, 1, 4, 5, 6, 7
                    '        Flag = scanStockCheck(QRCodeItem, Doctype, Logistics, 1)
                    '        If Flag <> 0 Then scanStockPost(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
                    '    Case Else
                    'End Select

                    'Dim existLine As Query = Query.From("QRCode Line").Transaction(True)
                    'existLine.WhereAs("Document Type") = CInt(Doctype)
                    'existLine.WhereAs("Logistics No_") = Logistics
                    'existLine.WhereAs("QRCode") = QRCodeItem

                    Dim QRCodeInfo As Query = Query.From("QRCode").Transaction(True)
                    QRCodeInfo.Where("QRCode").Is(QRCodeItem)
                    Dim QRcodeParent As Integer = QRCodeInfo.Value("Parent")

                    'If existLine.RecordCount <= 0 Or QRcodeParent = 1 Then

                    insert = Query.Entity("QRCode Line").Insert
                    insert.Fields("Type") = 4
                    insert.Fields("No_") = QRCodeInfo.Value("Item No_")

                    insert.Fields("QRCode") = QRCodeItem
                    insert.Fields("Quantity") = CInt(Qty)

                    If CInt(Qty) <= 1 Then
                        insert.Fields("Unit Of Measure") = QRCodeInfo.Value("Unit Of Measure")
                        insert.Fields("Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")
                    Else
                        If QRcodeParent = 1 Then
                            Dim ItemUOM As Query = Query.From("Item Unit of Measure").Transaction(True)
                            ItemUOM.Where("Item No_").Is(QRCodeInfo.Value("Item No_"))

                            ItemUOM.And("Qty_ per Unit of Measure").LessThan(QRCodeInfo.Value("Qty Unit Of Measure"))
                            ItemUOM.OrderBy("Qty_ per Unit of Measure").DESC()

                            insert.Fields("Qty_ per Unit of Measure") = IIf(ItemUOM.Value("Qty_ per Unit of Measure") = 0, 1, ItemUOM.Value("Qty_ per Unit of Measure"))
                            insert.Fields("Unit Of Measure") = ItemUOM.Value("Code")
                        Else
                            insert.Fields("Unit Of Measure") = QRCodeInfo.Value("Unit Of Measure")
                            insert.Fields("Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")
                            insert.Fields("Quantity") = 1
                        End If


                    End If

                    insert.Fields("Document Type") = CInt(Doctype)
                    insert.Fields("Logistics No_") = Logistics
                    Select Case CInt(Doctype)
                        Case 4
                            insert.Fields("From Bin Code") = GetBinCodeFromQRCodeEntry(QRCodeItem, Doctype, Zone)
                            insert.Fields("From Zone") = Zone
                            insert.Fields("From Location Code") = LocationCode 'MasterRow("From Location Code")
                            insert.Fields("Bin Code") = insert.Fields("From Bin Code")
                            insert.Fields("Zone Code") = Zone
                            insert.Fields("To Bin Code") = BinQRCode
                            insert.Fields("Location Code") = LocationCode

                            insert.Fields("To Unit of Measure") = QRCodeInfo.Value("Unit Of Measure")
                            insert.Fields("To Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")

                        Case 5
                            insert.Fields("Bin Code") = BinQRCode
                            insert.Fields("From Bin Code") = BinQRCode
                            'insert.Fields("To Bin Code") = GetBinCodeFromInTransitLocation(r("Source Code"), r("Responsibility Center"), Zone, InTransit)
                            'insert.Fields("To Zone") = Zone
                            'insert.Fields("To Location Code") = InTransit
                        Case Else
                            insert.Fields("Bin Code") = BinQRCode
                            insert.Fields("Zone Code") = Zone
                            insert.Fields("Location Code") = LocationCode
                            insert.Fields("From Bin Code") = BinQRCode
                            insert.Fields("From Zone") = Zone
                            insert.Fields("From Location Code") = LocationCode
                            'insert.Fields("To Zone") = Zone
                            'insert.Fields("To Bin Code") = BinQRCode
                            'insert.Fields("To Location Code") = LocationCode
                    End Select

                    insert.Execute()

                    'Entry += 1
                    i += 1
                    'End If
                Next


                Dim exist As Query = Query.From("QRCode Header").Transaction(True)
                exist.WhereAs("Document Type") = CInt(Doctype)
                exist.WhereAs("Logistics No_") = Logistics
                If exist.RecordCount <= 0 Then
                    Dim Hinsert As Query = Query.Entity("QRCode Header").Insert
                    Hinsert.Fields("Document Type") = CInt(Doctype)
                    Hinsert.Fields("Logistics No_") = Logistics
                    Hinsert.Fields("Location Code") = LocationCode
                    Hinsert.Fields("Zone Code") = Zone
                    Hinsert.Fields("Bin Code") = BinQRCode
                    Hinsert.Execute()
                End If

                'Dim Hinsert As Query = Query.Entity("QRCode Header").Insert
                'Hinsert.Fields("Document Type") = CInt(Doctype)
                'Hinsert.Fields("Logistics No_") = Logistics
                'Hinsert.Fields("Bin Code") = BinQRCode
                'Hinsert.Execute()

                Framework.OpenEntity("QRCode Line", String.Format("[Logistics No_]=N'{0}' and [Document Type]={1}", Logistics, Doctype))

            End If

            Query.EndTransaction()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try


    End Sub

    'Public Shared Function scanStockCheck02(QRcode As String, Doctype As Integer, Optional Voucher As String = "", Optional QTy As Decimal = 1) As Integer
    '    Dim q As Query = Query.From("QRCode Entry").Transaction(True)
    '    Dim tblline As DataTable
    '    Dim Flag As Integer = 0

    '    Select Case Doctype
    '        Case 0, 2, 6
    '            Return 1 'okla
    '        Case 8, 10
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then Return 0

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(1)
    '            If q.ToTable.Rows.Count <= 0 Then Return 0

    '        Case 4, 12, 14, 16, 18
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then Return 0

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(Doctype + 1)
    '            If q.ToTable.Rows.Count <= 0 Then Return 0

    '        Case 1 'sales shipment
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then Return 0

    '            'q = Query.From("QRCode Entry").Transaction(True)
    '            'q.Where("QRCode").Is(QRcode)
    '            'q.And("Document Type").Is(1)
    '            'If q.ToTable.Rows.Count > 0 Then Return 0

    '        Case 3, 5, 7, 9, 11, 13, 15, 17, 19
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then Return 0

    '            'q = Query.From("QRCode Entry").Transaction(True)
    '            'q.Where("QRCode").Is(QRcode)
    '            'q.And("Document Type").Is(1)
    '            'If q.ToTable.Rows.Count > 0 Then Return 0

    '        Case Else
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6,10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then Return 0

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(1)
    '            If q.ToTable.Rows.Count > 0 Then Return 0
    '    End Select

    '    Return 1

    'End Function

    'Public Shared Function scanStockCheck02(QRcode As String, Doctype As Integer, Optional Voucher As String = "", Optional QTy As Decimal = 1) As Integer
    '    Dim q As Query = Query.From("QRCode Entry").Transaction(True)
    '    Dim tblline As DataTable
    '    Dim Flag As Integer = 0

    '    Select Case Doctype
    '        Case 0, 2, 6
    '            Return 1 'okla
    '        Case 8, 10
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(1)
    '            'If q.ToTable.Rows.Count <= 0 Then Return 0
    '            If q.ToTable.Rows.Count <= 0 Then
    '                WorkSession.MsgML("QRCode chưa xuất bán : {0} !", QRcode)
    '                Return 0
    '            End If

    '        Case 4, 12, 14, 16, 18
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(Doctype + 1)
    '            'If q.ToTable.Rows.Count <= 0 Then Return 0
    '            If q.ToTable.Rows.Count <= 0 Then
    '                WorkSession.MsgML("QRCode chưa xuất điều đi : {0} !", QRcode)
    '                Return 0
    '            End If
    '        Case 1 'sales shipment
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '                'q = Query.From("QRCode Entry").Transaction(True)
    '                'q.Where("QRCode").Is(QRcode)
    '                'q.And("Document Type").Is(1)
    '                'If q.ToTable.Rows.Count > 0 Then Return 0
    '        Case 3, 7, 9
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '        Case 5
    '                'q = Query.From("QRCode Entry").Transaction(True)
    '                'q.Where("QRCode").Is(QRcode)
    '                'q.And("Document Type").Is(Doctype)
    '                'If q.ToTable.Rows.Count > 0 Then Return 0

    '        Case 11, 13, 15, 17, 19
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            'q = Query.From("QRCode Entry").Transaction(True)
    '            'q.Where("QRCode").Is(QRcode)
    '            'q.And("Document Type").Is(Doctype)
    '            'If q.ToTable.Rows.Count > 0 Then Return 0

    '        Case Else
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6,10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(1)
    '            If q.ToTable.Rows.Count > 0 Then
    '                WorkSession.MsgML("QRCode đã xuất bán : {0} !", QRcode)
    '                Return 0
    '            End If

    '    End Select

    '    'WorkSession.MsgML("Checking result")
    '    Return 1

    'End Function

    'Public Shared Function scanStockPost02(QRcode As String, Doctype As Integer, Logistics As String, QTy As Decimal, BinCode As String, LineNo As Integer, DocumentEntry As Integer, Optional NewBinCode As String = "") As Integer
    '    Dim Finish As Integer = 1
    '    Dim tableID As Integer = 0

    '    Dim q As Query = Query.From("QRCode").Transaction(True)
    '    q.Where("QRCode").Is(QRcode)
    '    If q.RecordCount <= 0 Then Return 0

    '    Dim trow As DataRow = q.TakeRow
    '    Dim ItemCode As String = q.Value("Item No_")

    '    Dim rr As Query = Query.From("Logistics Data").Transaction(True)
    '    rr.Where("Logistics No_").Is(Logistics)
    '    rr.And("Document Type").Is(Doctype)
    '    rr.And("Item No_").Is(ItemCode)

    '    Dim SourceCode As String = rr.Value("Source Code")
    '    Dim Respon As String = rr.Value("Responsibility Center")
    '    Dim LocationCode As String = rr.Value("Location Code")

    '    If SourceCode = "" Then SourceCode = q.Value("Source Code")
    '    If Respon = "" Then Respon = q.Value("Responsibility Center")
    '    If LocationCode = "" Then LocationCode = q.Value("Location Code")

    '    Dim Update As Query
    '    Dim querrydata As Query

    '    Select Case Doctype
    '        Case 4, 5
    '            Dim Zone As String = ""
    '            Dim qr As Query = Query.From("Bin").Transaction(True)
    '            qr.Where("Code").Is(BinCode)
    '            Zone = qr.Value("Zone")
    '            If LocationCode = "" Then LocationCode = qr.Value("Location Code")

    '            querrydata = Query.From("QRCode Entry").Transaction(True)
    '            querrydata.Where("QRCode").Is(QRcode)
    '            querrydata.And("Bin").Is(BinCode)
    '            querrydata.And("Document Type").Is(Doctype)

    '            If querrydata.RecordCount > 0 Then
    '                Update = Query.Update("QRCode Entry")
    '                Update.Where("QRCode").Is(QRcode)
    '                Update.And("Document Type").Is(Doctype)
    '                'querrydata.And("Item No_").Is(ItemCode)
    '                Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                Update.Fields("Location Code") = LocationCode
    '                Update.Fields("Zone") = Zone
    '                Update.Fields("Zone History", "+") = Zone + "|"
    '                Update.Fields("Bin Status") = IIf(Doctype = 5, 1, 0)
    '                Update.Execute()

    '                Update = Query.Update("Document Entry")
    '                Update.Where("Logistics No_").Is(Logistics)
    '                Update.And("Document Type").Is(Doctype)
    '                Update.And("Item No_").Is(ItemCode)
    '                Update.And("QRCode").Is(QRcode)
    '                'Update.And("Line No_").Is(LineNo)
    '                'Update.And("Entry No_").Is(DocumentEntry)

    '                Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                Update.Fields("Zone") = Zone
    '                Update.Fields("Zone History", "+") = Zone + "|"
    '                Update.Fields("Location Code") = LocationCode
    '                'Update.Fields("Bin Status") = IIf(Doctype = 5, 1, 0)

    '                Update.Fields("Scan Number", "+") = 1
    '                Update.Fields("Status") = 2
    '                If trow("URL") = "" Then Update.Fields("Attach File") = trow("URL")
    '                If trow("Serial No_") = "" Then Update.Fields("Serial No_") = trow("Serial No_")
    '                If trow("Lot No_") = "" Then Update.Fields("Lot No_") = trow("Lot No_")
    '                'If trow("Real Lot No_") = "" Then Update.Fields("Real Lot No_") = trow("Real Lot No_")

    '                Update.Execute()

    '            Else 'Insert QRCode Entry

    '                Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
    '                QueryInsertQREntry.Fields("QRCode") = QRcode
    '                QueryInsertQREntry.Fields("Item No_") = ItemCode
    '                QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
    '                QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
    '                QueryInsertQREntry.Fields("Real Lot No_") = trow("Lot No_")
    '                QueryInsertQREntry.Fields("Real Expiration Date") = CDate(trow("Expired Date"))

    '                QueryInsertQREntry.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                QueryInsertQREntry.Fields("Zone") = Zone
    '                QueryInsertQREntry.Fields("Bin Status") = IIf(Doctype = 5, 1, 0)
    '                QueryInsertQREntry.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                QueryInsertQREntry.Fields("Zone History", "+") = Zone + "|"

    '                QueryInsertQREntry.Fields("Document Type") = Doctype
    '                QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
    '                QueryInsertQREntry.Fields("Description") = trow("Name")
    '                QueryInsertQREntry.Fields("Variant Code") = trow("Item Variant")
    '                QueryInsertQREntry.Fields("Manufacturer Code") = trow("Work Center")

    '                QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

    '                'QueryInsertQREntry.Fields("Usage %") = 0
    '                QueryInsertQREntry.Fields("Status") = 1
    '                'QueryInsertQREntry.Fields("Created Date") = Now
    '                QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Unit Of Measure Code") = trow("Unit Of Measure")
    '                QueryInsertQREntry.Fields("Qty_ per Unit Of Measure") = trow("Qty Unit Of Measure")
    '                QueryInsertQREntry.Fields("Source Code") = SourceCode
    '                QueryInsertQREntry.Fields("Responsibility Center") = Respon
    '                QueryInsertQREntry.Fields("Location Code") = LocationCode
    '                QueryInsertQREntry.Fields("External Document No_") = trow("External Document No_")
    '                'QueryInsertQREntry.Fields("Qty_not Temped") = 0
    '                'QueryInsertQREntry.Fields("Last Date Checked") = Now
    '                QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Entry No_") = DocumentEntry
    '                QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
    '                QueryInsertQREntry.Fields("Logistics No_") = Logistics
    '                QueryInsertQREntry.Fields("Document No_") = trow("Document No_")
    '                QueryInsertQREntry.Fields("Packing List") = trow("Packing List")
    '                'QueryInsertQREntry.Fields("Picking No_") = trow("Picking No_")
    '                QueryInsertQREntry.Fields("Source Type") = trow("Source Type")
    '                QueryInsertQREntry.Fields("Source No_") = trow("Source No_")
    '                QueryInsertQREntry.Execute()

    '                Dim QueryUpdate As Query = Query.Update("Document Entry")
    '                QueryUpdate.WhereAs("Logistics No_") = Logistics
    '                QueryUpdate.WhereAs("QRCode") = trow("QRCode")
    '                QueryUpdate.WhereAs("Item No_") = trow("Item No_")
    '                'QueryUpdate.WhereAs("Line No_") = lineno
    '                QueryUpdate.WhereAs("Document Type") = Doctype

    '                QueryUpdate.Fields("Location Code") = LocationCode
    '                QueryUpdate.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                QueryUpdate.Fields("Zone") = Zone
    '                QueryUpdate.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                QueryUpdate.Fields("Zone History", "+") = Zone + "|"

    '                QueryUpdate.Fields("Scan Number", "+") = 1
    '                QueryUpdate.Fields("Status") = 2
    '                If trow("URL") = "" Then QueryUpdate.Fields("Attach File") = trow("URL")
    '                If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = trow("Serial No_")
    '                If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = trow("Lot No_")
    '                'If trow("Real Lot No_") = "" Then QueryUpdate.Fields("Real Lot No_") = trow("Real Lot No_")

    '                QueryUpdate.Execute()

    '            End If
    '        Case 0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19

    '            Dim Zone As String = ""
    '            Dim qr As Query = Query.From("Bin").Transaction(True)
    '            qr.Where("Code").Is(BinCode)
    '            Zone = qr.Value("Zone")
    '            If LocationCode = "" Then LocationCode = qr.Value("Location Code")

    '            querrydata = Query.From("QRCode Entry").Transaction(True)
    '            querrydata.Where("QRCode").Is(QRcode)
    '            querrydata.And("Bin").Is(BinCode)
    '            querrydata.And("Document Type").Is(Doctype)

    '            If querrydata.RecordCount > 0 Then
    '                Update = Query.Update("QRCode Entry")
    '                Update.Where("QRCode").Is(QRcode)
    '                Update.And("Document Type").Is(Doctype)
    '                'querrydata.And("Item No_").Is(ItemCode)
    '                Update.Fields("Location Code") = LocationCode
    '                Update.Fields("Bin") = BinCode
    '                'Update.Fields("Bin History") = BinCode
    '                Update.Fields("Zone") = Zone
    '                'Update.Fields("Zone History") = BinCode

    '                Select Case Doctype
    '                    Case 1, 3, 5, 7, 9, 11, 13, 15, 17, 19
    '                        Update.Fields("Bin Status") = 1
    '                        Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                        Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                        Update.Fields("Zone") = Zone
    '                        Update.Fields("Zone History", "+") = Zone + "|"
    '                    Case Else
    '                        Update.Fields("Bin Status") = 0
    '                        Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                        Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                        Update.Fields("Zone") = Zone
    '                        Update.Fields("Zone History", "+") = Zone + "|"
    '                End Select

    '                Update.Execute()

    '                Update = Query.Update("Document Entry")
    '                Update.Where("Logistics No_").Is(Logistics)
    '                Update.And("Document Type").Is(Doctype)
    '                Update.And("Item No_").Is(ItemCode)
    '                Update.And("QRCode").Is(QRcode)
    '                'Update.And("Line No_").Is(LineNo)
    '                'Update.And("Entry No_").Is(DocumentEntry)

    '                Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                'Update.Fields("Bin History") = BinCode
    '                Update.Fields("Zone") = Zone
    '                'Update.Fields("Zone History") = BinCode
    '                'Update.Fields("Bin History", "+") = BinCode + "|"
    '                'Update.Fields("Zone History", "+") = Zone + "|"

    '                Update.Fields("Location Code") = LocationCode

    '                Select Case Doctype
    '                    Case 1, 3, 5, 7, 9, 11, 13, 15, 17, 19
    '                        'Update.Fields("Bin Status") = 1
    '                        Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                        Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                        Update.Fields("Zone") = Zone
    '                        Update.Fields("Zone History", "+") = Zone + "|"

    '                    Case Else
    '                        'Update.Fields("Bin Status") = 0
    '                        Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                        Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                        Update.Fields("Zone") = Zone
    '                        Update.Fields("Zone History", "+") = Zone + "|"
    '                End Select

    '                Update.Fields("Scan Number", "+") = 1
    '                Update.Fields("Status") = 2
    '                If trow("URL") = "" Then Update.Fields("Attach File") = trow("URL")
    '                If trow("Serial No_") = "" Then Update.Fields("Serial No_") = trow("Serial No_")
    '                If trow("Lot No_") = "" Then Update.Fields("Lot No_") = trow("Lot No_")
    '                'If trow("Real Lot No_") = "" Then Update.Fields("Real Lot No_") = trow("Real Lot No_")
    '                Update.Execute()

    '            Else 'Insert QRCode Entry

    '                Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
    '                QueryInsertQREntry.Fields("QRCode") = QRcode
    '                QueryInsertQREntry.Fields("Item No_") = ItemCode
    '                QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
    '                QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
    '                QueryInsertQREntry.Fields("Real Lot No_") = trow("Lot No_")
    '                QueryInsertQREntry.Fields("Real Expiration Date") = CDate(trow("Expired Date"))

    '                QueryInsertQREntry.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                QueryInsertQREntry.Fields("Zone") = Zone
    '                QueryInsertQREntry.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                QueryInsertQREntry.Fields("Zone History", "+") = Zone + "|"

    '                QueryInsertQREntry.Fields("Document Type") = Doctype
    '                QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
    '                QueryInsertQREntry.Fields("Description") = trow("Name")
    '                QueryInsertQREntry.Fields("Variant Code") = trow("Item Variant")
    '                QueryInsertQREntry.Fields("Manufacturer Code") = trow("Work Center")

    '                QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

    '                'QueryInsertQREntry.Fields("Usage %") = 0
    '                QueryInsertQREntry.Fields("Status") = 1
    '                'QueryInsertQREntry.Fields("Created Date") = Now
    '                QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Unit Of Measure Code") = trow("Unit Of Measure")
    '                QueryInsertQREntry.Fields("Qty_ per Unit Of Measure") = trow("Qty Unit Of Measure")
    '                QueryInsertQREntry.Fields("Source Code") = SourceCode
    '                QueryInsertQREntry.Fields("Responsibility Center") = Respon
    '                QueryInsertQREntry.Fields("Location Code") = LocationCode
    '                QueryInsertQREntry.Fields("External Document No_") = trow("External Document No_")
    '                'QueryInsertQREntry.Fields("Qty_not Temped") = 0
    '                'QueryInsertQREntry.Fields("Last Date Checked") = Now
    '                QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
    '                QueryInsertQREntry.Fields("Entry No_") = DocumentEntry
    '                QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
    '                QueryInsertQREntry.Fields("Logistics No_") = Logistics
    '                QueryInsertQREntry.Fields("Document No_") = trow("Document No_")
    '                QueryInsertQREntry.Fields("Packing List") = trow("Packing List")
    '                'QueryInsertQREntry.Fields("Picking No_") = trow("Picking No_")
    '                QueryInsertQREntry.Fields("Source Type") = trow("Source Type")
    '                QueryInsertQREntry.Fields("Source No_") = trow("Source No_")
    '                QueryInsertQREntry.Execute()

    '                Dim QueryUpdate As Query = Query.Update("Document Entry")
    '                QueryUpdate.WhereAs("Logistics No_") = Logistics
    '                QueryUpdate.WhereAs("QRCode") = trow("QRCode")
    '                QueryUpdate.WhereAs("Item No_") = trow("Item No_")
    '                'QueryUpdate.WhereAs("Line No_") = lineno
    '                QueryUpdate.WhereAs("Document Type") = Doctype

    '                QueryUpdate.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
    '                QueryUpdate.Fields("Zone") = Zone
    '                QueryUpdate.Fields("Location Code") = LocationCode
    '                QueryUpdate.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
    '                QueryUpdate.Fields("Zone History", "+") = Zone + "|"

    '                QueryUpdate.Fields("Scan Number", "+") = 1
    '                QueryUpdate.Fields("Status") = 2
    '                If trow("URL") = "" Then QueryUpdate.Fields("Attach File") = trow("URL")
    '                If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = trow("Serial No_")
    '                If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = trow("Lot No_")
    '                'If trow("Real Lot No_") = "" Then QueryUpdate.Fields("Real Lot No_") = trow("Real Lot No_")

    '                QueryUpdate.Execute()

    '            End If

    '        Case Else

    '    End Select

    '    Update = Query.Update("Document Entry Header")
    '    Update.Where("Logistics No_").Is(Logistics)
    '    Update.And("Document Type").Is(Doctype)
    '    Update.Fields("Status") = 2
    '    Update.Execute()

    '    Return 1
    'End Function

    'Public Sub CheckscanStock02(ByVal sender As WXSource, ByVal e As WXArgs)

    '    Dim QRCode As String = ISDBNULL(sender.Request("__Qr__"), "")
    '    Dim LogisticsNo As String = ISDBNULL(sender.Request("__logistics__"), "")
    '    Dim Doctype As Integer = ISDBNULL(sender.Request("__docType__"), 0)
    '    Dim BinQRCode As String = ISDBNULL(sender.Request("__Bin__"), "")
    '    Dim Qty As Decimal = ISDBNULL(sender.Request("__Qty__"), 1)

    '    'WorkSession.MsgML("QRCode '{0}'", QRCode)
    '    'WorkSession.MsgML("Logistic '{0}'", LogisticsNo)
    '    'WorkSession.MsgML("Doctype {0}", Doctype)
    '    'WorkSession.MsgML("BinQRCode '{0}'", BinQRCode)
    '    'WorkSession.MsgML("Qty {0}", Qty)

    '    Dim qr As Query = Query.From("Bin").Transaction(True)
    '    qr.Where("QRCode").Is(BinQRCode)
    '    Dim Zone As String = qr.Value("Zone")
    '    Dim LocationCode As String = qr.Value("Location Code")

    '    If qr.RecordCount <= 0 Then
    '        WorkSession.MsgML("QRCode BIN is not correct 02!")
    '        'sender.Response("message”) = “QRCode BIN is not correct ! ”
    '        sender.Response("valid”) = 0
    '        Return
    '    End If

    '    Dim q As Query = Query.From("QRCode View").Transaction(True)
    '    q.Where("QRCode").Is(QRCode)
    '    Dim ItemCode As String = ""
    '    Dim ItemName As String = ""
    '    Dim QRcodeParent As Integer = 0
    '    Dim UOM As String = ""
    '    Dim Qtyper As Decimal = 0

    '    If q.RecordCount <= 0 Then
    '        WorkSession.MsgML("QRCode is not belong to company 02!")
    '        'sender.Response("message”) = “QRCode is not belong to company! ”
    '        sender.Response("valid”) = 0
    '        Return
    '    Else
    '        ItemCode = q.Value("Item No_")
    '        UOM = q.Value("Unit Of Measure")
    '        Qtyper = q.Value("Qty Unit Of Measure")
    '        Qty = q.Value("Quantity")
    '        QRcodeParent = q.Value("Parent") '= 0 not allowed to add anymore, 1 is allowed to add more
    '        ItemName = ItemCode + " product name: " + q.Value("Name")

    '        'sender.Response("item”) = ItemName
    '        'sender.Response("parent”) = QRcodeParent
    '        'sender.Response("qty”) = Qty
    '        'sender.Response("uom”) = UOM
    '        'sender.Response("qtyper”) = Qtyper
    '        'sender.Response("message”) = “Successful !”
    '        'sender.Response("valid”) = 1
    '        'WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
    '        'WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
    '        'WorkSession.MsgML("Product Name '{0}'", ItemName)
    '        'WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
    '        'WorkSession.MsgML("Product Quantity:  {0}", Qty)
    '        'WorkSession.MsgML("Product UOM: '{0}'", UOM)
    '        'WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)
    '    End If

    '    q = Query.From("Logistics Data").Transaction(True) ' q = Query.From("QRCode Tracking").Transaction(True)
    '    q.Where("Item No_").Is(ItemCode)
    '    q.And("Logistics No_").Is(LogisticsNo)
    '    If q.RecordCount <= 0 Then
    '        Select Case CInt(Doctype)
    '            Case 0, 10
    '                'sender.Response("message”) = "QRCode is not belong to Receipt Order!"
    '                WorkSession.MsgML("QRCode is not belong to Receipt Order!")
    '            Case 1, 9
    '                'sender.Response("message”) = "QRCode is not belong to Delivery Order!"
    '                WorkSession.MsgML("QRCode is not belong to Delivery Order!")
    '            Case 4, 5, 11, 12, 14, 15, 17, 18
    '                'sender.Response("message”) = "QRCode is not belong to Transfer Order!"
    '                WorkSession.MsgML("QRCode is not belong to Transfer Order!")
    '            Case 6, 7
    '                'sender.Response("message”) = "QRCode is not belong to Work Order!"
    '                WorkSession.MsgML("QRCode is not belong to Work Order!")
    '            Case 8
    '                'sender.Response("message”) = "QRCode is not belong to Maintennace Order!"
    '                WorkSession.MsgML("QRCode is not belong to Maintennace Order!")
    '            Case Else
    '                'sender.Response("message”) = "QRCode is not belong to Receipt Order or Delivery Order!"
    '                WorkSession.MsgML("QRCode is not belong to Receipt Order or Delivery Order!")
    '        End Select

    '        'sender.Response("item”) = ItemName
    '        'sender.Response("parent”) = QRcodeParent
    '        'sender.Response("qty”) = Qty
    '        'sender.Response("uom”) = UOM
    '        'sender.Response("qtyper”) = Qtyper
    '        WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
    '        WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
    '        WorkSession.MsgML("Product Name '{0}'", ItemName)
    '        WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
    '        WorkSession.MsgML("Product Quantity:  {0}", Qty)
    '        WorkSession.MsgML("Product UOM: '{0}'", UOM)
    '        WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

    '        sender.Response("valid”) = 0
    '        Return
    '    End If

    '    Select Case Doctype

    '        Case 8, 10
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRCode)
    '            'q.And("Logistics No_").Is(LogisticsNo)
    '            q.And("Document Type").Is(1) 'Sold
    '            If q.RecordCount <= 0 Then
    '                WorkSession.MsgML("QRCode is not sold yet!")
    '                'sender.Response("item”) = ItemName
    '                'sender.Response("parent”) = QRcodeParent
    '                'sender.Response("qty”) = Qty
    '                'sender.Response("uom”) = UOM
    '                'sender.Response("qtyper”) = Qtyper

    '                WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
    '                WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
    '                WorkSession.MsgML("Product Name '{0}'", ItemName)
    '                WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
    '                WorkSession.MsgML("Product Quantity:  {0}", Qty)
    '                WorkSession.MsgML("Product UOM: '{0}'", UOM)
    '                WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

    '                sender.Response("valid”) = 0
    '                Return
    '            End If
    '        Case 9
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRCode)
    '            'q.And("Logistics No_").Is(LogisticsNo)
    '            q.And("Document Type").Is(0) 'Purchased
    '            If q.RecordCount <= 0 Then
    '                WorkSession.MsgML("QRCode is not purchased!")
    '                WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
    '                WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
    '                WorkSession.MsgML("Product Name '{0}'", ItemName)
    '                WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
    '                WorkSession.MsgML("Product Quantity:  {0}", Qty)
    '                WorkSession.MsgML("Product UOM: '{0}'", UOM)
    '                WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

    '                'sender.Response("item”) = ItemName
    '                'sender.Response("parent”) = QRcodeParent
    '                'sender.Response("qty”) = Qty
    '                'sender.Response("uom”) = UOM
    '                'sender.Response("qtyper”) = Qtyper
    '                sender.Response("valid”) = 0
    '                Return
    '            End If
    '        Case 4
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRCode)
    '            'q.And("Logistics No_").Is(LogisticsNo)
    '            q.And("Document Type").In("5,11,15,17,19") 'Transfer Order Received
    '            If q.RecordCount <= 0 Then
    '                WorkSession.MsgML("QRCode is not transfered Order shippment! ")
    '                WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
    '                WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
    '                WorkSession.MsgML("Product Name '{0}'", ItemName)
    '                WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
    '                WorkSession.MsgML("Product Quantity:  {0}", Qty)
    '                WorkSession.MsgML("Product UOM: '{0}'", UOM)
    '                WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

    '                'sender.Response("item”) = ItemName
    '                'sender.Response("parent”) = QRcodeParent
    '                'sender.Response("qty”) = Qty
    '                'sender.Response("uom”) = UOM
    '                'sender.Response("qtyper”) = Qtyper
    '                sender.Response("valid”) = 0
    '                Return
    '            End If
    '        Case 12, 14, 16, 18
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRCode)
    '            q.And("Logistics No_").Is(LogisticsNo)
    '            q.And("Document Type").In("11,15,17,19") 'Transfer Order Received
    '            If q.RecordCount <= 0 Then
    '                WorkSession.MsgML("QRCode is not transfered Order shippment! ")
    '                WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
    '                WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
    '                WorkSession.MsgML("Product Name '{0}'", ItemName)
    '                WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
    '                WorkSession.MsgML("Product Quantity:  {0}", Qty)
    '                WorkSession.MsgML("Product UOM: '{0}'", UOM)
    '                WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

    '                'sender.Response("item”) = ItemName
    '                'sender.Response("parent”) = QRcodeParent
    '                'sender.Response("qty”) = Qty
    '                'sender.Response("uom”) = UOM
    '                'sender.Response("qtyper”) = Qtyper
    '                sender.Response("valid”) = 0
    '                Return
    '            End If
    '        Case 12
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRCode)
    '            q.And("Logistics No_").Is(LogisticsNo)
    '            q.And("Document Type").Is(11) 'Transfer Order Received
    '            If q.RecordCount <= 0 Then
    '                WorkSession.MsgML("QRCode is not Consignee shippment ! ")
    '                WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
    '                WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
    '                WorkSession.MsgML("Product Name '{0}'", ItemName)
    '                WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
    '                WorkSession.MsgML("Product Quantity:  {0}", Qty)
    '                WorkSession.MsgML("Product UOM: '{0}'", UOM)
    '                WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

    '                'sender.Response("item”) = ItemName
    '                'sender.Response("parent”) = QRcodeParent
    '                'sender.Response("qty”) = Qty
    '                'sender.Response("uom”) = UOM
    '                'sender.Response("qtyper”) = Qtyper
    '                sender.Response("valid”) = 0
    '                Return
    '            End If
    '        Case 14
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRCode)
    '            q.And("Logistics No_").Is(LogisticsNo)
    '            q.And("Document Type").Is(15) 'Transfer Order Received
    '            If q.RecordCount <= 0 Then
    '                WorkSession.MsgML("QRCode is not transfered Order shippment ! ")
    '                WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
    '                WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
    '                WorkSession.MsgML("Product Name '{0}'", ItemName)
    '                WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
    '                WorkSession.MsgML("Product Quantity:  {0}", Qty)
    '                WorkSession.MsgML("Product UOM: '{0}'", UOM)
    '                WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

    '                'sender.Response("item”) = ItemName
    '                'sender.Response("parent”) = QRcodeParent
    '                'sender.Response("qty”) = Qty
    '                'sender.Response("uom”) = UOM
    '                'sender.Response("qtyper”) = Qtyper
    '                sender.Response("valid”) = 0
    '                Return
    '            End If
    '        Case 16
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRCode)
    '            q.And("Logistics No_").Is(LogisticsNo)
    '            q.And("Document Type").Is(17) 'Transfer Order Received
    '            If q.RecordCount <= 0 Then
    '                WorkSession.MsgML("QRCode is not Outsource Order shippment ! ")
    '                WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
    '                WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
    '                WorkSession.MsgML("Product Name '{0}'", ItemName)
    '                WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
    '                WorkSession.MsgML("Product Quantity:  {0}", Qty)
    '                WorkSession.MsgML("Product UOM: '{0}'", UOM)
    '                WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

    '                'sender.Response("item”) = ItemName
    '                'sender.Response("parent”) = QRcodeParent
    '                'sender.Response("qty”) = Qty
    '                'sender.Response("uom”) = UOM
    '                'sender.Response("qtyper”) = Qtyper
    '                sender.Response("valid”) = 0
    '                Return
    '            End If
    '        Case 18
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRCode)
    '            q.And("Logistics No_").Is(LogisticsNo)
    '            q.And("Document Type").Is(19) 'Transfer Order Received
    '            If q.RecordCount <= 0 Then
    '                WorkSession.MsgML("QRCode is not Company Outsourced Order shippment !")
    '                WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
    '                WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
    '                WorkSession.MsgML("Product Name '{0}'", ItemName)
    '                WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
    '                WorkSession.MsgML("Product Quantity:  {0}", Qty)
    '                WorkSession.MsgML("Product UOM: '{0}'", UOM)
    '                WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

    '                'sender.Response("item”) = ItemName
    '                'sender.Response("parent”) = QRcodeParent
    '                'sender.Response("qty”) = Qty
    '                'sender.Response("uom”) = UOM
    '                'sender.Response("qtyper”) = Qtyper
    '                sender.Response("valid”) = 0
    '                Return
    '            End If
    '    End Select

    '    ''===
    '    ''Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
    '    ''Dim Entry As Integer = qqq.Value("EntryNo")

    '    'Dim exist As Query = Query.From("QRCode Line").Transaction(True)
    '    'exist.WhereAs("Document Type") = CInt(Doctype)
    '    'exist.WhereAs("Logistics No_") = LogisticsNo
    '    'exist.WhereAs("QRCode") = QRCode

    '    'If exist.RecordCount <= 0 Or QRcodeParent = 1 Then
    '    '    Dim insert As Query = Query.Entity("QRCode Line").Insert

    '    '    'Select Case CInt(Doctype)
    '    '    '    Case 0, 1, 4, 5, 6, 7
    '    '    '        Flag = scanStockCheck(QRCodeItem, Doctype, Logistics, 1)
    '    '    '        If Flag <> 0 Then scanStockPost(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
    '    '    '    Case Else
    '    '    'End Select

    '    '    insert.Fields("Document Type") = CInt(Doctype)
    '    '    insert.Fields("Logistics No_") = LogisticsNo
    '    '    insert.Fields("Location Code") = LocationCode
    '    '    insert.Fields("Zone Code") = Zone

    '    '    Select Case CInt(Doctype)
    '    '        Case 4
    '    '            insert.Fields("From Bin Code") = GetBinCodeFromQRCodeEntry(QRCode, Doctype, Zone)
    '    '            insert.Fields("From Zone") = Zone
    '    '            insert.Fields("From Location Code") = LocationCode 'MasterRow("From Location Code")
    '    '            insert.Fields("Bin Code") = insert.Fields("From Bin Code")
    '    '            insert.Fields("Zone") = Zone
    '    '            insert.Fields("To Bin Code") = BinQRCode
    '    '            insert.Fields("Location Code") = LocationCode
    '    '        Case 5
    '    '            insert.Fields("Bin Code") = BinQRCode
    '    '            'insert.Fields("Location Code") = LocationCode
    '    '            'insert.Fields("Zone Code") = Zone
    '    '            insert.Fields("From Bin Code") = BinQRCode
    '    '            'insert.Fields("To Bin Code") = GetBinCodeFromInTransitLocation(r("Source Code"), r("Responsibility Center"), Zone, InTransit)
    '    '            'insert.Fields("To Zone") = Zone
    '    '            'insert.Fields("To Location Code") = InTransit
    '    '        Case Else
    '    '            insert.Fields("Bin Code") = BinQRCode
    '    '            'insert.Fields("Location Code") = LocationCode
    '    '            'insert.Fields("Zone Code") = Zone
    '    '    End Select

    '    '    insert.Fields("Item No_") = ItemCode
    '    '    insert.Fields("QRCode") = QRCode
    '    '    insert.Fields("Quantity") = CInt(Qty)
    '    '    insert.Fields("Unit Of Measure") = UOM
    '    '    insert.Fields("Qty_ per Unit of Measure") = Qtyper

    '    '    insert.Execute()
    '    'End If


    '    'exist = Query.From("QRCode Header").Transaction(True)
    '    'exist.WhereAs("Document Type") = CInt(Doctype)
    '    'exist.WhereAs("Logistics No_") = LogisticsNo
    '    'If exist.RecordCount <= 0 Then
    '    '    Dim Hinsert As Query = Query.Entity("QRCode Header").Insert
    '    '    Hinsert.Fields("Document Type") = CInt(Doctype)
    '    '    Hinsert.Fields("Logistics No_") = LogisticsNo
    '    '    Hinsert.Fields("Location Code") = LocationCode
    '    '    Hinsert.Fields("Zone Code") = Zone
    '    '    Hinsert.Fields("Bin Code") = BinQRCode
    '    '    Hinsert.Execute()
    '    'End If

    '    sender.Response("valid”) = 1
    'End Sub

    'Public Sub scanStock02(ByVal sender As WXSource, ByVal e As WXArgs)
    '    WorkSession.MsgML("scanStock02 function!")

    '    Dim Data = ISDBNULL(sender.Request("__DATA__"), "")
    '    'WorkSession.MsgML("scanStock function! data {0}", Data)
    '    If Data = "" Then Return

    '    Dim js As New JavaScriptSerializer()
    '    Dim items = js.Deserialize(Of ArrayList)(Data)
    '    'WorkSession.MsgML("scanStock function! data Item {0}", items.Count)
    '    If items.Count <= 0 Then Return

    '    Try
    '        Query.BeginTransaction()

    '        Dim Doctype As Integer = 0
    '        Dim BinQRCode As String = ""
    '        Dim Logistics As String = ""
    '        Dim Qty As Integer = 0
    '        Dim UOM As String = ""
    '        Dim QRCodeItem As String = ""
    '        Dim Flag As Integer = 0

    '        Dim i As Integer = 0
    '        Dim Loopqty As Integer = 0

    '        Dim productDict = New Dictionary(Of String, Integer)

    '        For Each item As Object In items
    '            If Not productDict.ContainsKey(item("Qr")) Then
    '                productDict.Add(item("Qr"), item("Qty"))
    '            Else
    '                productDict(item("Qr")) += item("Qty")
    '                Loopqty += 1
    '            End If
    '        Next


    '        If Loopqty = 0 Then
    '            Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
    '            Dim Entry As Integer = qqq.Value("EntryNo")

    '            For Each item As Object In items
    '                BinQRCode = items(0)("Bin")

    '                Dim qr As Query = Query.From("Bin").Transaction(True)
    '                qr.Where("Code").Is(BinQRCode)
    '                Dim Zone As String = qr.Value("Zone")

    '                QRCodeItem = item("Qr")
    '                'WorkSession.MsgML("Mã QR SP {0}", QRCodeItem)
    '                Qty = CInt(item("Qty"))
    '                'WorkSession.MsgML("Số lượng {0}", Qty)
    '                'BinQRCode = item("Bin")
    '                'WorkSession.MsgML("Mã QR ngăn kệ {0}", BinQRCode)
    '                Doctype = CInt(item("docType"))
    '                'WorkSession.MsgML("Loại nghiệp vụ {0}", Doctype)
    '                Logistics = item("logistics")
    '                'WorkSession.MsgML("Mã giao nhận (Logistics No_ {0}", Logistics)

    '                Select Case CInt(Doctype)
    '                    Case 0, 1, 4, 5, 6, 7
    '                        Flag = scanStockCheck02(QRCodeItem, Doctype, Logistics, 1)
    '                        If Flag <> 0 Then scanStockPost02(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
    '                    Case Else
    '                End Select
    '                'scanStockPost02(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)

    '                Entry += 1
    '                i += 1
    '            Next

    '            WorkSession.MsgML("scanStock Successfully !")

    '        Else
    '            WorkSession.MsgML("QRCode Parent need edit before post !")

    '            'Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
    '            'Dim Entry As Integer = qqq.Value("EntryNo")

    '            Dim insert As Query = Query.Entity("QRCode Line").Insert

    '            BinQRCode = items(0)("Bin")
    '            'WorkSession.MsgML("Mã QR ngăn kệ {0}", BinQRCode)
    '            Doctype = CInt(items(0)("docType"))
    '            'WorkSession.MsgML("Loại nghiệp vụ {0}", Doctype)
    '            Logistics = items(0)("logistics")

    '            Dim qr As Query = Query.From("Bin").Transaction(True)
    '            qr.Where("Code").Is(BinQRCode)
    '            Dim Zone As String = qr.Value("Zone")
    '            Dim LocationCode As String = qr.Value("Location Code")

    '            'For Each qrcode As String In productDict.Keys
    '            '    QRCodeItem = qrcode
    '            '    ' WorkSession.MsgML("Mã QR SP {0}", QRCodeItem)
    '            '    Qty = CInt(productDict(qrcode))
    '            '    'WorkSession.MsgML("Số lượng {0}", Qty)
    '            'next

    '            For Each kvp As KeyValuePair(Of String, Integer) In productDict
    '                'Dim key As String = kvp.Key
    '                'Dim val As Integer = kvp.Value
    '                'WorkSession.MsgML("Key QRCode '{0}'", key)
    '                'WorkSession.MsgML("Số lượng {0}", Val)

    '                QRCodeItem = kvp.Key
    '                Qty = kvp.Value

    '                'Select Case CInt(Doctype)
    '                '    Case 0, 1, 4, 5, 6, 7
    '                '        Flag = scanStockCheck(QRCodeItem, Doctype, Logistics, 1)
    '                '        If Flag <> 0 Then scanStockPost(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
    '                '    Case Else
    '                'End Select

    '                'Dim existLine As Query = Query.From("QRCode Line").Transaction(True)
    '                'existLine.WhereAs("Document Type") = CInt(Doctype)
    '                'existLine.WhereAs("Logistics No_") = Logistics
    '                'existLine.WhereAs("QRCode") = QRCodeItem

    '                Dim QRCodeInfo As Query = Query.From("QRCode").Transaction(True)
    '                QRCodeInfo.Where("QRCode").Is(QRCodeItem)
    '                Dim QRcodeParent As Integer = QRCodeInfo.Value("Parent")

    '                'If existLine.RecordCount <= 0 Or QRcodeParent = 1 Then

    '                insert = Query.Entity("QRCode Line").Insert
    '                insert.Fields("Type") = 4
    '                insert.Fields("No_") = QRCodeInfo.Value("Item No_")

    '                insert.Fields("QRCode") = QRCodeItem
    '                insert.Fields("Quantity") = CInt(Qty)

    '                If CInt(Qty) <= 1 Then
    '                    insert.Fields("Unit Of Measure") = QRCodeInfo.Value("Unit Of Measure")
    '                    insert.Fields("Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")
    '                Else
    '                    If QRcodeParent = 1 Then
    '                        Dim ItemUOM As Query = Query.From("Item Unit of Measure").Transaction(True)
    '                        ItemUOM.Where("Item No_").Is(QRCodeInfo.Value("Item No_"))

    '                        ItemUOM.And("Qty_ per Unit of Measure").LessThan(QRCodeInfo.Value("Qty Unit Of Measure"))
    '                        ItemUOM.OrderBy("Qty_ per Unit of Measure").DESC()

    '                        insert.Fields("Qty_ per Unit of Measure") = IIf(ItemUOM.Value("Qty_ per Unit of Measure") = 0, 1, ItemUOM.Value("Qty_ per Unit of Measure"))
    '                        insert.Fields("Unit Of Measure") = ItemUOM.Value("Code")
    '                    Else
    '                        insert.Fields("Unit Of Measure") = QRCodeInfo.Value("Unit Of Measure")
    '                        insert.Fields("Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")
    '                        insert.Fields("Quantity") = 1
    '                    End If


    '                End If

    '                insert.Fields("Document Type") = CInt(Doctype)
    '                insert.Fields("Logistics No_") = Logistics
    '                Select Case CInt(Doctype)
    '                    Case 4
    '                        insert.Fields("From Bin Code") = GetBinCodeFromQRCodeEntry(QRCodeItem, Doctype, Zone)
    '                        insert.Fields("From Zone") = Zone
    '                        insert.Fields("From Location Code") = LocationCode 'MasterRow("From Location Code")
    '                        insert.Fields("Bin Code") = insert.Fields("From Bin Code")
    '                        insert.Fields("Zone Code") = Zone
    '                        insert.Fields("To Bin Code") = BinQRCode
    '                        insert.Fields("Location Code") = LocationCode

    '                        insert.Fields("To Unit of Measure") = QRCodeInfo.Value("Unit Of Measure")
    '                        insert.Fields("To Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")

    '                    Case 5
    '                        insert.Fields("Bin Code") = BinQRCode
    '                        insert.Fields("From Bin Code") = BinQRCode
    '                        'insert.Fields("To Bin Code") = GetBinCodeFromInTransitLocation(r("Source Code"), r("Responsibility Center"), Zone, InTransit)
    '                        'insert.Fields("To Zone") = Zone
    '                        'insert.Fields("To Location Code") = InTransit
    '                    Case Else
    '                        insert.Fields("Bin Code") = BinQRCode
    '                        insert.Fields("Zone Code") = Zone
    '                        insert.Fields("Location Code") = LocationCode
    '                        insert.Fields("From Bin Code") = BinQRCode
    '                        insert.Fields("From Zone") = Zone
    '                        insert.Fields("From Location Code") = LocationCode
    '                        'insert.Fields("To Zone") = Zone
    '                        'insert.Fields("To Bin Code") = BinQRCode
    '                        'insert.Fields("To Location Code") = LocationCode
    '                End Select

    '                insert.Execute()

    '                'Entry += 1
    '                i += 1
    '                'End If
    '            Next


    '            Dim exist As Query = Query.From("QRCode Header").Transaction(True)
    '            exist.WhereAs("Document Type") = CInt(Doctype)
    '            exist.WhereAs("Logistics No_") = Logistics
    '            If exist.RecordCount <= 0 Then
    '                Dim Hinsert As Query = Query.Entity("QRCode Header").Insert
    '                Hinsert.Fields("Document Type") = CInt(Doctype)
    '                Hinsert.Fields("Logistics No_") = Logistics
    '                Hinsert.Fields("Location Code") = LocationCode
    '                Hinsert.Fields("Zone Code") = Zone
    '                Hinsert.Fields("Bin Code") = BinQRCode
    '                Hinsert.Execute()
    '            End If

    '            'Dim Hinsert As Query = Query.Entity("QRCode Header").Insert
    '            'Hinsert.Fields("Document Type") = CInt(Doctype)
    '            'Hinsert.Fields("Logistics No_") = Logistics
    '            'Hinsert.Fields("Bin Code") = BinQRCode
    '            'Hinsert.Execute()

    '            Framework.OpenEntity("QRCode Line", String.Format("[Logistics No_]=N'{0}' and [Document Type]={1}", Logistics, Doctype))

    '        End If

    '        Query.EndTransaction()

    '    Catch ex As Exception
    '        WorkSession.MsgML(ex.ToString)
    '        Query.RollBack()
    '    End Try


    'End Sub

    'Public Sub scanStockTest(ByVal sender As WXSource, ByVal e As WXArgs)
    '    WorkSession.MsgML("scanStock tesk debug function!")
    '    Dim r As Hashtable = sender.CurrentRow
    '    If r Is Nothing Or r.Count = 0 Then
    '        WorkSession.MsgML("Empty !")
    '        Return
    '    End If
    '    'If r Is Nothing Or r.Count = 0 Then Return
    '    If r("Status") < 2 Then
    '        WorkSession.MsgML("Not yet approved !")
    '        Return
    '    End If
    '    If sender.TableName <> "QRCode Header" Then Return

    '    Dim q As Query = Query.From("QRCode Line").Transaction(True)
    '    q.Where("Document No_").Is(r("No_"))
    '    q.And("Logistics No_").Is(r("Logistics No_"))
    '    q.And("Document Type").Is(r("Document Type"))
    '    q.And("Bin Code").IsNot("")
    '    'q.And("Status").Is(2)

    '    If q.RecordCount <= 0 Then Return

    '    Dim items As DataTable = q.ToTable

    '    Try
    '        Query.BeginTransaction()

    '        Dim Doctype As Integer = 0
    '        Dim BinQRCode As String = ""
    '        Dim Logistics As String = ""
    '        Dim Qty As Integer = 0
    '        Dim UOM As String = ""
    '        Dim QRCodeItem As String = ""
    '        Dim Flag As Integer = 0
    '        Dim i As Integer = 0

    '        Dim qq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
    '        Dim Entry As Integer = qq.Value("EntryNo")

    '        For Each item As DataRow In items.Rows
    '            BinQRCode = item("Bin Code")

    '            Dim qr As Query = Query.From("Bin").Transaction(True)
    '            qr.Where("Code").Is(BinQRCode)
    '            Dim Zone As String = qr.Value("Zone")

    '            QRCodeItem = item("QRCode")
    '            Qty = CInt(item("Quantity"))
    '            Doctype = CInt(item("Document Type"))
    '            Logistics = item("Logistics No_")

    '            Select Case CInt(Doctype)
    '                Case 0, 1, 4, 5, 6, 7
    '                    Flag = scanStockCheck(QRCodeItem, Doctype, Logistics, 1)
    '                    If Flag <> 0 Then scanStockPost(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
    '                Case Else

    '            End Select
    '            Entry += 1
    '            i += 1
    '        Next

    '        WorkSession.MsgML("scanStock Successfully !")

    '        Query.EndTransaction()

    '        Framework.OpenEntity("QRCode Entry", String.Format("[Logistics No_] = N'{0}' and [Document Type]={1}", Logistics, Doctype))

    '    Catch ex As Exception
    '        WorkSession.MsgML(ex.ToString)
    '        Query.RollBack()
    '    End Try

    'End Sub

    Public Sub scanStockTest02(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("scanStock tesk debug function!")
        Dim r As Hashtable = sender.CurrentRow
        If sender.TableName <> "QRCode Header" Then Return
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        'If r Is Nothing Or r.Count = 0 Then Return
        If r("Status") < 2 Then
            WorkSession.MsgML("Not yet approved !")
            Return
        End If

        Dim q As Query = Query.From("QRCode Line").Transaction(True)
        q.Where("Document No_").Is(r("No_"))
        q.And("Logistics No_").Is(r("Logistics No_"))
        q.And("Document Type").Is(r("Document Type"))
        q.And("Bin Code").IsNot("")
        'q.And("Status").Is(2)

        If q.RecordCount <= 0 Then Return

        Dim items As DataTable = q.ToTable

        Try
            Query.BeginTransaction()

            Dim Doctype As Integer = 0
            Dim BinQRCode As String = ""
            Dim Logistics As String = ""
            Dim Qty As Integer = 0
            Dim UOM As String = ""
            Dim QRCodeItem As String = ""
            Dim Flag As Integer = 0
            Dim i As Integer = 0

            Dim qq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
            Dim Entry As Integer = qq.Value("EntryNo")

            For Each item As DataRow In items.Rows
                BinQRCode = item("Bin Code")

                Dim qr As Query = Query.From("Bin").Transaction(True)
                qr.Where("Code").Is(BinQRCode)
                Dim Zone As String = qr.Value("Zone")

                QRCodeItem = item("QRCode")
                Qty = CInt(item("Quantity"))
                Doctype = CInt(item("Document Type"))
                Logistics = item("Logistics No_")

                Select Case CInt(Doctype)
                    Case 0, 1, 4, 5, 6, 7
                        Flag = scanStockCheck02(QRCodeItem, Doctype, Logistics, 1)
                        If Flag <> 0 Then scanStockPost02(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
                    Case Else

                End Select
                Entry += 1
                i += 1
            Next

            WorkSession.MsgML("scanStock Successfully !")

            Query.EndTransaction()

            Framework.OpenEntity("QRCode Entry", String.Format("[Logistics No_] = N'{0}' and [Document Type]={1}", Logistics, Doctype))

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try

    End Sub

    'edit Quantity to ship/receipt
    Public Shared Sub QRCodeOrderOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        Dim rOrder As Hashtable = sender.CurrentRow
        'If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If rOrder Is Nothing Or rOrder.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        'Dim OrderTable As String = sender.TableName
        ''Dim LineControler As WXSource = sender.Relations(0)
        'Dim LineTable As String = "Logistics List" '  LineControler.TableName

        Dim q As Query = Query.From("Logistics List").Transaction(True)
        q.Where("Document No_").Is(rOrder("No_"))
        q.And("Logistics No_").Is(rOrder("Logistics No_"))
        Dim OrderLine As DataTable = q.ToTable
        If OrderLine.Rows.Count = 0 Then Return

        Dim ClientEntity As New ClientContext("QRCodeOrderEdit")
        Dim parameters As DataRow = ClientEntity.Parameters
        Dim DataSource As DataTable = ClientEntity.DataSource


        'Assign parameter to entity        
        Dim r As Hashtable = sender.CurrentRow
        If Not r Is Nothing Then
            parameters("TableLineName") = "Logistics List"
            parameters("TableName") = "Document Entry Header"
            parameters("DocumentNo") = r("No_")
            parameters("ExternalDocumentNo") = r("Logistics No_")
            parameters("PostingDate") = r("Posting Date")
            parameters("DocType") = r("Document Type")
            'parameters("CurrencyCode") = r("Currency Code")
            'parameters("CurrencyFactor") = r("Currency Factor")
            'parameters("MCP") = r("MCP")
            'parameters("TransportID") = r("Transport ID")
            'parameters("DriverName") = r("Driver Name")
            parameters("SourceCode") = r("Source Code")
            'parameters("ReasonCode") = r("Reason Code")
            parameters("ResponsibilityCenter") = r("Responsibility Center")

            'If OrderTable = "Sales Order Header" Or OrderTable = "Sales Return Order Header" Then
            '    parameters("ShippingAgence") = r("Shipping Agent Code")
            '    parameters("ShippingAgenceService") = r("Shipping Agent service Code")
            'Else
            '    parameters("ShippingAgence") = r("Transaction Type")
            '    parameters("ShippingAgenceService") = r("Transaction Specification")
            'End If
        End If

        For i As Integer = 0 To OrderLine.Rows.Count - 1
            Dim Myrow As DataRow
            Myrow = DataSource.NewRow
            Myrow("LineNo_") = i
            Myrow("No_") = OrderLine.Rows(i)("Item No_")
            Myrow("VariantCode") = OrderLine.Rows(i)("Variant Code")
            Myrow("ItemName") = GetName(OrderLine.Rows(i)("Item No_"), 4)
            Myrow("VariantName") = GetItemVariantName(OrderLine.Rows(i)("Item No_"), OrderLine.Rows(i)("Variant Code"))
            Myrow("UOM") = OrderLine.Rows(i)("Unit of Measure")
            Myrow("QtyPer") = OrderLine.Rows(i)("Qty_ per Unit of Measure")
            Myrow("LocationCode") = OrderLine.Rows(i)("Location Code")
            Myrow("BinCode") = ""
            Myrow("LotNo_") = OrderLine.Rows(i)("Lot No_")
            Myrow("ExpiredDate") = OrderLine.Rows(i)("Expiration Date")
            Myrow("PostedQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("OrderQuantity") = OrderLine.Rows(i)("Quantity")
            Myrow("Quantity") = OrderLine.Rows(i)("Outstanding Quantity")
            DataSource.Rows.Add(Myrow)
        Next
        DataSource.AcceptChanges()

        Dim gridView As GridView = ClientEntity.GridView
        gridView.DataSource = DataSource
        gridView.NumericColumnFrom = 5
        gridView.FixColumnCount = 12
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.ColumnReadOnly(6) = True
        gridView.ColumnReadOnly(7) = True
        gridView.ColumnReadOnly(8) = True
        gridView.ColumnReadOnly(9) = True
        gridView.ColumnReadOnly(10) = True
        gridView.ColumnReadOnly(11) = True

        gridView.ColumnWidth(2) = 150
        gridView.ColumnWidth(3) = 150
        ClientEntity.Show()

    End Sub

    Public Shared Sub QRCodeOrderEdit(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim OrderTable As String = "Document Entry Header" ' sender.GetParameter("TableName")
        Dim LineTable As String = "Logistics List" ' sender.GetParameter("TableLineName")
        Dim DocumentNo As String = sender.GetParameter("DocumentNo")
        Dim ExternalDocumentNo As String = sender.GetParameter("ExternalDocumentNo")
        Dim PostingDate As Date = sender.GetParameter("PostingDate")
        'Dim DocumentDate As Date = sender.GetParameter("DocumentDate")
        'Dim CurrencyCode As String = sender.GetParameter("CurrencyCode")
        'Dim CurrencyFactor As Decimal = sender.GetParameter("CurrencyFactor")
        'Dim ShippingAgent As String = sender.GetParameter("ShippingAgence")
        'Dim ShippingAgentService As String = sender.GetParameter("ShippingAgenceService")
        Dim SaleSourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("ResponsibilityCenter")
        'Dim TransportID As String = sender.GetParameter("TransportID")
        'Dim DriverName As String = sender.GetParameter("DriverName")
        'Dim MCP As String = sender.GetParameter("MCP")
        'Dim EntityOpen As String = ""
        Dim DocType As Integer = sender.GetParameter("DocType")

        Dim DTSource As DataTable = WorkSession.Client.DataSource

        Try
            Query.BeginTransaction()

            Dim updateOrder As Query = Query.Update("Document Entry Header")
            updateOrder.WhereAs("No_") = DocumentNo
            updateOrder.WhereAs("Logistics No_") = ExternalDocumentNo
            'updateOrder.Fields("External Document No_") = ExternalDocumentNo
            'updateOrder.Fields("Posting Date") = PostingDate
            'updateOrder.Fields("Document Date") = DocumentDate
            'updateOrder.Fields("Currency Code") = CurrencyCode
            'updateOrder.Fields("Currency Factor") = CurrencyFactor
            'updateOrder.Fields("Login ID") = Framework.UserID
            'updateOrder.Fields("MCP") = MCP
            updateOrder.Fields("Status") = 3


            updateOrder.Execute()

            For i As Integer = 0 To DTSource.Rows.Count - 1
                Dim updateLine As Query = Query.Update("Logistics List")
                updateLine.WhereAs("Document No_") = DocumentNo
                updateLine.WhereAs("Logistics No_") = ExternalDocumentNo
                updateLine.WhereAs("Lot No_") = DTSource.Rows(i)("LotNo_")
                updateLine.WhereAs("Item No_") = DTSource.Rows(i)("No_")
                updateLine.WhereAs("Variant Code") = DTSource.Rows(i)("VariantCode")
                updateLine.WhereAs("Location Code") = DTSource.Rows(i)("LocationCode")

                updateLine.Fields("Quantity") = DTSource.Rows(i)("Quantity")
                updateLine.Fields("Qty_ to Ship") = DTSource.Rows(i)("Quantity")
                updateLine.Fields("Qty_ to Receive") = DTSource.Rows(i)("Quantity")
                updateLine.Fields("Outstanding Quantity", "-") = DTSource.Rows(i)("Quantity")
                updateLine.Fields("Remaining Quantity", "-") = DTSource.Rows(i)("Quantity")
                updateLine.Fields("Status") = 3
                updateLine.Execute()
            Next
            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = WorkSession.Read("parentEntityID")
            'Now refresh parent
            Framework.RefreshSource(parentID)
            Query.EndTransaction()
            WorkSession.Client.Close()

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub QRCodeDocumentEntryTransfer2Order(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        'If r Is Nothing Or r.Count = 0 Then Return
        If r("Status") < 2 Then
            WorkSession.MsgML("Not yet validate !")
            Return
        End If

        Dim DocumentNo_ As String = r("No_")
        Dim PackingList As String = r("Packing List")
        Dim LogisticsNo As String = r("Logistics No_")

        Dim HeaderEntity As String = ""
        Dim LineEntity As String = ""
        Dim LinedataTable As String = ""
        Dim Data As DataRow

        Select Case r("Document Type")
            Case 0
                HeaderEntity = "Purchase Header"
                LineEntity = "Purchase Line"
                LinedataTable = "Purchase Order Line"
                Dim qqq As Query = Query.From("Purchase Order Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow

            Case 1
                HeaderEntity = "Sales Header"
                LineEntity = "Sales Line"
                LinedataTable = "Sales Order Line"
                Dim qqq As Query = Query.From("Sales Order Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow
            Case 4
                HeaderEntity = "Transfer Order Header"
                LineEntity = "Transfer Order Line"
                LinedataTable = "Transfer Order Line"
                Dim qqq As Query = Query.From("Transfer Order Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow
            Case 6
                HeaderEntity = "Production Order Header"
                LineEntity = "Production Order Line"
                LinedataTable = "Production Order Line"

                Dim qqq As Query = Query.From("Production Order Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow
            Case 7
                HeaderEntity = "Production Order Header"
                LineEntity = "Production Order Component"
                LinedataTable = "Production Order Component"

                Dim qqq As Query = Query.From("Production Order Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow
            Case 8
                HeaderEntity = "Mainternance Header"
                LineEntity = "Mainternance Line"
                LinedataTable = "Mainternance Line"
                Dim qqq As Query = Query.From("Mainternance Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow
            Case 9
                HeaderEntity = "Sales Credit Memo Header"
                LineEntity = "Sales Credit Memo Line"
                LinedataTable = "Sales Return Line"
                Dim qqq As Query = Query.From("Sales Return Order Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow
            Case 10
                HeaderEntity = "Purchase Credit Memo Header"
                LineEntity = "Purchase Credit Memo Line"
                LinedataTable = "Purchase Return Line"
                Dim qqq As Query = Query.From("Purchase Return Order Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow
            Case 12
                HeaderEntity = "Transfer Order Header"
                LineEntity = "Transfer Order Line"
                LinedataTable = "Transfer Order Line"
                Dim qqq As Query = Query.From("Transfer Order Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow
            Case 14
                HeaderEntity = "Transfer Order Header"
                LineEntity = "Transfer Order Line"
                LinedataTable = "Transfer Order Line"
                Dim qqq As Query = Query.From("Transfer Order Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow
            Case 16
                HeaderEntity = "Transfer Order Header"
                LineEntity = "Transfer Order Line"
                LinedataTable = "Transfer Order Line"
                Dim qqq As Query = Query.From("Transfer Order Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow
            Case Else
                HeaderEntity = "Transfer Order Header"
                LineEntity = "Transfer Order Line"
                LinedataTable = "Transfer Order Line"
                Dim qqq As Query = Query.From("Transfer Order Header").Transaction(True)
                qqq.Where("No_").Is(r("No_"))
                Data = qqq.TakeRow

        End Select


        Try
            Query.BeginTransaction()

            Select Case r("Document Type")
                Case 0, 1, 9, 10
                    Dim insertheader As Query = Query.Entity(HeaderEntity).WithValues(Data).Insert
                    insertheader.Fields("No_") = r("Logistics No_")
                    insertheader.Fields("Your Reference") = DocumentNo_
                    'insertheader.Fields("Login ID") = Framework.UserID
                    insertheader.Execute()

            End Select

            Dim Finish As Integer = 1
            Dim tableID As Integer = 0
            Dim k As Integer = 0
            Dim querrydata As Query = Query.From("Logistics Data").Transaction(True)
            querrydata.Where("Document No_").Is(DocumentNo_)
            querrydata.And("Logistics No_").Is(LogisticsNo)
            querrydata.And("Document Type").Is(r("Document Type"))
            Dim dbSource As DataTable = querrydata.ToTable

            For Each trow As DataRow In dbSource.Rows

                Select Case r("Document Type")
                    Case 0, 9
                        Dim insertLine As Query = Query.Entity(LineEntity).Insert
                        insertLine.Fields("Document No_") = r("Logistics No_")
                        insertLine.Fields("No_") = trow("Item No_")
                        'insertLine.Fields("Series No_") = trow("QRCode")
                        insertLine.Fields("Line No_") = k
                        'insertLine.Fields("Posting Date") = Now() '  PostingDate ' Now() 'rOrder("Posting Date")
                        insertLine.Fields("Status") = 2

                        insertLine.Fields("Lot No_") = trow("Lot No_")
                        insertLine.Fields("Variant Code") = trow("Variant Code")
                        insertLine.Fields("Qty_ per Unit of Measure") = trow("Qty_ per Unit of Measure")
                        insertLine.Fields("Unit of Measure") = trow("Unit of Measure Code")
                        insertLine.Fields("Expiration Date") = trow("Expiration Date")
                        'insertLine.Fields("Originally Ordered No_") = r("Document No_")
                        'insertLine.Fields("Document Type") = r("Document Type")
                        'insertLine.Fields("Source Code") = r("Source Code")
                        'insertLine.Fields("Responsibility Center") = r("Responsibility Center")
                        insertLine.Fields("Location Code") = trow("Location Code") ''rOrder("Location Code")
                        'insertLine.Fields("MFG Date") = trow("MFG Date")

                        insertLine.Fields("Quantity") = trow("Qty_ To Receive")
                        insertLine.Fields("Qty_ To Invoice") = trow("Qty_ To Receive")
                        insertLine.Fields("Qty_ To Receive") = trow("Qty_ To Receive")
                        insertLine.Fields("Quantity Received") = 0
                        insertLine.Fields("Quantity Invoiced") = 0
                        insertLine.Fields("Outstanding Quantity") = trow("Qty_ To Receive")

                        querrydata = Query.From(LinedataTable).Transaction(True)
                        querrydata.Where("Document No_").Is(DocumentNo_)
                        querrydata.And("No_").Is(trow("Item No_"))
                        querrydata.And("Variant Code").Is(trow("Variant Code"))

                        insertLine.Fields("VAT Bus_ Posting Group") = querrydata.Value("VAT Bus_ Posting Group")
                        insertLine.Fields("VAT Prod_ Posting Group") = querrydata.Value("VAT Prod_ Posting Group")
                        'insertLine.Fields("Location Code") = querrydata.Value("Location Code")
                        'insertLine.Fields("Bin Code") = querrydata.Value("Bin Code")
                        insertLine.Fields("Buy-from Vendor No_") = querrydata.Value("Buy-from Vendor No_")
                        insertLine.Fields("Pay-to Vendor No_") = querrydata.Value("Pay-to Vendor No_")

                        insertLine.Fields("Unit Cost") = querrydata.Value("Unit Cost")
                        insertLine.Fields("Unit Cost (LCY)") = querrydata.Value("Unit Cost (LCY)")
                        'insertLine.Fields("Unit Price") = querrydata.Value("Unit Price")
                        'insertLine.Fields("Unit Price (LCY)") = querrydata.Value("Unit Price (LCY)")
                        insertLine.Fields("Line Discount %") = querrydata.Value("Line Discount %")
                        insertLine.Fields("Line Discount Amount") = trow("Qty_ To Receive") * insertLine.Fields("Line Discount %") * querrydata.Value("Unit Cost (LCY)")
                        insertLine.Fields("Outstanding Amount") = trow("Qty_ To Receive") * querrydata.Value("Unit Cost")
                        insertLine.Fields("Outstanding Amount (LCY)") = trow("Qty_ To Receive") * querrydata.Value("Unit Cost (LCY)")
                        insertLine.Fields("Amount") = trow("Quantity") * querrydata.Value("Unit Cost")
                        'insertLine.Fields("Amount (LCY)") = trow("Qty_ To Receive") * querrydata.Value("Unit Cost (LCY)")
                        insertLine.Fields("VAT %") = querrydata.Value("VAT %")
                        insertLine.Fields("VAT Base Amount") = insertLine.Fields("Amount") - insertLine.Fields("Line Discount Amount")
                        insertLine.Fields("VAT Amount") = insertLine.Fields("VAT Base Amount") * insertLine.Fields("VAT %") / 100
                        insertLine.Fields("Amount Including VAT") = insertLine.Fields("Amount") + insertLine.Fields("VAT Amount")
                        insertLine.Execute()

                    Case 1, 10
                        Dim insertLine As Query = Query.Entity(LineEntity).Insert
                        insertLine.Fields("Document No_") = r("Logistics No_")
                        insertLine.Fields("No_") = trow("Item No_")
                        'insertLine.Fields("Series No_") = trow("QRCode")
                        insertLine.Fields("Line No_") = k
                        'insertLine.Fields("Posting Date") = Now() '  PostingDate ' Now() 'rOrder("Posting Date")
                        insertLine.Fields("Status") = 2
                        'insertLine.Fields("User ID") = Framework.UserID
                        insertLine.Fields("Lot No_") = trow("Lot No_")
                        insertLine.Fields("Variant Code") = trow("Variant Code")
                        insertLine.Fields("Qty_ per Unit of Measure") = trow("Qty_ per Unit of Measure")
                        insertLine.Fields("Unit of Measure") = trow("Unit of Measure Code")
                        insertLine.Fields("Expiration Date") = trow("Expiration Date")
                        'insertLine.Fields("Originally Ordered No_") = r("Document No_")
                        'insertLine.Fields("Document Type") = r("Document Type")
                        'insertLine.Fields("Source Code") = r("Source Code")
                        'insertLine.Fields("Responsibility Center") = r("Responsibility Center")
                        insertLine.Fields("Location Code") = trow("Location Code") ''rOrder("Location Code")
                        'insertLine.Fields("MFG Date") = trow("MFG Date")

                        insertLine.Fields("Qty_ To Ship") = trow("Qty_ To Ship")
                        insertLine.Fields("Quantity Shipped") = 0
                        insertLine.Fields("Quantity") = trow("Qty_ To Ship")
                        insertLine.Fields("Qty_ To Invoice") = trow("Qty_ To Ship")
                        insertLine.Fields("Quantity Invoiced") = 0
                        insertLine.Fields("Outstanding Quantity") = trow("Qty_ To Ship")

                        querrydata = Query.From(LinedataTable).Transaction(True)
                        querrydata.Where("Document No_").Is(DocumentNo_)
                        querrydata.And("No_").Is(trow("Item No_"))
                        querrydata.And("Variant Code").Is(trow("Variant Code"))

                        insertLine.Fields("VAT Bus_ Posting Group") = querrydata.Value("VAT Bus_ Posting Group")
                        insertLine.Fields("VAT Prod_ Posting Group") = querrydata.Value("VAT Prod_ Posting Group")
                        'insertLine.Fields("Location Code") = querrydata.Value("Location Code")
                        'insertLine.Fields("Bin Code") = querrydata.Value("Bin Code")
                        insertLine.Fields("Sell-to Customer No_") = querrydata.Value("Sell-to Customer No_")
                        insertLine.Fields("Bill-to Customer No_") = querrydata.Value("Bill-to Customer No_")

                        insertLine.Fields("Unit Cost") = querrydata.Value("Unit Cost")
                        insertLine.Fields("Unit Cost (LCY)") = querrydata.Value("Unit Cost (LCY)")
                        insertLine.Fields("Unit Price") = querrydata.Value("Unit Price")
                        'insertLine.Fields("Unit Price (LCY)") = querrydata.Value("Unit Price")
                        insertLine.Fields("Line Discount %") = querrydata.Value("Line Discount %")
                        insertLine.Fields("Line Discount Amount") = trow("Qty_ To Ship") * insertLine.Fields("Line Discount %") * querrydata.Value("Unit Price")
                        insertLine.Fields("Outstanding Amount") = trow("Qty_ To Ship") * querrydata.Value("Unit Price")
                        insertLine.Fields("Outstanding Amount (LCY)") = trow("Qty_ To Ship") * querrydata.Value("Unit Price")
                        insertLine.Fields("Amount") = trow("Qty_ To Ship") * querrydata.Value("Unit Price")
                        'insertLine.Fields("Amount (LCY)") = trow("Qty_ To Ship") * querrydata.Value("Unit Price")
                        insertLine.Fields("VAT %") = querrydata.Value("VAT %")
                        insertLine.Fields("VAT Base Amount") = insertLine.Fields("Amount") - insertLine.Fields("Line Discount Amount")
                        insertLine.Fields("VAT Amount") = insertLine.Fields("VAT Base Amount") * insertLine.Fields("VAT %") / 100
                        insertLine.Fields("Amount Including VAT") = insertLine.Fields("Amount") + insertLine.Fields("VAT Amount")
                        insertLine.Execute()
                            'Case 9
                            '    insertLine.Fields("Expiration Date") = trow("Expiration Date")
                            '    insertLine.Fields("Quantity") = trow("Qty_ To Ship")
                            '    insertLine.Fields("Qty_ To Invoice") = trow("Qty_ To Ship")
                            '    insertLine.Fields("Qty_ To Receive") = trow("Qty_ To Ship")
                            '    insertLine.Fields("Quantity Received") = 0
                            '    insertLine.Fields("Quantity Invoiced") = 0
                            '    insertLine.Fields("Outstanding Quantity") = trow("Qty_ To Ship")

                            '    querrydata = Query.From(LinedataTable).Transaction(True)
                            '    querrydata.Where("Document No_").Is(DocumentNo_)
                            '    querrydata.And("No_").Is(trow("Item No_"))
                            '    querrydata.And("Variant Code").Is(trow("Variant Code"))

                            '    insertLine.Fields("VAT Bus_ Posting Group") = querrydata.Value("VAT Bus_ Posting Group")
                            '    insertLine.Fields("VAT Prod_ Posting Group") = querrydata.Value("VAT Prod_ Posting Group")
                            '    'insertLine.Fields("Location Code") = querrydata.Value("Location Code")
                            '    'insertLine.Fields("Bin Code") = querrydata.Value("Bin Code")
                            '    insertLine.Fields("Buy-from Vendor No_") = querrydata.Value("Buy-from Vendor No_")
                            '    insertLine.Fields("Pay-to Vendor No_") = querrydata.Value("Pay-to Vendor No_")

                            '    insertLine.Fields("Unit Cost") = querrydata.Value("Unit Cost")
                            '    insertLine.Fields("Unit Cost (LCY)") = querrydata.Value("Unit Cost (LCY)")
                            '    'insertLine.Fields("Unit Price") = querrydata.Value("Unit Price")
                            '    'insertLine.Fields("Unit Price (LCY)") = querrydata.Value("Unit Price (LCY)")
                            '    insertLine.Fields("Line Discount %") = querrydata.Value("Line Discount %")
                            '    insertLine.Fields("Line Discount Amount") = trow("Qty_ To Ship") * insertLine.Fields("Line Discount %") * querrydata.Value("Unit Cost (LCY)")
                            '    insertLine.Fields("Outstanding Amount") = trow("Qty_ To Ship") * querrydata.Value("Unit Cost")
                            '    insertLine.Fields("Outstanding Amount (LCY)") = trow("Qty_ To Ship") * querrydata.Value("Unit Cost (LCY)")
                            '    insertLine.Fields("Amount") = trow("Qty_ To Ship") * querrydata.Value("Unit Cost")
                            '    'insertLine.Fields("Amount (LCY)") = trow("Qty_ To Ship") * querrydata.Value("Unit Cost (LCY)")
                            '    insertLine.Fields("VAT %") = querrydata.Value("VAT %")
                            '    insertLine.Fields("VAT Base Amount") = insertLine.Fields("Amount") - insertLine.Fields("Line Discount Amount")
                            '    insertLine.Fields("VAT Amount") = insertLine.Fields("VAT Base Amount") * insertLine.Fields("VAT %") / 100
                            '    insertLine.Fields("Amount Including VAT") = insertLine.Fields("Amount") + insertLine.Fields("VAT Amount")
                            '    insertLine.Execute()

                            'Case 10 'Customer return
                            '    insertLine.Fields("Expiration Date") = trow("Expiration Date")
                            '    insertLine.Fields("Qty_ To Ship") = trow("Qty_ To Receive")
                            '    insertLine.Fields("Quantity Shipped") = 0
                            '    insertLine.Fields("Quantity") = trow("Qty_ To Receive")
                            '    insertLine.Fields("Qty_ To Invoice") = trow("Qty_ To Receive")
                            '    insertLine.Fields("Quantity Invoiced") = 0
                            '    insertLine.Fields("Outstanding Quantity") = trow("Qty_ To Receive")

                            '    querrydata = Query.From(LinedataTable).Transaction(True)
                            '    querrydata.Where("Document No_").Is(DocumentNo_)
                            '    querrydata.And("No_").Is(trow("Item No_"))
                            '    querrydata.And("Variant Code").Is(trow("Variant Code"))

                            '    insertLine.Fields("VAT Bus_ Posting Group") = querrydata.Value("VAT Bus_ Posting Group")
                            '    insertLine.Fields("VAT Prod_ Posting Group") = querrydata.Value("VAT Prod_ Posting Group")
                            '    'insertLine.Fields("Location Code") = querrydata.Value("Location Code")
                            '    'insertLine.Fields("Bin Code") = querrydata.Value("Bin Code")
                            '    insertLine.Fields("Sell-to Customer No_") = querrydata.Value("Sell-to Customer No_")
                            '    insertLine.Fields("Bill-to Customer No_") = querrydata.Value("Bill-to Customer No_")

                            '    insertLine.Fields("Unit Cost") = querrydata.Value("Unit Cost")
                            '    insertLine.Fields("Unit Cost (LCY)") = querrydata.Value("Unit Cost (LCY)")
                            '    insertLine.Fields("Unit Price") = querrydata.Value("Unit Price")
                            '    insertLine.Fields("Unit Price (LCY)") = querrydata.Value("Unit Price (LCY)")
                            '    insertLine.Fields("Line Discount %") = querrydata.Value("Line Discount %")
                            '    insertLine.Fields("Line Discount Amount") = trow("Qty_ To Receive") * insertLine.Fields("Line Discount %") * querrydata.Value("Unit Price (LCY)")
                            '    insertLine.Fields("Outstanding Amount") = trow("Qty_ To Receive") * querrydata.Value("Unit Price")
                            '    insertLine.Fields("Outstanding Amount (LCY)") = trow("Qty_ To Receive") * querrydata.Value("Unit Price (LCY)")
                            '    insertLine.Fields("Amount") = trow("Qty_ To Receive") * querrydata.Value("Unit Price")
                            '    'insertLine.Fields("Amount (LCY)") = trow("Quantity") * querrydata.Value("Unit Price (LCY)")
                            '    insertLine.Fields("VAT %") = querrydata.Value("VAT %")
                            '    insertLine.Fields("VAT Base Amount") = insertLine.Fields("Amount") - insertLine.Fields("Line Discount Amount")
                            '    insertLine.Fields("VAT Amount") = insertLine.Fields("VAT Base Amount") * insertLine.Fields("VAT %") / 100
                            '    insertLine.Fields("Amount Including VAT") = insertLine.Fields("Amount") + insertLine.Fields("VAT Amount")

                            '    insertLine.Execute()

                    Case 4, 14, 12, 16, 18


                    Case 5, 15, 7, 11, 19

                    Case 6

                    Case 7


                End Select


                k += 1
            Next

            Dim update As Query = Query.Update("Document Entry Header")
            update.Where("No_").Is(r("No_"))
            update.And("Logistics No_").Is(r("Logistics No_"))
            update.And("Document Type").Is(r("Document Type"))
            update.Fields("Status") = 3
            update.Execute()

            Query.EndTransaction()

            'WorkSession.MsgML("Successful!")
            'sender.RefreshSource()

            Framework.OpenEntity(HeaderEntity, String.Format("No_=N'{0}'", r("Logistics No_")))

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub

    'Public Sub LogisticsPickWOLotProcess(ByVal sender As WXSource, ByVal e As WXArgs)
    '    WorkSession.Save("parentEntityID", sender.ClientID)

    '    Dim rr As Hashtable = sender.CurrentRow


    '    Dim SaleSourceCode As String = rr("Source Code")
    '    Dim ResponsibilityCenter As String = rr("Responsibility Center")
    '    Dim Document As String = rr("No_")
    '    Dim LogisticsNo As String = rr("Logistics No_")
    '    Dim DocType As Integer = rr("Document Type")

    '    Dim ff As Query = Query.From("Logistics List").Transaction(True)
    '    ff.Where("Document No_").Is(Document)
    '    ff.And("Logistics No_").Is(LogisticsNo)
    '    ff.And("Document Type").Is(DocType)
    '    Dim DTSource As DataTable = ff.ToTable

    '    Dim ClientEntity As New ClientContext("TRDOrderPickQRCode")
    '    Dim parameters As DataRow = ClientEntity.Parameters
    '    Dim DataSource As DataTable = ClientEntity.DataSource
    '    If Not rr Is Nothing Then
    '        'parameters("TableLineName") = LineTable
    '        'parameters("TableName") = OrderTable
    '        parameters("DocumentNo") = rr("No_")
    '        parameters("DocType") = rr("Document Type")
    '        parameters("ExternalDocumentNo") = rr("External Document No_")
    '        parameters("PostingDate") = rr("Posting Date")
    '        'parameters("DocumentDate") = r("Document Date")
    '        'parameters("CurrencyCode") = r("Currency Code")
    '        'parameters("CurrencyFactor") = r("Currency Factor")
    '        'parameters("MCP") = r("MCP")
    '        'parameters("TransportID") = r("Transport ID")
    '        'parameters("DriverName") = r("Driver Name")
    '        parameters("SourceCode") = rr("Source Code")
    '        'parameters("ReasonCode") = rr("Reason Code")
    '        parameters("ResponsibilityCenter") = rr("Responsibility Center")

    '        'If OrderTable = "Sales Order Header" Or OrderTable = "Sales Return Order Header" Then
    '        '    parameters("ShippingAgence") = r("Shipping Agent Code")
    '        '    parameters("ShippingAgenceService") = r("Shipping Agent service Code")
    '        'Else
    '        '    parameters("ShippingAgence") = r("Transaction Type")
    '        '    parameters("ShippingAgenceService") = r("Transaction Specification")
    '        'End If
    '    End If

    '    Dim Myrow As DataRow
    '    Dim q As Query
    '    Dim TransportQty As Decimal
    '    Dim RoundQty As Decimal = 0
    '    Dim OddQty As Decimal = 0
    '    'Assign parameter to entity        
    '    For i As Integer = 0 To DTSource.Rows.Count - 1

    '        If DTSource.Rows(i)("Lot No_") = "" Then
    '            q = Query.From("Item Unit Of Measure").Transaction(True)
    '            q.WhereAs("Item No_") = DTSource.Rows(i)("No_")
    '            q.WhereAs("Type") = 4 'Qui cách nguyên
    '            If Not q.ToTable() Is Nothing And q.ToTable().Rows.Count > 0 Then
    '                TransportQty = ISDBNULL(q.Value("Qty_ per Unit of Measure"), 1)
    '            End If
    '            'chia phan nguyen
    '            If TransportQty > 1 Then
    '                RoundQty = Decimal.Floor(DTSource.Rows(i)("Quantity") / TransportQty) * TransportQty

    '                Myrow = DataSource.NewRow
    '                Myrow("LineNo_") = DTSource.Rows(i)("Line No_") + i
    '                Myrow("No_") = DTSource.Rows(i)("No_")
    '                Myrow("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
    '                Myrow("LocationCode") = DTSource.Rows(i)("Location Code")
    '                Myrow("UOM") = DTSource.Rows(i)("UOM")
    '                Myrow("QtyPer") = DTSource.Rows(i)("Qtyper")
    '                Myrow("OrderQuantity") = DTSource.Rows(i)("Quantity")
    '                Myrow("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")

    '                'Get FEFO
    '                Dim qq As Query = Query.StoredProc("dbo.SelectLotNumber4PickOrder")
    '                qq.Parameters("@SourceCode") = SaleSourceCode
    '                qq.Parameters("@Respon") = ResponsibilityCenter
    '                qq.Parameters("@LocationCode") = DTSource.Rows(i)("LocationCode")
    '                qq.Parameters("@ItemNo") = DTSource.Rows(i)("No_")

    '                Dim LotDS As DataTable = qq.ToTable
    '                Dim LotQty As Decimal = 0
    '                Dim LotNo As String = ""
    '                Dim LotqtyPer As Decimal = 0

    '                If LotDS.Rows.Count > 0 Then
    '                    LotQty = LotDS.Rows(0)("Quantity")
    '                    LotqtyPer = LotDS.Rows(0)("Qty_ per Unit of Measure")
    '                    Dim LotQuantity As Decimal = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qtyper") = 0, 1, DTSource.Rows(i)("Qtyper"))

    '                    If LotQuantity >= RoundQty Then
    '                        Myrow("LotNo") = LotDS.Rows(0)("Lot No_")
    '                        'Myrow("BinCode") = GetBinQuantity(DTSource.Rows(i)("LocationCode"), DTSource.Rows(i)("No_"), LotDS.Rows(0)("Lot No_")) 'Get Bin Code by Bin Ranking
    '                        Myrow("QtyToShip") = RoundQty
    '                        DataSource.Rows.Add(Myrow)
    '                    Else 'Phai che order line ra
    '                        Dim LotQuantityRemain As Decimal = RoundQty ' - LotQuantity

    '                        For j As Integer = 0 To LotDS.Rows.Count - 1
    '                            Dim rs As DataRow = DataSource.NewRow
    '                            rs("LineNo_") = DTSource.Rows(i)("LineNo_") + i
    '                            rs("No_") = DTSource.Rows(i)("No_")
    '                            rs("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
    '                            rs("LocationCode") = DTSource.Rows(i)("LocationCode")
    '                            rs("UOM") = DTSource.Rows(i)("UOM")
    '                            rs("QtyPer") = DTSource.Rows(i)("Qtyper")
    '                            rs("OrderQuantity") = RoundQty
    '                            rs("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
    '                            If LotQuantityRemain <= 0 Then Continue For

    '                            LotQty = RoundQty
    '                            LotqtyPer = LotDS.Rows(j)("Qty_ per Unit of Measure")
    '                            LotQuantity = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qtyper") = 0, 1, DTSource.Rows(i)("Qtyper"))
    '                            If LotQuantity >= LotQuantityRemain Then
    '                                rs("LineNo_") = 100 + j
    '                                rs("LotNo_") = LotDS.Rows(j)("Lot No_")
    '                                'rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"))
    '                                rs("QtyToShip") = LotQuantityRemain
    '                            Else
    '                                rs("LineNo_") = 100 + j
    '                                rs("LotNo_") = LotDS.Rows(j)("Lot No_")
    '                                'rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"))
    '                                rs("QtyToShip") = LotQuantity
    '                                LotQuantityRemain -= LotQuantity 'LotQty * LotqtyPer  / Dataset.Value("Qty_ per Unit of Measure")
    '                            End If
    '                            DataSource.Rows.Add(rs)
    '                        Next
    '                    End If

    '                Else ' Ton lot khong du
    '                    WorkSession.MsgML("Item Lot No_ is not enough to supply !")
    '                    Continue For
    '                End If
    '            End If
    '            'end cua lo chan lo le
    '        End If

    '        'tinh lo le
    '        OddQty = DTSource.Rows(i)("Quantity") - RoundQty
    '        Dim strOddQuantity As String

    '        strOddQuantity = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock) "
    '        strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
    '        strOddQuantity &= " and Bin.[Bin Ranking] =0"
    '        strOddQuantity &= " and Bin.[Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
    '        strOddQuantity &= "and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
    '        strOddQuantity &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code]  "
    '        strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

    '        'strOddQuantity = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)  "
    '        ''strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
    '        ''strOddQuantity &= " and Bin.[Bin Ranking] =0"
    '        'strOddQuantity &= " where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
    '        'strOddQuantity &= "and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
    '        'strOddQuantity &= "  group by [Lot No_],[Location Code]  "
    '        'strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

    '        Dim r As DataRow

    '        If Not Query.Sql(strOddQuantity).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows.Count > 0 Then
    '            r = Datasource.NewRow
    '            r("LineNo_") = DTSource.Rows(i)("LineNo_") + i
    '            r("No_") = DTSource.Rows(i)("No_")
    '            r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
    '            r("LocationCode") = DTSource.Rows(i)("LocationCode")
    '            r("UOM") = DTSource.Rows(i)("UOM")
    '            r("QtyPer") = DTSource.Rows(i)("Qtyper")
    '            r("OrderQuantity") = DTSource.Rows(i)("Quantity")
    '            r("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
    '            r("LineNo_") = 100 + i
    '            r("LotNo_") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Lot No_") 'LotDS.Rows(j)("Lot No_")
    '            'r("BinCode") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Name")
    '            r("QtyToShip") = OddQty
    '            Datasource.Rows.Add(r)
    '        Else
    '            Dim strOddQBin As String
    '            strOddQBin = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock)"
    '            strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
    '            strOddQBin &= " and Bin.[Bin Ranking] <> 0"
    '            strOddQBin &= "  and Bin.[Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
    '            strOddQBin &= "  and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
    '            strOddQBin &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code],[Expiration Date] "
    '            strOddQBin &= " order by [Expiration Date] "

    '            'strOddQBin = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)"
    '            ''strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
    '            ''strOddQBin &= " and Bin.[Bin Ranking] <> 0"
    '            'strOddQBin &= "  where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
    '            'strOddQBin &= "  and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
    '            'strOddQBin &= "  group by [Lot No_],[Location Code],[Expiration Date] "
    '            'strOddQBin &= " order by [Expiration Date] "

    '            If Not Query.Sql(strOddQBin).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQBin).Transaction(True).ToTable().Rows.Count > 0 Then
    '                Dim dv As DataView = Query.Sql(strOddQBin).Transaction(True).ToTable().DefaultView
    '                dv.RowFilter = " Quantity > 0"
    '                Dim rss As DataRow = dv.ToTable().Rows(0)

    '                r = Datasource.NewRow
    '                r("LineNo_") = DTSource.Rows(i)("LineNo_") + i
    '                r("No_") = DTSource.Rows(i)("No_")
    '                r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
    '                r("LocationCode") = DTSource.Rows(i)("LocationCode")
    '                r("UOM") = DTSource.Rows(i)("UOM")
    '                r("QtyPer") = DTSource.Rows(i)("Qtyper")
    '                r("OrderQuantity") = DTSource.Rows(i)("Quantity")
    '                r("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
    '                r("LineNo_") = 100 + i
    '                r("LotNo_") = rss("Lot No_") 'LotDS.Rows(j)("Lot No_")
    '                'r("BinCode") = rss("Name")
    '                r("QtyToShip") = OddQty
    '                Datasource.Rows.Add(r)
    '            End If
    '        End If
    '    Next

    '    If Not Datasource Is Nothing And Datasource.Rows.Count > 0 Then
    '        Datasource.AcceptChanges()
    '        WorkSession.Client.GridView.DataSource = Datasource
    '        WorkSession.Client.Refresh()
    '    End If

    'End Sub

    'Public Sub LogisticsPickTOLotProcess(ByVal sender As WXSource, ByVal e As WXArgs)
    '    WorkSession.Save("parentEntityID", sender.ClientID)

    '    Dim rr As Hashtable = sender.CurrentRow

    '    Dim SaleSourceCode As String = rr("Source Code")
    '    Dim ResponsibilityCenter As String = rr("Responsibility Center")
    '    Dim Document As String = rr("No_")
    '    Dim LogisticsNo As String = rr("Logistics No_")
    '    Dim DocType As Integer = rr("Document Type")

    '    Dim ff As Query = Query.From("Logistics List").Transaction(True)
    '    ff.Where("Document No_").Is(Document)
    '    ff.And("Logistics No_").Is(LogisticsNo)
    '    ff.And("Document Type").Is(DocType)
    '    Dim DTSource As DataTable = ff.ToTable

    '    Dim ClientEntity As New ClientContext("TRDOrderPickQRCode")
    '    Dim parameters As DataRow = ClientEntity.Parameters
    '    Dim DataSource As DataTable = ClientEntity.DataSource
    '    If Not rr Is Nothing Then
    '        'parameters("TableLineName") = LineTable
    '        'parameters("TableName") = OrderTable
    '        parameters("DocumentNo") = rr("No_")
    '        parameters("DocType") = rr("Document Type")
    '        parameters("ExternalDocumentNo") = rr("External Document No_")
    '        parameters("PostingDate") = rr("Posting Date")
    '        'parameters("DocumentDate") = r("Document Date")
    '        'parameters("CurrencyCode") = r("Currency Code")
    '        'parameters("CurrencyFactor") = r("Currency Factor")
    '        'parameters("MCP") = r("MCP")
    '        'parameters("TransportID") = r("Transport ID")
    '        'parameters("DriverName") = r("Driver Name")
    '        parameters("SourceCode") = rr("Source Code")
    '        'parameters("ReasonCode") = r("Reason Code")
    '        parameters("ResponsibilityCenter") = rr("Responsibility Center")

    '        'If OrderTable = "Sales Order Header" Or OrderTable = "Sales Return Order Header" Then
    '        '    parameters("ShippingAgence") = r("Shipping Agent Code")
    '        '    parameters("ShippingAgenceService") = r("Shipping Agent service Code")
    '        'Else
    '        '    parameters("ShippingAgence") = r("Transaction Type")
    '        '    parameters("ShippingAgenceService") = r("Transaction Specification")
    '        'End If
    '    End If


    '    Dim Myrow As DataRow
    '    Dim q As Query
    '    Dim TransportQty As Decimal
    '    Dim RoundQty As Decimal = 0
    '    Dim OddQty As Decimal = 0
    '    'Assign parameter to entity        
    '    For i As Integer = 0 To DTSource.Rows.Count - 1

    '        If DTSource.Rows(i)("LotNo_") = "" Then
    '            q = Query.From("Item Unit Of Measure").Transaction(True)
    '            q.WhereAs("Item No_") = DTSource.Rows(i)("No_")
    '            q.WhereAs("Type") = 4 'Qui cách nguyên
    '            If Not q.ToTable() Is Nothing And q.ToTable().Rows.Count > 0 Then
    '                TransportQty = ISDBNULL(q.Value("Qty_ per Unit of Measure"), 1)
    '            End If
    '            'chia phan nguyen
    '            If TransportQty > 1 Then
    '                RoundQty = Decimal.Floor(DTSource.Rows(i)("Quantity") / TransportQty) * TransportQty

    '                Myrow = Datasource.NewRow
    '                Myrow("LineNo_") = DTSource.Rows(i)("LineNo_") + i
    '                Myrow("No_") = DTSource.Rows(i)("No_")
    '                Myrow("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
    '                Myrow("LocationCode") = DTSource.Rows(i)("LocationCode")
    '                Myrow("UOM") = DTSource.Rows(i)("UOM")
    '                Myrow("QtyPer") = DTSource.Rows(i)("Qtyper")
    '                Myrow("OrderQuantity") = DTSource.Rows(i)("Quantity")
    '                Myrow("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")

    '                'Get FEFO
    '                Dim qq As Query = Query.StoredProc("dbo.SelectLotNumber4PickOrder")
    '                qq.Parameters("@SourceCode") = SaleSourceCode
    '                qq.Parameters("@Respon") = ResponsibilityCenter
    '                qq.Parameters("@LocationCode") = DTSource.Rows(i)("LocationCode")
    '                qq.Parameters("@ItemNo") = DTSource.Rows(i)("No_")

    '                Dim LotDS As DataTable = qq.ToTable
    '                Dim LotQty As Decimal = 0
    '                Dim LotNo As String = ""
    '                Dim LotqtyPer As Decimal = 0

    '                If LotDS.Rows.Count > 0 Then
    '                    LotQty = LotDS.Rows(0)("Quantity")
    '                    LotqtyPer = LotDS.Rows(0)("Qty_ per Unit of Measure")
    '                    Dim LotQuantity As Decimal = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qtyper") = 0, 1, DTSource.Rows(i)("Qtyper"))

    '                    If LotQuantity >= RoundQty Then
    '                        Myrow("LotNo") = LotDS.Rows(0)("Lot No_")
    '                        'Myrow("BinCode") = GetBinQuantity(DTSource.Rows(i)("LocationCode"), DTSource.Rows(i)("No_"), LotDS.Rows(0)("Lot No_")) 'Get Bin Code by Bin Ranking
    '                        Myrow("QtyToShip") = RoundQty
    '                        Datasource.Rows.Add(Myrow)
    '                    Else 'Phai che order line ra
    '                        Dim LotQuantityRemain As Decimal = RoundQty ' - LotQuantity

    '                        For j As Integer = 0 To LotDS.Rows.Count - 1
    '                            Dim rs As DataRow = Datasource.NewRow
    '                            rs("LineNo_") = DTSource.Rows(i)("LineNo_") + i
    '                            rs("No_") = DTSource.Rows(i)("No_")
    '                            rs("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
    '                            rs("LocationCode") = DTSource.Rows(i)("LocationCode")
    '                            rs("UOM") = DTSource.Rows(i)("UOM")
    '                            rs("QtyPer") = DTSource.Rows(i)("Qtyper")
    '                            rs("OrderQuantity") = RoundQty
    '                            rs("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
    '                            If LotQuantityRemain <= 0 Then Continue For

    '                            LotQty = RoundQty
    '                            LotqtyPer = LotDS.Rows(j)("Qty_ per Unit of Measure")
    '                            LotQuantity = LotQty * LotqtyPer / IIf(DTSource.Rows(i)("Qtyper") = 0, 1, DTSource.Rows(i)("Qtyper"))
    '                            If LotQuantity >= LotQuantityRemain Then
    '                                rs("LineNo_") = 100 + j
    '                                rs("LotNo_") = LotDS.Rows(j)("Lot No_")
    '                                'rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"))
    '                                rs("QtyToShip") = LotQuantityRemain
    '                            Else
    '                                rs("LineNo_") = 100 + j
    '                                rs("LotNo_") = LotDS.Rows(j)("Lot No_")
    '                                'rs("BinCode") = GetBinQuantity(LotDS.Rows(j)("Location Code"), DTSource.Rows(i)("No_"), LotDS.Rows(j)("Lot No_"))
    '                                rs("QtyToShip") = LotQuantity
    '                                LotQuantityRemain -= LotQuantity 'LotQty * LotqtyPer  / Dataset.Value("Qty_ per Unit of Measure")
    '                            End If
    '                            Datasource.Rows.Add(rs)
    '                        Next
    '                    End If

    '                Else ' Ton lot khong du
    '                    WorkSession.MsgML("Item Lot No_ is not enough to supply !")
    '                    Continue For
    '                End If
    '            End If
    '            'end cua lo chan lo le
    '        End If

    '        'tinh lo le
    '        OddQty = DTSource.Rows(i)("Quantity") - RoundQty
    '        Dim strOddQuantity As String

    '        strOddQuantity = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock) "
    '        strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
    '        strOddQuantity &= " and Bin.[Bin Ranking] =0"
    '        strOddQuantity &= " and Bin.[Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
    '        strOddQuantity &= "and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
    '        strOddQuantity &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code]  "
    '        strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

    '        'strOddQuantity = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)  "
    '        ''strOddQuantity &= " where  [Value Entry].[Bin Code] = Bin.Code "
    '        ''strOddQuantity &= " and Bin.[Bin Ranking] =0"
    '        'strOddQuantity &= " where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
    '        'strOddQuantity &= "and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
    '        'strOddQuantity &= "  group by [Lot No_],[Location Code]  "
    '        'strOddQuantity &= " having sum([Valued Quantity])>" & Math.Round(OddQty, 0)

    '        Dim r As DataRow

    '        If Not Query.Sql(strOddQuantity).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows.Count > 0 Then
    '            r = Datasource.NewRow
    '            r("LineNo_") = DTSource.Rows(i)("LineNo_") + i
    '            r("No_") = DTSource.Rows(i)("No_")
    '            r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
    '            r("LocationCode") = DTSource.Rows(i)("LocationCode")
    '            r("UOM") = DTSource.Rows(i)("UOM")
    '            r("QtyPer") = DTSource.Rows(i)("Qtyper")
    '            r("OrderQuantity") = DTSource.Rows(i)("Quantity")
    '            r("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
    '            r("LineNo_") = 100 + i
    '            r("LotNo_") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Lot No_") 'LotDS.Rows(j)("Lot No_")
    '            'r("BinCode") = Query.Sql(strOddQuantity).Transaction(True).ToTable().Rows(0)("Name")
    '            r("QtyToShip") = OddQty
    '            Datasource.Rows.Add(r)
    '        Else
    '            Dim strOddQBin As String
    '            strOddQBin = "select Bin.Name,sum([Valued Quantity]) as Quantity,[Value Entry].[Lot No_],Bin.[Location Code]  from [Value Entry] with(Nolock) , Bin with(Nolock)"
    '            strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
    '            strOddQBin &= " and Bin.[Bin Ranking] <> 0"
    '            strOddQBin &= "  and Bin.[Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
    '            strOddQBin &= "  and [Value Entry].[Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
    '            strOddQBin &= "  group by Bin.Name,[Value Entry].[Lot No_],Bin.[Location Code],[Expiration Date] "
    '            strOddQBin &= " order by [Expiration Date] "

    '            'strOddQBin = "select sum([Valued Quantity]) as Quantity,[Lot No_],[Location Code]  from [Value Entry] with(Nolock)"
    '            ''strOddQBin &= " where  [Value Entry].[Bin Code] = Bin.Code "
    '            ''strOddQBin &= " and Bin.[Bin Ranking] <> 0"
    '            'strOddQBin &= "  where [Location Code] ='" & DTSource.Rows(i)("LocationCode") & "'"
    '            'strOddQBin &= "  and [Item No_]  ='" & DTSource.Rows(i)("No_") & "'"
    '            'strOddQBin &= "  group by [Lot No_],[Location Code],[Expiration Date] "
    '            'strOddQBin &= " order by [Expiration Date] "

    '            If Not Query.Sql(strOddQBin).Transaction(True).ToTable() Is Nothing And Query.Sql(strOddQBin).Transaction(True).ToTable().Rows.Count > 0 Then
    '                Dim dv As DataView = Query.Sql(strOddQBin).Transaction(True).ToTable().DefaultView
    '                dv.RowFilter = " Quantity > 0"
    '                Dim rss As DataRow = dv.ToTable().Rows(0)

    '                r = Datasource.NewRow
    '                r("LineNo_") = DTSource.Rows(i)("LineNo_") + i
    '                r("No_") = DTSource.Rows(i)("No_")
    '                r("ItemName") = TradingSys.GetName(DTSource.Rows(i)("No_"), 4)
    '                r("LocationCode") = DTSource.Rows(i)("LocationCode")
    '                r("UOM") = DTSource.Rows(i)("UOM")
    '                r("QtyPer") = DTSource.Rows(i)("Qtyper")
    '                r("OrderQuantity") = DTSource.Rows(i)("Quantity")
    '                r("PostedQuantity") = DTSource.Rows(i)("PostedQuantity")
    '                r("LineNo_") = 100 + i
    '                r("LotNo_") = rss("Lot No_") 'LotDS.Rows(j)("Lot No_")
    '                'r("BinCode") = rss("Name")
    '                r("QtyToShip") = OddQty
    '                Datasource.Rows.Add(r)
    '            End If
    '        End If
    '    Next

    '    If Not Datasource Is Nothing And Datasource.Rows.Count > 0 Then
    '        Datasource.AcceptChanges()
    '        WorkSession.Client.GridView.DataSource = Datasource
    '        WorkSession.Client.Refresh()
    '    End If

    'End Sub

    Public Sub scanBinTransfer(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("scan Bin transfer function!")

        Dim Data = ISDBNULL(sender.Request("__DATA__"), "")
        'WorkSession.MsgML("scanStock function! data {0}", Data)
        If Data = "" Then Return

        Dim js As New JavaScriptSerializer()
        Dim items = js.Deserialize(Of ArrayList)(Data)
        'WorkSession.MsgML("scanStock function! data Item {0}", items.Count)
        If items.Count <= 0 Then Return

        Dim Doctype As String = ""
        Dim BinQRCode As String = ""
        Dim NewBinQRCode As String = ""
        Dim Logistics As String = ""
        Dim Qty As String = ""
        Dim UOM As String = ""
        Dim QRCodeItem As String = ""
        Dim Flag As Integer = 0
        Dim i As Integer = 0
        'Dim Loopqty As Integer = 0

        'Dim productDict = New Dictionary(Of String, Integer)
        'For Each item As Object In items
        '    If Not productDict.ContainsKey(item("Qr")) Then
        '        productDict.Add(item("Qr"), item("Qty"))
        '    Else
        '        productDict(item("Qr")) += item("Qty")
        '        Loopqty += 1
        '    End If
        'Next

        'If Loopqty > 0 Then

        'End If

        Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        Dim Entry As Integer = qqq.Value("EntryNo")

        For Each item As Object In items
            QRCodeItem = item("Qr")
            'WorkSession.MsgML("Mã QR SP {0}", QRCodeItem)
            Qty = item("Qty")
            'WorkSession.MsgML("Số lượng {0}", Qty)
            BinQRCode = item("Bin")
            NewBinQRCode = item("Newbin")
            'WorkSession.MsgML("Mã QR ngăn kệ {0}", BinQRCode)
            Doctype = item("docType")
            'WorkSession.MsgML("Loại nghiệp vụ {0}", Doctype)
            Logistics = item("logistics")
            'WorkSession.MsgML("Mã giao nhận (Logistics No_ {0}", Logistics)

            'Select Case CInt(Doctype)
            '    Case 0, 1, 4, 5, 6, 7
            Flag = scanStockCheck(QRCodeItem, Doctype, Logistics, 1)
            If Flag <> 0 Then scanStockPost(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry, NewBinQRCode)
            '    Case Else

            'End Select
            Entry += 1
            i += 1
        Next
        WorkSession.MsgML("scanStock successfull !")

    End Sub

    Public Shared Function GetBinCodeFromQRCodeEntry(ByVal QRCode As String, ByVal doctype As Integer, ByRef Zone As String) As String
        If QRCode = "" Then Return ""
        Dim q As Query = Query.From("QRCode Entry").Transaction(True)
        q.Where("QRCode").Is(QRCode)
        q.And("Bin Status").Is(0)
        Select Case doctype
            Case 1
                q.And("Document Type").In("0,6,14")
            Case Else
                q.And("Document Type").In("0,6,14")
        End Select
        Zone = q.Value("Zone")
        Return q.Value("Bin")
    End Function

    Public Shared Function GetBinCodeFromInTransitLocation(ByVal SourceCode As String, ByVal Respon As String, Optional ByRef Zone As String = "", Optional ByRef InTransit As String = "") As String
        If SourceCode = "" And Respon = "" Then Return ""
        Dim q As Query = Query.From("Location").Transaction(True)
        q.Where("Use As In-Transit").Is(1)
        q.And("Source Code").Is(SourceCode)
        If Respon <> "" Then q.And("Responsibility Center").Is(Respon)
        Zone = q.Value("Area")
        InTransit = q.Value("Code")
        Return q.Value("Location Code")

    End Function

    Public Sub QRCodeCopyFromDocumentEntry(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        'If r Is Nothing Then Return
        If r("No_") = "" Or r("Logistics No_") = "" Then
            WorkSession.MsgML("Please select Logistics No_ first !")
            Return
        End If
        Try
            Query.BeginTransaction()

            Dim table As New DataTable
            Dim sql As Query = Query.From("Logistics List").Transaction(True)
            sql.WhereAs("Logistics No_") = r("Logistics No_")
            sql.WhereAs("Document No_") = r("No_")
            sql.WhereAs("Document Type") = r("Document Type")

            Dim update As Query = Query.Update("QRCode Header")
            update.Where("RowID").Is(r("RowID"))
            'Select Case r("Document Type")
            '    Case 4, 14, 16, 12, 18
            'update.Fields("Location Code") = sql.Value("Location Code")
            'update.Fields("Source Code") = sql.Value("Source Code")
            'update.Fields("Responsibility Center") = sql.Value("Responsibility Center")
            update.Fields("To Location Code") = sql.Value("To Location Code")
            update.Fields("To Source Code") = sql.Value("To Source Code")
            update.Fields("To Responsibility Center") = sql.Value("To Responsibility Center")
            update.Fields("From Source Code") = sql.Value("From Source Code")
            update.Fields("From Responsibility Center") = sql.Value("From Responsibility Center")
            update.Fields("From Location Code") = sql.Value("From Location Code")

            '    Case 5, 15, 17
            '        update.Fields("From Source Code") = sql.Value("Source Code")
            '        update.Fields("From Responsibility Center") = sql.Value("Responsibility Center")
            '        update.Fields("From Location Code") = sql.Value("Location Code")
            '        update.Fields("To Location Code") = sql.Value("Location Code")
            '        update.Fields("To Source Code") = sql.Value("Source Code")
            '        update.Fields("To Responsibility Center") = sql.Value("Responsibility Center")
            '        update.Fields("From Source Code") = sql.Value("Source Code")
            '        update.Fields("From Responsibility Center") = sql.Value("Responsibility Center")
            '        update.Fields("From Location Code") = sql.Value("Location Code")

            '    Case Else
            '        update.Fields("To Location Code") = sql.Value("Location Code")
            '        update.Fields("To Source Code") = sql.Value("Source Code")
            '        update.Fields("To Responsibility Center") = sql.Value("Responsibility Center")
            '        update.Fields("From Source Code") = sql.Value("Source Code")
            '        update.Fields("From Responsibility Center") = sql.Value("Responsibility Center")
            '        update.Fields("From Location Code") = sql.Value("Location Code")
            'End Select

            update.Fields("Picking No_") = sql.Value("Picking No_")
            update.Fields("Packing List") = sql.Value("Packing List")
            update.Fields("External Document No_") = sql.Value("External Document No_")
            'update.Fields("Document Type") = sql.Value("Document Type")
            update.Fields("Originally Ordered No_") = sql.Value("Your Reference")
            update.Fields("Your Reference") = sql.Value("Your Reference")
            'update.Fields("Source Type") = sql.Value("Document Type")
            'r("Source No_") = sql.Value("")
            update.Fields("Bin Code") = sql.Value("Bin Code")

            Dim qr As Query = Query.From("Bin").Transaction(True)
            qr.Where("Code").Is(r("Bin Code"))
            update.Fields("Zone Code") = qr.Value("Zone")

            update.Fields("Location Code") = sql.Value("Location Code")
            update.Fields("Source Code") = sql.Value("Source Code")
            update.Fields("Responsibility Center") = sql.Value("Responsibility Center")
            update.Fields("Login ID") = Framework.UserID
            update.Fields("Status") = 1
            update.Execute()

            Dim q As Query = Query.From("Document Entry").Transaction(True)
            q.Where("Logistics No_").Is(r("Logistics No_"))
            q.And("Document Type").Is(r("Document Type"))
            If r("No_") <> "" Then q.And("Document No_").Is(r("No_"))

            table = q.ToTable

            For Each RS As DataRow In table.Rows
                Dim BinCode As String = ISDBNULL(RS("Bin"), "")
                qr = Query.From("Bin").Transaction(True)
                qr.Where("Code").Is(BinCode)
                Dim Zone As String = qr.Value("Zone")
                Dim InTransit As String = ""

                'Dim ItemNo_ As String = ""
                Dim InsertLine As Query = Query.Entity("QRCode Line").Insert
                'UpdateLine.WhereAs("QRCode") = r("QRCode")

                'r("QRCode") = q.Value("QRCode")
                'ItemNo_ = q.Value("Item No_")
                'If ItemNo_ = "" Then Return

                InsertLine.Fields("Type") = 4
                InsertLine.Fields("No_") = q.Value("Item No_")

                InsertLine.Fields("Document Type") = r("Document Type")
                InsertLine.Fields("Document No_") = RS("Document No_")
                InsertLine.Fields("Logistics No_") = RS("Logistics No_")
                InsertLine.Fields("Packing List") = RS("Packing List")
                InsertLine.Fields("Picking No_") = RS("Picking No_")

                InsertLine.Fields("Location Code") = RS("Location Code")
                InsertLine.Fields("Bin Code") = BinCode
                InsertLine.Fields("Zone Code") = Zone
                InsertLine.Fields("QRCode") = RS("QRCode")

                InsertLine.Fields("Lot No_") = q.Value("Lot No_")
                InsertLine.Fields("Expiration Date") = q.Value("Expiration Date")
                InsertLine.Fields("Real Lot No_") = q.Value("Lot No_")
                InsertLine.Fields("Real Expiration Date") = q.Value("Expiration Date")

                InsertLine.Fields("Quantity") = RS("quantity")
                InsertLine.Fields("Qty_ to Receive") = RS("quantity")
                InsertLine.Fields("Quantity Received") = 0 ' MasterRow("")
                InsertLine.Fields("Outstanding Quantity") = RS("quantity")

                InsertLine.Fields("Unit Of Measure") = ISDBNULL(RS("Unit Of Measure"), "")
                InsertLine.Fields("Qty_ per Unit of Measure") = RS("Qty_ per Unit of Measure")
                ',[Document Date]
                ',[Posting Date]
                ',[Date Received]
                ',[Shipment Date]
                'r("Production Date") = MasterRow("")
                InsertLine.Fields("Source Code") = sql.Value("Source Code")
                InsertLine.Fields("Responsibility Center") = sql.Value("Responsibility Center")
                'InsertLine.Fields("Source Type") = q.Value("Source Type")
                'InsertLine.Fields("Source No_") = q.Value("Source No_")
                Select Case r("Document Type")
                    Case 4, 14, 16, 12, 18
                        InsertLine.Fields("To Zone") = Zone
                        InsertLine.Fields("To Bin Code") = BinCode
                        'InsertLine.Fields("To Quantity") = 1
                        'InsertLine.Fields("To Unit of Measure") = ISDBNULL(RS("Unit Of Measure"), "")
                        'InsertLine.Fields("To Qty_ per Unit of Measure") = RS("Qty_ per Unit of Measure")
                        InsertLine.Fields("To Source Code") = q.Value("Source Code")
                        InsertLine.Fields("To Responsibility Center") = q.Value("Responsibility Center")
                        InsertLine.Fields("To Location Code") = q.Value("Location Code")

                        InsertLine.Fields("From Source Code") = ""
                        InsertLine.Fields("From Responsibility Center") = ""
                        InsertLine.Fields("From Location Code") = "" ' masterRow("Location Code")
                        InsertLine.Fields("From Bin Code") = GetBinCodeFromQRCodeEntry(RS("QRCode"), r("Document Type"), Zone)
                        InsertLine.Fields("From Zone") = Zone
                        InsertLine.Fields("From Quantity") = 0 ' 1 'MasterRow("")
                        InsertLine.Fields("From Unit of Measure") = "" ' q.Value("Unit of Measure")
                        InsertLine.Fields("From Qty_ per Unit of Measure") = 1' q.Value("Qty_ per Unit of Measure")
                    Case 5, 11, 15, 17 'shipping
                        InsertLine.Fields("To Bin Code") = GetBinCodeFromInTransitLocation(q.Value("Source Code"), q.Value("Responsibility Center"), Zone, InTransit)
                        InsertLine.Fields("To Zone") = Zone
                        InsertLine.Fields("To Location Code") = InTransit
                        'InsertLine.Fields("To Quantity") = 1
                        'InsertLine.Fields("To Unit of Measure") = ISDBNULL(q.Value("Unit of Measure"), "")
                        'InsertLine.Fields("To Qty_ per Unit of Measure") = q.Value("To Qty_ per Unit of Measure")
                        InsertLine.Fields("To Source Code") = q.Value("Source Code")
                        InsertLine.Fields("To Responsibility Center") = q.Value("Responsibility Center")

                        InsertLine.Fields("From Source Code") = q.Value("Source Code")
                        InsertLine.Fields("From Responsibility Center") = q.Value("Responsibility Center")
                        InsertLine.Fields("From Location Code") = q.Value("Location Code")
                        InsertLine.Fields("From Zone") = Zone
                        InsertLine.Fields("From Bin Code") = BinCode
                        InsertLine.Fields("From Quantity") = 1
                        InsertLine.Fields("From Unit of Measure") = q.Value("Unit of Measure")
                        InsertLine.Fields("From Qty_ per Unit of Measure") = q.Value("Qty_ per Unit of Measure")
                    Case Else
                        InsertLine.Fields("To Zone") = Zone
                        InsertLine.Fields("To Bin Code") = BinCode
                        'InsertLine.Fields("To Quantity") = 1 'MasterRow("")
                        'InsertLine.Fields("To Unit of Measure") = ISDBNULL(q.Value("Unit of Measure"), "")
                        'InsertLine.Fields("To Qty_ per Unit of Measure") = q.Value("Qty_ per Unit of Measure")
                        InsertLine.Fields("To Source Code") = q.Value("Source Code")
                        InsertLine.Fields("To Responsibility Center") = q.Value("Responsibility Center")
                        InsertLine.Fields("To Location Code") = q.Value("Location Code")

                        InsertLine.Fields("From Source Code") = q.Value("Source Code")
                        InsertLine.Fields("From Responsibility Center") = q.Value("Responsibility Center")
                        InsertLine.Fields("From Location Code") = q.Value("Location Code")
                        InsertLine.Fields("From Zone") = Zone
                        InsertLine.Fields("From Bin Code") = BinCode
                        InsertLine.Fields("From Quantity") = 1 'MasterRow("")
                        InsertLine.Fields("From Unit of Measure") = q.Value("Unit of Measure")
                        InsertLine.Fields("From Qty_ per Unit of Measure") = q.Value("Qty_ per Unit of Measure")
                End Select

                InsertLine.Fields("To Quantity") = 1
                InsertLine.Fields("To Unit of Measure") = ISDBNULL(RS("Unit Of Measure"), "")
                InsertLine.Fields("To Qty_ per Unit of Measure") = RS("Qty_ per Unit of Measure")

                InsertLine.Fields("Status") = 1
                InsertLine.Execute()
            Next
            Query.EndTransaction()
            sender.RefreshSource()

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    Public Sub QRCodeHeaderColumnValueChanged(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = sender.CurrentRow
            Select Case sender.ColumnName
                Case ""

                Case "Logistics No_"
                    Dim sql As Query = Query.From("Logistics List").Transaction(True)
                    sql.WhereAs("Logistics No_") = r("Logistics No_")
                    sql.WhereAs("Document Type") = r("Document Type")
                    If r("No_") <> "" Then sql.WhereAs("Document No_") = r("No_")

                    If r("No_") = "" Then r("No_") = sql.Value("Document No_")

                    r("Picking No_") = sql.Value("Picking No_")
                    r("Packing List") = sql.Value("Packing List")
                    r("External Document No_") = sql.Value("External Document No_")

                    r("Originally Ordered No_") = sql.Value("Your Reference")
                    r("Your Reference") = sql.Value("Your Reference")

                    r("Bin Code") = sql.Value("Bin Code")

                    Dim qr As Query = Query.From("Bin").Transaction(True)
                    qr.Where("Code").Is(r("Bin Code"))
                    r("Zone Code") = qr.Value("Zone")

                    r("Location Code") = sql.Value("Location Code")
                    r("Source Code") = sql.Value("Source Code")
                    r("Responsibility Center") = sql.Value("Responsibility Center")
                    r("Login ID") = Framework.UserID
                    r("Status") = 1

                    'Select Case r("Document Type")
                    '    Case 4, 14, 16, 12, 18
                    r("To Location Code") = sql.Value("To Location Code")
                    r("To Source Code") = sql.Value("To Source Code")
                    r("To Responsibility Center") = sql.Value("To Responsibility Center")
                    '        r("From Source Code") = ""
                    '        r("From Responsibility Center") = ""
                    '    Case 5, 11, 15, 17
                    '        r("To Source Code") = ""
                    '        r("To Responsibility Center") = ""
                    r("From Source Code") = sql.Value("From Source Code")
                    r("From Responsibility Center") = sql.Value("From Responsibility Center")
                    r("From Location Code") = sql.Value("From Location Code")
                    '    Case Else
                    '        r("To Source Code") = sql.Value("Source Code")
                    '        r("To Responsibility Center") = sql.Value("Responsibility Center")
                    '        r("To Location Code") = sql.Value("Location Code")
                    '        r("From Source Code") = sql.Value("Source Code")
                    '        r("From Responsibility Center") = sql.Value("Responsibility Center")
                    '        r("From Location Code") = sql.Value("Location Code")
                    'End Select

                    'r("Source Type") = sql.Value("Document Type")
                    'r("Source No_") = sql.Value("")
            End Select
            ' sender.ClientCommit()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    Public Sub QRCodeLineColumnValueChanged(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim MasterRow As Hashtable = sender.MasterRow
        If MasterRow Is Nothing Then Return

        Try
            Dim r As Hashtable = sender.CurrentRow

            Select Case sender.ColumnName
                Case "Bin Code"
                    If r("Bin Code") = r("To Bin Code") Then
                        If r("Document Type") = 4 Then
                            r("Bin Code") = r("From Bin Code")
                            WorkSession.MsgML("Please select Bin difference from Bin Code !")
                            Return
                        Else
                            r("From Bin Code") = r("Bin Code")
                        End If
                    End If
                    sender.ClientCommit()
                        'sender.RefreshSource()
                Case "Unit Of Measure"
                    If r("Quantity") > 1 And r("To Unit of Meassure") = r("Unit Of Meassure") Then
                        r("Unit Of Measure") = r("From Unit of Measure")
                        WorkSession.MsgML("Please select [UOM] difference from [To UOM] as quantity > 1 !")
                        Return
                    End If
                    'Else
                    '    r("Qty_ per Unit of Measure") = GetQtyPer(r("No_"), r("Unit Of Measure"))
                    '    r("From Qty_ per Unit of Measure") = r("Qty_ per Unit of Measure") 'GetQtyPer(r(
                    '    r("From Unit of Measure") = r("Unit Of Measure")

                    'If r("Qty_ per Unit of Measure") = r("To Qty_ per Unit of Measure") Then
                    '    'r("To Qty_ per Unit of Measure") = 0
                    '    WorkSession.MsgML("Please select [To qty per] less than from [qty per] !")
                    '    Return
                    'Else
                    '    r("From Qty_ per Unit of Measure") = GetQtyPer(r("No_"), r("Unit Of Measure"))
                    'End If

                    r("Qty_ per Unit of Measure") = GetQtyPer(r("No_"), r("Unit Of Measure"))
                    r("From Unit of Measure") = r("Unit Of Measure")
                    r("From Qty_ per Unit of Measure") = r("Qty_ per Unit of Measure")
                    sender.ClientCommit()
                Case "Quantity"
                    Dim qr As Query = Query.From("Item Unit of Measure").Transaction(True)
                    qr.Where("Item No_").Is(r("No_"))
                    qr.And("Code").Is(r("Unit Of Measure"))

                    'qr.And("Qty_ per Unit of Measure").LessThan(r("Qty_ per Unit of Measure"))
                    'qr.OrderBy("Qty_ per Unit of Measure").DESC()

                    Dim itemqty As Decimal = IIf(qr.Value("Qty_ per Unit of Measure") = 0, 1, qr.Value("Qty_ per Unit of Measure"))

                    Dim qrcodeqty As Decimal = r("To Qty_ per Unit of Measure") * r("To Quantity")

                    If qrcodeqty < itemqty * r("Quantity") Then
                        r("Quantity") = r("From Quantity")
                        WorkSession.MsgML("Please select [Quantity] * qtyper less than from [to qtyper] !")
                        Return
                    End If
                    r("From Quantity") = r("Quantity")
                    sender.ClientCommit()
                Case "QRCode"
                    'Dim table As New DataTable

                    Dim qr As Query = Query.From("Bin").Transaction(True)
                    qr.Where("Code").Is(MasterRow("Bin Code"))
                    Dim Zone As String = qr.Value("Zone")
                    Dim InTransit As String = ""

                    Dim ItemNo_ As String = ""
                    Dim q As Query = Query.From("QRCode").Transaction(True)
                    q.WhereAs("QRCode") = r("QRCode")
                    'r("QRCode") = q.Value("QRCode")
                    ItemNo_ = q.Value("Item No_")
                    If ItemNo_ = "" Then Return

                    r("Type") = 4
                    r("No_") = q.Value("Item No_")
                    r("Document Type") = MasterRow("Document Type")
                    r("Document No_") = MasterRow("No_")
                    r("Logistics No_") = MasterRow("Logistics No_")
                    r("Packing List") = MasterRow("Packing List")
                    r("Picking No_") = MasterRow("Picking No_")
                    r("Location Code") = MasterRow("Location Code")
                    r("Bin Code") = MasterRow("Bin Code")
                    r("Zone Code") = Zone
                    ',[Length]
                    ',[Width]
                    ',[Height]
                    ',[Weight]
                    ',[Cubage]
                    ',[Description]
                    r("Lot No_") = q.Value("Lot No_")
                    r("Expiration Date") = q.Value("Expired Date")
                    r("Real Lot No_") = q.Value("Lot No_")
                    r("Real Expiration Date") = q.Value("Expired Date")
                    'r("Production Date") = MasterRow("")
                    r("Quantity") = 1 'MasterRow("")
                    r("Qty_ to Receive") = 1 ' MasterRow("")
                    r("Quantity Received") = 0 ' MasterRow("")
                    r("Outstanding Quantity") = 1 ' MasterRow("")
                    ',[Date Received]
                    r("Unit Of Measure") = q.Value("Unit Of Measure")
                    r("Qty_ per Unit of Measure") = q.Value("Qty Unit Of Measure")
                    ',[Document Date]
                    ',[Posting Date]
                    ',[Shipment Date]
                    r("Source Code") = MasterRow("Source Code")
                    r("Responsibility Center") = MasterRow("Responsibility Center")
                    r("Source Type") = q.Value("Source Type")
                    r("Source No_") = q.Value("Source No_")

                    Select Case r("Document Type")
                        Case 4, 14, 16, 12, 18
                            r("To Zone") = Zone
                            r("To Bin Code") = MasterRow("Bin Code")
                            r("To Quantity") = 1 'MasterRow("")
                            r("To Unit of Measure") = q.Value("Unit Of Measure")
                            r("To Qty_ per Unit of Measure") = q.Value("Qty Unit Of Measure")
                            r("To Source Code") = MasterRow("To Source Code")
                            r("To Responsibility Center") = MasterRow("To Responsibility Center")
                            r("To Location Code") = MasterRow("To Location Code")

                            'r("From Source Code") = ""
                            'r("From Responsibility Center") = ""
                            r("From Location Code") = MasterRow("From Location Code")
                            r("From Bin Code") = GetBinCodeFromQRCodeEntry(r("QRCode"), r("Document Type"), Zone)
                            r("From Zone") = Zone
                                'r("From Quantity") = 1 'MasterRow("")
                                'r("From Unit of Measure") = q.Value("Unit Of Measure")
                                'r("From Qty_ per Unit of Measure") = q.Value("To Qty_ per Unit of Measure")
                        Case 5, 11, 15, 17
                            r("To Bin Code") = GetBinCodeFromInTransitLocation(MasterRow("Source Code"), MasterRow("Responsibility Center"), Zone, InTransit)
                            r("To Zone") = Zone
                            r("To Location Code") = InTransit

                            'r("To Quantity") = 1 'MasterRow("")
                            'r("To Unit of Measure]") = q.Value("Unit Of Measure")
                            'r("To Qty_ per Unit of Measure") = q.Value("To Qty_ per Unit of Measure")
                            'r("To Source Code") = MasterRow("Source Code")
                            'r("To Responsibility Center") = MasterRow("Responsibility Center")

                            r("From Source Code") = MasterRow("From Source Code")
                            r("From Responsibility Center") = MasterRow("From Responsibility Center")
                            r("From Location Code") = MasterRow("From Location Code")
                            r("From Zone") = Zone
                            r("From Bin Code") = MasterRow("Bin Code")
                            r("From Quantity") = 1 'MasterRow("")
                            r("From Unit of Measure") = q.Value("Unit Of Measure")
                            r("From Qty_ per Unit of Measure") = q.Value("Qty Unit Of Measure")
                        Case Else
                            r("From Source Code") = MasterRow("From Source Code")
                            r("From Responsibility Center") = MasterRow("From Responsibility Center")
                            r("From Location Code") = MasterRow("From Location Code")
                            r("From Zone") = Zone
                            r("From Bin Code") = MasterRow("Bin Code")
                            r("From Quantity") = 1 'MasterRow("")
                            r("From Unit of Measure") = q.Value("Unit Of Measure")
                            r("From Qty_ per Unit of Measure") = q.Value("Qty Unit Of Measure")

                            r("To Zone") = Zone
                            r("To Bin Code") = MasterRow("Bin Code")
                            r("To Quantity") = 1 'MasterRow("")
                            r("To Unit of Measure") = q.Value("Unit Of Measure")
                            r("To Qty_ per Unit of Measure") = q.Value("Qty Unit Of Measure")
                            r("To Source Code") = MasterRow("To Source Code")
                            r("To Responsibility Center") = MasterRow("To Responsibility Center")
                            r("To Location Code") = MasterRow("To Location Code")
                    End Select

                    r("Status") = 1

                    sender.ClientCommit()
                    Framework.RunClientScript("CompleteAndNewRow")

            End Select

            'sender.ClientCommit()
            'sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    Public Sub QRCodeHeaderApprove(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        'If r Is Nothing Then Return

        Try
            Query.BeginTransaction()

            Dim OrderNo As String = r("No_")
            Dim UOM As String = ""
            Dim Qtyper As Decimal = 0
            Dim Zone As String = r("Zone Code")
            Dim SourceCode As String = r("Source Code")
            Dim Respon As String = r("Responsibility Center")
            Dim Location As String = r("Location Code")

            Dim qr As Query = Query.From("Bin").Transaction(True)

            If r("Bin Code") <> "" Then
                qr = Query.From("Bin").Transaction(True)
                qr.Where("Code").Is(r("Bin Code"))
                Zone = qr.Value("Zone")
                If r("Location Code") = "" Then Location = qr.Value("Location Code")

                'qr = Query.From("Location").Transaction(True)
                'qr.Where("Code").Is(Location)
                'If r("Source Code") = "" Then SourceCode = qr.Value("Source Code")
                'If r("Responsibility Center") = "" Then Respon = qr.Value("Responsibility Center")
            End If

            If r("Source Code") = "" Then
                qr = Query.From("Location").Transaction(True)
                qr.Where("Code").Is(Location)
                If r("Source Code") = "" Then SourceCode = qr.Value("Source Code")
                If r("Responsibility Center") = "" Then Respon = qr.Value("Responsibility Center")
            End If

            Dim update As Query = Query.Update("QRCode Header")
            update.Where("RowID").Is(r("RowID"))

            If r("No_") = "" Then

                Dim sql As Query = Query.From("Logistics Data").Transaction(True)
                sql.WhereAs("Logistics No_") = r("Logistics No_")
                sql.WhereAs("Document Type") = r("Document Type")

                update.Fields("No_") = sql.Value("Document No_")
                update.Fields("Picking No_") = sql.Value("Picking No_")
                update.Fields("Packing List") = sql.Value("Packing List")
                update.Fields("External Document No_") = sql.Value("External Document No_")
                update.Fields("Originally Ordered No_") = sql.Value("Your Reference")
                update.Fields("Your Reference") = sql.Value("Your Reference")
                OrderNo = sql.Value("Document No_")
            Else
                'update.Fields("External Document No_") = r("External Document No_")
                'update.Fields("Originally Ordered No_") = r("Your Reference")
                'update.Fields("Your Reference") = r("Your Reference")
                update.Fields("Picking No_") = r("Logistics No_")
                update.Fields("Packing List") = r("Packing List")

            End If

            update.Fields("Source Code") = SourceCode
            update.Fields("Responsibility Center") = Respon
            update.Fields("Location Code") = Location
            update.Fields("Bin Code") = r("Bin Code")

            Select Case r("Document Type")
                Case 4, 14, 16, 12, 18

                    update.Fields("To Source Code") = SourceCode
                    update.Fields("To Responsibility Center") = Respon'r("Responsibility Center")
                        'r("From Source Code") = ""
                        'r("From Responsibility Center") = ""
                Case 5, 11, 15, 17
                    'r("To Source Code") = ""
                    'r("To Responsibility Center") = ""
                    update.Fields("From Source Code") = SourceCode ' r("Source Code")
                    update.Fields("From Responsibility Center") = Respon ' r("Responsibility Center")
                Case Else
                    update.Fields("To Source Code") = SourceCode ' r("Source Code")
                    update.Fields("To Responsibility Center") = Respon ' r("Responsibility Center")
                    update.Fields("From Source Code") = SourceCode ' r("Source Code")
                    update.Fields("From Responsibility Center") = Respon ' r("Responsibility Center")
            End Select
            update.Fields("Status") = 2
            update.Execute()

            Dim data As Query = Query.From("QRCode Line").Transaction(True)
            data.Where("Logistics No_").Is(r("Logistics No_"))
            Dim table As DataTable = data.ToTable

            For Each row As DataRow In table.Rows
                'If row("Bin Code") <> "" Then Bin = row("Bin Code")
                If row("Zone Code") <> "" Then Zone = row("Zone Code")
                If row("Location Code") <> "" Then Location = row("Location Code")
                If row("Source Code") <> "" Then SourceCode = row("Source Code")
                If row("Responsibility Center") <> "" Then Respon = row("Responsibility Center")

                Dim QRCodeInfo As Query = Query.From("QRCode").Transaction(True)
                ' Dim QRCodeInfo As Query = Query.From("Document Entry").Transaction(True)
                QRCodeInfo.Where("QRCode").Is(row("QRCode"))
                Dim QRCodeR As DataRow = QRCodeInfo.TakeRow

                If QRCodeInfo.RecordCount > 0 Then
                    update = Query.Update("QRCode Line")
                    update.Where("Logistics No_").Is(r("Logistics No_"))
                    update.And("QRCode").Is(row("QRCode"))

                    update.Fields("Document No_") = IIf(r("No_") <> "", r("No_"), OrderNo)
                    update.Fields("Packing List") = r("Packing List")
                    update.Fields("Source Code") = SourceCode ' r("Source Code")
                    update.Fields("Responsibility Center") = Respon ' r("Responsibility Center")
                    update.Fields("Location Code") = Location ' r("Location Code")
                    update.Fields("Type") = 4 'Inventory
                    update.Fields("No_") = QRCodeR("Item No_")
                    update.Fields("Qty_ to Receive") = row("Quantity")
                    update.Fields("Outstanding Quantity") = row("Quantity")
                    'update.Fields("Quantity") = row("Quantity")
                    'update.Fields("Document Type") = r("Document Type")
                    update.Fields("Source Type") = QRCodeR("Source Type")
                    update.Fields("Source No_") = QRCodeR("Source No_")


                    If row("Lot No_") = "" Then
                        update.Fields("Lot No_") = Framework.EmptyNull(QRCodeR("Lot No_"))
                        update.Fields("Expiration Date") = QRCodeR("Expired Date")
                        update.Fields("Real Lot No_") = Framework.EmptyNull(QRCodeR("Lot No_"))
                        update.Fields("Real Expiration Date") = QRCodeR("Expired Date")
                    Else
                        'update.Fields("Lot No_") = row("Lot No_")
                        'update.Fields("Expiration Date") = row("Expired Date")
                        update.Fields("Real Lot No_") = Framework.EmptyNull(QRCodeR("Lot No_"))
                        update.Fields("Real Expiration Date") = QRCodeR("Expired Date")
                    End If

                    If row("Location Code") = "" And Location <> "" Then
                        update.Fields("Location Code") = Location
                    End If
                    If row("Zone Code") = "" And Zone <> "" Then
                        update.Fields("Zone Code") = Zone
                    End If

                    Select Case r("Document Type")
                        Case 4, 14, 16, 12, 18
                            'update.Fields("From Location Code") = r("From Location Code")
                            'update.Fields("From Zone") = Zone
                            'update.Fields("From Bin Code") = row("Bin Code")

                            'update.Fields("To Unit of Measure") = QRCodeR("Unit Of Measure")
                            'update.Fields("From Source Code") =  r("From Source Code")
                            'update.Fields("From Responsibility Center") =  r("From Responsibility Center")
                            'update.Fields("From Unit of Measure]") = row("Unit of Measure")
                            'update.Fields("From Qty_ per Unit of Measure") = row("To Qty_ per Unit of Measure")

                            update.Fields("To Source Code") = SourceCode ' r("Source Code")
                            update.Fields("To Responsibility Center") = Respon ' r("Responsibility Center")

                            If row("Bin Code") = "" Then
                                Dim Bin As String = GetBinCodeFromQRCodeEntry(row("QRCode"), r("Document Type"), Zone)
                                update.Fields("To Bin Code") = Bin
                                update.Fields("To Zone") = Zone
                                update.Fields("To Location Code") = Location
                                update.Fields("Bin Code") = Bin
                            Else
                                update.Fields("To Bin Code") = row("Bin Code")
                                update.Fields("To Zone") = Zone
                                update.Fields("To Location Code") = Location
                            End If
                            'update.Fields("To Zone") = Zone
                            'update.Fields("To Bin Code") = row("Bin Code")

                            If row("Unit Of Measure") = "" Then
                                qr = Query.From("Item Unit of Measure").Transaction(True)
                                qr.Where("Item No_").Is(r("No_"))
                                'qr.And("Code").Is(r("Unit Of Measure"))
                                qr.And("Qty_ per Unit of Measure").LessThan(row("Qty_ per Unit of Measure"))
                                qr.OrderBy("Qty_ per Unit of Measure").DESC()

                                Dim itemqty As Decimal = IIf(qr.Value("Qty_ per Unit of Measure") = 0, 1, qr.Value("Qty_ per Unit of Measure"))
                                update.Fields("Unit Of Measure") = ISDBNULL(qr.Value("Code"), "")
                                update.Fields("Qty_ per Unit Of Measure") = itemqty

                                If Framework.EmptyNull(row("From Unit of Measure")) = "" Then
                                    update.Fields("From Unit of Measure") = ISDBNULL(qr.Value("Code"), "")
                                    update.Fields("From Qty_ per Unit of Measure") = itemqty '  GetQtyPer(row("No_"), row("Unit Of Measure"))
                                End If

                            End If

                            update.Fields("From Quantity") = row("Quantity")
                            'update.Fields("From Unit of Measure") = ISDBNULL(row("Unit Of Measure"), "")
                            'update.Fields("From Qty_ per Unit of Measure") = GetQtyPer(row("No_"), row("Unit Of Measure"))

                            update.Fields("To Quantity") = QRCodeR("Quantity") 'MasterRow("")
                            update.Fields("To Qty_ per Unit of Measure") = GetQtyPer(row("No_"), QRCodeR("Unit Of Measure"))
                            update.Fields("To Unit of Measure") = QRCodeR("Unit Of Measure")

                        Case 5, 15, 17

                            If Framework.EmptyNull(row("Unit Of Measure")) = "" Then
                                Qtyper = QRCodeR("Qty Unit Of Measure")
                                UOM = QRCodeR("Unit Of Measure")

                                update.Fields("Unit Of Measure") = UOM
                                update.Fields("Qty_ per Unit Of Measure") = Qtyper
                            Else
                                Qtyper = Framework.ZeroNull(row("Qty_ per Unit Of Measure"))
                                UOM = Framework.EmptyNull(row("Unit Of Measure"))
                            End If

                            'update.Fields("From Location Code") = r("From Location Code")
                            'update.Fields("From Zone") = Zone
                            'update.Fields("From Bin Code") = row("Bin Code")
                            'update.Fields("From Quantity") = 1
                            'update.Fields("From Unit of Measure") = QRCodeR("Unit Of Measure")
                            'update.Fields("From Source Code") =  r("From Source Code")
                            'update.Fields("From Responsibility Center") =  r("From Responsibility Center")
                            'update.Fields("From Unit of Measure]") = row("Unit of Measure")
                            'update.Fields("From Qty_ per Unit of Measure") = row("To Qty_ per Unit of Measure")


                            update.Fields("From Source Code") = SourceCode 'r("Source Code")
                            update.Fields("From Responsibility Center") = Respon ' r("Responsibility Center")

                            If row("Bin Code") = "" Then
                                Dim InTransit As String = ""
                                Dim Bin As String = GetBinCodeFromInTransitLocation(SourceCode, Respon, Zone, InTransit)
                                update.Fields("From Bin Code") = Bin
                                update.Fields("From Zone") = Zone
                                update.Fields("From Location Code") = InTransit
                                update.Fields("Bin Code") = Bin
                            Else
                                update.Fields("From Zone") = Zone
                                update.Fields("From Bin Code") = row("Bin Code")
                                update.Fields("From Location Code") = Location
                                'update.Fields("Bin Code") = row("Bin Code")
                            End If

                            update.Fields("From Quantity") = row("Quantity") 'MasterRow("")
                            update.Fields("From Unit of Measure") = UOM '  ISDBNULL(row("Unit of Measure"), "")
                            update.Fields("From Qty_ per Unit of Measure") = Qtyper 'GetQtyPer(row("No_"), row("Unit Of Measure"))

                            update.Fields("To Quantity") = QRCodeR("Quantity") 'MasterRow("")
                            update.Fields("To Qty_ per Unit of Measure") = GetQtyPer(row("No_"), QRCodeR("Unit Of Measure"))
                            update.Fields("To Unit of Measure") = QRCodeR("Unit Of Measure")

                        Case Else

                            If Framework.EmptyNull(row("Unit Of Measure")) = "" Then
                                Qtyper = QRCodeR("Qty Unit Of Measure")
                                UOM = QRCodeR("Unit Of Measure")
                                update.Fields("Unit Of Measure") = UOM
                                update.Fields("Qty_ per Unit Of Measure") = Qtyper
                            Else
                                Qtyper = Framework.ZeroNull(row("Qty_ per Unit Of Measure"))
                                UOM = Framework.EmptyNull(row("Unit Of Measure"))
                            End If

                            update.Fields("From Location Code") = Location
                            update.Fields("From Source Code") = SourceCode ' r("Source Code")
                            update.Fields("From Responsibility Center") = Respon '  r("Responsibility Center")
                            update.Fields("From Zone") = IIf(Zone <> "", Zone, row("Zone Code"))
                            update.Fields("From Bin Code") = row("Bin Code")
                            update.Fields("From Quantity") = row("Quantity")
                            update.Fields("From Unit of Measure") = UOM ' ISDBNULL(row("Unit of Measure"), "")
                            update.Fields("From Qty_ per Unit of Measure") = Qtyper 'GetQtyPer(row("No_"), row("Unit Of Measure"))

                            update.Fields("To Location Code") = Location
                            update.Fields("To Source Code") = SourceCode ' r("Source Code")
                            update.Fields("To Responsibility Center") = Respon ' r("Responsibility Center")

                            update.Fields("To Zone") = IIf(Zone <> "", Zone, row("Zone Code"))
                            update.Fields("To Bin Code") = row("Bin Code")
                            update.Fields("To Quantity") = row("Quantity")
                            update.Fields("To Unit of Measure") = UOM '  ISDBNULL(row("Unit of Measure"), "")
                            update.Fields("To Qty_ per Unit of Measure") = Qtyper '  GetQtyPer(row("No_"), row("Unit Of Measure"))

                    End Select

                    update.Fields("Status") = 2
                    update.Execute()
                End If
            Next


            Query.EndTransaction()
            sender.RefreshSource()

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    'mở lại Order Header
    Public Sub QRCodeReOpen(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        'If r Is Nothing Then Return

        Dim TableName As String = sender.TableName

        Dim Status As Integer = r("Status")
        Dim UserID As String = GetCurrenUserID()

        If Status <= 1 Then
            WorkSession.MsgML("Chứng từ không cần mở vì chưa duyệt !")
            Return
        End If

        Try

            Dim update As Query = Query.Update(TableName)
            update.Fields("Status") = 1
            update.Where("RowID").Is(r("RowID"))
            update.Execute()

            update = Query.Update("QRCode Line")
            update.Fields("Status") = 1
            update.Where("Logistics No_").Is(r("Logistics No_"))
            update.And("Document No_").Is(r("No_"))
            update.Execute()

            sender.RefreshSource()

            WorkSession.MsgML("Chứng từ đã được mở lại thành công !")

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub QRCodeOrderPost(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        'If r Is Nothing Or r.Count = 0 Then Return
        If r("Status") < 2 Then
            WorkSession.MsgML("Not yet approved !")
            Return
        End If

        Dim DocumentNo_ As String = r("No_")
        Dim PackingList As String = r("Packing List")
        Dim LogisticsNo As String = r("Logistics No_")
        Dim SourceCode As String = r("Source Code")
        Dim Respon As String = r("Responsibility Center")

        Dim querrydata As Query = Query.From("QRCode Line").Transaction(True)
        querrydata.Where("Document No_").Is(DocumentNo_)
        querrydata.And("Logistics No_").Is(LogisticsNo)
        querrydata.And("Document Type").Is(r("Document Type"))
        querrydata.And("Status").Is(2)

        If querrydata.RecordCount <= 0 Then Return

        Dim Update As Query

        Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        Dim i As Integer = qqq.Value("EntryNo")

        Try
            Query.BeginTransaction()

            Dim insertheader As Query = Query.Entity("QRCode Header Posted").WithValues(r).Insert
            'insertheader.Fields("No_") = r("Logistics No_")

            insertheader.Execute()

            Dim Finish As Integer = 1
            Dim tableID As Integer = 0
            Dim k As Integer = 0
            Dim LocationCode As String = ""
            Dim Zone As String = ""

            Dim dbSource As DataTable = querrydata.ToTable

            For Each trow As DataRow In dbSource.Rows
                Dim insertLine As Query = Query.Entity("QRCode Line Posted").WithValues(trow).Insert
                insertLine.Fields("Qty_ to Receive") = 0
                insertLine.Fields("Outstanding Quantity") = 0
                insertLine.Fields("Quantity Received") = trow("Quantity")
                insertLine.Execute()

                k += i
                LocationCode = trow("Location Code")
                'If SourceCode = "" Then SourceCode = trow("Source Code")
                'If Respon = "" Then Respon = trow("Responsibility Center")

                If trow("Source Code") <> "" Then SourceCode = trow("Source Code")
                If trow("Responsibility Center") <> "" Then Respon = trow("Responsibility Center")

                Select Case r("Document Type")
                    Case 4, 5 ', 14, 15, 11, 12, 16, 17, 18
                        'Dim Zone As String = ""
                        Dim qr As Query = Query.From("Bin").Transaction(True)
                        qr.Where("Code").Is(trow("Bin Code"))
                        Zone = qr.Value("Zone")
                        If LocationCode = "" Then LocationCode = qr.Value("Location Code")

                        querrydata = Query.From("QRCode Entry").Transaction(True)
                        querrydata.Where("QRCode").Is(trow("QRcode"))
                        querrydata.And("Bin").Is(trow("Bin Code"))
                        querrydata.And("Document Type").Is(trow("Document Type"))

                        If querrydata.RecordCount > 0 Then
                            Update = Query.Update("QRCode Entry")
                            Update.Where("QRCode").Is(trow("QRcode"))
                            Update.And("Document Type").Is(r("Document Type"))
                            'querrydata.And("Item No_").Is(ItemCode)
                            Update.Fields("Bin") = trow("Bin Code")
                            Update.Fields("Bin History", "+") = trow("Bin Code") + "| "
                            Update.Fields("Zone") = Zone
                            Update.Fields("Zone History", "+") = Zone + "|"
                            Update.Fields("Location Code") = LocationCode
                            Update.Fields("Bin Status") = IIf(r("Document Type") = 5, 1, 0)
                            Update.Execute()

                            Update = Query.Update("Document Entry")
                            Update.Where("Logistics No_").Is(trow("Logistics No_"))
                            Update.And("Document Type").Is(r("Document Type"))
                            'update.And("Item No_").Is(ItemCode)
                            Update.And("QRCode").Is(trow("QRcode"))
                            'Update.And("Line No_").Is(LineNo)
                            'Update.And("Entry No_").Is(DocumentEntry)

                            Update.Fields("Bin") = trow("Bin Code")
                            Update.Fields("Bin History", "+") = trow("Bin Code") + "|"
                            Update.Fields("Zone") = Zone
                            Update.Fields("Zone History", "+") = Zone + "|"
                            Update.Fields("Location Code") = LocationCode

                            Update.Fields("Scan Number", "+") = 1
                            Update.Fields("Status") = 3
                            ' If trow("URL") = "" Then Update.Fields("Attach File") = trow("URL")
                            'If trow("Serial No_") = "" Then Update.Fields("Serial No_") = trow("Serial No_")
                            If trow("Lot No_") = "" Then Update.Fields("Lot No_") = trow("Lot No_")
                            If trow("Real Lot No_") = "" Then Update.Fields("Real Lot No_") = trow("Real Lot No_")
                            Update.Execute()

                        Else 'Insert QRCode Entry

                            Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                            QueryInsertQREntry.Fields("QRCode") = trow("QRcode")
                            QueryInsertQREntry.Fields("Item No_") = trow("No_")
                            QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                            QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expiration Date"))
                            QueryInsertQREntry.Fields("Real Lot No_") = trow("Real Lot No_")
                            QueryInsertQREntry.Fields("Real Expiration Date") = CDate(trow("Real Expiration Date"))

                            QueryInsertQREntry.Fields("Bin") = trow("Bin Code")
                            QueryInsertQREntry.Fields("Zone") = Zone
                            QueryInsertQREntry.Fields("Bin History", "+") = trow("Bin Code") + "|"
                            QueryInsertQREntry.Fields("Zone History", "+") = Zone + "|"

                            QueryInsertQREntry.Fields("Document Type") = r("Document Type")
                            QueryInsertQREntry.Fields("Serial No_") = trow("QRcode") ' trow("Serial No_")
                            'QueryInsertQREntry.Fields("Description") = trow("Name")
                            'QueryInsertQREntry.Fields("Variant Code") = trow("Item Variant")
                            'QueryInsertQREntry.Fields("Manufacturer Code") = trow("Work Center")
                            'QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")
                            'QueryInsertQREntry.Fields("Usage %") = 0
                            'QueryInsertQREntry.Fields("Status") = 1
                            'QueryInsertQREntry.Fields("Created Date") = Now
                            QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                            QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                            QueryInsertQREntry.Fields("Unit Of Measure Code") = trow("Unit Of Measure")
                            QueryInsertQREntry.Fields("Qty_ per Unit Of Measure") = trow("Qty_ per Unit Of Measure")
                            QueryInsertQREntry.Fields("Source Code") = SourceCode
                            QueryInsertQREntry.Fields("Responsibility Center") = Respon 'trow("Responsibility Center")
                            QueryInsertQREntry.Fields("Location Code") = LocationCode
                            'QueryInsertQREntry.Fields("External Document No_") = trow("External Document No_")
                            'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                            'QueryInsertQREntry.Fields("Last Date Checked") = Now
                            QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                            QueryInsertQREntry.Fields("Entry No_") = k
                            QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                            QueryInsertQREntry.Fields("Logistics No_") = trow("Logistics No_")
                            QueryInsertQREntry.Fields("Document No_") = trow("Document No_")
                            'QueryInsertQREntry.Fields("Packing List") = trow("Packing List")
                            'QueryInsertQREntry.Fields("Picking No_") = trow("Picking No_")
                            QueryInsertQREntry.Fields("Source Type") = trow("Source Type")
                            QueryInsertQREntry.Fields("Source No_") = trow("Source No_")
                            QueryInsertQREntry.Execute()

                            Dim QueryUpdate As Query = Query.Update("Document Entry")
                            QueryUpdate.WhereAs("Logistics No_") = trow("Logistics No_")
                            QueryUpdate.WhereAs("QRCode") = trow("QRCode")
                            QueryUpdate.WhereAs("Item No_") = trow("No_")
                            'QueryUpdate.WhereAs("Line No_") = lineno
                            QueryUpdate.WhereAs("Document Type") = r("Document Type")

                            QueryUpdate.Fields("Bin") = trow("Bin Code")
                            QueryUpdate.Fields("Zone") = Zone

                            'Update.Fields("Bin") = trow("Bin Code")
                            QueryUpdate.Fields("Bin History", "+") = trow("Bin Code") + "|"
                            'Update.Fields("Zone") = Zone
                            QueryUpdate.Fields("Zone History", "+") = Zone + "|"
                            QueryUpdate.Fields("Location Code") = LocationCode

                            QueryUpdate.Fields("Scan Number", "+") = 1
                            QueryUpdate.Fields("Status") = 2
                            'If trow("URL") = "" Then QueryUpdate.Fields("Attach File") = trow("URL")
                            'If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = trow("Serial No_")
                            If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = trow("Lot No_")
                            If trow("Real Lot No_") = "" Then QueryUpdate.Fields("Real Lot No_") = trow("Real Lot No_")

                            QueryUpdate.Execute()

                        End If

                    Case Else
                        'Dim Zone As String = ""
                        Dim qr As Query = Query.From("Bin").Transaction(True)
                        qr.Where("Code").Is(trow("Bin Code"))
                        Zone = qr.Value("Zone")
                        If LocationCode = "" Then LocationCode = qr.Value("Location Code")

                        querrydata = Query.From("QRCode Entry").Transaction(True)
                        querrydata.Where("QRCode").Is(trow("QRcode"))
                        querrydata.And("Bin").Is(trow("Bin Code"))
                        querrydata.And("Document Type").Is(trow("Document Type"))

                        If querrydata.RecordCount > 0 Then
                            Update = Query.Update("QRCode Entry")
                            Update.Where("QRCode").Is(trow("QRcode"))
                            Update.And("Document Type").Is(r("Document Type"))
                            'querrydata.And("Item No_").Is(ItemCode)
                            'Update.Fields("Bin") = trow("Bin Code")
                            ''update.Fields("Bin History", "+") = trow("QRcode") + ","
                            'Update.Fields("Zone") = Zone
                            'Update.Fields("Zone History", "+") = querrydata.Value("Zone") + "|"

                            Select Case r("Document Type")
                                Case 1, 3, 5, 7, 9, 11, 13, 15, 17, 19
                                    Update.Fields("Bin Status") = 1
                                    Update.Fields("Bin") = trow("Bin Code")
                                    Update.Fields("Bin History", "+") = trow("Bin Code") + "|"
                                    Update.Fields("Zone") = Zone
                                    Update.Fields("Zone History", "+") = Zone + "|"
                                    Update.Fields("Bin Status") = 1
                                Case Else
                                    Update.Fields("Bin Status") = 0
                                    Update.Fields("Bin") = trow("Bin Code")
                                    Update.Fields("Bin History", "+") = trow("Bin Code") + "|"
                                    Update.Fields("Zone") = Zone
                                    Update.Fields("Zone History", "+") = Zone + "|"
                            End Select

                            Update.Execute()

                            Update = Query.Update("Document Entry")
                            Update.Where("Logistics No_").Is(trow("Logistics No_"))
                            Update.And("Document Type").Is(r("Document Type"))
                            'update.And("Item No_").Is(ItemCode)
                            Update.And("QRCode").Is(trow("QRcode"))
                            'Update.And("Line No_").Is(LineNo)
                            'Update.And("Entry No_").Is(DocumentEntry)

                            Update.Fields("Bin") = trow("Bin Code")
                            Update.Fields("Bin History", "+") = trow("Bin Code") + "|"
                            Update.Fields("Zone") = Zone
                            Update.Fields("Zone History", "+") = Zone + "|"

                            Update.Fields("Scan Number", "+") = 1
                            Update.Fields("Status") = 2
                            'If trow("URL") = "" Then Update.Fields("Attach File") = trow("URL")
                            'If trow("Serial No_") = "" Then Update.Fields("Serial No_") = trow("Serial No_")
                            If trow("Lot No_") = "" Then Update.Fields("Lot No_") = trow("Lot No_")
                            If trow("Real Lot No_") = "" Then Update.Fields("Real Lot No_") = trow("Real Lot No_")
                            Update.Execute()

                        Else 'Insert QRCode Entry

                            Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                            QueryInsertQREntry.Fields("QRCode") = trow("QRcode")
                            QueryInsertQREntry.Fields("Item No_") = trow("No_")
                            QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                            QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expiration Date"))
                            QueryInsertQREntry.Fields("Real Lot No_") = trow("Real Lot No_")
                            QueryInsertQREntry.Fields("Real Expiration Date") = CDate(trow("Real Expiration Date"))

                            QueryInsertQREntry.Fields("Bin") = trow("Bin Code")
                            QueryInsertQREntry.Fields("Zone") = Zone

                            QueryInsertQREntry.Fields("Bin History", "+") = trow("Bin Code") + "|"
                            QueryInsertQREntry.Fields("Zone History", "+") = Zone + "|"

                            QueryInsertQREntry.Fields("Document Type") = r("Document Type")
                            QueryInsertQREntry.Fields("Serial No_") = trow("QRcode") 'trow("Serial No_")
                            'QueryInsertQREntry.Fields("Description") = trow("Name")
                            'QueryInsertQREntry.Fields("Variant Code") = trow("Item Variant")
                            'QueryInsertQREntry.Fields("Manufacturer Code") = trow("Work Center")
                            'QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")
                            'QueryInsertQREntry.Fields("Usage %") = 0
                            'QueryInsertQREntry.Fields("Status") = 1
                            'QueryInsertQREntry.Fields("Created Date") = Now
                            QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                            QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                            QueryInsertQREntry.Fields("Unit Of Measure Code") = trow("Unit Of Measure")
                            QueryInsertQREntry.Fields("Qty_ per Unit Of Measure") = trow("Qty_ per Unit Of Measure")
                            QueryInsertQREntry.Fields("Source Code") = SourceCode 'trow("Source Code")
                            QueryInsertQREntry.Fields("Responsibility Center") = Respon ' trow("Responsibility Center")
                            QueryInsertQREntry.Fields("Location Code") = LocationCode
                            'QueryInsertQREntry.Fields("External Document No_") = trow("External Document No_")
                            'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                            'QueryInsertQREntry.Fields("Last Date Checked") = Now
                            'QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                            QueryInsertQREntry.Fields("Entry No_") = k
                            QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                            QueryInsertQREntry.Fields("Logistics No_") = trow("Logistics No_")
                            QueryInsertQREntry.Fields("Document No_") = trow("Document No_")
                            'QueryInsertQREntry.Fields("Packing List") = trow("Packing List")
                            'QueryInsertQREntry.Fields("Picking No_") = trow("Picking No_")
                            QueryInsertQREntry.Fields("Source Type") = trow("Source Type")
                            QueryInsertQREntry.Fields("Source No_") = trow("Source No_")
                            QueryInsertQREntry.Execute()

                            Dim QueryUpdate As Query = Query.Update("Document Entry")
                            QueryUpdate.WhereAs("Logistics No_") = trow("Logistics No_")
                            QueryUpdate.WhereAs("QRCode") = trow("QRCode")
                            QueryUpdate.WhereAs("Item No_") = trow("No_")
                            'QueryUpdate.WhereAs("Line No_") = lineno
                            QueryUpdate.WhereAs("Document Type") = r("Document Type")

                            QueryUpdate.Fields("Bin") = trow("Bin Code")
                            QueryUpdate.Fields("Zone") = Zone
                            QueryUpdate.Fields("Bin History", "+") = trow("Bin Code") + "|"
                            QueryUpdate.Fields("Zone History", "+") = Zone + "|"
                            QueryUpdate.Fields("Location Code") = LocationCode
                            QueryUpdate.Fields("Scan Number", "+") = 1
                            QueryUpdate.Fields("Status") = 2

                            'If trow("URL") = "" Then QueryUpdate.Fields("Attach File") = trow("URL")
                            'If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = trow("Serial No_")
                            If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = trow("Lot No_")
                            If trow("Real Lot No_") = "" Then QueryUpdate.Fields("Real Lot No_") = trow("Real Lot No_")

                            QueryUpdate.Execute()

                        End If
                End Select
            Next

            Dim delete As Query = Query.Delete("QRCode Header")
            delete.Where("No_").Is(r("No_"))
            delete.And("Logistics No_").Is(r("Logistics No_"))
            delete.And("Document Type").Is(r("Document Type"))
            'update.Fields("Status") = 3
            delete.Execute()

            delete = Query.Delete("QRCode Line")
            delete.Where("Document No_").Is(r("No_"))
            delete.And("Logistics No_").Is(r("Logistics No_"))
            delete.And("Document Type").Is(r("Document Type"))
            'update.Fields("Status") = 3
            delete.Execute()

            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

            'Framework.OpenEntity(HeaderEntity, String.Format("No_=N'{0}'", r("Logistics No_")))

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub
#End Region

#Region "e-Tracking by QR Code"
    'Public Sub CreateQRImage(ByVal qrCodeText As String, ByVal PathFileName As String, Optional ByVal Height As Integer = 30, Optional ByVal Width As Integer = 30)
    '    Try
    '        Dim dataQR As String = qrCodeText
    '        Dim qRLinkL = Replace(dataQR, "#", "-")
    '        qRLinkL = Replace(qRLinkL, "/", "-")
    '        'qRLinkL = Replace(qRLinkL, "'", "''")
    '        qRLinkL = Replace(qRLinkL, "*", "-")
    '        qRLinkL = qRLinkL.ToString().Replace(" ", "")
    '        qRLinkL = qRLinkL.ToString().Replace(":", "")

    '        Dim options As QrCodeEncodingOptions = New QrCodeEncodingOptions()
    '        options = New QrCodeEncodingOptions With {
    '                .DisableECI = True,
    '                .CharacterSet = "UTF-8",
    '                .Width = Width,
    '                .Height = Height
    '            }
    '        Dim writer = New BarcodeWriter()
    '        writer.Format = BarcodeFormat.QR_CODE
    '        writer.Options = options

    '        Dim qrImage As System.Drawing.Image
    '        qrImage = New System.Drawing.Bitmap(writer.Write(qrCodeText))
    '        If System.IO.File.Exists(PathFileName) Then
    '            System.IO.File.Delete(PathFileName)
    '        End If
    '        If Not System.IO.File.Exists(PathFileName) Then
    '            qrImage.Save(PathFileName)
    '        End If

    '    Catch ex As Exception
    '        WorkSession.MsgML(ex.ToString)
    '    End Try

    'End Sub

    'Public Sub createQRCodeBinLst(ByVal Sender As WXSource, ByVal e As WXArgs)
    '    Try
    '        Query.BeginTransaction()
    '        Dim dbSource As New DataTable
    '        dbSource = Sender.DataSource
    '        Dim tableID As String = Sender.Entity.TableName

    '        For Each trow As DataRow In dbSource.Rows
    '            Dim QRCodeString As String = ISDBNULL(trow("QRCode String"), "")
    '            Dim QRCode_Code As String = ISDBNULL(trow("QRCode"), "")
    '            Dim QRCodeURL As String = ISDBNULL(trow("QRCode URL"), "")
    '            If QRCode_Code = "" Then
    '                Dim dataQR As String = ""
    '                Dim dataQRCode As String = QRCodeString
    '                Dim QRCodeString_split() As String = QRCodeString.Split("*")
    '                For iqr_len As Integer = 0 To QRCodeString_split.Length - 1
    '                    Dim nameColm As String = QRCodeString_split(iqr_len)
    '                    nameColm = nameColm.Replace("[", "").Replace("]", "")
    '                    If dbSource.Columns.Contains(nameColm) Then
    '                        Dim datavalue As String = trow(nameColm)
    '                        dataQRCode = dataQRCode.Replace(nameColm, datavalue)
    '                    End If
    '                Next

    '                Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
    '                DataqRLinkL = Replace(DataqRLinkL, "/", "-")
    '                'qRLinkL = Replace(qRLinkL, "'", "''")
    '                DataqRLinkL = Replace(DataqRLinkL, "*", "-")
    '                Dim ss As Query = Query.From("QRCode").Transaction(True)
    '                ss.Where("Document No_").Is(trow("Code"))
    '                If ss.ToTable.Rows.Count = 0 Then

    '                    Dim CurrentDate As Date = Now()
    '                    Dim Day As String = CurrentDate.Day
    '                    Dim Month As String = CurrentDate.Month
    '                    Dim Year As String = CurrentDate.Year
    '                    Dim PathDate As String = Day & Month & Year & "/"
    '                    Dim qr As Query = Query.From("QR Setup").Select("[Object Folder],[QR Height] Height,[QR Width] Width,iIconSize Size")
    '                    Dim ObjectFolder As String = qr.Value("Object Folder")

    '                    'Dim FullPath As String = Framework.MapPath(ObjectFolder) & PathDate '& "Pictures\Document\"
    '                    'If Not Directory.Exists(FullPath) Then
    '                    '    Directory.CreateDirectory(FullPath)
    '                    'End If
    '                    Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")
    '                    If Not Directory.Exists(str3) Then
    '                        Directory.CreateDirectory(str3)
    '                    End If
    '                    dataQR = dataQRCode
    '                    Dim qRLinkL = Replace(dataQR, "#", "-")
    '                    qRLinkL = Replace(qRLinkL, "/", "-")
    '                    'qRLinkL = Replace(qRLinkL, "'", "''")
    '                    qRLinkL = Replace(qRLinkL, "*", "-")
    '                    Dim sLevel As String = ""
    '                    Dim imageQRCode As String = ""
    '                    Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

    '                    Dim qrGenerator = New QRCoder.QRCodeGenerator()
    '                    Dim qrCodeData As QRCoder.QRCodeData
    '                    qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
    '                    Dim qrCode As QRCoder.QRCode
    '                    qrCode = New QRCoder.QRCode(qrCodeData)
    '                    Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
    '                    Dim iIconSize As Integer = 4
    '                    Dim iQRWidth As Integer = 70
    '                    Dim iQRHeight As Integer = 70
    '                    If qr.Value("Size") <> 0 Then iIconSize = qr.Value("Size")
    '                    If qr.Value("Height") <> 0 Then iQRHeight = qr.Value("Height")
    '                    If qr.Value("Width") <> 0 Then iQRWidth = qr.Value("Width")
    '                    Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

    '                    Dim qrImage As System.Drawing.Image
    '                    qrImage = qrCode.GetGraphic(20, "Black", "White", False)
    '                    Dim imageFormat As System.Drawing.Imaging.ImageFormat
    '                    imageFormat = imageFormat.Jpeg
    '                    qRLinkL = qRLinkL.ToString().Replace(" ", "")
    '                    qRLinkL = qRLinkL.ToString().Replace(":", "")

    '                    If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
    '                        qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
    '                    End If
    '                    imageQRCode = str3 & "" & qRLinkL & ".jpg"
    '                    Dim QueryInsert As Query = Query.Entity("QRCode").Insert
    '                    QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
    '                    QueryInsert.Fields("QRCode") = dataQR
    '                    QueryInsert.Fields("Serial No_") = qRLinkL
    '                    QueryInsert.Fields("Name") = qRLinkL
    '                    QueryInsert.Fields("Description") = qRLinkL
    '                    QueryInsert.Fields("Item No_") = ""
    '                    QueryInsert.Fields("Item Variant") = ""
    '                    QueryInsert.Fields("Lot No_") = ""
    '                    QueryInsert.Fields("Document Type") = 6
    '                    ' QueryInsert.Fields("Type") = 6
    '                    QueryInsert.Fields("Source Type") = 6
    '                    QueryInsert.Fields("Source No_") = trow("Code")
    '                    QueryInsert.Fields("Document No_") = trow("Code")
    '                    QueryInsert.Fields("External Document No_") = ""

    '                    QueryInsert.Fields("Quantity") = 1
    '                    QueryInsert.Fields("Unit Of Measure") = ""
    '                    QueryInsert.Fields("Qty Unit Of Measure") = 1
    '                    QueryInsert.Fields("Login ID") = Framework.UserID
    '                    QueryInsert.Fields("System Date") = Now()
    '                    QueryInsert.Fields("Expired Date") = Now()
    '                    QueryInsert.Fields("Mfg Date") = Now()
    '                    QueryInsert.Fields("Kit") = 0
    '                    QueryInsert.Execute()

    '                    Dim QUpdateTableID As Query = Query.Update(tableID)
    '                    QUpdateTableID.WhereAs("RowID") = trow("RowID")
    '                    QUpdateTableID.Fields("QRCode") = dataQR
    '                    QUpdateTableID.Fields("QRCode URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
    '                    QUpdateTableID.Execute()
    '                End If

    '            End If
    '        Next
    '        Query.EndTransaction()
    '    Catch ex As Exception
    '        Query.RollBack()
    '        WorkSession.MsgML(ex.ToString)
    '    End Try
    'End Sub

    'Public Sub createQRCodeBinZone(ByVal Sender As WXSource, ByVal e As WXArgs)
    '    Try
    '        Dim r As Hashtable = Sender.CurrentRow
    '        Dim tableID As String = Sender.Entity.TableName
    '        If r Is Nothing Or r.Count = 0 Then Return
    '        Dim dbSource As New DataTable
    '        dbSource = Sender.DataSource

    '        Dim QRCodeString As String = ISDBNULL(r("QRCode String"), "")
    '        Dim QRCode_Code As String = ISDBNULL(r("QRCode"), "")
    '        Dim QRCodeURL As String = ISDBNULL(r("QRCode URL"), "")
    '        If QRCode_Code = "" Then
    '            Dim dataQR As String = ""


    '            Dim dataQRCode As String = QRCodeString
    '            Dim QRCodeString_split() As String = QRCodeString.Split("*")
    '            For iqr_len As Integer = 0 To QRCodeString_split.Length - 1
    '                Dim nameColm As String = QRCodeString_split(iqr_len)
    '                nameColm = nameColm.Replace("[", "").Replace("]", "")
    '                If dbSource.Columns.Contains(nameColm) Then
    '                    Dim datavalue As String = r(nameColm)
    '                    dataQRCode = dataQRCode.Replace(nameColm, datavalue)
    '                End If
    '            Next

    '            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
    '            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
    '            'qRLinkL = Replace(qRLinkL, "'", "''")
    '            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
    '            Dim ss As Query = Query.From("QRCode").Transaction(True)
    '            ss.Where("Document No_").Is(r("Code"))
    '            If ss.ToTable.Rows.Count = 0 Then

    '                Dim CurrentDate As Date = Now()
    '                Dim Day As String = CurrentDate.Day
    '                Dim Month As String = CurrentDate.Month
    '                Dim Year As String = CurrentDate.Year
    '                Dim PathDate As String = Day & Month & Year & "/"
    '                Dim qr As Query = Query.From("QR Setup").Select("[Object Folder],[QR Height] Height,[QR Width] Width,iIconSize Size")
    '                Dim ObjectFolder As String = qr.Value("Object Folder")

    '                'Dim FullPath As String = Framework.MapPath(ObjectFolder) & PathDate '& "Pictures\Document\"
    '                'If Not Directory.Exists(FullPath) Then
    '                '    Directory.CreateDirectory(FullPath)
    '                'End If
    '                'If Not Directory.Exists(FullPath) Then
    '                '    Directory.CreateDirectory(FullPath)
    '                'End If
    '                Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")
    '                If Not Directory.Exists(str3) Then
    '                    Directory.CreateDirectory(str3)
    '                End If
    '                dataQR = dataQRCode
    '                Dim qRLinkL = Replace(dataQR, "#", "-")
    '                qRLinkL = Replace(qRLinkL, "/", "-")
    '                'qRLinkL = Replace(qRLinkL, "'", "''")
    '                qRLinkL = Replace(qRLinkL, "*", "-")
    '                Dim sLevel As String = ""
    '                Dim imageQRCode As String = ""
    '                Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

    '                Dim qrGenerator = New QRCoder.QRCodeGenerator()
    '                Dim qrCodeData As QRCoder.QRCodeData
    '                qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
    '                Dim qrCode As QRCoder.QRCode
    '                qrCode = New QRCoder.QRCode(qrCodeData)
    '                Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
    '                Dim iIconSize As Integer = 4
    '                Dim iQRWidth As Integer = 70
    '                Dim iQRHeight As Integer = 70
    '                If qr.Value("Size") <> 0 Then iIconSize = qr.Value("Size")
    '                If qr.Value("Height") <> 0 Then iQRHeight = qr.Value("Height")
    '                If qr.Value("Width") <> 0 Then iQRWidth = qr.Value("Width")
    '                Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

    '                Dim qrImage As System.Drawing.Image
    '                qrImage = qrCode.GetGraphic(20, "Black", "White", False)
    '                Dim imageFormat As System.Drawing.Imaging.ImageFormat
    '                imageFormat = imageFormat.Jpeg
    '                qRLinkL = qRLinkL.ToString().Replace(" ", "")
    '                qRLinkL = qRLinkL.ToString().Replace(":", "")

    '                If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
    '                    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
    '                End If
    '                imageQRCode = str3 & "" & qRLinkL & ".jpg"
    '                Dim QueryInsert As Query = Query.Entity("QRCode").Insert
    '                QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
    '                QueryInsert.Fields("QRCode") = dataQR
    '                QueryInsert.Fields("Serial No_") = qRLinkL
    '                QueryInsert.Fields("Name") = qRLinkL
    '                QueryInsert.Fields("Description") = qRLinkL
    '                QueryInsert.Fields("Item No_") = ""
    '                QueryInsert.Fields("Item Variant") = ""
    '                QueryInsert.Fields("Lot No_") = ""
    '                QueryInsert.Fields("Document Type") = 6
    '                ' QueryInsert.Fields("Type") = 6
    '                QueryInsert.Fields("Source Type") = 6
    '                QueryInsert.Fields("Source No_") = r("Code")
    '                QueryInsert.Fields("Document No_") = r("Code")
    '                QueryInsert.Fields("External Document No_") = ""

    '                QueryInsert.Fields("Quantity") = 1
    '                QueryInsert.Fields("Unit Of Measure") = ""
    '                QueryInsert.Fields("Qty Unit Of Measure") = 1
    '                QueryInsert.Fields("Login ID") = Framework.UserID
    '                QueryInsert.Fields("System Date") = Now()
    '                QueryInsert.Fields("Expired Date") = Now()
    '                QueryInsert.Fields("Mfg Date") = Now()
    '                QueryInsert.Fields("Kit") = 0
    '                QueryInsert.Execute()

    '                Dim QUpdateTableID As Query = Query.Update(tableID)
    '                QUpdateTableID.WhereAs("RowID") = r("RowID")
    '                QUpdateTableID.Fields("QRCode") = dataQR
    '                QUpdateTableID.Fields("QRCode URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
    '                QUpdateTableID.Execute()
    '            End If

    '        End If
    '        Query.EndTransaction()
    '        WorkSession.MsgML("Successful!")
    '        Sender.RefreshSource()
    '        Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=6", r("Code")))
    '    Catch ex As Exception
    '        Query.RollBack()
    '        WorkSession.MsgML(ex.ToString())
    '    End Try
    'End Sub

    Public Sub FindQRCodeInforType_Split(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come To FindQRCodeInfor1 ")
        Dim result As New Hashtable
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            'Dim tblline As DataTable = q.ToTable

            If q.RecordCount <= 0 Then
                result("msg") = "Not In Our system "
            Else

                Dim arrValue() As String = qrCode.Split("*")
                'Build validate where clause
                Dim Type As String = arrValue(0)
                Dim ItemNo As String = arrValue(1)
                Dim PO As String = arrValue(2)
                Dim Packing As String = arrValue(3)

                Dim qqq As Query = Query.From("Logistics List").Transaction(True)
                qqq.Where("Packing No_").Is(Packing)
                If qqq.ToTable.Rows.Count <= 0 Then
                    result("msg") = "Packing list Is Not In Our system "
                    Return
                End If

                Dim item As DataRow = qqq.TakeRow
                ' For Each item As Object In tblline.Rows
                result("URL") = item("URL")
                result("QRCode") = item("QRCode")
                result("Serial No_") = item("Serial No_")
                result("Name") = item("Serial No_")

                result("Item No_") = item("Item No_")
                result("Item Variant") = item("Item Variant")
                result("Lot No_") = item("Lot No_")
                result("Document No_") = item("Document No_")
                result("Document Type") = item("Document Type")
                'result("Source Type") = item("Source Type")
                result("Description") = item("Description")
                result("Quantity") = item("Quantity")
                result("Unit Of Measure") = item("Unit Of Measure")
                result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
                result("Login ID") = item("Login ID")
                result("System Date") = item("System Date")
                result("Expired Date") = item("Expired Date")
                result("Mfg Date") = item("Mfg Date")
                ' Next
            End If

            'Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
            result("_ERROR_") = ex.ToString()
        End Try

        'Inform that trigger save order success
        sender.Response("result") = result

    End Sub

    Public Sub scanqrcode01(ByVal sender As WXSource, ByVal e As WXArgs)
        'WorkSession.MsgML("scanqrcode01!")
        'Get QR code scanned and submit from app client
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            'Dim SerialNo As String = ""
            Dim DocumentNo As String = ""
            Dim ModuleType As Integer = 0 'q.Value("Document Type")
            Dim SourceType As Integer = 0 ' q.Value("Source Type")
            Dim InvoiceCode As String = ""

            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                'SerialNo = r("Serial No_")
                DocumentNo = r("Document No_")
            End If

            Dim q As Query = Query.From("QRCode Document").Transaction(True)
            q.Where("QRCode").Is(qrCode)
            Dim tblline As DataTable = q.ToTable
            Dim EntityName As String = "QRCode Document"
            Dim filter As String = String.Format("[QRCode]='{0}'", qrCode)

            If tblline.Rows.Count <= 0 Then
                WorkSession.MsgML("Not in Our system {0}!", qrCode)
                Return
            Else
                WorkSession.MsgML("scanqrcode01!")

                ModuleType = q.Value("Document Type")
                SourceType = q.Value("Source Type")
                'SerialNo = q.Value("Serial No_")
                DocumentNo = q.Value("Document No_")
                EntityName = "QRCode Document"
                filter = String.Format("[QRCode]='{0}'", qrCode)
            End If

            Select Case ModuleType
                Case 0
                    Select Case SourceType
                        Case 0
                            q = Query.From("Gen_ Journal Line").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "Gen_ Journal Line"
                            Else
                                EntityName = "Gen_ Journal Line Posted"
                            End If
                            filter = String.Format("[Document No_]='{0}'", DocumentNo)
                        Case 1
                            q = Query.From("Suggested Payment Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Suggested Payment Header"
                            Else
                                EntityName = "eAs Purchase Payment Header"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 2
                            q = Query.From("Purchase Payment Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Payment Header"
                            Else
                                EntityName = "eAs Purchase Payment Header Posted"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 3
                            q = Query.From("Suggested Receipt Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Suggested Receipt Header"
                            Else
                                EntityName = "eAs Sales Receipt Header"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 4
                            q = Query.From("Sales Receipt Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Sales Receipt Header"
                            Else
                                EntityName = "eAs Sales Receipt Header Posted"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                    End Select
                Case 1 'bank
                    Select Case SourceType
                        Case 0
                            EntityName = "eAs Credit Contract"
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 1
                            q = Query.From("Inter Company Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Inter Company Header"
                            Else
                                EntityName = "eAs Inter Company Header Posted"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                    End Select

                Case 2 'sales
                    Select Case SourceType
                        Case 0
                            q = Query.From("Sales Quote Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Sales Quote"
                            Else
                                EntityName = "eAs Sales Order"
                            End If

                            filter = String.Format("[No_]='{0}'", DocumentNo)

                        Case 1
                            q = Query.From("Sales Blanket Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Sales Blanket Order"
                            Else
                                EntityName = "eAs Sales Order"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 2
                            q = Query.From("Sales Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Sales Order"
                            Else
                                EntityName = "eAs Sales Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                            EntityName = "eAs Sales Order"

                        Case 3
                            q = Query.From("Sales Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Sales Invoice"
                            Else
                                EntityName = "eAs Sales Posted Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 4 'Cretdit
                            q = Query.From("Sales Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            q.And("Document Type").Is(1)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Sales Credit Memo"
                            Else
                                EntityName = "eAs Sales Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 5
                            q = Query.From("Sales Return Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            q.And("Document Type").Is(1)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Sales Return Order"
                            Else
                                EntityName = "eAs Sales Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 6
                            EntityName = "eAs Sales Posted Invoice"
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                    End Select
                Case 3 'Purchase
                    Select Case SourceType
                        Case 0
                            q = Query.From("Purchase Quote Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Quote"
                            Else
                                EntityName = "eAs Purchase Order"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 1
                            q = Query.From("Purchase Blanket Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Blanket Order"
                            Else
                                EntityName = "eAs Purchase Order"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 2
                            q = Query.From("Purchase Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Order"
                            Else
                                EntityName = "eAs Purchase Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 3
                            q = Query.From("Purchase Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Invoice"
                            Else
                                EntityName = "eAs Purchase Posted Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 4
                            q = Query.From("Purchase Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            q.And("Document Type").Is(1)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Credit Memo"
                            Else
                                EntityName = "eAs Purchase Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 5
                            q = Query.From("Purchase Return Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Return Order"
                            Else
                                EntityName = "eAs Purchase Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 6
                            EntityName = "eAs Purchase Posted Invoice"
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                    End Select
                Case 4 'Stock
                    Select Case SourceType
                        Case 0
                            q = Query.From("Purchase Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Order"
                            Else
                                EntityName = "eAs Purchase Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 1
                            q = Query.From("Sales Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Sales Order"
                            Else
                                EntityName = "eAs Sales Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)

                        Case 2 'Transfer
                            q = Query.From("Transfer Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Transfer Order"
                            Else
                                EntityName = "Transfer Order Header Posted"
                            End If

                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 3 ' Planning Transfer
                            q = Query.From("Transfer Planning Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "Transfer Planning Header"
                            Else
                                q = Query.From("Transfer Order Header").Transaction(True)
                                q.Where("No_").Is(DocumentNo)
                                If q.RecordCount > 0 Then
                                    EntityName = "eAs Transfer Order"
                                Else
                                    EntityName = "Transfer Order Header Posted"
                                End If
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 4
                            q = Query.From("Production Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "MFG Production Order Header"
                                filter = String.Format("[No_]='{0}'", DocumentNo)
                            Else
                                EntityName = "MFG Work Order Header"
                                filter = String.Format("[No_]='{0}'", DocumentNo)
                            End If
                        Case 4
                            q = Query.From("Production Order Component").Transaction(True)
                            q.Where("Prod_ Order No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "MFG Production Order Component"
                                filter = String.Format("[Prod_ Order No_]='{0}'", DocumentNo)
                            Else
                                EntityName = "Value Entry"
                                filter = String.Format("[Document No_]='{0}'", DocumentNo)
                            End If

                        Case Else
                            q = Query.From("Item Journal Line").Transaction(True)
                            q.Where("Document No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Item Journal Line"
                            Else
                                EntityName = "Item Journal Line Posted"
                            End If
                            filter = String.Format("[Document No_]='{0}'", DocumentNo)
                    End Select

                Case 5 'HR
                    Select Case SourceType
                        Case 0
                            EntityName = "Employee Absence Register"
                            filter = String.Format("[Document No_]='{0}'", DocumentNo)
                        Case 1
                            EntityName = "Employee Overtime Register"
                            filter = String.Format("[Document No_]='{0}'", DocumentNo)
                        Case 2
                            EntityName = "Employee Timesheet"
                            filter = String.Format("[Employee No_]='{0}'", DocumentNo)
                        Case 3
                            EntityName = "HR Employee Labor Contract"
                            filter = String.Format("[Contract No]='{0}'", DocumentNo)
                    End Select
                Case 6 'Asset
                    Select Case SourceType
                        Case 0
                            q = Query.From("Purchase Quote Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Quote"
                            Else
                                EntityName = "eAs Purchase Order"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 1
                            q = Query.From("Purchase Blanket Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Blanket Order"
                            Else
                                EntityName = "eAs Purchase Order"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 2
                            q = Query.From("Purchase Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Order"
                            Else
                                EntityName = "eAs Purchase Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 3
                            q = Query.From("Purchase Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Invoice"
                            Else
                                EntityName = "eAs Purchase Posted Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 4
                            q = Query.From("Purchase Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            q.And("Document Type").Is(1)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Credit Memo"
                            Else
                                EntityName = "eAs Purchase Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 5
                            q = Query.From("Purchase Return Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Purchase Return Order"
                            Else
                                EntityName = "eAs Purchase Invoice"
                            End If
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 6
                            EntityName = "eAs Purchase Posted Invoice"
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case Else
                            q = Query.From("Gen_ Journal Line").Transaction(True)
                            q.Where("Document No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "Gen_ Journal Line"
                            Else
                                EntityName = "Gen_ Journal Line Posted"
                            End If
                            filter = String.Format("[Document No_]='{0}'", DocumentNo)
                    End Select
                Case 7 'CRM
                    Select Case SourceType
                        Case 0
                            EntityName = "Account Profile Answer"
                            filter = String.Format("[Account No_]='{0}'", DocumentNo)
                        Case 1
                            q = Query.From("Interaction Log Entry").Transaction(True)
                            q.Where("Document No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Interaction Log Entry"
                                filter = String.Format("[Document No_]='{0}'", DocumentNo)
                            Else
                                EntityName = "Contact Ledger Entry"
                                filter = String.Format("[Document No_]='{0}'", DocumentNo)
                            End If
                        Case 2
                            EntityName = "eAs Opportunity"
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 3
                            EntityName = "Sales Contract"
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 4
                            EntityName = "eAs Complaint Order Header"
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 5
                            EntityName = "Task Ledger Entry"
                            filter = String.Format("[External Document No_]='{0}'", DocumentNo)
                        Case 6
                            EntityName = "Messager"
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                    End Select
                Case 8 'Project
                    Select Case SourceType
                        Case 0
                            EntityName = "Resource Skill"
                            filter = String.Format("[Resource No_]='{0}'", DocumentNo)
                        Case 1
                            q = Query.From("Interaction Log Entry").Transaction(True)
                            q.Where("Document No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "eAs Interaction Log Entry"
                                filter = String.Format("[Document No_]='{0}'", DocumentNo)
                            Else
                                EntityName = "Contact Ledger Entry"
                                filter = String.Format("[Document No_]='{0}'", DocumentNo)
                            End If
                        Case 2
                            EntityName = "eAs Opportunity"
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 3
                            EntityName = "Task Knowledge Base"
                            filter = String.Format("[Task No_]='{0}'", DocumentNo)
                        Case 4
                            EntityName = "eAs Complaint Order Header"
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 5
                            EntityName = "Task Ledger Entry"
                            filter = String.Format("[External Document No_]='{0}'", DocumentNo)
                        Case 6
                            EntityName = "Messager"
                            filter = String.Format("[No_]='{0}'", DocumentNo)
                    End Select
                Case 9
                    Select Case SourceType
                        Case 0
                            q = Query.From("Planning WO Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "MFG Planning WO Header"
                                filter = String.Format("[No_]='{0}'", DocumentNo)
                            Else
                                EntityName = "MFG Work Order Header"
                                filter = String.Format("[No_]='{0}'", DocumentNo)
                            End If
                        Case 1
                            q = Query.From("Work Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "MFG Work Order Header"
                                filter = String.Format("[No_]='{0}'", DocumentNo)
                            Else
                                EntityName = "MFG Production Order Header"
                                filter = String.Format("[No_]='{0}'", DocumentNo)
                            End If
                        Case 2
                            q = Query.From("Production Order Header").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount > 0 Then
                                EntityName = "MFG Production Order Header"
                                filter = String.Format("[No_]='{0}'", DocumentNo)
                            Else
                                EntityName = "MFG Production Order Header"
                                filter = String.Format("[No_]='{0}'", DocumentNo)
                            End If
                    End Select

                Case 10
                Case 11 'Online
                    Select Case SourceType
                        Case 1 'Maintenance
                            q = Query.From("Maintenance Header Posted").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount = 0 Then
                                EntityName = "Maintenance Header"
                            Else
                                EntityName = "Maintenance Header Posted"
                            End If

                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 0 'Ecommerce
                            q = Query.From("eCommerce Order Header Posted").Transaction(True)
                            q.Where("No_").Is(DocumentNo)
                            If q.RecordCount = 0 Then
                                EntityName = "eCommerce Order Header"
                            Else
                                EntityName = "eCommerce Order Header Posted"
                            End If

                            filter = String.Format("[No_]='{0}'", DocumentNo)
                        Case 2 'Account
                            q = Query.From("Account").Transaction(True)
                            q.Where("User ID").Is(DocumentNo)
                            If q.RecordCount = 0 Then
                                EntityName = "Account"
                            Else
                                EntityName = "User Setup"
                            End If

                            filter = String.Format("[User ID]='{0}'", DocumentNo)
                    End Select

            End Select

            Framework.OpenEntity(EntityName, filter)

            Query.EndTransaction()

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    Public Sub scanqrcode02(ByVal sender As WXSource, ByVal e As WXArgs) 'scan nvl
        WorkSession.MsgML("scanqrcode02!")
        Dim result As New Hashtable

        Dim LoginID As String = Framework.UserID
        Dim AppUserID As String = Framework.EmptyNull(WorkSession.Read(“FrontEndAppUserId”))
        If AppUserID <> "" Then
            LoginID = AppUserID
        End If

        Try
            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then

                qrCode = "MNLVAC0076*DMND/00009*HZCI231027*2"

            End If
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)
            If q.RecordCount <= 0 Then

                result.Add("msg", "Not in Our system ")
            Else
                'Dim item As DataRow = qqq.TakeRow
                Dim arrValue() As String = qrCode.Split("*")
                Dim rowID As Integer = arrValue(3)
                Dim QPackinglst As Query = Query.From("Packing List").Transaction(True)
                QPackinglst.WhereAs("RowID") = rowID
                If QPackinglst.RecordCount > 0 Then
                    Dim qEntry As Query = Query.From("QRCode Entry").Transaction(True)
                    qEntry.Where("QRCode").Is(qrCode)


                    result.Add("QRCode", qrCode)
                    result.Add("Style", QPackinglst.Value("Style"))
                    result.Add("PO No_", QPackinglst.Value("PO No_"))   'Đơn hàng NCC
                    result.Add("External Document No_", QPackinglst.Value("External Document No_")) 'Hoá đơn NCC
                    result.Add("Posting Date", QPackinglst.Value("Posting Date")) 'Ngày nhập kho
                    result.Add("Item category", QPackinglst.Value("Item category"))
                    result.Add("Code Number", QPackinglst.Value("Item category")) 'Số code vải
                    result.Add("Component", QPackinglst.Value("Component")) 'Thành phần vải
                    result.Add("Color", QPackinglst.Value("Color")) 'Màu vải
                    result.Add("Weight Of Length", QPackinglst.Value("Weight Of Length")) 'Trọng lượng gam/m2 của vải
                    result.Add("Size", QPackinglst.Value("Size")) 'Đơn vị tính theo chiều dài CM/INCH
                    result.Add("Lot No_", QPackinglst.Value("Lot No_")) 'Lô/mẻ nhuộm vải
                    result.Add("Color light", QPackinglst.Value("Color light")) 'ánh màu
                    result.Add("Roll", QPackinglst.Value("Roll")) 'Roll cây vải
                    result.Add("Quantity", QPackinglst.Value("Quantity")) 'Đơn vị tính theo chiều dài YARD/MÉT
                    result.Add("Unit of Measure", QPackinglst.Value("Unit of Measure")) 'Unit of Measure
                    result.Add("Qty_ Unit of Measure", QPackinglst.Value("Qty_ Unit of Measure"))
                    result.Add("Net Weight", QPackinglst.Value("Net Weight")) 'Đơn vị tính theo trong lượng net KG/LBS
                    result.Add("Gross Weight", QPackinglst.Value("Gross Weight")) 'Đơn vị tính theo trong lượng Gross KG/LBS

                    result.Add("Bin", qEntry.Value("Bin")) 'Khung

                Else
                    result.Add("msg", "Not in Our system ") 'Khung

                End If



            End If

            Dim ClientEntity As New ClientContext("QRCodeScanPackinglst")
            Dim parameters As DataRow = ClientEntity.Parameters
            For Each entry As DictionaryEntry In result
                parameters(entry.Key) = entry.Value
            Next
            WorkSession.MsgML("qrCode : {0}", qrCode)
            ClientEntity.Show()
        Catch ex As Exception
            result("_ERROR_") = ex.ToString()
        End Try
        sender.Response("result") = result
    End Sub

    'Public Sub scanqrcode02(ByVal sender As WXSource, ByVal e As WXArgs)
    '    WorkSession.MsgML("scanqrcode02!")
    '    Dim result As New Hashtable
    '    'Try
    '    '    'Query.BeginTransaction()

    '    Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
    '    Dim SerialNo As String = ""
    '    If qrCode = "" Then
    '        Dim r As Hashtable = sender.CurrentRow
    '        If r Is Nothing Or r.Count = 0 Then Return
    '        qrCode = r("QRCode")
    '        SerialNo = r("Serial No_")
    '    End If
    '    WorkSession.MsgML("qrCode : {0}", qrCode)
    'End Sub
    Public Sub scanqrcode03(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("scanqrcode03!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub scanqrcode04(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("scanqrcode04!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub scanqrcode05(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("scanqrcode05!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub

    'Public Sub scanqrcode07(ByVal sender As WXSource, ByVal e As WXArgs)
    '    WorkSession.MsgML("scanqrcode07!")
    '    Dim result As New Hashtable
    '    'Try
    '    '    'Query.BeginTransaction()

    '    Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
    '    Dim SerialNo As String = ""
    '    If qrCode = "" Then
    '        Dim r As Hashtable = sender.CurrentRow
    '        If r Is Nothing Or r.Count = 0 Then Return
    '        qrCode = r("QRCode")
    '        SerialNo = r("Serial No_")
    '    End If
    '    WorkSession.MsgML("qrCode : {0}", qrCode)
    'End Sub

    'Public Sub scanqrcode06(ByVal sender As WXSource, ByVal e As WXArgs) 'scan nvl
    '    WorkSession.MsgML("scanqrcode08!")

    '    Try
    '        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
    '        Dim SerialNo As String = ""
    '        If qrCode = "" Then
    '            qrCode = "MNLVAC0076*DMND/00009*HZCI231027*2"
    '        End If
    '        sender.SetParameter("QRCode", qrCode)
    '    Catch ex As Exception

    '    End Try

    'End Sub

    'Public Sub scanqrcode08(ByVal sender As WXSource, ByVal e As WXArgs) 'scan nvl
    '    WorkSession.MsgML("scanqrcode08!")
    '    Dim result As New Hashtable

    '    Dim LoginID As String = Framework.UserID
    '    Dim AppUserID As String = Framework.EmptyNull(WorkSession.Read(“FrontEndAppUserId”))
    '    If AppUserID <> "" Then
    '        LoginID = AppUserID
    '    End If
    '    Dim nameEntity As String = sender.Entity.Name


    '    Try
    '        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
    '        Dim SerialNo As String = ""
    '        If qrCode = "" Then

    '            qrCode = "MNLVAC0076*DMND/00009*HZCI231027*2"

    '        End If
    '        Dim q As Query = Query.From("QRCode").Transaction(True)
    '        q.Where("QRCode").Is(qrCode)
    '        Dim ItemNo_ As String = ""
    '        Dim QItem As Query = Query.From("Item").Transaction(True)
    '        If q.RecordCount <= 0 Then

    '            result.Add("msg", "Not in Our system ")
    '        Else
    '            ItemNo_ = q.Value("Item No_")
    '            'Dim item As DataRow = qqq.TakeRow
    '            Dim arrValue() As String = qrCode.Split("*")
    '            Dim rowID As Integer = arrValue(3)
    '            Dim QPackinglst As Query = Query.From("Packing List").Transaction(True)
    '            QPackinglst.WhereAs("RowID") = rowID
    '            If QPackinglst.RecordCount > 0 Then
    '                Dim qEntry As Query = Query.From("QRCode Entry").Transaction(True)
    '                qEntry.Where("QRCode").Is(qrCode)


    '                QItem.WhereAs("No_") = ItemNo_

    '                result.Add("QRCode", qrCode)
    '                result.Add("Style", QPackinglst.Value("Style"))
    '                result.Add("PO No_", QPackinglst.Value("PO No_"))   'Đơn hàng NCC
    '                result.Add("External Document No_", QPackinglst.Value("External Document No_")) 'Hoá đơn NCC
    '                result.Add("Posting Date", QPackinglst.Value("Posting Date")) 'Ngày nhập kho
    '                result.Add("Item category", QPackinglst.Value("Item category"))
    '                result.Add("Code Number", QPackinglst.Value("Item category")) 'Số code vải
    '                result.Add("Component", QPackinglst.Value("Component")) 'Thành phần vải
    '                result.Add("Color", QPackinglst.Value("Color")) 'Màu vải
    '                result.Add("Weight Of Length", QPackinglst.Value("Weight Of Length")) 'Trọng lượng gam/m2 của vải
    '                result.Add("Size", QPackinglst.Value("Size")) 'Đơn vị tính theo chiều dài CM/INCH
    '                result.Add("Lot No_", QPackinglst.Value("Lot No_")) 'Lô/mẻ nhuộm vải
    '                result.Add("Color light", QPackinglst.Value("Color light")) 'ánh màu
    '                result.Add("Roll", QPackinglst.Value("Roll")) 'Roll cây vải
    '                result.Add("Quantity", QPackinglst.Value("Quantity")) 'Đơn vị tính theo chiều dài YARD/MÉT
    '                result.Add("Unit of Measure", QPackinglst.Value("Unit of Measure")) 'Unit of Measure
    '                result.Add("Qty_ Unit of Measure", QPackinglst.Value("Qty_ Unit of Measure"))
    '                result.Add("Net Weight", QPackinglst.Value("Net Weight")) 'Đơn vị tính theo trong lượng net KG/LBS
    '                result.Add("Gross Weight", QPackinglst.Value("Gross Weight")) 'Đơn vị tính theo trong lượng Gross KG/LBS

    '                result.Add("Bin", qEntry.Value("Bin")) 'Khung

    '                result.Add("Item Group", QItem.Value("Item Group 1")) 'Item Group
    '                result.Add("PackingLst", QPackinglst.Value("No_")) 'Item Group

    '                result.Add("Item No_", ItemNo_) 'ItemNo_
    '            Else
    '                result.Add("msg", "Not in Our system ") 'Khung

    '            End If



    '        End If

    '        Select Case nameEntity
    '            Case "Appview_packinglst_Info_Item"
    '                Dim OpenEntity As String = "QRCodeScanPackinglst"
    '                If ItemNo_ <> "" Then

    '                    Dim IVItemPostingGroup As String = QItem.Value("Inventory Posting Group")
    '                    Dim QItemItemPostingGroup As Query = Query.From("Inventory Posting Group").Transaction(True)
    '                    QItemItemPostingGroup.WhereAs("Code") = IVItemPostingGroup
    '                    OpenEntity = ISDBNULL(QItemItemPostingGroup.Value("Open Entity Info"), "QRCodeScanPackinglst")

    '                End If


    '                Dim ClientEntity As New ClientContext(OpenEntity)
    '                Dim parameters As DataRow = ClientEntity.Parameters
    '                For Each entry As DictionaryEntry In result
    '                    If parameters.Table.Columns.Contains(entry.Key) Then
    '                        parameters(entry.Key) = entry.Value
    '                    End If

    '                Next
    '                WorkSession.MsgML("qrCode : {0}", qrCode)
    '                ClientEntity.Show()
    '            Case "Appview_packinglst_Info_Bincode"
    '                Framework.OpenEntity("View QRCode Bin PackingLst", String.Format("[Bin]=N'{0}'", qrCode))
    '            Case "Appview_packinglst_Info_Zonecode"
    '                Framework.OpenEntity("View QRCode Zone PackingLst", String.Format("[Bin]=N'{0}'", qrCode))
    '        End Select


    '    Catch ex As Exception
    '        result("_ERROR_") = ex.ToString()
    '    End Try
    '    sender.Response("result") = result
    'End Sub

    'Public Sub scanqrcode08(ByVal sender As WXSource, ByVal e As WXArgs) 'scan nvl
    '    WorkSession.MsgML("scanqrcode08!")
    '    Dim result As New Hashtable

    '    Dim LoginID As String = Framework.UserID
    '    Dim AppUserID As String = Framework.EmptyNull(WorkSession.Read(“FrontEndAppUserId”))
    '    If AppUserID <> "" Then
    '        LoginID = AppUserID
    '    End If

    '    Try
    '        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
    '        Dim SerialNo As String = ""
    '        If qrCode = "" Then

    '            qrCode = "MNLVAC0076*DMND/00009*HZCI231027*2"

    '        End If
    '        Dim q As Query = Query.From("QRCode").Transaction(True)
    '        q.Where("QRCode").Is(qrCode)
    '        Dim ItemNo_ As String = ""
    '        Dim QItem As Query = Query.From("Item").Transaction(True)
    '        If q.RecordCount <= 0 Then

    '            result.Add("msg", "Not in Our system ")
    '        Else
    '            ItemNo_ = q.Value("Item No_")
    '            'Dim item As DataRow = qqq.TakeRow
    '            Dim arrValue() As String = qrCode.Split("*")
    '            Dim rowID As Integer = arrValue(3)
    '            Dim QPackinglst As Query = Query.From("Packing List").Transaction(True)
    '            QPackinglst.WhereAs("RowID") = rowID
    '            If QPackinglst.RecordCount > 0 Then
    '                Dim qEntry As Query = Query.From("QRCode Entry").Transaction(True)
    '                qEntry.Where("QRCode").Is(qrCode)


    '                QItem.WhereAs("No_") = ItemNo_

    '                result.Add("QRCode", qrCode)
    '                result.Add("Style", QPackinglst.Value("Style"))
    '                result.Add("PO No_", QPackinglst.Value("PO No_"))   'Đơn hàng NCC
    '                result.Add("External Document No_", QPackinglst.Value("External Document No_")) 'Hoá đơn NCC
    '                result.Add("Posting Date", QPackinglst.Value("Posting Date")) 'Ngày nhập kho
    '                result.Add("Item category", QPackinglst.Value("Item category"))
    '                result.Add("Code Number", QPackinglst.Value("Item category")) 'Số code vải
    '                result.Add("Component", QPackinglst.Value("Component")) 'Thành phần vải
    '                result.Add("Color", QPackinglst.Value("Color")) 'Màu vải
    '                result.Add("Weight Of Length", QPackinglst.Value("Weight Of Length")) 'Trọng lượng gam/m2 của vải
    '                result.Add("Size", QPackinglst.Value("Size")) 'Đơn vị tính theo chiều dài CM/INCH
    '                result.Add("Lot No_", QPackinglst.Value("Lot No_")) 'Lô/mẻ nhuộm vải
    '                result.Add("Color light", QPackinglst.Value("Color light")) 'ánh màu
    '                result.Add("Roll", QPackinglst.Value("Roll")) 'Roll cây vải
    '                result.Add("Quantity", QPackinglst.Value("Quantity")) 'Đơn vị tính theo chiều dài YARD/MÉT
    '                result.Add("Unit of Measure", QPackinglst.Value("Unit of Measure")) 'Unit of Measure
    '                result.Add("Qty_ Unit of Measure", QPackinglst.Value("Qty_ Unit of Measure"))
    '                result.Add("Net Weight", QPackinglst.Value("Net Weight")) 'Đơn vị tính theo trong lượng net KG/LBS
    '                result.Add("Gross Weight", QPackinglst.Value("Gross Weight")) 'Đơn vị tính theo trong lượng Gross KG/LBS

    '                result.Add("Bin", qEntry.Value("Bin")) 'Khung

    '                result.Add("Item Group", QItem.Value("Item Group 1")) 'Item Group
    '                result.Add("PackingLst", QPackinglst.Value("No_")) 'Item Group

    '                result.Add("Item No_", ItemNo_) 'ItemNo_
    '            Else
    '                result.Add("msg", "Not in Our system ") 'Khung

    '            End If



    '        End If

    '        Dim OpenEntity As String = "QRCodeScanPackinglst"
    '        If ItemNo_ <> "" Then

    '            Dim IVItemPostingGroup As String = QItem.Value("Inventory Posting Group")
    '            Dim QItemItemPostingGroup As Query = Query.From("Inventory Posting Group").Transaction(True)
    '            QItemItemPostingGroup.WhereAs("Code") = IVItemPostingGroup
    '            OpenEntity = ISDBNULL(QItemItemPostingGroup.Value("Open Entity Info"), "QRCodeScanPackinglst")

    '        End If


    '        Dim ClientEntity As New ClientContext(OpenEntity)
    '        Dim parameters As DataRow = ClientEntity.Parameters
    '        For Each entry As DictionaryEntry In result
    '            If parameters.Table.Columns.Contains(entry.Key) Then
    '                parameters(entry.Key) = entry.Value
    '            End If

    '        Next
    '        WorkSession.MsgML("qrCode : {0}", qrCode)
    '        ClientEntity.Show()
    '    Catch ex As Exception
    '        result("_ERROR_") = ex.ToString()
    '    End Try
    '    sender.Response("result") = result
    'End Sub

    Public Sub ScanQRCodeInforType0(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to ScanQRCodeInforType0 !")
        Dim result As New Hashtable
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            'Dim tblline As DataTable = q.ToTable

            If q.RecordCount <= 0 Then
                result("msg") = "Not in Our system "
            Else

                Dim arrValue() As String = qrCode.Split("*")
                'Build validate where clause

                Dim ItemNo As String = arrValue(0)
                Dim PO As String = arrValue(1)
                Dim LOTNO As String = arrValue(2)

                Dim qqq As Query = Query.From("Item Purchase Order").Transaction(True)
                qqq.Where("Packing No_").Is(PO)
                If qqq.ToTable.Rows.Count <= 0 Then
                    result("msg") = "Purchase Order is not in Our system "
                    Return
                End If

                Dim item As DataRow = qqq.TakeRow
                ' For Each item As Object In tblline.Rows
                result("URL") = item("URL")
                result("QRCode") = item("QRCode")
                result("Serial No_") = item("Serial No_")
                result("Name") = item("Serial No_")

                result("Item No_") = item("Item No_")
                result("Item Variant") = item("Item Variant")
                result("Lot No_") = item("Lot No_")
                result("Document No_") = item("Document No_")
                result("Document Type") = item("Document Type")
                'result("Source Type") = 0'item("Source Type")
                result("Description") = item("Description")
                result("Quantity") = item("Quantity")
                result("Unit Of Measure") = item("Unit Of Measure")
                result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
                result("Login ID") = item("Login ID")
                result("System Date") = item("System Date")
                result("Expired Date") = item("Expired Date")
                result("Mfg Date") = item("Mfg Date")
                ' Next
            End If

            'Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
            result("_ERROR_") = ex.ToString()
        End Try

        'Inform that trigger save order success
        sender.Response("result") = result

    End Sub
    'Public Sub SCanQRCodeInforType1(ByVal sender As WXSource, ByVal e As WXArgs)
    '    'Get QR code scanned and submit from app client
    '    WorkSession.MsgML("Well come to SCanQRCodeInforType1 ")
    '    Dim result As New Hashtable
    '    Try
    '        'Query.BeginTransaction()

    '        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
    '        Dim SerialNo As String = ""
    '        If qrCode = "" Then
    '            Dim r As Hashtable = sender.CurrentRow
    '            If r Is Nothing Or r.Count = 0 Then Return
    '            qrCode = r("QRCode")
    '            SerialNo = r("Serial No_")
    '        End If

    '        Dim InvoiceCode As String = ""
    '        Dim q As Query = Query.From("QRCode").Transaction(True)
    '        q.Where("QRCode").Is(qrCode)

    '        'Dim tblline As DataTable = q.ToTable

    '        If q.RecordCount <= 0 Then
    '            result("msg") = "Not in Our system "
    '        Else

    '            Dim arrValue() As String = qrCode.Split("*")
    '            'Build validate where clause

    '            Dim ItemNo As String = arrValue(0)
    '            Dim PO As String = arrValue(1)
    '            Dim LOTNO As String = arrValue(2)

    '            Dim qqq As Query = Query.From("Item Purchase Order").Transaction(True)
    '            qqq.Where("Packing No_").Is(PO)
    '            If qqq.ToTable.Rows.Count <= 0 Then
    '                result("msg") = "Purchase Order is not in Our system "
    '                Return
    '            End If

    '            Dim item As DataRow = qqq.TakeRow
    '            ' For Each item As Object In tblline.Rows
    '            result("URL") = item("URL")
    '            result("QRCode") = item("QRCode")
    '            result("Serial No_") = item("Serial No_")
    '            result("Name") = item("Serial No_")

    '            result("Item No_") = item("Item No_")
    '            result("Item Variant") = item("Item Variant")
    '            result("Lot No_") = item("Lot No_")
    '            result("Document No_") = item("Document No_")
    '            result("Document Type") = item("Document Type")
    '            'result("Source Type") = 0'item("Source Type")
    '            result("Description") = item("Description")
    '            result("Quantity") = item("Quantity")
    '            result("Unit Of Measure") = item("Unit Of Measure")
    '            result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
    '            result("Login ID") = item("Login ID")
    '            result("System Date") = item("System Date")
    '            result("Expired Date") = item("Expired Date")
    '            result("Mfg Date") = item("Mfg Date")
    '            ' Next
    '        End If

    '        'Query.EndTransaction()
    '    Catch ex As Exception
    '        Query.RollBack()
    '        result("_ERROR_") = ex.ToString()
    '    End Try

    '    'Inform that trigger save order success
    '    sender.Response("result") = result

    'End Sub
    Public Sub ScanQRCodeInforType2(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to ScanQRCodeInforType2 ")
        Dim result As New Hashtable
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            'Dim tblline As DataTable = q.ToTable

            If q.RecordCount <= 0 Then
                result("msg") = "Not in Our system "
            Else

                Dim arrValue() As String = qrCode.Split("*")
                'Build validate where clause

                Dim ItemNo As String = arrValue(0)
                Dim PO As String = arrValue(1)
                Dim LOTNO As String = arrValue(2)

                Dim qqq As Query = Query.From("Item Purchase Order").Transaction(True)
                qqq.Where("Packing No_").Is(PO)
                If qqq.ToTable.Rows.Count <= 0 Then
                    result("msg") = "Purchase Order is not in Our system "
                    Return
                End If

                Dim item As DataRow = qqq.TakeRow
                ' For Each item As Object In tblline.Rows
                result("URL") = item("URL")
                result("QRCode") = item("QRCode")
                result("Serial No_") = item("Serial No_")
                result("Name") = item("Serial No_")

                result("Item No_") = item("Item No_")
                result("Item Variant") = item("Item Variant")
                result("Lot No_") = item("Lot No_")
                result("Document No_") = item("Document No_")
                result("Document Type") = item("Document Type")
                'result("Source Type") = 0'item("Source Type")
                result("Description") = item("Description")
                result("Quantity") = item("Quantity")
                result("Unit Of Measure") = item("Unit Of Measure")
                result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
                result("Login ID") = item("Login ID")
                result("System Date") = item("System Date")
                result("Expired Date") = item("Expired Date")
                result("Mfg Date") = item("Mfg Date")
                ' Next
            End If

            'Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
            result("_ERROR_") = ex.ToString()
        End Try

        'Inform that trigger save order success
        sender.Response("result") = result

    End Sub
    Public Sub ScanQRCodeInforType3(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to ScanQRCodeInforType3 ")
        Dim result As New Hashtable
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            'Dim tblline As DataTable = q.ToTable

            If q.RecordCount <= 0 Then
                result("msg") = "Not in Our system "
            Else

                Dim arrValue() As String = qrCode.Split("*")
                'Build validate where clause

                Dim ItemNo As String = arrValue(0)
                Dim PO As String = arrValue(1)
                Dim LOTNO As String = arrValue(2)

                Dim qqq As Query = Query.From("Item Purchase Order").Transaction(True)
                qqq.Where("Packing No_").Is(PO)
                If qqq.ToTable.Rows.Count <= 0 Then
                    result("msg") = "Purchase Order is not in Our system "
                    Return
                End If

                Dim item As DataRow = qqq.TakeRow
                ' For Each item As Object In tblline.Rows
                result("URL") = item("URL")
                result("QRCode") = item("QRCode")
                result("Serial No_") = item("Serial No_")
                result("Name") = item("Serial No_")

                result("Item No_") = item("Item No_")
                result("Item Variant") = item("Item Variant")
                result("Lot No_") = item("Lot No_")
                result("Document No_") = item("Document No_")
                result("Document Type") = item("Document Type")
                'result("Source Type") = 0'item("Source Type")
                result("Description") = item("Description")
                result("Quantity") = item("Quantity")
                result("Unit Of Measure") = item("Unit Of Measure")
                result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
                result("Login ID") = item("Login ID")
                result("System Date") = item("System Date")
                result("Expired Date") = item("Expired Date")
                result("Mfg Date") = item("Mfg Date")
                ' Next
            End If

            'Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
            result("_ERROR_") = ex.ToString()
        End Try

        'Inform that trigger save order success
        sender.Response("result") = result

    End Sub
    Public Sub ScanQRCodeInforType4(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to ScanQRCodeInforType4 ")
        Dim result As New Hashtable
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            'Dim tblline As DataTable = q.ToTable

            If q.RecordCount <= 0 Then
                result("msg") = "Not in Our system "
            Else

                Dim arrValue() As String = qrCode.Split("*")
                'Build validate where clause

                Dim ItemNo As String = arrValue(0)
                Dim PO As String = arrValue(1)
                Dim LOTNO As String = arrValue(2)

                Dim qqq As Query = Query.From("Item Purchase Order").Transaction(True)
                qqq.Where("Packing No_").Is(PO)
                If qqq.ToTable.Rows.Count <= 0 Then
                    result("msg") = "Purchase Order is not in Our system "
                    Return
                End If

                Dim item As DataRow = qqq.TakeRow
                ' For Each item As Object In tblline.Rows
                result("URL") = item("URL")
                result("QRCode") = item("QRCode")
                result("Serial No_") = item("Serial No_")
                result("Name") = item("Serial No_")

                result("Item No_") = item("Item No_")
                result("Item Variant") = item("Item Variant")
                result("Lot No_") = item("Lot No_")
                result("Document No_") = item("Document No_")
                result("Document Type") = item("Document Type")
                'result("Source Type") = 0'item("Source Type")
                result("Description") = item("Description")
                result("Quantity") = item("Quantity")
                result("Unit Of Measure") = item("Unit Of Measure")
                result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
                result("Login ID") = item("Login ID")
                result("System Date") = item("System Date")
                result("Expired Date") = item("Expired Date")
                result("Mfg Date") = item("Mfg Date")
                ' Next
            End If

            'Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
            result("_ERROR_") = ex.ToString()
        End Try

        'Inform that trigger save order success
        sender.Response("result") = result

    End Sub
    Public Sub ScanQRCodeInforType5(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to ScanQRCodeInforType5 ")
        Dim result As New Hashtable
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            'Dim tblline As DataTable = q.ToTable

            If q.RecordCount <= 0 Then
                result("msg") = "Not in Our system "
            Else

                Dim arrValue() As String = qrCode.Split("*")
                'Build validate where clause

                Dim ItemNo As String = arrValue(0)
                Dim PO As String = arrValue(1)
                Dim LOTNO As String = arrValue(2)

                Dim qqq As Query = Query.From("Item Purchase Order").Transaction(True)
                qqq.Where("Packing No_").Is(PO)
                If qqq.ToTable.Rows.Count <= 0 Then
                    result("msg") = "Purchase Order is not in Our system "
                    Return
                End If

                Dim item As DataRow = qqq.TakeRow
                ' For Each item As Object In tblline.Rows
                result("URL") = item("URL")
                result("QRCode") = item("QRCode")
                result("Serial No_") = item("Serial No_")
                result("Name") = item("Serial No_")

                result("Item No_") = item("Item No_")
                result("Item Variant") = item("Item Variant")
                result("Lot No_") = item("Lot No_")
                result("Document No_") = item("Document No_")
                result("Document Type") = item("Document Type")
                'result("Source Type") = 0'item("Source Type")
                result("Description") = item("Description")
                result("Quantity") = item("Quantity")
                result("Unit Of Measure") = item("Unit Of Measure")
                result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
                result("Login ID") = item("Login ID")
                result("System Date") = item("System Date")
                result("Expired Date") = item("Expired Date")
                result("Mfg Date") = item("Mfg Date")
                ' Next
            End If

            'Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
            result("_ERROR_") = ex.ToString()
        End Try

        'Inform that trigger save order success
        sender.Response("result") = result

    End Sub
    Public Sub ScanQRCodeInforType6(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to ScanQRCodeInforType6 ")
        Dim result As New Hashtable
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            'Dim tblline As DataTable = q.ToTable

            If q.RecordCount <= 0 Then
                result("msg") = "Not in Our system "
            Else

                Dim arrValue() As String = qrCode.Split("*")
                'Build validate where clause

                Dim ItemNo As String = arrValue(0)
                Dim PO As String = arrValue(1)
                Dim LOTNO As String = arrValue(2)

                Dim qqq As Query = Query.From("Item Purchase Order").Transaction(True)
                qqq.Where("Packing No_").Is(PO)
                If qqq.ToTable.Rows.Count <= 0 Then
                    result("msg") = "Purchase Order is not in Our system "
                    Return
                End If

                Dim item As DataRow = qqq.TakeRow
                ' For Each item As Object In tblline.Rows
                result("URL") = item("URL")
                result("QRCode") = item("QRCode")
                result("Serial No_") = item("Serial No_")
                result("Name") = item("Serial No_")

                result("Item No_") = item("Item No_")
                result("Item Variant") = item("Item Variant")
                result("Lot No_") = item("Lot No_")
                result("Document No_") = item("Document No_")
                result("Document Type") = item("Document Type")
                'result("Source Type") = 0'item("Source Type")
                result("Description") = item("Description")
                result("Quantity") = item("Quantity")
                result("Unit Of Measure") = item("Unit Of Measure")
                result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
                result("Login ID") = item("Login ID")
                result("System Date") = item("System Date")
                result("Expired Date") = item("Expired Date")
                result("Mfg Date") = item("Mfg Date")
                ' Next
            End If

            'Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
            result("_ERROR_") = ex.ToString()
        End Try

        'Inform that trigger save order success
        sender.Response("result") = result

    End Sub
    Public Sub ScanQRCodeInforType7(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to ScanQRCodeInforType7 ")
        Dim result As New Hashtable
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            'Dim tblline As DataTable = q.ToTable

            If q.RecordCount <= 0 Then
                result("msg") = "Not in Our system "
            Else

                Dim arrValue() As String = qrCode.Split("*")
                'Build validate where clause

                Dim ItemNo As String = arrValue(0)
                Dim PO As String = arrValue(1)
                Dim LOTNO As String = arrValue(2)

                Dim qqq As Query = Query.From("Item Purchase Order").Transaction(True)
                qqq.Where("Packing No_").Is(PO)
                If qqq.ToTable.Rows.Count <= 0 Then
                    result("msg") = "Purchase Order is not in Our system "
                    Return
                End If

                Dim item As DataRow = qqq.TakeRow
                ' For Each item As Object In tblline.Rows
                result("URL") = item("URL")
                result("QRCode") = item("QRCode")
                result("Serial No_") = item("Serial No_")
                result("Name") = item("Serial No_")

                result("Item No_") = item("Item No_")
                result("Item Variant") = item("Item Variant")
                result("Lot No_") = item("Lot No_")
                result("Document No_") = item("Document No_")
                result("Document Type") = item("Document Type")
                'result("Source Type") = 0'item("Source Type")
                result("Description") = item("Description")
                result("Quantity") = item("Quantity")
                result("Unit Of Measure") = item("Unit Of Measure")
                result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
                result("Login ID") = item("Login ID")
                result("System Date") = item("System Date")
                result("Expired Date") = item("Expired Date")
                result("Mfg Date") = item("Mfg Date")
                ' Next
            End If

            'Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
            result("_ERROR_") = ex.ToString()
        End Try

        'Inform that trigger save order success
        sender.Response("result") = result

    End Sub
    Public Sub SCanQRCodeInforType8(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to SCanQRCodeInforType8 ")
        Dim result As New Hashtable
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            'Dim tblline As DataTable = q.ToTable

            If q.RecordCount <= 0 Then
                result("msg") = "Not in Our system "
            Else

                Dim arrValue() As String = qrCode.Split("*")
                'Build validate where clause

                Dim ItemNo As String = arrValue(0)
                Dim PO As String = arrValue(1)
                Dim LOTNO As String = arrValue(2)

                Dim qqq As Query = Query.From("Item Purchase Order").Transaction(True)
                qqq.Where("Packing No_").Is(PO)
                If qqq.ToTable.Rows.Count <= 0 Then
                    result("msg") = "Purchase Order is not in Our system "
                    Return
                End If

                Dim item As DataRow = qqq.TakeRow
                ' For Each item As Object In tblline.Rows
                result("URL") = item("URL")
                result("QRCode") = item("QRCode")
                result("Serial No_") = item("Serial No_")
                result("Name") = item("Serial No_")

                result("Item No_") = item("Item No_")
                result("Item Variant") = item("Item Variant")
                result("Lot No_") = item("Lot No_")
                result("Document No_") = item("Document No_")
                result("Document Type") = item("Document Type")
                'result("Source Type") = 0'item("Source Type")
                result("Description") = item("Description")
                result("Quantity") = item("Quantity")
                result("Unit Of Measure") = item("Unit Of Measure")
                result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
                result("Login ID") = item("Login ID")
                result("System Date") = item("System Date")
                result("Expired Date") = item("Expired Date")
                result("Mfg Date") = item("Mfg Date")
                ' Next
            End If

            'Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
            result("_ERROR_") = ex.ToString()
        End Try

        'Inform that trigger save order success
        sender.Response("result") = result

    End Sub
    Public Sub ScanQRCodeInforType9(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to ScanQRCodeInforType9 ")
        Dim result As New Hashtable
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            'Dim tblline As DataTable = q.ToTable

            If q.RecordCount <= 0 Then
                result("msg") = "Not in Our system "
            Else

                Dim arrValue() As String = qrCode.Split("*")
                'Build validate where clause

                Dim ItemNo As String = arrValue(0)
                Dim PO As String = arrValue(1)
                Dim LOTNO As String = arrValue(2)

                Dim qqq As Query = Query.From("Item Purchase Order").Transaction(True)
                qqq.Where("Packing No_").Is(PO)
                If qqq.ToTable.Rows.Count <= 0 Then
                    result("msg") = "Purchase Order is not in Our system "
                    Return
                End If

                Dim item As DataRow = qqq.TakeRow
                ' For Each item As Object In tblline.Rows
                result("URL") = item("URL")
                result("QRCode") = item("QRCode")
                result("Serial No_") = item("Serial No_")
                result("Name") = item("Serial No_")

                result("Item No_") = item("Item No_")
                result("Item Variant") = item("Item Variant")
                result("Lot No_") = item("Lot No_")
                result("Document No_") = item("Document No_")
                result("Document Type") = item("Document Type")
                'result("Source Type") = 0'item("Source Type")
                result("Description") = item("Description")
                result("Quantity") = item("Quantity")
                result("Unit Of Measure") = item("Unit Of Measure")
                result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
                result("Login ID") = item("Login ID")
                result("System Date") = item("System Date")
                result("Expired Date") = item("Expired Date")
                result("Mfg Date") = item("Mfg Date")
                ' Next
            End If

            'Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
            result("_ERROR_") = ex.ToString()
        End Try

        'Inform that trigger save order success
        sender.Response("result") = result

    End Sub

    Public Sub ScanQRCodeItemType0(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType0!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType1(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType1!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType2(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType2!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType3(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType3!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType4(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType4!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType5(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType5!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType6(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType6!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType7(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType7!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType8(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType8!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType9(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType9!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType10(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType10!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType11(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType11!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType12(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType12!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType13(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType13!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType14(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType14!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType15(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType15!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType16(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType16!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType17(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType17!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType18(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType18!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub
    Public Sub ScanQRCodeItemType19(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("ScanQRCodeItemType19!")
        Dim result As New Hashtable
        'Try
        '    'Query.BeginTransaction()

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = r("QRCode")
            SerialNo = r("Serial No_")
        End If
        WorkSession.MsgML("qrCode : {0}", qrCode)
    End Sub

    Public Sub CopyQRCodeExplosion2Buffer(ByVal sender As WXSource, ByVal e As WXArgs)
        Try

            Dim r As Hashtable = sender.CurrentRow
            If r("Parent") = 0 Then
                WorkSession.MsgML("Must be parent !")
                Return
            End If
            If r("Blocked") = 1 Then
                WorkSession.MsgML("Already Blocked !")
                Return
            End If

            Dim DocumentNo_ As String = r("Document No_")
            Dim QRCode As String = r("QRCode")

            Dim q As Query = Query.From("QRCode Buffer").Transaction(True)
            q.Where("QRCode").Is(QRCode)
            Dim filter As String = String.Format("[Parent QRCode]='{0}'", QRCode)

            If q.RecordCount > 0 Then
                Framework.OpenEntity("QRCode Buffer", filter)
                Return
            End If


            Dim QueryInsertQREntry As Query = Query.Entity("QRCode Buffer").Insert
            QueryInsertQREntry.Fields("Document No_") = r("Document No_")
            QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
            QueryInsertQREntry.Fields("Logistics No_") = r("Logistics No_")
            QueryInsertQREntry.Fields("Packing List") = r("Packing List")
            QueryInsertQREntry.Fields("Picking No_") = r("Picking No_")
            QueryInsertQREntry.Fields("Your Reference") = r("Your Reference")
            'QueryInsertQREntry.Fields("Document Type") = 1 ' Explosion
            QueryInsertQREntry.Fields("Type") = r("Document Type") ' Explosion
            QueryInsertQREntry.Fields("Item No_") = r("Item No_")
            QueryInsertQREntry.Fields("Lot No_") = r("Lot No_")
            QueryInsertQREntry.Fields("Source Type") = r("Source Type")
            QueryInsertQREntry.Fields("Source No_") = r("Source No_")

            QueryInsertQREntry.Fields("Number No_") = r("Quantity") * r("Qty Unit Of Measure")

            QueryInsertQREntry.Fields("Description") = r("Description")
            QueryInsertQREntry.Fields("Item Variant") = r("Item Variant")
            QueryInsertQREntry.Fields("Work Center") = r("Work Center")
            QueryInsertQREntry.Fields("Work Shift No_") = r("Work Shift No_")
            'QueryInsertQREntry.Fields("Expired Date") = Now()
            'QueryInsertQREntry.Fields("System Date") = Now()
            QueryInsertQREntry.Fields("Status") = 2
            QueryInsertQREntry.Fields("Login ID") = Framework.UserID
            QueryInsertQREntry.Fields("Quantity") = r("Quantity")
            QueryInsertQREntry.Fields("Unit Of Measure") = r("Unit Of Measure") 'GetBaseUOM(r("Item No_")) '   r
            QueryInsertQREntry.Fields("Qty Unit Of Measure") = r("Qty Unit Of Measure")
            QueryInsertQREntry.Fields("Source Code") = r("Source Code")
            QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
            QueryInsertQREntry.Fields("Mfg Date") = r("Mfg Date")
            QueryInsertQREntry.Fields("Location Code") = r("Location Code")
            QueryInsertQREntry.Fields("Url") = r("URL")
            QueryInsertQREntry.Fields("Serial No_") = r("Serial No_")
            QueryInsertQREntry.Fields("Parent QRCode") = QRCode
            QueryInsertQREntry.Fields("Parent") = 1
            'QueryInsertQREntry.Fields("QRCode") = ""

            QueryInsertQREntry.Execute()


            Framework.OpenEntity("QRCode Buffer", filter)

            'WorkSession.MsgML("Successful!")
            'sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    Public Sub QRCodeExplosion(ByVal Sender As WXSource, ByVal e As WXArgs)
        Dim imageQRCode As String

        Dim r As Hashtable = Sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        If r("Parent") = 0 Then
            WorkSession.MsgML("Must be parent !")
            Return
        End If

        If Not (r("Type")) = 2 Then
            WorkSession.MsgML("Must by Explosion Process !")
            Return
        End If

        Dim NumberLine As Integer = 1
        Dim batchSize As Integer = r("Number No_")

        If batchSize = 0 Then batchSize = r("Quantity")
        If batchSize = 1 Then
            WorkSession.MsgML(" Number No_ must be > 1 !")
            Return
        End If

        Dim LotNo As String = r("Lot No_")
        Dim DocumentNo_ As String = r("Document No_")

        If r("Item No_") = "" Then
            WorkSession.MsgML("Item No_ Not Blank!")
            Return
        End If

        'Dim str3 As String = Framework.MapPath("Pictures", "") & "/"
        'Dim str3 As String = Framework.MapPath("Pictures", "") & "/" & Now.Year & Now.Month & "/"
        Dim CurrentDate As Date = Now()
        Dim Day As String = CurrentDate.Day
        Dim Month As String = CurrentDate.Month
        Dim Year As String = CurrentDate.Year
        Dim PathDate As String = Day & Month & Year & "/"
        Dim qr As Query = Query.From("QR Setup")
        Dim ObjectFolder As String = qr.Value("Object Folder")
        Dim iIconSize As Integer = 4
        Dim iQRHeight As Integer = 70
        Dim iQRWidth As Integer = 70
        If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
        If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
        If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")

        Dim FullPath As String = ObjectFolder & "Pictures/QRCode/" & PathDate
        If Not Directory.Exists(FullPath) Then
            Directory.CreateDirectory(FullPath)
        End If

        Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

        Dim dataQR As String = ""
        Dim dataQRCode As String = ""
        Dim PostQRCodeEntry As Integer = Framework.ZeroNull(r("Post QRCode Entry"))

        Dim ParentQRCode As String = r("QRCode")

        Dim q As Query = Query.Update("QRCode")
        q.Where("QRCode").Is(ParentQRCode)
        q.Fields("Blocked") = 1
        q.Execute()

        'q = Query.From("QRCode").Transaction(True)
        'q.Where("QRCode").Is(ParentQRCode)
        'Dim dataupdate As DataTable = q.ToTable

        'Dim QueryUpdate As Query = Query.Update("QRCode Buffer")
        'QueryUpdate.WhereAs("RowID") = r("RowID")
        'QueryUpdate.Fields("QRCode") = dataQR
        'QueryUpdate.Fields("Lot No_") = dataQR
        'QueryUpdate.Fields("Serial No_") = qRLinkL
        'QueryUpdate.Fields("URL") = "Pictures\" & qRLinkL & ".jpg"
        'QueryUpdate.Execute()

        Dim ItemNo As String = r("Item No_")
        Dim PurchaseNo As String = r("Document No_")
        Dim PackingNo As String = Framework.EmptyNull(r("Packing List"))
        Dim LogisticsNo As String = Framework.EmptyNull(r("Logistics No_"))

        Dim ProductType As String = Left(r("Description"), 1) ' P is Product, Limit, K this nghiem

        Dim Workshiftcode As String = Right(r("Work Shift No_"), 1)
        Select Case Workshiftcode
            Case "1"
                Workshiftcode = "N"
            Case "2"
                Workshiftcode = "N"
            Case "3"
                Workshiftcode = "D"
        End Select

        Dim WorkCenter As String = r("Work Center")
        If r("Type") <> 6 And WorkCenter = "" Then
            WorkCenter = "*" & DocumentNo_
        End If

        Dim MFGDATE As String = Left(r("Mfg Date"), 10)
        MFGDATE = Replace(MFGDATE, "/", "")

        Select Case r("Type")
            Case 0, 14 'Mua
                dataQRCode = "4" & "*" & ItemNo & "*" & PurchaseNo & "*" & LogisticsNo & "*" & MFGDATE
            Case 6 'SX
                dataQRCode = "4" & "*" & r("Item No_") & "*" & PurchaseNo & "*" & LogisticsNo & "*" & ProductType & MFGDATE & Workshiftcode & WorkCenter
        End Select

        Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
        DataqRLinkL = Replace(DataqRLinkL, "/", "-")
        'qRLinkL = Replace(qRLinkL, "'", "''")
        DataqRLinkL = Replace(DataqRLinkL, "*", "-")

        If LotNo = "" Then LotNo = dataQRCode
        If r("Type") = 6 And DocumentNo_ <> "" Then LotNo = DocumentNo_

        Dim qq As Query = Query.From("QRCode Entry").Transaction(True)
        Dim i As Integer = qq.RecordCount + 1

        Try
            Query.BeginTransaction()
            For j As Integer = 0 To batchSize - 1 ' In tblSource.Rows
                Dim sLevel As String = ""

                Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

                Dim qRLinkL = Replace(dataQR, "#", "-")
                qRLinkL = Replace(qRLinkL, "/", "-")
                'qRLinkL = Replace(qRLinkL, "'", "''")
                qRLinkL = Replace(qRLinkL, "*", "-")

                Dim qqq As Query = Query.From("QRCode").Transaction(True)
                qqq.Where("Serial No_").Is(qRLinkL)
                'qqq.And("Item No_").Is(r("Item No_"))
                Dim tblline As DataTable = qqq.ToTable
                If tblline.Rows.Count = 0 Then

                    Dim qrGenerator = New QRCoder.QRCodeGenerator()
                    Dim qrCodeData As QRCoder.QRCodeData
                    qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
                    Dim qrCode As QRCoder.QRCode
                    qrCode = New QRCoder.QRCode(qrCodeData)
                    Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
                    Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

                    Dim qrImage As System.Drawing.Image
                    qrImage = qrCode.GetGraphic(20, "Black", "White", False)
                    Dim imageFormat As System.Drawing.Imaging.ImageFormat
                    imageFormat = imageFormat.Jpeg
                    qRLinkL = qRLinkL.ToString().Replace(" ", "")
                    qRLinkL = qRLinkL.ToString().Replace(":", "")

                    If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
                        qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
                    End If
                    imageQRCode = str3 & "" & qRLinkL & ".jpg"

                    Try

                        Dim QueryInsert As Query = Query.Entity("QRCode").Insert

                        QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
                        QueryInsert.Fields("QRCode") = dataQR
                        QueryInsert.Fields("Serial No_") = qRLinkL
                        QueryInsert.Fields("Name") = qRLinkL
                        QueryInsert.Fields("Description") = qRLinkL
                        QueryInsert.Fields("Item No_") = r("Item No_")
                        QueryInsert.Fields("Item Variant") = r("Item Variant")
                        QueryInsert.Fields("Lot No_") = LotNo
                        QueryInsert.Fields("Document Type") = r("Type")

                        QueryInsert.Fields("Source Type") = r("Source Type")
                        QueryInsert.Fields("Source No_") = r("Source No_")

                        QueryInsert.Fields("Document No_") = r("Document No_")
                        QueryInsert.Fields("External Document No_") = r("External Document No_")
                        QueryInsert.Fields("Logistics No_") = r("Logistics No_")
                        QueryInsert.Fields("Packing List") = r("Packing List")
                        QueryInsert.Fields("Picking No_") = r("Picking No_")
                        QueryInsert.Fields("Your Reference") = r("Your Reference")

                        QueryInsert.Fields("Quantity") = r("Quantity") / batchSize
                        QueryInsert.Fields("Unit Of Measure") = GetBaseUOM(r("Item No_"))  'r("Unit Of Measure")
                        QueryInsert.Fields("Qty Unit Of Measure") = 1 ' r("Qty Unit Of Measure")
                        QueryInsert.Fields("Login ID") = Framework.UserID
                        'QueryInsert.Fields("System Date") = r("System Date")
                        QueryInsert.Fields("Expired Date") = r("Expired Date")
                        QueryInsert.Fields("Mfg Date") = r("Mfg Date")

                        QueryInsert.Fields("Parent QRCode") = ParentQRCode
                        QueryInsert.Fields("Parent") = IIf(r("Qty Unit Of Measure") > 1, 1, 0)
                        QueryInsert.Fields("Kit") = IIf(r("Qty Unit Of Measure") > 1, 1, 0)

                        QueryInsert.Execute()

                        If PostQRCodeEntry = 1 Then
                            Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                            QueryInsertQREntry.Fields("QRCode") = dataQR
                            QueryInsertQREntry.Fields("Item No_") = r("Item No_")
                            QueryInsertQREntry.Fields("Lot No_") = LotNo
                            QueryInsertQREntry.Fields("Document No_") = r("Document No_")
                            QueryInsertQREntry.Fields("Logistics No_") = LogisticsNo
                            QueryInsertQREntry.Fields("Packing List") = PackingNo
                            QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")

                            QueryInsertQREntry.Fields("Document Type") = r("Type")
                            QueryInsertQREntry.Fields("Serial No_") = qRLinkL
                            QueryInsertQREntry.Fields("Description") = r("External Document No_")
                            QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
                            QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
                            QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
                            QueryInsertQREntry.Fields("Usage %") = 0
                            QueryInsertQREntry.Fields("Status") = 1
                            'QueryInsertQREntry.Fields("Created Date") = Now
                            QueryInsertQREntry.Fields("Quantity") = r("Quantity") / batchSize
                            QueryInsertQREntry.Fields("Begin Quantity") = r("Quantity") / batchSize
                            QueryInsertQREntry.Fields("Unit Of Measure Code") = GetBaseUOM(r("Item No_"))  ' r("Unit Of Measure")
                            QueryInsertQREntry.Fields("Qty_ per Unit Of Measure") = 1 ' r("Qty Unit Of Measure")
                            QueryInsertQREntry.Fields("Source Code") = r("Source Code")
                            QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
                            QueryInsertQREntry.Fields("Location Code") = r("Location Code")

                            QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
                            'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                            'QueryInsertQREntry.Fields("Last Date Checked") = Now
                            QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity") / batchSize
                            QueryInsertQREntry.Fields("Entry No_") = j
                            j = j + 1
                            QueryInsertQREntry.Execute()

                        End If

                    Catch ex As Exception
                        Query.RollBack()
                        WorkSession.MsgML(ex.ToString)
                        Return
                    End Try

                End If

            Next

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    'Public Sub createQRCodeBinLst(ByVal Sender As WXSource, ByVal e As WXArgs)
    '    Try
    '        Query.BeginTransaction()
    '        Dim dbSource As New DataTable
    '        dbSource = Sender.DataSource
    '        Dim tableID As String = Sender.Entity.TableName

    '        For Each trow As DataRow In dbSource.Rows
    '            Dim QRCodeString As String = ISDBNULL(trow("QRCode String"), "")
    '            Dim QRCode_Code As String = ISDBNULL(trow("QRCode"), "")
    '            Dim QRCodeURL As String = ISDBNULL(trow("QRCode URL"), "")
    '            If QRCode_Code = "" Then
    '                Dim dataQR As String = ""
    '                Dim dataQRCode As String = QRCodeString
    '                Dim QRCodeString_split() As String = QRCodeString.Split("*")
    '                For iqr_len As Integer = 0 To QRCodeString_split.Length - 1
    '                    Dim nameColm As String = QRCodeString_split(iqr_len)
    '                    nameColm = nameColm.Replace("[", "").Replace("]", "")
    '                    If dbSource.Columns.Contains(nameColm) Then
    '                        Dim datavalue As String = trow(nameColm)
    '                        dataQRCode = dataQRCode.Replace(nameColm, datavalue)
    '                    End If
    '                Next
    '                dataQRCode = dataQRCode.Replace("[", "").Replace("]", "")
    '                Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
    '                DataqRLinkL = Replace(DataqRLinkL, "/", "-")
    '                'qRLinkL = Replace(qRLinkL, "'", "''")
    '                DataqRLinkL = Replace(DataqRLinkL, "*", "-")
    '                Dim ss As Query = Query.From("QRCode").Transaction(True)
    '                ss.Where("Document No_").Is(trow("Code"))
    '                If ss.ToTable.Rows.Count = 0 Then

    '                    Dim CurrentDate As Date = Now()
    '                    Dim Day As String = CurrentDate.Day
    '                    Dim Month As String = CurrentDate.Month
    '                    Dim Year As String = CurrentDate.Year
    '                    Dim PathDate As String = Day & Month & Year & "/"
    '                    Dim qr As Query = Query.From("QR Setup").Select("[Object Folder],[QR Height] Height,[QR Width] Width,iIconSize Size")
    '                    Dim ObjectFolder As String = qr.Value("Object Folder")

    '                    'Dim FullPath As String = Framework.MapPath(ObjectFolder) & PathDate '& "Pictures\Document\"
    '                    'If Not Directory.Exists(FullPath) Then
    '                    '    Directory.CreateDirectory(FullPath)
    '                    'End If
    '                    Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")
    '                    If Not Directory.Exists(str3) Then
    '                        Directory.CreateDirectory(str3)
    '                    End If
    '                    dataQR = dataQRCode
    '                    Dim qRLinkL = Replace(dataQR, "#", "-")
    '                    qRLinkL = Replace(qRLinkL, "/", "-")
    '                    'qRLinkL = Replace(qRLinkL, "'", "''")
    '                    qRLinkL = Replace(qRLinkL, "*", "-")
    '                    'Dim sLevel As String = ""
    '                    Dim imageQRCode As String = ""
    '                    'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

    '                    'Dim qrGenerator = New QRCoder.QRCodeGenerator()
    '                    'Dim qrCodeData As QRCoder.QRCodeData
    '                    'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
    '                    'Dim qrCode As QRCoder.QRCode
    '                    'qrCode = New QRCoder.QRCode(qrCodeData)
    '                    'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
    '                    'Dim iIconSize As Integer = 4
    '                    Dim iQRWidth As Integer = 70
    '                    Dim iQRHeight As Integer = 70
    '                    'If qr.Value("Size") <> 0 Then iIconSize = qr.Value("Size")
    '                    If qr.Value("Height") <> 0 Then iQRHeight = qr.Value("Height")
    '                    If qr.Value("Width") <> 0 Then iQRWidth = qr.Value("Width")
    '                    'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

    '                    'Dim qrImage As System.Drawing.Image
    '                    'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
    '                    'Dim imageFormat As System.Drawing.Imaging.ImageFormat
    '                    'imageFormat = imageFormat.Jpeg
    '                    qRLinkL = qRLinkL.ToString().Replace(" ", "")
    '                    qRLinkL = qRLinkL.ToString().Replace(":", "")

    '                    'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
    '                    '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
    '                    'End If
    '                    'imageQRCode = str3 & "" & qRLinkL & ".jpg"

    '                    Dim serverPath As String = str3 + qRLinkL + ".jpg"
    '                    CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
    '                    imageQRCode = str3 & "" & qRLinkL & ".jpg"

    '                    Dim QueryInsert As Query = Query.Entity("QRCode").Insert
    '                    QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
    '                    QueryInsert.Fields("QRCode") = dataQR
    '                    QueryInsert.Fields("Serial No_") = qRLinkL
    '                    QueryInsert.Fields("Name") = qRLinkL
    '                    QueryInsert.Fields("Description") = qRLinkL
    '                    QueryInsert.Fields("Item No_") = ""
    '                    QueryInsert.Fields("Item Variant") = ""
    '                    QueryInsert.Fields("Lot No_") = ""
    '                    QueryInsert.Fields("Document Type") = 6
    '                    ' QueryInsert.Fields("Type") = 6
    '                    QueryInsert.Fields("Source Type") = 6
    '                    QueryInsert.Fields("Source No_") = trow("Code")
    '                    QueryInsert.Fields("Document No_") = trow("Code")
    '                    QueryInsert.Fields("External Document No_") = ""

    '                    QueryInsert.Fields("Quantity") = 1
    '                    QueryInsert.Fields("Unit Of Measure") = ""
    '                    QueryInsert.Fields("Qty Unit Of Measure") = 1
    '                    QueryInsert.Fields("Login ID") = Framework.UserID
    '                    QueryInsert.Fields("System Date") = Now()
    '                    QueryInsert.Fields("Expired Date") = Now()
    '                    QueryInsert.Fields("Mfg Date") = Now()
    '                    QueryInsert.Fields("Kit") = 0
    '                    QueryInsert.Execute()

    '                    Dim QUpdateTableID As Query = Query.Update(tableID)
    '                    QUpdateTableID.WhereAs("RowID") = trow("RowID")
    '                    QUpdateTableID.Fields("QRCode") = dataQR
    '                    QUpdateTableID.Fields("QRCode URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
    '                    QUpdateTableID.Execute()
    '                End If

    '            End If
    '        Next
    '        Query.EndTransaction()
    '    Catch ex As Exception
    '        Query.RollBack()
    '        WorkSession.MsgML(ex.ToString)
    '    End Try
    'End Sub

    Public Sub CreateQRCodeMasterData(ByVal Sender As WXSource, ByVal e As WXArgs)

        Dim HeaderTable As String = Sender.TableName

        Dim r As Hashtable = Sender.CurrentRow
        If r Is Nothing Then Return

        Dim QQ As Query = Query.From(HeaderTable).Transaction(True)
        QQ.WhereAs("QRCode URL") = ""
        QQ.WhereAs("QRCode") = ""
        Dim InvoiceLine As DataTable = QQ.ToTable
        If InvoiceLine.Rows.Count = 0 Then
            Return
        End If

        Dim imageQRCode As String = ""

        Dim CurrentDate As Date = Now()
        Dim Day As String = CurrentDate.Day
        Dim Month As String = CurrentDate.Month
        Dim Year As String = CurrentDate.Year
        Dim PathDate As String = Day & Month & Year & "/"
        Dim qr As Query = Query.From("QR Setup")
        Dim ObjectFolder As String = qr.Value("Object Folder")
        Dim iIconSize As Integer = 4
        Dim iQRHeight As Integer = 70
        Dim iQRWidth As Integer = 70
        If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
        If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
        If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")

        Dim FullPath As String = ObjectFolder & "Pictures/QRCode/" & PathDate
        If Not Directory.Exists(FullPath) Then
            Directory.CreateDirectory(FullPath)
        End If
        Dim str3 As String = Framework.MapPath("Pictures", "") & "/QRCode/" & PathDate
        Dim dataQR As String = ""
        Dim qRLinkL As String = ""

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To InvoiceLine.Rows.Count - 1 ' In tblSource.Rows

                dataQR = InvoiceLine.Rows(i)("QRCode String")

                'DataqRLinkL = Replace(dataQR, "#", "-")
                'DataqRLinkL = Replace(DataqRLinkL, "/", "-")
                ''qRLinkL = Replace(qRLinkL, "'", "''")
                'DataqRLinkL = Replace(DataqRLinkL, "*", "-")
                'Dim sLevel As String = ""
                'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

                qRLinkL = Replace(dataQR, "#", "-")
                qRLinkL = Replace(qRLinkL, "/", "-")
                'qRLinkL = Replace(qRLinkL, "'", "''")
                qRLinkL = Replace(qRLinkL, "*", "-")

                Dim q As Query = Query.From("QRCode").Transaction(True)
                q.Where("QRCode").Is(dataQR)
                'q.And("Item No_").Is(r("Item No_"))
                Dim tblline As DataTable = q.ToTable
                If tblline.Rows.Count = 0 Then

                    'Dim qrGenerator = New QRCoder.QRCodeGenerator()
                    'Dim qrCodeData As QRCoder.QRCodeData
                    'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
                    'Dim qrCode As QRCoder.QRCode
                    'qrCode = New QRCoder.QRCode(qrCodeData)
                    'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"


                    'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

                    'Dim qrImage As System.Drawing.Image
                    'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
                    'Dim imageFormat As System.Drawing.Imaging.ImageFormat
                    'imageFormat = imageFormat.Jpeg
                    qRLinkL = qRLinkL.ToString().Replace(" ", "")
                    qRLinkL = qRLinkL.ToString().Replace(":", "")

                    'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
                    '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
                    'End If
                    'imageQRCode = str3 & "" & qRLinkL & ".jpg"

                    Dim serverPath As String = str3 + qRLinkL + ".jpg"
                    CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
                    imageQRCode = str3 & "" & qRLinkL & ".jpg"

                    Dim QueryInsert As Query = Query.Entity("QRCode").Insert

                    QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg" '"Pictures\" & qRLinkL & ".jpg"
                    QueryInsert.Fields("QRCode") = dataQR
                    QueryInsert.Fields("Serial No_") = qRLinkL
                    QueryInsert.Fields("Name") = InvoiceLine.Rows(i)("Name") ' TradingSys.GetItemName(InvoiceLine.Rows(i)("Item No_"))
                    QueryInsert.Fields("Description") = qRLinkL
                    QueryInsert.Fields("Item No_") = "" ' InvoiceLine.Rows(i)("Item No_")
                    QueryInsert.Fields("Item Variant") = "" ' InvoiceLine.Rows(i)("Item Variant")
                    QueryInsert.Fields("Lot No_") = "" ' IIf(LotNo <> "", LotNo, dataQRCode)
                    'QueryInsert.Fields("Real Lot No_") = LotNo
                    'QueryInsert.Fields("Real Expired Date") = r("Expired Date") '  DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

                    QueryInsert.Fields("Document Type") = 0 'r("Type")

                    Select Case HeaderTable.ToUpper
                        Case "USER SETUP"
                            QueryInsert.Fields("Source Type") = 0
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("USER ID")
                        Case "BANK ACCOUNT"
                            QueryInsert.Fields("Source Type") = 1
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("No_")
                        Case "CUSTOMER"
                            QueryInsert.Fields("Source Type") = 2
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("No_")
                        Case "VENDOR"
                            QueryInsert.Fields("Source Type") = 3
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("No_")
                        Case "ITEM"
                            QueryInsert.Fields("Source Type") = 4
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("No_")
                        Case "EMPLOYEE"
                            QueryInsert.Fields("Source Type") = 5
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("No_")
                        Case "ASSET"
                            QueryInsert.Fields("Source Type") = 6
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("No_")
                        Case "BIN"
                            QueryInsert.Fields("Source Type") = 6
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("Code")
                        Case "ZONE", "LOCATION"
                            QueryInsert.Fields("Source Type") = 6
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("Code")
                            QueryInsert.Fields("Parent") = 1 ' IIf(r("Qty Unit Of Measure") > 1, 1, 0)
                            QueryInsert.Fields("Kit") = 1 ' IIf(r("Qty Unit Of Measure") > 1, 1, 0)

                        Case "CONTACT"
                            QueryInsert.Fields("Source Type") = 7
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("No_")
                        Case "PROJECT"
                            QueryInsert.Fields("Source Type") = 8
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("No_")
                        Case "SALESPERSON_PURCHASER"
                            QueryInsert.Fields("Source Type") = 9
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("Code")
                        Case "SHIPPING AGENT"
                            QueryInsert.Fields("Source Type") = 10
                            QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("Code")
                        Case Else
                            QueryInsert.Fields("Source Type") = 0
                            'QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("No_")
                    End Select

                    QueryInsert.Fields("Document No_") = QueryInsert.Fields("Source No_")
                    'QueryInsert.Fields("External Document No_") = r("External Document No_")
                    'QueryInsert.Fields("Your Reference") = r("Your Reference")
                    QueryInsert.Fields("Logistics No_") = ""
                    QueryInsert.Fields("Packing List") = ""
                    QueryInsert.Fields("Picking No_") = ""
                    QueryInsert.Fields("Quantity") = 1
                    QueryInsert.Fields("Unit Of Measure") = ""
                    QueryInsert.Fields("Qty Unit Of Measure") = 1 'r("Qty Unit Of Measure")
                    QueryInsert.Fields("Login ID") = Framework.UserID
                    'QueryInsert.Fields("System Date") = r("System Date")
                    'QueryInsert.Fields("Expired Date") = r("Expired Date")
                    'QueryInsert.Fields("Mfg Date") = r("Mfg Date")
                    'QueryInsert.Fields("Kit") = IIf(r("Qty Unit Of Measure") = 1, 1, 0)

                    QueryInsert.Execute()

                    Dim update As Query = Query.Update(Sender.TableName)
                    update.Where("RowID").Is(InvoiceLine.Rows(i)("RowID"))
                    update.Fields("QRCode URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
                    update.Fields("QRCode") = dataQR
                    update.Execute()

                End If
            Next

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub CreateQRCodeBankAccount(ByVal Sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = Sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return

            Dim CurrentDate As Date = Now()
            Dim Day As String = CurrentDate.Day
            Dim Month As String = CurrentDate.Month
            Dim Year As String = CurrentDate.Year
            Dim PathDate As String = Day & Month & Year & "/"
            Dim qr As Query = Query.From("QR Setup")
            Dim ObjectFolder As String = qr.Value("Object Folder")
            Dim iIconSize As Integer = 4
            Dim iQRHeight As Integer = 70
            Dim iQRWidth As Integer = 70
            If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
            If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
            If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")

            Dim FullPath As String = ObjectFolder & "Pictures/QRCode/" & PathDate
            If Not Directory.Exists(FullPath) Then
                Directory.CreateDirectory(FullPath)
            End If
            Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

            'If (Not System.IO.Directory.Exists(str3)) Then
            '    System.IO.Directory.CreateDirectory(str3)
            'End If

            Dim dataQR As String = ""
            Dim dataQRCode As String = ""
            dataQRCode = "2" & "*" & r("No_") ' & "*" & r("Zone") & "*" '6 Asset
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(r("No_"))

            If ss.ToTable.Rows.Count > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If
            Query.BeginTransaction()
            dataQR = dataQRCode

            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")
            'Dim sLevel As String = ""
            'Dim imageQRCode As String = ""
            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

            'Dim qrGenerator = New QRCoder.QRCodeGenerator()
            'Dim qrCodeData As QRCoder.QRCodeData
            'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
            'Dim qrCode As QRCoder.QRCode
            'qrCode = New QRCoder.QRCode(qrCodeData)
            'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"

            'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

            'Dim qrImage As System.Drawing.Image
            'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
            'Dim imageFormat As System.Drawing.Imaging.ImageFormat
            'imageFormat = imageFormat.Jpeg
            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")

            'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
            'End If
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"
            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = ""
            QueryInsert.Fields("Item Variant") = ""
            QueryInsert.Fields("Lot No_") = ""
            QueryInsert.Fields("Document Type") = 1
            ' QueryInsert.Fields("Type") = 6
            QueryInsert.Fields("Source Type") = 1
            QueryInsert.Fields("Source No_") = r("No_")
            QueryInsert.Fields("Document No_") = r("No_")
            QueryInsert.Fields("External Document No_") = ""

            QueryInsert.Fields("Quantity") = 1
            QueryInsert.Fields("Unit Of Measure") = ""
            QueryInsert.Fields("Qty Unit Of Measure") = 1
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = Now()
            QueryInsert.Fields("Expired Date") = Now()
            QueryInsert.Fields("Mfg Date") = Now()
            QueryInsert.Fields("Kit") = 0
            QueryInsert.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
            Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=1", r("No_")))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub CreateQRCodeCustomer(ByVal Sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = Sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return

            Dim CurrentDate As Date = Now()
            Dim Day As String = CurrentDate.Day
            Dim Month As String = CurrentDate.Month
            Dim Year As String = CurrentDate.Year
            Dim PathDate As String = Day & Month & Year & "/"
            Dim qr As Query = Query.From("QR Setup")
            Dim ObjectFolder As String = qr.Value("Object Folder")
            Dim iIconSize As Integer = 4
            Dim iQRHeight As Integer = 70
            Dim iQRWidth As Integer = 70
            If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
            If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
            If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")

            Dim FullPath As String = ObjectFolder & "Pictures\Document\" & PathDate
            If Not Directory.Exists(FullPath) Then
                Directory.CreateDirectory(FullPath)
            End If
            Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

            'If (Not System.IO.Directory.Exists(str3)) Then
            '    System.IO.Directory.CreateDirectory(str3)
            'End If

            Dim dataQR As String = ""
            Dim dataQRCode As String = ""
            dataQRCode = "2" & "*" & r("No_") ' & "*" & r("Zone") & "*" '6 Asset
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(r("No_"))

            If ss.ToTable.Rows.Count > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If
            Query.BeginTransaction()
            dataQR = dataQRCode

            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")
            'Dim sLevel As String = ""
            'Dim imageQRCode As String = ""
            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

            'Dim qrGenerator = New QRCoder.QRCodeGenerator()
            'Dim qrCodeData As QRCoder.QRCodeData
            'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
            'Dim qrCode As QRCoder.QRCode
            'qrCode = New QRCoder.QRCode(qrCodeData)
            'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"

            'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

            'Dim qrImage As System.Drawing.Image
            'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
            'Dim imageFormat As System.Drawing.Imaging.ImageFormat
            'imageFormat = imageFormat.Jpeg
            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")

            'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
            'End If
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"
            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = ""
            QueryInsert.Fields("Item Variant") = ""
            QueryInsert.Fields("Lot No_") = ""
            QueryInsert.Fields("Document Type") = 2
            ' QueryInsert.Fields("Type") = 6
            QueryInsert.Fields("Source Type") = 2
            QueryInsert.Fields("Source No_") = r("No_")

            QueryInsert.Fields("Document No_") = r("No_")
            QueryInsert.Fields("External Document No_") = ""

            QueryInsert.Fields("Quantity") = 1
            QueryInsert.Fields("Unit Of Measure") = ""
            QueryInsert.Fields("Qty Unit Of Measure") = 1
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = Now()
            QueryInsert.Fields("Expired Date") = Now()
            QueryInsert.Fields("Mfg Date") = Now()
            QueryInsert.Fields("Kit") = 0
            QueryInsert.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
            Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=2", r("No_")))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub CreateQRCodeVendor(ByVal Sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = Sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return

            Dim CurrentDate As Date = Now()
            Dim Day As String = CurrentDate.Day
            Dim Month As String = CurrentDate.Month
            Dim Year As String = CurrentDate.Year
            Dim PathDate As String = Day & Month & Year & "/"
            Dim qr As Query = Query.From("QR Setup")
            Dim ObjectFolder As String = qr.Value("Object Folder")
            Dim iIconSize As Integer = 4
            Dim iQRHeight As Integer = 70
            Dim iQRWidth As Integer = 70
            If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
            If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
            If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")

            Dim FullPath As String = ObjectFolder & "Pictures\Document\" & PathDate
            If Not Directory.Exists(FullPath) Then
                Directory.CreateDirectory(FullPath)
            End If
            Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

            'If (Not System.IO.Directory.Exists(str3)) Then
            '    System.IO.Directory.CreateDirectory(str3)
            'End If

            Dim dataQR As String = ""
            Dim dataQRCode As String = ""
            dataQRCode = "3" & "*" & r("No_") '& "*" '& r("Zone") & "*" '3 ncc
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(r("Code"))

            If ss.ToTable.Rows.Count > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If
            Query.BeginTransaction()
            dataQR = dataQRCode

            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")
            'Dim sLevel As String = ""
            'Dim imageQRCode As String = ""
            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

            'Dim qrGenerator = New QRCoder.QRCodeGenerator()
            'Dim qrCodeData As QRCoder.QRCodeData
            'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
            'Dim qrCode As QRCoder.QRCode
            'qrCode = New QRCoder.QRCode(qrCodeData)
            'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"

            'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

            'Dim qrImage As System.Drawing.Image
            'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
            'Dim imageFormat As System.Drawing.Imaging.ImageFormat
            'imageFormat = imageFormat.Jpeg
            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")

            'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
            'End If
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"
            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = ""
            QueryInsert.Fields("Item Variant") = ""
            QueryInsert.Fields("Lot No_") = ""
            QueryInsert.Fields("Document Type") = 3
            ' QueryInsert.Fields("Type") = 6
            QueryInsert.Fields("Source Type") = 3
            QueryInsert.Fields("Source No_") = r("No_")

            QueryInsert.Fields("Document No_") = r("No_")
            QueryInsert.Fields("External Document No_") = ""

            QueryInsert.Fields("Quantity") = 1
            QueryInsert.Fields("Unit Of Measure") = ""
            QueryInsert.Fields("Qty Unit Of Measure") = 1
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = Now()
            QueryInsert.Fields("Expired Date") = Now()
            QueryInsert.Fields("Mfg Date") = Now()
            QueryInsert.Fields("Kit") = 0
            QueryInsert.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
            Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=3", r("No_")))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub CreateQRCodeEmployee(ByVal Sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = Sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return

            Dim CurrentDate As Date = Now()
            Dim Day As String = CurrentDate.Day
            Dim Month As String = CurrentDate.Month
            Dim Year As String = CurrentDate.Year
            Dim PathDate As String = Day & Month & Year & "/"
            Dim qr As Query = Query.From("QR Setup")
            Dim ObjectFolder As String = qr.Value("Object Folder")
            Dim iIconSize As Integer = 4
            Dim iQRHeight As Integer = 70
            Dim iQRWidth As Integer = 70
            If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
            If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
            If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")

            Dim FullPath As String = ObjectFolder & "Pictures\Document\" & PathDate
            If Not Directory.Exists(FullPath) Then
                Directory.CreateDirectory(FullPath)
            End If
            Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

            'If (Not System.IO.Directory.Exists(str3)) Then
            '    System.IO.Directory.CreateDirectory(str3)
            'End If

            Dim dataQR As String = ""
            Dim dataQRCode As String = ""
            dataQRCode = "5" & "*" & r("No_") '& "*" & 'r("Zone") & "*" '6 Asset
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(r("No_"))

            If ss.ToTable.Rows.Count > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If
            Query.BeginTransaction()
            dataQR = dataQRCode

            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")
            'Dim sLevel As String = ""
            Dim imageQRCode As String = ""
            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

            'Dim qrGenerator = New QRCoder.QRCodeGenerator()
            'Dim qrCodeData As QRCoder.QRCodeData
            'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
            'Dim qrCode As QRCoder.QRCode
            'qrCode = New QRCoder.QRCode(qrCodeData)
            'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"

            'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

            'Dim qrImage As System.Drawing.Image
            'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
            'Dim imageFormat As System.Drawing.Imaging.ImageFormat
            'imageFormat = imageFormat.Jpeg
            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")

            'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
            'End If
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"
            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
            imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = ""
            QueryInsert.Fields("Item Variant") = ""
            QueryInsert.Fields("Lot No_") = ""
            QueryInsert.Fields("Document Type") = 5
            ' QueryInsert.Fields("Type") = 6
            QueryInsert.Fields("Source Type") = 5
            QueryInsert.Fields("Source No_") = r("No_")

            QueryInsert.Fields("Document No_") = r("Code")
            QueryInsert.Fields("External Document No_") = ""

            QueryInsert.Fields("Quantity") = 1
            QueryInsert.Fields("Unit Of Measure") = ""
            QueryInsert.Fields("Qty Unit Of Measure") = 1
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = Now()
            QueryInsert.Fields("Expired Date") = Now()
            QueryInsert.Fields("Mfg Date") = Now()
            QueryInsert.Fields("Kit") = 0
            QueryInsert.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
            Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=5", r("No_")))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub CreateQRCodeAsset(ByVal Sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = Sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return

            Dim CurrentDate As Date = Now()
            Dim Day As String = CurrentDate.Day
            Dim Month As String = CurrentDate.Month
            Dim Year As String = CurrentDate.Year
            Dim PathDate As String = Day & Month & Year & "/"
            Dim qr As Query = Query.From("QR Setup").Select("Object Folder")
            Dim ObjectFolder As String = qr.Value("Object Folder")

            Dim FullPath As String = ObjectFolder & "Pictures\Document\" & PathDate
            If Not Directory.Exists(FullPath) Then
                Directory.CreateDirectory(FullPath)
            End If
            Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

            'If (Not System.IO.Directory.Exists(str3)) Then
            '    System.IO.Directory.CreateDirectory(str3)
            'End If

            Dim dataQR As String = ""
            Dim dataQRCode As String = ""
            dataQRCode = "6" & "*" & r("No_") '& "*" ' & r("Zone") & "*" '6 Asset
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(r("No_"))

            If ss.ToTable.Rows.Count > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If
            Query.BeginTransaction()
            dataQR = dataQRCode

            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")
            'Dim sLevel As String = ""
            Dim imageQRCode As String = ""
            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

            'Dim qrGenerator = New QRCoder.QRCodeGenerator()
            'Dim qrCodeData As QRCoder.QRCodeData
            'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
            'Dim qrCode As QRCoder.QRCode
            'qrCode = New QRCoder.QRCode(qrCodeData)
            'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
            'Dim iIconSize As Integer = 4
            Dim iQRWidth As Integer = 70
            Dim iQRHeight As Integer = 70
            'If qr.Value("Size") <> 0 Then iIconSize = qr.Value("Size")
            If qr.Value("Height") <> 0 Then iQRHeight = qr.Value("Height")
            If qr.Value("Width") <> 0 Then iQRWidth = qr.Value("Width")
            'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

            'Dim qrImage As System.Drawing.Image
            'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
            'Dim imageFormat As System.Drawing.Imaging.ImageFormat
            'imageFormat = imageFormat.Jpeg
            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")

            'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
            'End If
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"
            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
            imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = ""
            QueryInsert.Fields("Item Variant") = ""
            QueryInsert.Fields("Lot No_") = ""
            QueryInsert.Fields("Document Type") = 6
            ' QueryInsert.Fields("Type") = 6
            QueryInsert.Fields("Source Type") = 6
            QueryInsert.Fields("Source No_") = r("No_")

            QueryInsert.Fields("Document No_") = r("No_")
            QueryInsert.Fields("External Document No_") = ""

            QueryInsert.Fields("Quantity") = 1
            QueryInsert.Fields("Unit Of Measure") = ""
            QueryInsert.Fields("Qty Unit Of Measure") = 1
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = Now()
            QueryInsert.Fields("Expired Date") = Now()
            QueryInsert.Fields("Mfg Date") = Now()
            QueryInsert.Fields("Kit") = 0
            QueryInsert.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
            Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=6", r("No_")))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    'Public Sub createQRCodeBinZone(ByVal Sender As WXSource, ByVal e As WXArgs)
    '    Try
    '        Dim r As Hashtable = Sender.CurrentRow
    '        If r Is Nothing Or r.Count = 0 Then Return

    '        Dim CurrentDate As Date = Now()
    '        Dim Day As String = CurrentDate.Day
    '        Dim Month As String = CurrentDate.Month
    '        Dim Year As String = CurrentDate.Year
    '        Dim PathDate As String = Day & Month & Year & "/"
    '        Dim qr As Query = Query.From("QR Setup").Select("Object Folder")
    '        Dim ObjectFolder As String = qr.Value("Object Folder")

    '        Dim FullPath As String = ObjectFolder & "Pictures\Document\" & PathDate
    '        If Not Directory.Exists(FullPath) Then
    '            Directory.CreateDirectory(FullPath)
    '        End If
    '        Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

    '        'If (Not System.IO.Directory.Exists(str3)) Then
    '        '    System.IO.Directory.CreateDirectory(str3)
    '        'End If

    '        Dim dataQR As String = ""
    '        Dim dataQRCode As String = ""
    '        dataQRCode = "6" & "*" & r("Code") '& "*" '& r("Zone") & "*" '6 Asset
    '        Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
    '        DataqRLinkL = Replace(DataqRLinkL, "/", "-")
    '        'qRLinkL = Replace(qRLinkL, "'", "''")
    '        DataqRLinkL = Replace(DataqRLinkL, "*", "-")
    '        Dim ss As Query = Query.From("QRCode").Transaction(True)
    '        ss.Where("Document No_").Is(r("Code"))

    '        If ss.ToTable.Rows.Count > 0 Then
    '            WorkSession.MsgML("Already Post QRCode !")
    '            Return
    '        End If
    '        Query.BeginTransaction()
    '        dataQR = dataQRCode

    '        Dim qRLinkL = Replace(dataQR, "#", "-")
    '        qRLinkL = Replace(qRLinkL, "/", "-")
    '        'qRLinkL = Replace(qRLinkL, "'", "''")
    '        qRLinkL = Replace(qRLinkL, "*", "-")
    '        Dim sLevel As String = ""
    '        Dim imageQRCode As String = ""
    '        Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

    '        Dim qrGenerator = New QRCoder.QRCodeGenerator()
    '        Dim qrCodeData As QRCoder.QRCodeData
    '        qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
    '        Dim qrCode As QRCoder.QRCode
    '        qrCode = New QRCoder.QRCode(qrCodeData)
    '        Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
    '        Dim iIconSize As Integer = 4
    '        Dim iQRWidth As Integer = 70
    '        Dim iQRHeight As Integer = 70
    '        If qr.Value("Size") <> 0 Then iIconSize = qr.Value("Size")
    '        If qr.Value("Height") <> 0 Then iQRHeight = qr.Value("Height")
    '        If qr.Value("Width") <> 0 Then iQRWidth = qr.Value("Width")
    '        Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

    '        Dim qrImage As System.Drawing.Image
    '        qrImage = qrCode.GetGraphic(20, "Black", "White", False)
    '        Dim imageFormat As System.Drawing.Imaging.ImageFormat
    '        imageFormat = imageFormat.Jpeg
    '        qRLinkL = qRLinkL.ToString().Replace(" ", "")
    '        qRLinkL = qRLinkL.ToString().Replace(":", "")

    '        If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
    '            qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
    '        End If
    '        imageQRCode = str3 & "" & qRLinkL & ".jpg"


    '        Dim QueryInsert As Query = Query.Entity("QRCode").Insert

    '        QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
    '        QueryInsert.Fields("QRCode") = dataQR
    '        QueryInsert.Fields("Serial No_") = qRLinkL
    '        QueryInsert.Fields("Name") = qRLinkL
    '        QueryInsert.Fields("Description") = qRLinkL
    '        QueryInsert.Fields("Item No_") = ""
    '        QueryInsert.Fields("Item Variant") = ""
    '        QueryInsert.Fields("Lot No_") = ""
    '        QueryInsert.Fields("Document Type") = 6
    '        ' QueryInsert.Fields("Type") = 6
    '        QueryInsert.Fields("Source Type") = 6
    '        QueryInsert.Fields("Source No_") = r("No_")
    '        QueryInsert.Fields("Document No_") = r("Code")
    '        QueryInsert.Fields("External Document No_") = ""

    '        QueryInsert.Fields("Quantity") = 1
    '        QueryInsert.Fields("Unit Of Measure") = ""
    '        QueryInsert.Fields("Qty Unit Of Measure") = 1
    '        QueryInsert.Fields("Login ID") = Framework.UserID
    '        QueryInsert.Fields("System Date") = Now()
    '        QueryInsert.Fields("Expired Date") = Now()
    '        QueryInsert.Fields("Mfg Date") = Now()
    '        QueryInsert.Fields("Kit") = 0
    '        QueryInsert.Execute()

    '        Query.EndTransaction()
    '        WorkSession.MsgML("Successful!")
    '        Sender.RefreshSource()
    '        Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=6", r("Code")))
    '    Catch ex As Exception
    '        Query.RollBack()
    '        WorkSession.MsgML(ex.ToString())
    '    End Try
    'End Sub

    'Public Sub CreateQRCodeBinZone(ByVal Sender As WXSource, ByVal e As WXArgs)
    '    Try
    '        Dim r As Hashtable = Sender.CurrentRow
    '        Dim tableID As String = Sender.Entity.TableName
    '        If r Is Nothing Or r.Count = 0 Then Return
    '        Dim dbSource As New DataTable
    '        dbSource = Sender.DataSource

    '        Dim QRCodeString As String = ISDBNULL(r("QRCode String"), "")
    '        Dim QRCode_Code As String = ISDBNULL(r("QRCode"), "")
    '        Dim QRCodeURL As String = ISDBNULL(r("QRCode URL"), "")
    '        If QRCode_Code = "" Then
    '            Dim dataQR As String = ""


    '            Dim dataQRCode As String = QRCodeString
    '            Dim QRCodeString_split() As String = QRCodeString.Split("*")
    '            For iqr_len As Integer = 0 To QRCodeString_split.Length - 1
    '                Dim nameColm As String = QRCodeString_split(iqr_len)
    '                nameColm = nameColm.Replace("[", "").Replace("]", "")
    '                If dbSource.Columns.Contains(nameColm) Then
    '                    Dim datavalue As String = r(nameColm)
    '                    dataQRCode = dataQRCode.Replace(nameColm, datavalue)
    '                End If
    '            Next
    '            dataQRCode = dataQRCode.Replace("[", "").Replace("]", "")
    '            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
    '            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
    '            'qRLinkL = Replace(qRLinkL, "'", "''")
    '            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
    '            Dim ss As Query = Query.From("QRCode").Transaction(True)
    '            ss.Where("Document No_").Is(r("Code"))
    '            If ss.ToTable.Rows.Count = 0 Then

    '                Dim CurrentDate As Date = Now()
    '                Dim Day As String = CurrentDate.Day
    '                Dim Month As String = CurrentDate.Month
    '                Dim Year As String = CurrentDate.Year
    '                Dim PathDate As String = Day & Month & Year & "/"
    '                Dim qr As Query = Query.From("QR Setup").Select("[Object Folder],[QR Height] Height,[QR Width] Width,iIconSize Size")
    '                Dim ObjectFolder As String = qr.Value("Object Folder")

    '                'Dim FullPath As String = Framework.MapPath(ObjectFolder) & PathDate '& "Pictures\Document\"
    '                'If Not Directory.Exists(FullPath) Then
    '                '    Directory.CreateDirectory(FullPath)
    '                'End If
    '                'If Not Directory.Exists(FullPath) Then
    '                '    Directory.CreateDirectory(FullPath)
    '                'End If
    '                Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")
    '                If Not Directory.Exists(str3) Then
    '                    Directory.CreateDirectory(str3)
    '                End If
    '                dataQR = dataQRCode
    '                Dim qRLinkL = Replace(dataQR, "#", "-")
    '                qRLinkL = Replace(qRLinkL, "/", "-")
    '                'qRLinkL = Replace(qRLinkL, "'", "''")
    '                qRLinkL = Replace(qRLinkL, "*", "-")
    '                'Dim sLevel As String = ""
    '                Dim imageQRCode As String = ""
    '                'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

    '                'Dim qrGenerator = New QRCoder.QRCodeGenerator()
    '                'Dim qrCodeData As QRCoder.QRCodeData
    '                'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
    '                'Dim qrCode As QRCoder.QRCode
    '                'qrCode = New QRCoder.QRCode(qrCodeData)
    '                'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
    '                'Dim iIconSize As Integer = 4
    '                Dim iQRWidth As Integer = 70
    '                Dim iQRHeight As Integer = 70
    '                'If qr.Value("Size") <> 0 Then iIconSize = qr.Value("Size")
    '                If qr.Value("Height") <> 0 Then iQRHeight = qr.Value("Height")
    '                If qr.Value("Width") <> 0 Then iQRWidth = qr.Value("Width")
    '                'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

    '                'Dim qrImage As System.Drawing.Image
    '                'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
    '                'Dim imageFormat As System.Drawing.Imaging.ImageFormat
    '                'imageFormat = imageFormat.Jpeg
    '                qRLinkL = qRLinkL.ToString().Replace(" ", "")
    '                qRLinkL = qRLinkL.ToString().Replace(":", "")

    '                'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
    '                '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
    '                'End If
    '                'imageQRCode = str3 & "" & qRLinkL & ".jpg"
    '                Dim serverPath As String = str3 + qRLinkL + ".jpg"
    '                CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
    '                imageQRCode = str3 & "" & qRLinkL & ".jpg"

    '                Dim QueryInsert As Query = Query.Entity("QRCode").Insert
    '                QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
    '                QueryInsert.Fields("QRCode") = dataQR
    '                QueryInsert.Fields("Serial No_") = qRLinkL
    '                QueryInsert.Fields("Name") = qRLinkL
    '                QueryInsert.Fields("Description") = qRLinkL
    '                QueryInsert.Fields("Item No_") = ""
    '                QueryInsert.Fields("Item Variant") = ""
    '                QueryInsert.Fields("Lot No_") = ""
    '                QueryInsert.Fields("Document Type") = 6
    '                ' QueryInsert.Fields("Type") = 6
    '                QueryInsert.Fields("Source Type") = 6
    '                QueryInsert.Fields("Source No_") = r("Code")
    '                QueryInsert.Fields("Document No_") = r("Code")
    '                QueryInsert.Fields("External Document No_") = ""

    '                QueryInsert.Fields("Quantity") = 1
    '                QueryInsert.Fields("Unit Of Measure") = ""
    '                QueryInsert.Fields("Qty Unit Of Measure") = 1
    '                QueryInsert.Fields("Login ID") = Framework.UserID
    '                QueryInsert.Fields("System Date") = Now()
    '                QueryInsert.Fields("Expired Date") = Now()
    '                QueryInsert.Fields("Mfg Date") = Now()
    '                QueryInsert.Fields("Kit") = 0
    '                QueryInsert.Execute()

    '                Dim QUpdateTableID As Query = Query.Update(tableID)
    '                QUpdateTableID.WhereAs("RowID") = r("RowID")
    '                QUpdateTableID.Fields("QRCode") = dataQR
    '                QUpdateTableID.Fields("QRCode URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
    '                QUpdateTableID.Execute()
    '            End If

    '        End If
    '        Query.EndTransaction()
    '        WorkSession.MsgML("Successful!")
    '        Sender.RefreshSource()
    '        Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=6", r("Code")))
    '    Catch ex As Exception
    '        Query.RollBack()
    '        WorkSession.MsgML(ex.ToString())
    '    End Try
    'End Sub

    Public Sub CreateQRCodeContact(ByVal Sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = Sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return

            Dim CurrentDate As Date = Now()
            Dim Day As String = CurrentDate.Day
            Dim Month As String = CurrentDate.Month
            Dim Year As String = CurrentDate.Year
            Dim PathDate As String = Day & Month & Year & "/"
            Dim qr As Query = Query.From("QR Setup").Select("Object Folder")
            Dim ObjectFolder As String = qr.Value("Object Folder")

            Dim FullPath As String = ObjectFolder & "Pictures\Document\" & PathDate
            If Not Directory.Exists(FullPath) Then
                Directory.CreateDirectory(FullPath)
            End If
            Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

            'If (Not System.IO.Directory.Exists(str3)) Then
            '    System.IO.Directory.CreateDirectory(str3)
            'End If

            Dim dataQR As String = ""
            Dim dataQRCode As String = ""
            dataQRCode = "7" & "*" & r("No_") '& "*" ' & r("Zone") & "*" '6 Asset
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(r("No_"))

            If ss.ToTable.Rows.Count > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If
            Query.BeginTransaction()
            dataQR = dataQRCode

            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")
            'Dim sLevel As String = ""
            Dim imageQRCode As String = ""
            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

            'Dim qrGenerator = New QRCoder.QRCodeGenerator()
            'Dim qrCodeData As QRCoder.QRCodeData
            'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
            'Dim qrCode As QRCoder.QRCode
            'qrCode = New QRCoder.QRCode(qrCodeData)
            'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
            'Dim iIconSize As Integer = 4
            Dim iQRWidth As Integer = 70
            Dim iQRHeight As Integer = 70
            'If qr.Value("Size") <> 0 Then iIconSize = qr.Value("Size")
            If qr.Value("Height") <> 0 Then iQRHeight = qr.Value("Height")
            If qr.Value("Width") <> 0 Then iQRWidth = qr.Value("Width")
            'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

            'Dim qrImage As System.Drawing.Image
            'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
            'Dim imageFormat As System.Drawing.Imaging.ImageFormat
            'imageFormat = imageFormat.Jpeg
            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")

            'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
            'End If
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"
            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
            imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = ""
            QueryInsert.Fields("Item Variant") = ""
            QueryInsert.Fields("Lot No_") = ""
            QueryInsert.Fields("Document Type") = 7
            ' QueryInsert.Fields("Type") = 6
            QueryInsert.Fields("Source Type") = 7
            QueryInsert.Fields("Source No_") = r("No_")
            QueryInsert.Fields("Document No_") = r("No_")
            QueryInsert.Fields("External Document No_") = ""

            QueryInsert.Fields("Quantity") = 1
            QueryInsert.Fields("Unit Of Measure") = ""
            QueryInsert.Fields("Qty Unit Of Measure") = 1
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = Now()
            QueryInsert.Fields("Expired Date") = Now()
            QueryInsert.Fields("Mfg Date") = Now()
            QueryInsert.Fields("Kit") = 0
            QueryInsert.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
            Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=7", r("No_")))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub CreateQRCodeProject(ByVal Sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = Sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return

            Dim CurrentDate As Date = Now()
            Dim Day As String = CurrentDate.Day
            Dim Month As String = CurrentDate.Month
            Dim Year As String = CurrentDate.Year
            Dim PathDate As String = Day & Month & Year & "/"
            Dim qr As Query = Query.From("QR Setup").Transaction(True)
            Dim ObjectFolder As String = qr.Value("Object Folder")
            Dim iIconSize As Integer = 4
            Dim iQRHeight As Integer = 70
            Dim iQRWidth As Integer = 70
            If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
            If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
            If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")

            Dim FullPath As String = ObjectFolder & "Pictures\Document\" & PathDate
            If Not Directory.Exists(FullPath) Then
                Directory.CreateDirectory(FullPath)
            End If
            Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

            'If (Not System.IO.Directory.Exists(str3)) Then
            '    System.IO.Directory.CreateDirectory(str3)
            'End If

            Dim dataQR As String = ""
            Dim dataQRCode As String = ""
            dataQRCode = "8" & "*" & r("No_") '& "*" '& r("Zone") & "*" '6 Asset
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(r("No_"))

            If ss.ToTable.Rows.Count > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If
            Query.BeginTransaction()
            dataQR = dataQRCode

            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")
            'Dim sLevel As String = ""
            Dim imageQRCode As String = ""
            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

            'Dim qrGenerator = New QRCoder.QRCodeGenerator()
            'Dim qrCodeData As QRCoder.QRCodeData
            'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
            'Dim qrCode As QRCoder.QRCode
            'qrCode = New QRCoder.QRCode(qrCodeData)
            'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
            'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

            'Dim qrImage As System.Drawing.Image
            'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
            'Dim imageFormat As System.Drawing.Imaging.ImageFormat
            'imageFormat = imageFormat.Jpeg
            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")

            'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
            'End If
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"
            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
            imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = ""
            QueryInsert.Fields("Item Variant") = ""
            QueryInsert.Fields("Lot No_") = ""
            QueryInsert.Fields("Document Type") = 8
            ' QueryInsert.Fields("Type") = 6
            QueryInsert.Fields("Source Type") = 8
            QueryInsert.Fields("Source No_") = r("No_")

            QueryInsert.Fields("Document No_") = r("No_")
            QueryInsert.Fields("External Document No_") = ""

            QueryInsert.Fields("Quantity") = 1
            QueryInsert.Fields("Unit Of Measure") = ""
            QueryInsert.Fields("Qty Unit Of Measure") = 1
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = Now()
            QueryInsert.Fields("Expired Date") = Now()
            QueryInsert.Fields("Mfg Date") = Now()
            QueryInsert.Fields("Kit") = 0
            QueryInsert.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
            Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=8", r("No_")))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub CreateQRCodeSalesperson(ByVal Sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = Sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return

            Dim CurrentDate As Date = Now()
            Dim Day As String = CurrentDate.Day
            Dim Month As String = CurrentDate.Month
            Dim Year As String = CurrentDate.Year
            Dim PathDate As String = Day & Month & Year & "/"
            Dim qr As Query = Query.From("QR Setup")
            Dim ObjectFolder As String = qr.Value("Object Folder")
            Dim iIconSize As Integer = 4
            Dim iQRHeight As Integer = 70
            Dim iQRWidth As Integer = 70
            If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
            If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
            If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")

            Dim FullPath As String = ObjectFolder & "Pictures\Document\" & PathDate
            If Not Directory.Exists(FullPath) Then
                Directory.CreateDirectory(FullPath)
            End If
            Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

            'If (Not System.IO.Directory.Exists(str3)) Then
            '    System.IO.Directory.CreateDirectory(str3)
            'End If

            Dim dataQR As String = ""
            Dim dataQRCode As String = ""
            dataQRCode = "9" & "*" & r("Code") '& "*" '6 Employee
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(r("Code"))

            If ss.ToTable.Rows.Count > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If
            Query.BeginTransaction()
            dataQR = dataQRCode

            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")
            'Dim sLevel As String = ""
            Dim imageQRCode As String = ""
            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

            'Dim qrGenerator = New QRCoder.QRCodeGenerator()
            'Dim qrCodeData As QRCoder.QRCodeData
            'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
            'Dim qrCode As QRCoder.QRCode
            'qrCode = New QRCoder.QRCode(qrCodeData)
            'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
            'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

            'Dim qrImage As System.Drawing.Image
            'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
            'Dim imageFormat As System.Drawing.Imaging.ImageFormat
            'imageFormat = imageFormat.Jpeg
            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")

            'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
            'End If
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"
            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
            imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = ""
            QueryInsert.Fields("Item Variant") = ""
            QueryInsert.Fields("Lot No_") = ""
            QueryInsert.Fields("Document Type") = 9
            ' QueryInsert.Fields("Type") = 6
            QueryInsert.Fields("Source Type") = 9
            QueryInsert.Fields("Source No_") = r("No_")

            QueryInsert.Fields("Document No_") = r("Code")
            QueryInsert.Fields("External Document No_") = ""

            QueryInsert.Fields("Quantity") = 1
            QueryInsert.Fields("Unit Of Measure") = ""
            QueryInsert.Fields("Qty Unit Of Measure") = 1
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = Now()
            QueryInsert.Fields("Expired Date") = Now()
            QueryInsert.Fields("Mfg Date") = Now()
            QueryInsert.Fields("Kit") = 0
            QueryInsert.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
            Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=9", r("Code")))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub CreateQRCodeShipper(ByVal Sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = Sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return

            Dim CurrentDate As Date = Now()
            Dim Day As String = CurrentDate.Day
            Dim Month As String = CurrentDate.Month
            Dim Year As String = CurrentDate.Year
            Dim PathDate As String = Day & Month & Year & "/"
            Dim qr As Query = Query.From("QR Setup")
            Dim ObjectFolder As String = qr.Value("Object Folder")
            Dim iIconSize As Integer = 4
            Dim iQRHeight As Integer = 70
            Dim iQRWidth As Integer = 70
            If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
            If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
            If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")

            Dim FullPath As String = ObjectFolder & "Pictures\Document\" & PathDate
            If Not Directory.Exists(FullPath) Then
                Directory.CreateDirectory(FullPath)
            End If
            Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

            'If (Not System.IO.Directory.Exists(str3)) Then
            '    System.IO.Directory.CreateDirectory(str3)
            'End If

            Dim dataQR As String = ""
            Dim dataQRCode As String = ""
            dataQRCode = "10" & "*" & r("Code") '& "*" & r("Zone") & "*" '6 Asset
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(r("Code"))

            If ss.ToTable.Rows.Count > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If
            Query.BeginTransaction()
            dataQR = dataQRCode

            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")
            'Dim sLevel As String = ""
            Dim imageQRCode As String = ""
            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

            'Dim qrGenerator = New QRCoder.QRCodeGenerator()
            'Dim qrCodeData As QRCoder.QRCodeData
            'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
            'Dim qrCode As QRCoder.QRCode
            'qrCode = New QRCoder.QRCode(qrCodeData)
            'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
            'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

            'Dim qrImage As System.Drawing.Image
            'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
            'Dim imageFormat As System.Drawing.Imaging.ImageFormat
            'imageFormat = imageFormat.Jpeg
            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")

            'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
            'End If
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"
            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
            imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = ""
            QueryInsert.Fields("Item Variant") = ""
            QueryInsert.Fields("Lot No_") = ""
            QueryInsert.Fields("Document Type") = 10
            ' QueryInsert.Fields("Type") = 6
            QueryInsert.Fields("Source Type") = 10
            QueryInsert.Fields("Source No_") = r("No_")

            QueryInsert.Fields("Document No_") = r("Code")
            QueryInsert.Fields("External Document No_") = ""

            QueryInsert.Fields("Quantity") = 1
            QueryInsert.Fields("Unit Of Measure") = ""
            QueryInsert.Fields("Qty Unit Of Measure") = 1
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = Now()
            QueryInsert.Fields("Expired Date") = Now()
            QueryInsert.Fields("Mfg Date") = Now()
            QueryInsert.Fields("Kit") = 0
            QueryInsert.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
            Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=10", r("Code")))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub Post2QRCodeEntry(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        Try

            Dim QRCode As String = r("QRCode")

            If QRCode = "" Then
                WorkSession.MsgML("Please Create QRCode")
                Return
            End If

            Dim QueryQRCode As Query = Query.From("QRCode").Transaction(True)
            QueryQRCode.WhereAs("QRCode") = QRCode
            If QueryQRCode.ToTable.Rows.Count = 0 Then
                WorkSession.MsgML("Xin vui lòng tạo QRCode")
                Return
            End If
            Dim qq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
            Dim J As Integer = qq.Value("EntryNo")
            Dim number As Integer = r("Quantity")

            For i As Integer = 0 To number - 1
                Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                QueryInsertQREntry.Fields("QRCode") = QRCode 'r("QRCode")
                QueryInsertQREntry.Fields("Item No_") = r("Item No_")
                QueryInsertQREntry.Fields("Lot No_") = r("Lot No_")
                QueryInsertQREntry.Fields("Document No_") = r("Document No_")
                QueryInsertQREntry.Fields("Document Type") = r("Type")
                QueryInsertQREntry.Fields("Serial No_") = r("Serial No_")
                QueryInsertQREntry.Fields("Number No_") = r("Number No_")
                QueryInsertQREntry.Fields("Description") = r("Description")
                QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
                QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
                QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
                QueryInsertQREntry.Fields("Usage %") = 0
                QueryInsertQREntry.Fields("Status") = 1
                QueryInsertQREntry.Fields("Created Date") = Now
                QueryInsertQREntry.Fields("Quantity") = 1
                QueryInsertQREntry.Fields("Begin Quantity") = 1
                QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
                QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
                QueryInsertQREntry.Fields("Source Code") = r("Source Code")
                QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
                QueryInsertQREntry.Fields("Location Code") = ""
                QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
                QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
                QueryInsertQREntry.Fields("Qty_not Temped") = 0
                QueryInsertQREntry.Fields("Last Date Checked") = Now
                QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity")
                QueryInsertQREntry.Fields("Entry No_") = J
                J = J + 1
                QueryInsertQREntry.Execute()

            Next


            Dim Querydelete As Query = Query.Delete("QRCode Buffer")
            'QueryUpdate.Fields("Blocked") = 1
            Querydelete.WhereAs("RowID") = r("RowID")
            Querydelete.Execute()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)

        End Try
    End Sub

    Public Sub CopyPOToQRCodeBuffer(ByVal sender As WXSource, ByVal e As WXArgs)
        Try

            Dim rHeader As Hashtable = sender.CurrentRow
            Dim DocumentNo_ As String = rHeader("No_")

            Dim queryDelete As Query = Query.From("QRCode Buffer")
            queryDelete.Where("Document No_").Is(DocumentNo_)
            queryDelete.And("Type").Is(0)
            queryDelete.And("Source Code").Is(rHeader("Source Code"))
            Dim filter As String = String.Format("[Document No_]='{0}'", DocumentNo_)

            If queryDelete.RecordCount > 0 Then
                Framework.OpenEntity("QRCode Buffer", filter)
                Return
            End If

            Dim querrydata As Query = Query.From("Purchase Order Line").Transaction(True)
            querrydata.Where("Document No_").Is(DocumentNo_)
            Dim dbSource As DataTable = querrydata.ToTable


            For Each r As DataRow In dbSource.Rows
                Dim QueryInsertQREntry As Query = Query.Entity("QRCode Buffer").Insert

                QueryInsertQREntry.Fields("Document No_") = DocumentNo_
                QueryInsertQREntry.Fields("External Document No_") = rHeader("External Document No_")
                QueryInsertQREntry.Fields("Your Reference") = DocumentNo_
                QueryInsertQREntry.Fields("Logistics No_") = "" 'r("Logistics No_")
                QueryInsertQREntry.Fields("Packing List") = rHeader("Your Reference") ' r("Packing List")
                QueryInsertQREntry.Fields("Picking No_") = "" '  r("Picking No_")

                QueryInsertQREntry.Fields("Type") = 0
                QueryInsertQREntry.Fields("Item No_") = r("No_")
                QueryInsertQREntry.Fields("Lot No_") = r("Lot No_")
                'QueryInsertQREntry.Fields("Serial No_") = r("Line No_")
                QueryInsertQREntry.Fields("Number No_") = r("Quantity") * r("Qty_ per Unit of Measure")
                'QueryInsertQREntry.Fields("Print No_") = 1000
                'QueryInsertQREntry.Fields("Description") = rHeader("Description")
                QueryInsertQREntry.Fields("Item Variant") = r("Variant Code")
                'QueryInsertQREntry.Fields("Work Center") = rHeader("Work Center Code")
                'QueryInsertQREntry.Fields("Work Shift No_") = rHeader("Work Shift Code")
                'QueryInsertQREntry.Fields("Expired Date") = Now()
                'QueryInsertQREntry.Fields("System Date") = Now()
                'QueryInsertQREntry.Fields("Status") = 1
                QueryInsertQREntry.Fields("Login ID") = Framework.UserID
                QueryInsertQREntry.Fields("Quantity") = r("Quantity")
                QueryInsertQREntry.Fields("Unit Of Measure") = r("Unit Of Measure Code")
                QueryInsertQREntry.Fields("Qty Unit Of Measure") = r("Qty_ per Unit of Measure")
                QueryInsertQREntry.Fields("Source Code") = rHeader("Source Code")
                QueryInsertQREntry.Fields("Responsibility Center") = rHeader("Responsibility Center")
                QueryInsertQREntry.Fields("External Document No_") = rHeader("External Document No_")
                QueryInsertQREntry.Fields("Mfg Date") = rHeader("Posting Date")
                'QueryInsertQREntry.Fields("QRCode") = ""
                'QueryInsertQREntry.Fields("Url") = ""
                'QueryInsertQREntry.Fields("Entry No_") = 0
                'QueryInsertQREntry.Fields("Blocked") = 0

                QueryInsertQREntry.Execute()
            Next

            Framework.OpenEntity("QRCode Buffer", filter)

            'WorkSession.MsgML("Successful!")
            'sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    Public Sub CopyWOToQRCodeBuffer(ByVal sender As WXSource, ByVal e As WXArgs)
        Try

            Dim rHeader As Hashtable = sender.CurrentRow
            Dim DocumentNo_ As String = rHeader("No_")

            Dim queryDelete As Query = Query.From("QRCode Buffer")
            queryDelete.Where("Document No_").Is(DocumentNo_)
            queryDelete.And("Type").Is(6)
            queryDelete.And("Source Code").Is(rHeader("Source Code"))
            Dim filter As String = String.Format("[Document No_]='{0}'", DocumentNo_)

            If queryDelete.RecordCount > 0 Then
                Framework.OpenEntity("QRCode Buffer", filter)
                Return
            End If

            Dim querrydata As Query = Query.From("Production Order Line").Transaction(True)
            querrydata.Where("Prod_ Order No_").Is(DocumentNo_)
            Dim dbSource As DataTable = querrydata.ToTable


            For Each r As DataRow In dbSource.Rows
                Dim QueryInsertQREntry As Query = Query.Entity("QRCode Buffer").Insert
                QueryInsertQREntry.Fields("Document No_") = DocumentNo_
                QueryInsertQREntry.Fields("External Document No_") = rHeader("External Document No_")
                QueryInsertQREntry.Fields("Your Reference") = "" ' rHeader("Your Reference")
                QueryInsertQREntry.Fields("Logistics No_") = "" '  rHeader("Logistics No_")
                QueryInsertQREntry.Fields("Packing List") = "" ' ' rHeader("Packing List")
                QueryInsertQREntry.Fields("Picking No_") = ""

                QueryInsertQREntry.Fields("Type") = 6
                QueryInsertQREntry.Fields("Item No_") = r("Item No_")
                QueryInsertQREntry.Fields("Lot No_") = r("Lot No_")
                'QueryInsertQREntry.Fields("Serial No_") = r("Line No_")
                QueryInsertQREntry.Fields("Number No_") = r("Quantity") * r("Qty_ per Unit of Measure")
                'QueryInsertQREntry.Fields("Print No_") = 1000
                'QueryInsertQREntry.Fields("Description") = rHeader("Description")
                QueryInsertQREntry.Fields("Item Variant") = r("Variant Code")
                QueryInsertQREntry.Fields("Work Center") = rHeader("Work Center Code")
                QueryInsertQREntry.Fields("Work Shift No_") = rHeader("Work Shift Code")
                'QueryInsertQREntry.Fields("Expired Date") = Now()
                'QueryInsertQREntry.Fields("System Date") = Now()
                'QueryInsertQREntry.Fields("Status") = 1
                QueryInsertQREntry.Fields("Login ID") = Framework.UserID
                QueryInsertQREntry.Fields("Quantity") = r("Quantity")
                QueryInsertQREntry.Fields("Unit Of Measure") = r("Unit Of Measure Code")
                QueryInsertQREntry.Fields("Qty Unit Of Measure") = r("Qty_ per Unit of Measure")
                QueryInsertQREntry.Fields("Source Code") = rHeader("Source Code")
                QueryInsertQREntry.Fields("Responsibility Center") = rHeader("Responsibility Center")
                'QueryInsertQREntry.Fields("External Document No_") = rHeader("External Document No_")
                QueryInsertQREntry.Fields("Mfg Date") = rHeader("Posting Date")
                'QueryInsertQREntry.Fields("Location Code") = ""
                'QueryInsertQREntry.Fields("Url") = ""
                'QueryInsertQREntry.Fields("Entry No_") = 0
                'QueryInsertQREntry.Fields("Blocked") = 0
                'QueryInsertQREntry.Fields("Your Reference") = DocumentNo_
                QueryInsertQREntry.Execute()
            Next

            Framework.OpenEntity("QRCode Buffer", filter)

            'WorkSession.MsgML("Successful!")
            'sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    'Public Sub CreateQRCode(ByVal Sender As WXSource, ByVal e As WXArgs)

    '    Dim r As Hashtable = Sender.CurrentRow
    '    If r Is Nothing Or r.Count = 0 Then Return

    '    Dim DocumentNo_ As String = r("Document No_")
    '    Dim batchSize As Integer = r("Number No_")
    '    Dim LotNo As String = r("Lot No_")

    '    If ISDBNULL(r("Description"), "") = "" Then
    '        WorkSession.MsgML("Description Not Blank!")
    '        Return
    '    End If
    '    If r("Item No_") = "" Then
    '        WorkSession.MsgML("Item No_ Not Blank!")
    '        Return
    '    End If

    '    If Left(r("Mfg Date"), 10) = "" Then
    '        WorkSession.MsgML("MFG DATE Not Blank!")
    '        Return
    '    End If
    '    If Right(r("Work Shift No_"), 1) = "" Then
    '        WorkSession.MsgML("Work Shift Code Not Blank!")
    '        Return
    '    End If
    '    If r("Work Center") = "" Then
    '        WorkSession.MsgML("Work Center Not Blank!")
    '        Return
    '    End If
    '    Dim imageQRCode As String = ""
    '    If Not (r("Type") = 0 Or r("Type") = 6) Then
    '        WorkSession.MsgML("Must by Input from Production Order or Purchasing Process !")
    '        Return
    '    End If

    '    'Dim tblSource As New DataTable
    '    'Dim Querytbl As Query = Query.From("QRCode Buffer").Transaction(True)
    '    'Querytbl.Where("Document No_").Is(DocumentNo_).And("Blocked").Is(0).And("QRCode").Is("")

    '    'tblSource = Querytbl.ToTable

    '    Try
    '        Dim NumberLine As Integer = 1
    '        Dim str3 As String = Framework.MapPath("Pictures", "") & "/"
    '        Dim ProductType As String = Left(r("Description"), 1) ' P is Product, Limit, K this nghiem

    '        Dim Workshiftcode As String = Right(r("Work Shift No_"), 1)
    '        Select Case Workshiftcode
    '            Case "1"
    '                Workshiftcode = "N"
    '            Case "2"
    '                Workshiftcode = "N"
    '            Case "3"
    '                Workshiftcode = "D"
    '        End Select

    '        Dim MFGDATE As String = Left(r("Mfg Date"), 10)
    '        MFGDATE = Replace(MFGDATE, "/", "")


    '        Dim dataQR As String = ""
    '        Dim dataQRCode As String = ""

    '        dataQRCode = r("Item No_") & "*" & ProductType & MFGDATE & Workshiftcode & r("Work Center")
    '        If LotNo = "" Then LotNo = dataQRCode

    '        Query.BeginTransaction()

    '        For i As Integer = 1 To batchSize

    '            dataQR = dataQRCode & i

    '            Dim sLevel As String = ""

    '            Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

    '            Dim qRLinkL = Replace(dataQR, "#", "-")
    '            qRLinkL = Replace(qRLinkL, "/", "-")
    '            'qRLinkL = Replace(qRLinkL, "'", "''")
    '            qRLinkL = Replace(qRLinkL, "*", "-")

    '            Dim q As Query = Query.From("QRCode").Transaction(True)
    '            q.Where("Serial No_").Is(qRLinkL)
    '            'q.And("Item No_").Is(r("Item No_"))
    '            Dim tblline As DataTable = q.ToTable
    '            If tblline.Rows.Count = 0 Then


    '                Dim qrGenerator = New QRCoder.QRCodeGenerator()
    '                Dim qrCodeData As QRCoder.QRCodeData
    '                qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
    '                Dim qrCode As QRCoder.QRCode
    '                qrCode = New QRCoder.QRCode(qrCodeData)
    '                Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
    '                Dim iIconSize As Integer = 4
    '                Dim iQRWidth As Integer = 180
    '                Dim iQRHeight As Integer = 180
    '                Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

    '                Dim qrImage As System.Drawing.Image
    '                qrImage = qrCode.GetGraphic(20, "Black", "White", False)
    '                Dim imageFormat As System.Drawing.Imaging.ImageFormat
    '                imageFormat = imageFormat.Jpeg
    '                qRLinkL = qRLinkL.ToString().Replace(" ", "")
    '                qRLinkL = qRLinkL.ToString().Replace(":", "")

    '                If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
    '                    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
    '                End If
    '                imageQRCode = str3 & "" & qRLinkL & ".jpg"

    '                Try

    '                    Dim QueryInsert As Query = Query.Entity("QRCode").Insert

    '                    QueryInsert.Fields("URL") = "Pictures\" & qRLinkL & ".jpg"
    '                    QueryInsert.Fields("QRCode") = dataQR
    '                    QueryInsert.Fields("Serial No_") = qRLinkL
    '                    QueryInsert.Fields("Name") = qRLinkL
    '                    QueryInsert.Fields("Description") = qRLinkL
    '                    QueryInsert.Fields("Item No_") = r("Item No_")
    '                    QueryInsert.Fields("Item Variant") = r("Item Variant")
    '                    QueryInsert.Fields("Document No_") = r("Document No_")
    '                    QueryInsert.Fields("External Document No_") = r("External Document No_")
    '                    QueryInsert.Fields("Your Reference") = r("Your Reference")
    '                    QueryInsert.Fields("Lot No_") = LotNo
    '                    QueryInsert.Fields("Number No_") = i
    '                    QueryInsert.Fields("Document Type") = r("Type")
    '                    QueryInsert.Fields("Source Code") = r("Source Code")
    '                    QueryInsert.Fields("Responsibility Center") = r("Responsibility Center")
    '                    QueryInsert.Fields("Quantity") = r("Quantity")
    '                    QueryInsert.Fields("Unit Of Measure") = r("Unit Of Measure")
    '                    QueryInsert.Fields("Qty Unit Of Measure") = r("Qty Unit Of Measure")
    '                    QueryInsert.Fields("Login ID") = Framework.UserID
    '                    QueryInsert.Fields("System Date") = r("System Date")
    '                    QueryInsert.Fields("Expired Date") = r("Expired Date")
    '                    QueryInsert.Fields("Mfg Date") = r("Mfg Date")
    '                    QueryInsert.Execute()

    '                    'Dim QueryUpdate As Query = Query.Update("QRCode Buffer")
    '                    'QueryUpdate.WhereAs("RowID") = trow("RowID")
    '                    'QueryUpdate.Fields("QRCode") = dataQR
    '                    'QueryUpdate.Fields("Serial No_") = qRLinkL
    '                    'QueryUpdate.Fields("URL") = "Pictures\" & qRLinkL & ".jpg"
    '                    'QueryUpdate.Fields("Number No_") = NumberLine
    '                    'QueryUpdate.Execute()



    '                Catch ex As Exception
    '                    Query.RollBack()
    '                    WorkSession.MsgML(ex.ToString)
    '                    Return
    '                End Try
    '            End If

    '        Next
    '        Query.EndTransaction()
    '        WorkSession.MsgML("Successful!")
    '        Sender.RefreshSource()
    '    Catch ex As Exception
    '        Query.RollBack()
    '        WorkSession.MsgML(ex.ToString)
    '    End Try

    'End Sub

    Public Sub QRCodeEntry(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        Try

            Dim QRCode As String = r("QRCode")

            If QRCode = "" Then
                WorkSession.MsgML("Please Create QRCode")
                Return
            End If

            Dim QueryQRCode As Query = Query.From("QRCode").Transaction(True)
            QueryQRCode.WhereAs("QRCode") = QRCode
            If QueryQRCode.ToTable.Rows.Count = 0 Then
                WorkSession.MsgML("Xin vui lòng tạo QRCode")
                Return
            End If
            Dim qq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
            Dim J As Integer = qq.Value("EntryNo")


            Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
            QueryInsertQREntry.Fields("QRCode") = QRCode 'r("QRCode")
            QueryInsertQREntry.Fields("Item No_") = r("Item No_")
            QueryInsertQREntry.Fields("Lot No_") = r("Lot No_")
            QueryInsertQREntry.Fields("Document No_") = r("Document No_")
            QueryInsertQREntry.Fields("Document Type") = r("Type")
            QueryInsertQREntry.Fields("Serial No_") = r("Serial No_")
            QueryInsertQREntry.Fields("Number No_") = r("Number No_")
            QueryInsertQREntry.Fields("Description") = r("Description")
            QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
            QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
            QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
            QueryInsertQREntry.Fields("Usage %") = 0
            QueryInsertQREntry.Fields("Status") = 1
            QueryInsertQREntry.Fields("Created Date") = Now
            QueryInsertQREntry.Fields("Quantity") = r("Quantity")
            QueryInsertQREntry.Fields("Begin Quantity") = r("Quantity")
            QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
            QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
            QueryInsertQREntry.Fields("Source Code") = r("Source Code")
            QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
            QueryInsertQREntry.Fields("Location Code") = ""
            QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
            QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
            QueryInsertQREntry.Fields("Qty_not Temped") = 0
            QueryInsertQREntry.Fields("Last Date Checked") = Now
            QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity")
            QueryInsertQREntry.Fields("Entry No_") = J
            QueryInsertQREntry.Execute()

            Dim Querydelete As Query = Query.Delete("QRCode Buffer")
            'QueryUpdate.Fields("Blocked") = 1
            Querydelete.WhereAs("RowID") = r("RowID")
            Querydelete.Execute()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)

        End Try
    End Sub

    Public Sub DeleteQRCodeMaster(ByVal sender As WXSource, ByVal e As WXArgs)
        Try

            Dim rHeader As Hashtable = sender.CurrentRow
            Dim QRCode As String = rHeader("QRCode")
            Dim DocNo As String = rHeader("Document No_")
            Dim ItemNo As String = rHeader("Item No_")

            Dim queryDelete As Query = Query.Delete("QRCode")
            queryDelete.Where("QRCode").Is(QRCode)
            queryDelete.And("Document No_").Is(DocNo)
            queryDelete.And("Item No_").Is(ItemNo)
            queryDelete.Execute()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    Public Sub CreateQRCodeCSMN(ByVal Sender As WXSource, ByVal e As WXArgs)
        Dim imageQRCode As String

        Dim r As Hashtable = Sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        If Not (r("Type") = 0 Or r("Type") = 6) Then
            WorkSession.MsgML("Must by Input from Production Order or Purchasing Process !")
            Return
        End If

        Dim str3 As String = Framework.MapPath("Pictures", "") & "/"
        'Dim ProductType As String = Left(r("Description"), 1) ' P is Product, Limit, K this nghiem

        'Dim Workshiftcode As String = Right(r("Work Shift No_"), 1)
        'Select Case Workshiftcode
        '    Case "1"
        '        Workshiftcode = "N"
        '    Case "2"
        '        Workshiftcode = "N"
        '    Case "3"
        '        Workshiftcode = "D"
        'End Select

        'Dim MFGDATE As String = Left(r("Mfg Date"), 10)
        'MFGDATE = Replace(MFGDATE, "/", "")

        Dim dataQR As String = ""
        dataQR = r("Serial No_") '& "*" & ProductType & "*" & MFGDATE & "*" & Workshiftcode & "*" & r("Work Center")

        Dim sLevel As String = ""

        Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

        Dim qRLinkL = Replace(dataQR, "#", "-")
        qRLinkL = Replace(qRLinkL, "/", "-")
        'qRLinkL = Replace(qRLinkL, "'", "''")
        qRLinkL = Replace(qRLinkL, "*", "-")

        Dim q As Query = Query.From("QRCode").Transaction(True)
        q.Where("Serial No_").Is(qRLinkL)
        'q.And("Item No_").Is(r("Item No_"))
        Dim tblline As DataTable = q.ToTable
        If tblline.Rows.Count > 0 Then
            WorkSession.MsgML("QRcode already Created !")
            Return

        End If

        Dim qrGenerator = New QRCoder.QRCodeGenerator()
        Dim qrCodeData As QRCoder.QRCodeData
        qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
        Dim qrCode As QRCoder.QRCode
        qrCode = New QRCoder.QRCode(qrCodeData)
        Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
        Dim iIconSize As Integer = 4
        Dim iQRWidth As Integer = 70
        Dim iQRHeight As Integer = 70
        Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

        Dim qrImage As System.Drawing.Image
        qrImage = qrCode.GetGraphic(20, "Black", "White", False)
        Dim imageFormat As System.Drawing.Imaging.ImageFormat
        imageFormat = imageFormat.Jpeg
        qRLinkL = qRLinkL.ToString().Replace(" ", "")
        qRLinkL = qRLinkL.ToString().Replace(":", "")
        If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
        End If
        imageQRCode = str3 & "" & qRLinkL & ".jpg"

        Dim qq As Query = Query.From("QRCode Entry").Transaction(True)
        Dim i As Integer = qq.RecordCount + 1

        Try
            Query.BeginTransaction()

            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures\" & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = r("Item No_")
            QueryInsert.Fields("Item Variant") = r("Item Variant")
            QueryInsert.Fields("Lot No_") = dataQR
            QueryInsert.Fields("Document Type") = 6 'r("Type")
            QueryInsert.Fields("Quantity") = r("Quantity")
            QueryInsert.Fields("Unit Of Measure") = r("Unit Of Measure")
            QueryInsert.Fields("Qty Unit Of Measure") = r("Qty Unit Of Measure")
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = r("System Date")
            QueryInsert.Fields("Expired Date") = r("Expired Date")
            QueryInsert.Fields("Mfg Date") = r("Mfg Date")
            QueryInsert.Execute()

            Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
            QueryInsertQREntry.Fields("QRCode") = dataQR
            QueryInsertQREntry.Fields("Item No_") = r("Item No_")
            QueryInsertQREntry.Fields("Lot No_") = r("Lot No_")
            QueryInsertQREntry.Fields("Document No_") = r("Document No_")

            QueryInsertQREntry.Fields("Document Type") = 6 'r("Type")
            QueryInsertQREntry.Fields("Serial No_") = qRLinkL
            QueryInsertQREntry.Fields("Description") = r("External Document No_")
            QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
            QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
            QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
            QueryInsertQREntry.Fields("Usage %") = 0
            QueryInsertQREntry.Fields("Status") = 1
            QueryInsertQREntry.Fields("Created Date") = Now
            QueryInsertQREntry.Fields("Quantity") = r("Quantity")
            QueryInsertQREntry.Fields("Begin Quantity") = r("Quantity")
            QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
            QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
            QueryInsertQREntry.Fields("Source Code") = r("Source Code")
            QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
            QueryInsertQREntry.Fields("Location Code") = ""
            QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
            QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
            QueryInsertQREntry.Fields("Qty_not Temped") = 0
            QueryInsertQREntry.Fields("Last Date Checked") = Now
            QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity")
            QueryInsertQREntry.Fields("Entry No_") = i
            QueryInsertQREntry.Execute()

            Dim QueryUpdate As Query = Query.Update("QRCode Buffer")
            QueryUpdate.WhereAs("RowID") = r("RowID")
            QueryUpdate.Fields("QRCode") = dataQR
            QueryUpdate.Fields("Serial No_") = qRLinkL
            QueryUpdate.Fields("URL") = "Pictures\" & qRLinkL & ".jpg"
            QueryUpdate.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub CreateQRCodeBySerialNo(ByVal Sender As WXSource, ByVal e As WXArgs)
        Dim imageQRCode As String

        Dim r As Hashtable = Sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        If Not (r("Type") = 0 Or r("Type") = 6) Then
            WorkSession.MsgML("Must by Input from Production Order or Purchasing Process !")
            Return
        End If

        Dim str3 As String = Framework.MapPath("Pictures", "") & "/"

        Dim dataQR As String = ""
        dataQR = r("Serial No_")
        Dim LotNo As String = dataQR

        Dim sLevel As String = ""

        Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

        Dim qRLinkL = Replace(dataQR, "#", "-")
        qRLinkL = Replace(qRLinkL, "/", "-")
        'qRLinkL = Replace(qRLinkL, "'", "''")
        qRLinkL = Replace(qRLinkL, "*", "-")

        Dim q As Query = Query.From("QRCode").Transaction(True)
        q.Where("Serial No_").Is(qRLinkL)
        'q.And("Item No_").Is(r("Item No_"))
        Dim tblline As DataTable = q.ToTable
        If tblline.Rows.Count > 0 Then
            WorkSession.MsgML("QRcode already Created !")
            Return

        End If

        Dim qrGenerator = New QRCoder.QRCodeGenerator()
        Dim qrCodeData As QRCoder.QRCodeData
        qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
        Dim qrCode As QRCoder.QRCode
        qrCode = New QRCoder.QRCode(qrCodeData)
        Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
        Dim iIconSize As Integer = 4
        Dim iQRWidth As Integer = 70
        Dim iQRHeight As Integer = 70
        Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

        Dim qrImage As System.Drawing.Image
        qrImage = qrCode.GetGraphic(20, "Black", "White", False)
        Dim imageFormat As System.Drawing.Imaging.ImageFormat
        imageFormat = imageFormat.Jpeg
        qRLinkL = qRLinkL.ToString().Replace(" ", "")
        qRLinkL = qRLinkL.ToString().Replace(":", "")
        If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
        End If
        imageQRCode = str3 & "" & qRLinkL & ".jpg"

        Dim qq As Query = Query.From("QRCode Entry").Transaction(True)
        Dim i As Integer = qq.RecordCount + 1

        Try
            Query.BeginTransaction()

            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures\" & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = r("Item No_")
            QueryInsert.Fields("Item Variant") = r("Item Variant")
            QueryInsert.Fields("Lot No_") = dataQR
            QueryInsert.Fields("Document Type") = r("Type")
            QueryInsert.Fields("Quantity") = r("Quantity")
            QueryInsert.Fields("Unit Of Measure") = r("Unit Of Measure")
            QueryInsert.Fields("Qty Unit Of Measure") = r("Qty Unit Of Measure")
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = r("System Date")
            QueryInsert.Fields("Expired Date") = r("Expired Date")
            QueryInsert.Fields("Mfg Date") = r("Mfg Date")
            QueryInsert.Execute()

            'Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
            'QueryInsertQREntry.Fields("QRCode") = dataQR
            'QueryInsertQREntry.Fields("Item No_") = r("Item No_")
            'QueryInsertQREntry.Fields("Lot No_") = r("Lot No_")
            'QueryInsertQREntry.Fields("Document No_") = r("Document No_")

            'QueryInsertQREntry.Fields("Document Type") = 6 'r("Type")
            'QueryInsertQREntry.Fields("Serial No_") = qRLinkL
            'QueryInsertQREntry.Fields("Description") = r("External Document No_")
            'QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
            'QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
            'QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
            'QueryInsertQREntry.Fields("Usage %") = 0
            'QueryInsertQREntry.Fields("Status") = 1
            'QueryInsertQREntry.Fields("Created Date") = Now
            'QueryInsertQREntry.Fields("Quantity") = r("Quantity")
            'QueryInsertQREntry.Fields("Begin Quantity") = r("Quantity")
            'QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
            'QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
            'QueryInsertQREntry.Fields("Source Code") = r("Source Code")
            'QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
            'QueryInsertQREntry.Fields("Location Code") = ""
            'QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
            'QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
            'QueryInsertQREntry.Fields("Qty_not Temped") = 0
            'QueryInsertQREntry.Fields("Last Date Checked") = Now
            'QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity")
            'QueryInsertQREntry.Fields("Entry No_") = i
            'QueryInsertQREntry.Execute()

            Dim QueryUpdate As Query = Query.Update("QRCode Buffer")
            QueryUpdate.WhereAs("RowID") = r("RowID")
            QueryUpdate.Fields("QRCode") = dataQR
            QueryUpdate.Fields("Lot No_") = dataQR
            QueryUpdate.Fields("Serial No_") = qRLinkL
            QueryUpdate.Fields("URL") = "Pictures\" & qRLinkL & ".jpg"
            QueryUpdate.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    'Triger
    Public Sub QRCodeColumnValueChange(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = sender.CurrentRow
            Select Case sender.ColumnName
                Case "Entry No_"

                    Dim QueryValueEntry As Query = Query.From("Value Entry").Transaction(True)
                    QueryValueEntry.WhereAs("Entry No_") = r("Entry No_")
                    r("Document No_") = QueryValueEntry.Value("Document No_")
                    r("Item No_") = QueryValueEntry.Value("Item No_")
                    r("Item Variant") = QueryValueEntry.Value("Variant Code")
                    r("Lot No_") = QueryValueEntry.Value("Lot No_")
                    r("Quantity") = QueryValueEntry.Value("Valued Quantity")
                    r("Unit Of Measure") = QueryValueEntry.Value("Unit of Measure Code")
                    r("Qty Unit Of Measure") = QueryValueEntry.Value("Qty_ per Unit of Measure")

                    r("External Document No_") = QueryValueEntry.Value("External Document No_")
                    r("Your Reference") = QueryValueEntry.Value("Originally Ordered No_")
                    r("Source Code") = QueryValueEntry.Value("Source Code")
                    r("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

                    r("Serial No_") = QueryValueEntry.Value("Serial No_")
                    '            r("URL") = ""

                    'r("QRCode") =""
                    r("Expired Date") = QueryValueEntry.Value("Expiration Date")
                    r("Mfg Date") = QueryValueEntry.Value("Warranty Date")

                    r("Work Shift No_") = QueryValueEntry.Value("Work Shift Code")
                    r("Work Center") = QueryValueEntry.Value("Department Code")


                Case "Item No_"
                    If r("Type") = 6 And r("Document No_") <> "" Then
                        Dim QueryValueEntry As Query = Query.From("Production Order Line").Transaction(True)
                        QueryValueEntry.WhereAs("Prod_ Order No_") = r("Document No_")

                        r("Item Variant") = QueryValueEntry.Value("Variant Code")
                        r("Lot No_") = QueryValueEntry.Value("Lot No_")
                        r("Quantity") = QueryValueEntry.Value("Quantity")
                        r("Number No_") = QueryValueEntry.Value("Quantity")
                        r("Unit Of Measure") = QueryValueEntry.Value("Unit of Measure Code")
                        r("Qty Unit Of Measure") = QueryValueEntry.Value("Qty_ per Unit of Measure")
                        r("Location Code") = QueryValueEntry.Value("Location Code")

                        QueryValueEntry = Query.From("Production Order Header").Transaction(True)
                        QueryValueEntry.WhereAs("No_") = r("Document No_")
                        r("Expired Date") = QueryValueEntry.Value("Due Date")
                        r("Mfg Date") = QueryValueEntry.Value("Due Date")

                        r("Work Shift No_") = QueryValueEntry.Value("Work Shift Code")
                        r("Work Center") = QueryValueEntry.Value("Work Center Code")

                        r("External Document No_") = QueryValueEntry.Value("External Document No_")
                        r("Your Reference") = QueryValueEntry.Value("Work Order No_")
                        r("Source Code") = QueryValueEntry.Value("Source Code")
                        r("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

                    End If

                    If r("Type") = 0 And r("Document No_") <> "" Then
                        Dim QueryValueEntry As Query = Query.From("Purchase Order Line").Transaction(True)
                        QueryValueEntry.WhereAs("Document No_") = r("Document No_")

                        r("Expired Date") = QueryValueEntry.Value("Expiration Date")
                        r("Mfg Date") = QueryValueEntry.Value("FA Posting Date") 'QueryValueEntry.Value("Order Date")
                        r("Location Code") = QueryValueEntry.Value("Location Code")

                        r("Item Variant") = QueryValueEntry.Value("Variant Code")
                        r("Lot No_") = QueryValueEntry.Value("Lot No_")
                        r("Quantity") = QueryValueEntry.Value("Quantity")
                        r("Number No_") = QueryValueEntry.Value("Quantity")
                        r("Unit Of Measure") = QueryValueEntry.Value("Unit of Measure Code")
                        r("Qty Unit Of Measure") = QueryValueEntry.Value("Qty_ per Unit of Measure")

                        QueryValueEntry = Query.From("Purchase Order Header").Transaction(True)
                        QueryValueEntry.WhereAs("No_") = r("Document No_")

                        r("External Document No_") = QueryValueEntry.Value("External Document No_")
                        r("Your Reference") = QueryValueEntry.Value("Your Reference")
                        r("Source Code") = QueryValueEntry.Value("Source Code")
                        r("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

                    End If

                    If r("Type") = 4 And r("Document No_") <> "" Then
                        Dim QueryValueEntry As Query = Query.From("Transfer Order Line").Transaction(True)
                        QueryValueEntry.WhereAs("Document No_") = r("Document No_")

                        r("Item Variant") = QueryValueEntry.Value("Variant Code")
                        r("Lot No_") = QueryValueEntry.Value("Lot No_")
                        r("Quantity") = QueryValueEntry.Value("Quantity")
                        r("Number No_") = QueryValueEntry.Value("Quantity")
                        r("Unit Of Measure") = QueryValueEntry.Value("Unit of Measure Code")
                        r("Qty Unit Of Measure") = QueryValueEntry.Value("Qty_ per Unit of Measure")

                        QueryValueEntry = Query.From("Transfer Order Header").Transaction(True)
                        QueryValueEntry.WhereAs("No_") = r("Document No_")

                        r("Expired Date") = QueryValueEntry.Value("Posting Date")
                        r("Mfg Date") = QueryValueEntry.Value("Posting Date") 'QueryValueEntry.Value("Order Date")
                        r("External Document No_") = QueryValueEntry.Value("External Document No_")
                        r("Your Reference") = QueryValueEntry.Value("Originally Ordered No_")
                        r("Source Code") = QueryValueEntry.Value("Source Code")
                        r("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

                        r("Location Code") = QueryValueEntry.Value("To Location Code")
                    End If
            End Select
            r("Login ID") = Framework.UserID
            'r("System Date") = Now
        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            ' Query.RollBack()
        End Try
    End Sub

    Public Sub QRCodeDocEntryBufferColumnChange(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = sender.CurrentRow
            Dim ItemNo_ As String = ""
            Select Case sender.ColumnName
                Case "Entry No_"
                    If r("Type") = 0 And r("Document No_") <> "" Then
                        Dim QueryValueEntry As Query = Query.From("Purchase Order Line").Transaction(True)
                        QueryValueEntry.WhereAs("Document No_") = r("Document No_")
                        'QueryValueEntry.WhereAs("Line No_") = r("Entry No_")
                        'r("Serial No_") = QueryValueEntry.Value("Serial No_")
                        '            r("URL") = ""

                        'r("QRCode") =""
                        r("Expired Date") = QueryValueEntry.Value("Expiration Date")
                        r("Mfg Date") = QueryValueEntry.Value("Order Date")

                        r("Work Shift No_") = ""
                        r("Work Center") = ""

                        r("Blocked") = 0

                        r("Line No_") = QueryValueEntry.Value("Line No_")
                        r("Item No_") = QueryValueEntry.Value("No_")
                        r("Item Variant") = QueryValueEntry.Value("Variant Code")
                        r("Lot No_") = QueryValueEntry.Value("Lot No_")
                        r("Quantity") = QueryValueEntry.Value("Quantity")
                        r("Unit Of Measure") = QueryValueEntry.Value("Unit Of Measure")
                        r("Qty Unit Of Measure") = QueryValueEntry.Value("Qty_ per Unit of Measure")

                        QueryValueEntry = Query.From("Purchase Order Header").Transaction(True)
                        QueryValueEntry.WhereAs("No_") = r("Document No_")

                        r("External Document No_") = QueryValueEntry.Value("External Document No_")
                        ' r '("Your Reference") = QueryValueEntry.Value("Originally Ordered No_")
                        r("Source Code") = QueryValueEntry.Value("Source Code")
                        r("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")


                    ElseIf r("Type") = 1 And r("Document No_") <> "" Then
                        Dim QueryValueEntry As Query = Query.From("Sales Order Line").Transaction(True)
                        QueryValueEntry.WhereAs("Document No_") = r("Document No_")
                        'QueryValueEntry.WhereAs("Line No_") = r("Entry No_")
                        'r("Serial No_") = QueryValueEntry.Value("Serial No_")
                        '            r("URL") = ""

                        'r("QRCode") =""
                        r("Expired Date") = QueryValueEntry.Value("Expiration Date")
                        'r("Mfg Date") = QueryValueEntry.Value("Order Date")

                        r("Work Shift No_") = ""
                        r("Work Center") = ""

                        r("Blocked") = 0

                        r("Line No_") = QueryValueEntry.Value("Line No_")
                        r("Item No_") = QueryValueEntry.Value("No_")
                        r("Item Variant") = QueryValueEntry.Value("Variant Code")
                        r("Lot No_") = QueryValueEntry.Value("Lot No_")
                        r("Quantity") = QueryValueEntry.Value("Quantity")
                        r("Unit Of Measure") = QueryValueEntry.Value("Unit Of Measure")
                        r("Qty Unit Of Measure") = QueryValueEntry.Value("Qty_ per Unit of Measure")

                        QueryValueEntry = Query.From("Sales Order Header").Transaction(True)
                        QueryValueEntry.WhereAs("No_") = r("Document No_")

                        r("External Document No_") = QueryValueEntry.Value("External Document No_")
                        '  r("Your Reference") = QueryValueEntry.Value("Originally Ordered No_")
                        r("Source Code") = QueryValueEntry.Value("Source Code")
                        r("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")
                    End If


                Case "Document No_"

                    If r("Type") = 0 And r("Document No_") <> "" Then
                        Dim QueryValueEntry As Query = Query.From("Purchase Order Line").Transaction(True)
                        QueryValueEntry.WhereAs("Document No_") = r("Document No_")

                        'r("Serial No_") = QueryValueEntry.Value("Serial No_")
                        '            r("URL") = ""

                        'r("QRCode") =""
                        r("Expired Date") = QueryValueEntry.Value("Expiration Date")
                        r("Mfg Date") = QueryValueEntry.Value("Order Date")

                        r("Work Shift No_") = ""
                        r("Work Center") = ""
                        r("Blocked") = 0

                        r("Line No_") = QueryValueEntry.Value("Line No_")
                        r("Item No_") = QueryValueEntry.Value("No_")
                        r("Item Variant") = QueryValueEntry.Value("Variant Code")
                        r("Lot No_") = QueryValueEntry.Value("Lot No_")
                        r("Quantity") = QueryValueEntry.Value("Quantity")
                        r("Unit Of Measure") = QueryValueEntry.Value("Unit Of Measure")
                        r("Qty Unit Of Measure") = QueryValueEntry.Value("Qty_ per Unit of Measure")

                        QueryValueEntry = Query.From("Purchase Order Header").Transaction(True)
                        QueryValueEntry.WhereAs("No_") = r("Document No_")

                        r("External Document No_") = QueryValueEntry.Value("External Document No_")
                        'r("Your Reference") = QueryValueEntry.Value("Originally Ordered No_")
                        r("Source Code") = QueryValueEntry.Value("Source Code")
                        r("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")
                    ElseIf r("Type") = 1 And r("Document No_") <> "" Then
                        Dim QueryValueEntry As Query = Query.From("Sales Order Line").Transaction(True)
                        QueryValueEntry.WhereAs("Document No_") = r("Document No_")

                        'r("Serial No_") = QueryValueEntry.Value("Serial No_")
                        '            r("URL") = ""
                        r("Line No_") = QueryValueEntry.Value("Line No_")
                        r("Expired Date") = QueryValueEntry.Value("Expiration Date")
                        'r("Mfg Date") = QueryValueEntry.Value("Order Date")

                        r("Work Shift No_") = ""
                        r("Work Center") = ""
                        r("Entry No_") = QueryValueEntry.Value("RowID")
                        r("Blocked") = 0

                        ' r("Document No_") = QueryValueEntry.Value("Document No_")
                        r("Item No_") = QueryValueEntry.Value("No_")
                        r("Item Variant") = QueryValueEntry.Value("Variant Code")
                        r("Lot No_") = QueryValueEntry.Value("Lot No_")
                        r("Quantity") = QueryValueEntry.Value("Quantity")
                        r("Unit Of Measure") = QueryValueEntry.Value("Unit Of Measure")
                        r("Qty Unit Of Measure") = QueryValueEntry.Value("Qty_ per Unit of Measure")

                        QueryValueEntry = Query.From("Sales Order Header").Transaction(True)
                        QueryValueEntry.WhereAs("No_") = r("Document No_")

                        r("External Document No_") = QueryValueEntry.Value("External Document No_")
                        'r("Your Reference") = QueryValueEntry.Value("Originally Ordered No_")
                        r("Source Code") = QueryValueEntry.Value("Source Code")
                        r("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")
                    End If
                Case "QRCode"
                    Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
                    r("QRCode") = qrCode

            End Select

            Dim OriOrderNo_ As String = ""
            Dim QueryValue As Query = Query.From("Value Entry").Transaction(True)
            QueryValue.WhereAs("Originally Ordered No_") = r("Document No_")
            QueryValue.WhereAs("Item No_") = r("Item No_")

            Dim QueryQRCode As Query = Query.From("QRCode").Transaction(True)
            QueryQRCode.WhereAs("Document No_") = r("Document No_")
            QueryQRCode.WhereAs("Item No_") = r("Item No_")
            If r("Document No_") <> "" AndAlso r("Item No_") <> "" Then
                If QueryQRCode.Value("QRCode") <> "" Then
                    r("QRCode") = QueryQRCode.Value("QRCode")
                Else
                    WorkSession.MsgML("Please Creater QRCode")
                End If
            End If

            r("Login ID") = Framework.UserID
            r("System Date") = Now
        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            ' Query.RollBack()
        End Try
    End Sub

    'Public Sub QRCodeColumnValueChange(ByVal sender As WXSource, ByVal e As WXArgs)
    '    Try
    '        Dim r As Hashtable = sender.CurrentRow
    '        Select Case sender.ColumnName
    '            Case "Entry No_"
    '                Dim QueryValueEntry As Query = Query.From("Value Entry").Transaction(True)
    '                QueryValueEntry.WhereAs("Entry No_") = r("Entry No_")
    '                r("Document No_") = QueryValueEntry.Value("Document No_")
    '                r("Item No_") = QueryValueEntry.Value("Item No_")
    '                r("Item Variant") = QueryValueEntry.Value("Variant Code")
    '                r("Lot No_") = QueryValueEntry.Value("Lot No_")
    '                r("Quantity") = QueryValueEntry.Value("Valued Quantity")
    '                r("Unit Of Measure") = QueryValueEntry.Value("Unit of Measure Code")
    '                r("Qty Unit Of Measure") = QueryValueEntry.Value("Qty_ per Unit of Measure")

    '                r("External Document No_") = QueryValueEntry.Value("External Document No_")
    '                r("Your Reference") = QueryValueEntry.Value("Originally Ordered No_")
    '                r("Source Code") = QueryValueEntry.Value("Source Code")
    '                r("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

    '                r("Serial No_") = QueryValueEntry.Value("Serial No_")

    '                r("Expired Date") = ""
    '                r("Mfg Date") = ""

    '                r("Work Shift No_") = ""
    '                r("Work Center") = ""
    '                r("Entry No_") = 1
    '                r("Blocked") = 0

    '            Case "Document No_"
    '                If r("Type") = 6 And r("Entry No_") = 0 Then
    '                    Dim QueryValueEntry As Query = Query.From("Production Order Line").Transaction(True)
    '                    QueryValueEntry.WhereAs("Production Order No_") = r("Document No_")

    '                    '            r("URL") = ""
    '                    '                  r("QRCode") = ""
    '                    r("Expired Date") = QueryValueEntry.Value("Due Date")
    '                    r("Mfg Date") = QueryValueEntry.Value("Finished Date")

    '                    r("Work Shift No_") = QueryValueEntry.Value("Work Shift Code")
    '                    r("Work Center") = QueryValueEntry.Value("Work Center Code")
    '                    r("Entry No_") = 1
    '                    r("Blocked") = 0

    '                    'r("Serial No_") = QueryValueEntry.Value("Serial No_")
    '                    r("Document No_") = QueryValueEntry.Value("Production Order No_")
    '                    r("Item No_") = QueryValueEntry.Value("Item No_")
    '                    r("Item Variant") = QueryValueEntry.Value("Variant Code")
    '                    r("Lot No_") = QueryValueEntry.Value("Lot No_")
    '                    r("Quantity") = QueryValueEntry.Value("Valued Quantity")
    '                    r("Unit Of Measure") = QueryValueEntry.Value("Unit of Measure Code")
    '                    r("Qty Unit Of Measure") = QueryValueEntry.Value("Qty_ per Unit of Measure")


    '                    QueryValueEntry = Query.From("Production Order Hearder").Transaction(True)
    '                    QueryValueEntry.WhereAs("No_") = r("Document No_")

    '                    r("External Document No_") = QueryValueEntry.Value("External Document No_")
    '                    r("Your Reference") = QueryValueEntry.Value("Work Order No_")
    '                    r("Source Code") = QueryValueEntry.Value("Source Code")
    '                    r("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

    '                End If
    '                If r("Type") = 0 And r("Entry No_") = 0 Then
    '                    Dim QueryValueEntry As Query = Query.From("Purchase Order Line").Transaction(True)
    '                    QueryValueEntry.WhereAs("Document No_") = r("Document No_")

    '                    'r("Serial No_") = QueryValueEntry.Value("Serial No_")
    '                    '            r("URL") = ""

    '                    'r("QRCode") =""
    '                    r("Expired Date") = QueryValueEntry.Value("Expiration Date")
    '                    r("Mfg Date") = QueryValueEntry.Value("Order Date")

    '                    r("Work Shift No_") = ""
    '                    r("Work Center") = ""
    '                    r("Entry No_") = 1
    '                    r("Blocked") = 0

    '                    r("Document No_") = QueryValueEntry.Value("Document No_")
    '                    r("Item No_") = QueryValueEntry.Value("Item No_")
    '                    r("Item Variant") = QueryValueEntry.Value("Variant Code")
    '                    r("Lot No_") = QueryValueEntry.Value("Lot No_")
    '                    r("Quantity") = QueryValueEntry.Value("Valued Quantity")
    '                    r("Unit Of Measure") = QueryValueEntry.Value("Unit of Measure Code")
    '                    r("Qty Unit Of Measure") = QueryValueEntry.Value("Qty_ per Unit of Measure")

    '                    QueryValueEntry = Query.From("Purchase Order Hearder").Transaction(True)
    '                    QueryValueEntry.WhereAs("No_") = r("Document No_")

    '                    r("External Document No_") = QueryValueEntry.Value("External Document No_")
    '                    r("Your Reference") = QueryValueEntry.Value("Originally Ordered No_")
    '                    r("Source Code") = QueryValueEntry.Value("Source Code")
    '                    r("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

    '                End If



    '        End Select
    '        r("Login ID") = Framework.UserID
    '        r("System Date") = Now
    '    Catch ex As Exception
    '        WorkSession.MsgML(ex.ToString)
    '        ' Query.RollBack()
    '    End Try
    'End Sub


    'Public Sub QRCodeApp(ByVal sender As WXSource, ByVal e As WXArgs)
    '    Try
    '        Query.BeginTransaction()
    '        Dim r As Hashtable = sender.CurrentRow
    '        Dim QRCode As String = r("QRCode")

    '        If QRCode = "" Then
    '            WorkSession.MsgML("Xin vui lòng tạo QRCode")
    '            Query.RollBack()
    '            Return
    '        End If
    '        Dim QueryQRCode As Query = Query.From("QRCode").Transaction(True)
    '        QueryQRCode.WhereAs("QRCode") = QRCode
    '        If QueryQRCode.ToTable.Rows.Count = 0 Then
    '            WorkSession.MsgML("Xin vui lòng tạo QRCode")
    '            Query.RollBack()
    '            Return
    '        End If
    '        Dim QueryInsertQREntry As Query = Query.Insert("QRCode Entry")
    '        QueryInsertQREntry.Fields("QRCode") = r("QRCode")
    '        QueryInsertQREntry.Fields("Item No_") = r("Item No_")
    '        QueryInsertQREntry.Fields("Lot No_") = r("Lot No_")
    '        QueryInsertQREntry.Fields("Document Type") = r("Type")
    '        QueryInsertQREntry.Fields("Serial No_") = r("Serial No_")
    '        QueryInsertQREntry.Fields("Description") = r("External Document No_")
    '        QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
    '        QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
    '        QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
    '        QueryInsertQREntry.Fields("Usage %") = 0
    '        QueryInsertQREntry.Fields("Status") = 1
    '        QueryInsertQREntry.Fields("Created Date") = Now
    '        QueryInsertQREntry.Fields("Quantity") = r("Quantity")
    '        QueryInsertQREntry.Fields("Begin Quantity") = r("Quantity")
    '        QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
    '        QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
    '        QueryInsertQREntry.Fields("Source Code") = r("Source Code")
    '        QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
    '        QueryInsertQREntry.Fields("Location Code") = ""
    '        QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
    '        QueryInsertQREntry.Fields("Production Date") = r("Mfg Date")
    '        QueryInsertQREntry.Fields("Qty_not Temped") = 0
    '        QueryInsertQREntry.Fields("Last Date Checked") = Now
    '        QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity")
    '        QueryInsertQREntry.Fields("Entry No_") = r("Entry No_")
    '        QueryInsertQREntry.Execute()

    '        Dim QueryUpdate As Query = Query.Update("QRCode Buffer")
    '        QueryUpdate.Fields("Blocked") = 1
    '        QueryUpdate.WhereAs("RowID") = r("RowID")
    '        QueryUpdate.Execute()
    '        Query.EndTransaction()

    '        WorkSession.MsgML("Successful!")
    '        sender.RefreshSource()

    '    Catch ex As Exception
    '        WorkSession.MsgML(ex.ToString)
    '        Query.RollBack()
    '    End Try
    'End Sub



    'Public Sub FindItemByQrCode(ByVal sender As WXSource, ByVal e As WXArgs)
    '    'Get QR code scanned and submit from app client
    '    Dim qrCode = sender.Request("__QRCODE__")

    '    'Create filter entity by this code and open it. Example with Sales Order
    '    qrCode = Replace(qrCode, "*", "-")
    '    'qrCode = Replace(qrCode, "'", "-")
    '    Dim InvoiceCode As String = ""

    '    'Dim q As Query = Query.From("QRCode Entry")
    '    'q.WhereString = " [Serial No_] like N'" & qrCode & "'"
    '    ''q.Result()
    '    'InvoiceCode = q.Value("External Document No_")

    '    Dim q As Query = Query.From("QRCode Entry")
    '    q.Where("Serial No_").Is(qrCode)
    '    InvoiceCode = q.Value("External Document No_")

    '    Dim entityname As String = ""
    '    q = Query.From("Sales Invoice Header")
    '    q.Where("External Document No_").Is(InvoiceCode)
    '    If q.RecordCount > 0 Then
    '        entityname = "TRD Sales Invoice Header"
    '    Else
    '        entityname = "TRD Sales Order"
    '    End If
    '    Dim filter As String = String.Format("[External Document No_]='{0}'", qrCode)

    '    Framework.OpenEntity(entityname, filter)
    'End Sub

    'Public Sub CreateQRCodeByBatch(ByVal Sender As WXSource, ByVal e As WXArgs)

    '    Dim r As Hashtable = Sender.CurrentRow
    '    If r Is Nothing Or r.Count = 0 Then Return
    '    If r("Status") < 1 Then
    '        WorkSession.MsgML("Must be validated!")
    '        Return
    '    End If

    '    Dim PostQRCodeEntry As Integer = Framework.ZeroNull(r("Post QRCode Entry"))
    '    Dim DocumentNo_ As String = r("Document No_")
    '    Dim LogisticsNo As String = Framework.EmptyNull(r("Logistics No_"))

    '    Dim batchSize As Integer = r("Number No_")
    '    If batchSize = 0 Then batchSize = r("Quantity")
    '    Dim Kit As Integer = 0
    '    If batchSize <> r("Quantity") And batchSize = 1 Then Kit = 1

    '    Dim LotNo As String = r("Lot No_")
    '    If r("Item No_") = "" Then
    '        WorkSession.MsgML("Item No_ Not Blank!")
    '        Return
    '    End If


    '    If Not (r("Type") = 0 Or r("Type") = 6 Or r("Type") = 14) Then
    '        WorkSession.MsgML("Must by Input from Production Order, Transfer Order or Purchasing Process !")
    '        Return

    '        If r("Type") = 14 And r("Status") <> 3 Then
    '            WorkSession.MsgML("Must be block Qrcode first !")
    '            Return
    '        End If
    '    End If

    '    If r("Type") = 6 And ISDBNULL(r("Description"), "") = "" Then
    '        WorkSession.MsgML("Description Not Blank!")
    '        Return
    '    End If

    '    If Left(r("Mfg Date"), 10) = "" Then
    '        WorkSession.MsgML("MFG DATE Not Blank!")
    '        Return
    '    End If
    '    If r("Type") = 6 And Right(r("Work Shift No_"), 1) = "" Then
    '        WorkSession.MsgML("Work Shift Code Not Blank!")
    '        Return
    '    End If
    '    If r("Type") = 6 And r("Work Center") = "" Then
    '        WorkSession.MsgML("Work Center Not Blank!")
    '        Return
    '    End If
    '    If r("Item No_") = "" Then
    '        WorkSession.MsgML("Item No_ Not Blank!")
    '        Return
    '    End If
    '    If r("Type") = 0 And r("Document No_") = "" Then
    '        WorkSession.MsgML("Purchase No_ Not Blank!")
    '        Return
    '    End If

    '    If r("Logistics No_") = "" Then
    '        WorkSession.MsgML("Logistics No_/Packing List Not Blank!")
    '        Return
    '    End If

    '    Dim imageQRCode As String = ""
    '    Dim ItemNo As String = r("Item No_")
    '    Dim PurchaseNo As String = r("Document No_")
    '    Dim PackingNo As String = Framework.EmptyNull(r("Packing List"))

    '    Dim NumberLine As Integer = 1
    '    'Dim str3 As String = Framework.MapPath("Pictures", "") & "/"
    '    Dim CurrentDate As Date = Now()
    '    Dim Day As String = CurrentDate.Day
    '    Dim Month As String = CurrentDate.Month
    '    Dim Year As String = CurrentDate.Year
    '    Dim PathDate As String = Day & Month & Year & "/"
    '    Dim qr As Query = Query.From("QR Setup")
    '    Dim ObjectFolder As String = qr.Value("Object Folder")
    '    Dim iIconSize As Integer = 4
    '    Dim iQRHeight As Integer = 70
    '    Dim iQRWidth As Integer = 70
    '    If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
    '    If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
    '    If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")


    '    Dim FullPath As String = ObjectFolder & "Pictures/QRCode/" & PathDate
    '    If Not Directory.Exists(FullPath) Then
    '        Directory.CreateDirectory(FullPath)
    '    End If
    '    ' Dim str3 As String = Framework.MapPath("Pictures\Document\" & PathDate, "") & "\"
    '    Dim str3 As String = Framework.MapPath("Pictures", "") & "/QRCode/" & PathDate

    '    Dim ProductType As String = Left(r("Description"), 1) ' P is Product, Limit, K this nghiem

    '    Dim Workshiftcode As String = Right(r("Work Shift No_"), 1)
    '    Select Case Workshiftcode
    '        Case "1"
    '            Workshiftcode = "N"
    '        Case "2"
    '            Workshiftcode = "N"
    '        Case "3"
    '            Workshiftcode = "D"
    '    End Select

    '    Dim WorkCenter As String = r("Work Center")
    '    If r("Type") <> 6 And WorkCenter = "" Then
    '        WorkCenter = "*" & DocumentNo_
    '    End If

    '    Dim MFGDATE As String = Left(r("Mfg Date"), 10)
    '    MFGDATE = Replace(MFGDATE, "/", "")

    '    Dim dataQR As String = ""
    '    Dim dataQRCode As String = ""
    '    Dim qRLinkL As String = ""
    '    If LotNo = "" Then LotNo = dataQRCode
    '    If r("Type") = 6 And DocumentNo_ <> "" Then LotNo = DocumentNo_

    '    Select Case r("Type")
    '        Case 0, 14 'Mua
    '            dataQRCode = ItemNo & "*" & LotNo & "*" & PurchaseNo & "*" & LogisticsNo & "*" & MFGDATE
    '        Case 6 'SX
    '            dataQRCode = r("Item No_") & "*" & LotNo & "*" & PurchaseNo & "*" & LogisticsNo & "*" & ProductType & MFGDATE & Workshiftcode & WorkCenter
    '    End Select

    '    Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
    '    DataqRLinkL = Replace(DataqRLinkL, "/", "-")
    '    'qRLinkL = Replace(qRLinkL, "'", "''")
    '    DataqRLinkL = Replace(DataqRLinkL, "*", "-")



    '    Dim ss As Query = Query.From("QRCode").Transaction(True)
    '    ss.Where("Lot No_").Is(LotNo)
    '    ss.And("Document No_").Is(DocumentNo_)
    '    ss.And("Item No_").Is(r("Item No_"))
    '    ss.And("Document Type").Is(r("Type"))
    '    If ss.RecordCount > 0 Then
    '        WorkSession.MsgML("Already Post QRCode !")
    '        Return
    '    End If

    '    Dim qq As Query = Query.From("QRCode Entry").Transaction(True)
    '    Dim j As Integer = qq.RecordCount + 1


    '    Dim yy As Query = Query.From("Document Entry Header").Transaction(True)
    '    yy.Where("No_").Is(DocumentNo_)
    '    yy.And("Logistics No_").Is(LogisticsNo)
    '    yy.And("Document Type").Is(r("Type"))
    '    Dim Status As Integer = yy.Value("Status")

    '    'chua quet ma QRCode
    '    If yy.RecordCount > 0 And Status = 0 Then
    '        Dim queryDelete As Query = Query.Delete("Document Entry Header")
    '        queryDelete.Where("No_").Is(DocumentNo_)
    '        queryDelete.And("Logistics No_").Is(LogisticsNo)
    '        queryDelete.And("Document Type").Is(r("Type"))
    '        queryDelete.Execute()
    '        queryDelete = Query.Delete("Document Entry")
    '        queryDelete.Where("Document No_").Is(DocumentNo_)
    '        queryDelete.And("Logistics No_").Is(LogisticsNo)
    '        queryDelete.And("Document Type").Is(r("Type"))
    '        queryDelete.Execute()
    '    End If

    '    Try
    '        Query.BeginTransaction()

    '        For i As Integer = 0 To batchSize - 1 ' In tblSource.Rows

    '            dataQR = dataQRCode & "_" & FormatDocumentNumber(batchSize, NumberLine)

    '            'Dim sLevel As String = ""

    '            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

    '            qRLinkL = Replace(dataQR, "#", "-")
    '            qRLinkL = Replace(qRLinkL, "/", "-")
    '            'qRLinkL = Replace(qRLinkL, "'", "''")
    '            qRLinkL = Replace(qRLinkL, "*", "-")

    '            Dim q As Query = Query.From("QRCode").Transaction(True)
    '            q.Where("Serial No_").Is(qRLinkL)
    '            'q.And("Item No_").Is(r("Item No_"))
    '            Dim tblline As DataTable = q.ToTable
    '            If tblline.Rows.Count = 0 Then

    '                'Dim qrGenerator = New QRCoder.QRCodeGenerator()
    '                'Dim qrCodeData As QRCoder.QRCodeData
    '                'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
    '                'Dim qrCode As QRCoder.QRCode
    '                'qrCode = New QRCoder.QRCode(qrCodeData)
    '                'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"

    '                'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

    '                'Dim qrImage As System.Drawing.Image
    '                'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
    '                'Dim imageFormat As System.Drawing.Imaging.ImageFormat
    '                'imageFormat = imageFormat.Jpeg
    '                qRLinkL = qRLinkL.ToString().Replace(" ", "")
    '                qRLinkL = qRLinkL.ToString().Replace(":", "")

    '                'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
    '                '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
    '                'End If
    '                'imageQRCode = str3 & "" & qRLinkL & ".jpg"

    '                Dim serverPath As String = str3 + qRLinkL + ".jpg"
    '                CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
    '                imageQRCode = str3 & "" & qRLinkL & ".jpg"

    '                Try

    '                    Dim QueryInsert As Query = Query.Entity("QRCode").Insert

    '                    QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg" '"Pictures\" & qRLinkL & ".jpg"
    '                    QueryInsert.Fields("QRCode") = dataQR
    '                    QueryInsert.Fields("Serial No_") = qRLinkL
    '                    QueryInsert.Fields("Name") = TradingSys.GetItemName(r("Item No_"))
    '                    QueryInsert.Fields("Description") = qRLinkL
    '                    QueryInsert.Fields("Item No_") = r("Item No_")
    '                    QueryInsert.Fields("Item Variant") = r("Item Variant")
    '                    QueryInsert.Fields("Lot No_") = LotNo ' IIf(LotNo <> "", LotNo, dataQRCode)
    '                    'QueryInsert.Fields("Real Lot No_") = LotNo
    '                    'QueryInsert.Fields("Real Expired Date") = r("Expired Date") '  DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

    '                    QueryInsert.Fields("Document Type") = r("Type")

    '                    Select Case r("Type")
    '                        Case 0
    '                            QueryInsert.Fields("Source Type") = 3
    '                        Case 6
    '                            QueryInsert.Fields("Source Type") = 6
    '                        Case 14
    '                            QueryInsert.Fields("Source Type") = 8
    '                    End Select

    '                    QueryInsert.Fields("Document No_") = r("Document No_")
    '                    QueryInsert.Fields("External Document No_") = r("External Document No_")
    '                    QueryInsert.Fields("Your Reference") = r("Your Reference")
    '                    QueryInsert.Fields("Logistics No_") = LogisticsNo
    '                    QueryInsert.Fields("Packing List") = r("Packing List")
    '                    QueryInsert.Fields("Picking No_") = r("Picking No_") 'PackingNo

    '                    QueryInsert.Fields("Quantity") = r("Quantity") / batchSize
    '                    QueryInsert.Fields("Unit Of Measure") = r("Unit Of Measure")
    '                    QueryInsert.Fields("Qty Unit Of Measure") = r("Qty Unit Of Measure")
    '                    QueryInsert.Fields("Login ID") = Framework.UserID
    '                    QueryInsert.Fields("System Date") = r("System Date")
    '                    QueryInsert.Fields("Expired Date") = r("Expired Date")
    '                    QueryInsert.Fields("Mfg Date") = r("Mfg Date")
    '                    'QueryInsert.Fields("Kit") = IIf(r("Qty Unit Of Measure") = 1, 1, 0)
    '                    If Kit = 1 Then
    '                        QueryInsert.Fields("Parent") = 1
    '                        QueryInsert.Fields("Kit") = 1
    '                    Else
    '                        QueryInsert.Fields("Parent") = IIf(r("Qty Unit Of Measure") > 1, 1, 0)
    '                        QueryInsert.Fields("Kit") = 0
    '                    End If


    '                    QueryInsert.Execute()

    '                    If PostQRCodeEntry = 1 Then
    '                        Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
    '                        QueryInsertQREntry.Fields("QRCode") = dataQR
    '                        QueryInsertQREntry.Fields("Item No_") = r("Item No_")
    '                        QueryInsertQREntry.Fields("Lot No_") = LotNo 'If(LotNo <> "", LotNo, dataQRCode) 'dataQRCode 'r("Lot No_")
    '                        QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))

    '                        QueryInsertQREntry.Fields("Document No_") = r("Document No_")
    '                        QueryInsertQREntry.Fields("Logistics No_") = LogisticsNo
    '                        QueryInsertQREntry.Fields("Packing List") = PackingNo

    '                        QueryInsert.Fields("Real Lot No_") = LotNo
    '                        QueryInsert.Fields("Real Expiration Date") = CDate(r("Expired Date")) '  DTSource.Rows(i)("ExpiredDate") '] [datetime] NULL,

    '                        QueryInsertQREntry.Fields("Document Type") = r("Type")
    '                        QueryInsertQREntry.Fields("Serial No_") = qRLinkL
    '                        QueryInsertQREntry.Fields("Description") = r("External Document No_")
    '                        QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
    '                        QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")

    '                        QueryInsertQREntry.Fields("Usage %") = 0
    '                        QueryInsertQREntry.Fields("Status") = 1
    '                        QueryInsertQREntry.Fields("Created Date") = Now
    '                        QueryInsertQREntry.Fields("Quantity") = r("Quantity") / batchSize
    '                        QueryInsertQREntry.Fields("Begin Quantity") = r("Quantity") / batchSize
    '                        QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
    '                        QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
    '                        QueryInsertQREntry.Fields("Source Code") = r("Source Code")
    '                        QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
    '                        QueryInsertQREntry.Fields("Location Code") = r("Location Code")
    '                        QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
    '                        QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
    '                        QueryInsertQREntry.Fields("Qty_not Temped") = 0
    '                        QueryInsertQREntry.Fields("Last Date Checked") = Now
    '                        QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity") / batchSize
    '                        QueryInsertQREntry.Fields("Entry No_") = j
    '                        j = j + 1
    '                        QueryInsertQREntry.Execute()

    '                    End If

    '                    Dim exist As Query = Query.From("Document Entry").Transaction(True)
    '                    exist.Where("Document No_").Is(DocumentNo_)
    '                    exist.And("Logistics No_").Is(LogisticsNo)
    '                    exist.And("Entry No_").Is(NumberLine)
    '                    exist.And("Item No_").Is(r("Item No_"))
    '                    exist.And("Document Type").Is(r("Type"))

    '                    If exist.RecordCount <= 0 Then
    '                        Dim QueryInsertDE As Query = Query.Entity("Document Entry").Insert

    '                        QueryInsertDE.Fields("Line No_") = NumberLine
    '                        QueryInsertDE.Fields("Entry No_") = NumberLine
    '                        QueryInsertDE.Fields("Description") = r("Logistics No_")
    '                        QueryInsertDE.Fields("Logistics No_") = r("Logistics No_")
    '                        QueryInsertDE.Fields("Packing List") = PackingNo

    '                        QueryInsertDE.Fields("Document No_") = r("Document No_")
    '                        QueryInsertDE.Fields("Document Type") = r("Type")
    '                        QueryInsertDE.Fields("Item No_") = r("Item No_")
    '                        QueryInsertDE.Fields("Variant Code") = r("Item Variant")

    '                        QueryInsertDE.Fields("Quantity") = r("Quantity") / batchSize
    '                        QueryInsertDE.Fields("Unit of Measure") = r("Unit Of Measure")
    '                        QueryInsertDE.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
    '                        QueryInsertDE.Fields("Source Code") = r("Source Code")
    '                        QueryInsertDE.Fields("Responsibility Center") = r("Responsibility Center")
    '                        QueryInsertDE.Fields("Location Code") = r("Location Code")

    '                        QueryInsertDE.Fields("QRCode") = dataQR 'IIf(batchSize = 1, dataQR, "")
    '                        QueryInsertDE.Fields("Attach File") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg" ' "Pictures\" & qRLinkL & ".jpg"
    '                        QueryInsertDE.Fields("Serial No_") = qRLinkL
    '                        QueryInsertDE.Fields("Status") = 0

    '                        If r("Lot No_") <> "" Then QueryInsertDE.Fields("Lot No_") = LotNo
    '                        If r("Lot No_") = "" Then QueryInsertDE.Fields("Lot No_") = dataQRCode
    '                        QueryInsertDE.Fields("Real Lot No_") = QueryInsertDE.Fields("Lot No_")
    '                        QueryInsertDE.Fields("Expired Date") = r("Expired Date")
    '                        QueryInsertDE.Fields("Real Expired Date") = r("Expired Date") 'For SM     

    '                        QueryInsertDE.Execute()
    '                    End If


    '                    NumberLine = NumberLine + 1

    '                Catch ex As Exception
    '                    Query.RollBack()
    '                    WorkSession.MsgML(ex.ToString)
    '                    Return
    '                End Try
    '            End If

    '        Next

    '        Dim existHeader As Query = Query.From("Document Entry Header").Transaction(True)
    '        existHeader.Where("No_").Is(DocumentNo_)
    '        existHeader.And("Logistics No_").Is(LogisticsNo)
    '        existHeader.And("Document Type").Is(r("Type"))

    '        If existHeader.RecordCount <= 0 Then
    '            Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
    '            InsertDEH.Fields("Logistics No_") = r("Logistics No_")
    '            InsertDEH.Fields("Document No_") = r("Document No_")
    '            InsertDEH.Fields("No_") = r("Document No_")
    '            InsertDEH.Fields("Document Type") = r("Type")
    '            InsertDEH.Fields("Status") = 1
    '            InsertDEH.Execute()
    '        End If


    '        If PostQRCodeEntry = 1 Then
    '            Dim QueryUpdate As Query = Query.Delete("QRCode Buffer")
    '            QueryUpdate.WhereAs("RowID") = r("RowID")
    '            QueryUpdate.Execute()
    '        Else

    '            Dim QueryUpdate As Query = Query.Update("QRCode Buffer")
    '            QueryUpdate.WhereAs("RowID") = r("RowID")
    '            QueryUpdate.Fields("QRCode") = IIf(batchSize = 1, dataQR, "")
    '            QueryUpdate.Fields("URL") = IIf(batchSize = 1, "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg", "")
    '            QueryUpdate.Fields("Serial No_") = DataqRLinkL
    '            QueryUpdate.Fields("Status") = 2
    '            If LotNo <> "" Then QueryUpdate.Fields("Lot No_") = dataQRCode
    '            QueryUpdate.Execute()
    '        End If

    '        Query.EndTransaction()
    '        WorkSession.MsgML("Successful!")
    '        Sender.RefreshSource()
    '    Catch ex As Exception
    '        Query.RollBack()
    '        WorkSession.MsgML(ex.ToString)
    '    End Try

    'End Sub

    Public Sub QRCodeLabelAppByBatch(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return
        If r("Status") < 2 Then
            WorkSession.MsgML("Must be Created Qrcode !")
            Return
        End If


        Dim DocumentNo_ As String = r("Document No_")
        Dim batchSize As Integer = r("Number No_")
        If batchSize = 0 Then batchSize = r("Quantity")
        Dim LotNo As String = r("Lot No_")
        Dim QRCode As String = r("QRCode")
        Dim WorkCenter As String = r("Work Center")
        If r("Type") <> 6 And WorkCenter = "" Then
            WorkCenter = "*" & DocumentNo_
        End If


        Try
            Query.BeginTransaction()
            Dim NumberLine As Integer = 1
            Dim qq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
            Dim J As Integer = qq.Value("EntryNo")

            Dim str3 As String = Framework.MapPath("Pictures", "") & "/"
            Dim ProductType As String = Left(r("Description"), 1) ' P is Product, Limit, K this nghiem

            Dim Workshiftcode As String = Right(r("Work Shift No_"), 1)
            Select Case Workshiftcode
                Case "1"
                    Workshiftcode = "N"
                Case "2"
                    Workshiftcode = "N"
                Case "3"
                    Workshiftcode = "D"
            End Select

            Dim MFGDATE As String = Left(r("Mfg Date"), 10)
            MFGDATE = Replace(MFGDATE, "/", "")


            Dim dataQR As String = ""
            Dim dataQRCode As String = ""

            dataQRCode = r("Item No_") & "*" & ProductType & MFGDATE & Workshiftcode & WorkCenter
            'Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            'DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            ''qRLinkL = Replace(qRLinkL, "'", "''")
            'DataqRLinkL = Replace(DataqRLinkL, "*", "-")

            If LotNo = "" Then LotNo = dataQRCode
            If r("Type") = 6 And DocumentNo_ <> "" Then LotNo = DocumentNo_

            For i As Integer = 0 To batchSize - 1 ' In tblSource.Rows

                Dim yy As Query = Query.From("Document Entry Header").Transaction(True)
                yy.Where("No_").Is(DocumentNo_)
                yy.And("Document Type").Is(0)

                Dim Status As Integer = yy.Value("Status")

                'chua quet ma QRCode
                If Status = 0 And i = 0 Then
                    Dim queryDelete As Query = Query.Delete("Document Entry Header")
                    queryDelete.Where("No_").Is(DocumentNo_)
                    queryDelete.And("Document Type").Is(r("Type"))
                    queryDelete.Execute()

                    queryDelete = Query.Delete("Document Entry")
                    queryDelete.Where("Document No_").Is(DocumentNo_)
                    queryDelete.And("Document Type").Is(r("Type"))
                    queryDelete.Execute()

                End If

                dataQR = dataQRCode & FormatDocumentNumber(batchSize, NumberLine)

                Dim sLevel As String = ""

                Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

                Dim qRLinkL = Replace(dataQR, "#", "-")
                qRLinkL = Replace(qRLinkL, "/", "-")
                'qRLinkL = Replace(qRLinkL, "'", "''")
                qRLinkL = Replace(qRLinkL, "*", "-")

                Dim q As Query = Query.From("QRCode").Transaction(True)
                q.Where("Serial No_").Is(qRLinkL)
                'q.And("Item No_").Is(r("Item No_"))
                Dim tblline As DataTable = q.ToTable
                If tblline.Rows.Count > 0 Then

                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = dataQR 'r("QRCode")
                    QueryInsertQREntry.Fields("Item No_") = r("Item No_")
                    QueryInsertQREntry.Fields("Lot No_") = LotNo
                    QueryInsertQREntry.Fields("Document No_") = DocumentNo_

                    QueryInsertQREntry.Fields("Document Type") = r("Type")
                    QueryInsertQREntry.Fields("Serial No_") = qRLinkL
                    QueryInsertQREntry.Fields("Description") = r("External Document No_")
                    QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
                    QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
                    QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = r("Quantity") / batchSize
                    QueryInsertQREntry.Fields("Begin Quantity") = r("Quantity") / batchSize
                    QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
                    QueryInsertQREntry.Fields("Source Code") = r("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = r("Location Code")
                    QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
                    QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
                    QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity") / batchSize
                    QueryInsertQREntry.Fields("Entry No_") = J
                    J = J + 1
                    QueryInsertQREntry.Execute()

                    NumberLine = NumberLine + 1

                    Dim QueryUpdateDE As Query = Query.Update("Document Entry")
                    QueryUpdateDE.WhereAs("Document No_") = r("Document No_")
                    QueryUpdateDE.WhereAs("Document Type") = r("Type")
                    QueryUpdateDE.WhereAs("Item No_") = r("Item No_")
                    If r("Lot No_") <> "" Then QueryUpdateDE.WhereAs("Lot No_") = LotNo
                    QueryUpdateDE.WhereAs("Line No_") = i

                    QueryUpdateDE.Fields("QRCode") = dataQR ' IIf(batchSize = 1, dataQR, "")
                    QueryUpdateDE.Fields("Attach File") = "Pictures\" & qRLinkL & ".jpg"
                    QueryUpdateDE.Fields("Serial No_") = qRLinkL
                    QueryUpdateDE.Fields("Status") = 2

                    If r("Lot No_") = "" Then QueryUpdateDE.Fields("Lot No_") = dataQRCode
                    QueryUpdateDE.Execute()

                End If
            Next


            Dim QueryUpdateq As Query = Query.Update("Document Entry Header")
            QueryUpdateq.WhereAs("No_") = DocumentNo_
            QueryUpdateq.Fields("Status") = 1
            QueryUpdateq.Execute()


            QueryUpdateq = Query.Delete("QRCode Buffer")
            QueryUpdateq.WhereAs("RowID") = r("RowID")
            QueryUpdateq.Execute()

            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub

    Public Sub QRCodeBlockByBatch(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        If r("Type") <> 4 Then
            WorkSession.MsgML("Must be transfer order For negative adjustment !")
            Return
        End If

        If r("Blocked") = 1 Then
            WorkSession.MsgML("Already Post !")
            Return
        End If

        'If r("Status") >= 2 Then
        '    WorkSession.MsgML(" Qrcode must be Created!")
        '    Return
        'End If
        If r("Status") < 1 Then
            WorkSession.MsgML("Must be validated!")
            Return
        End If

        Dim DocumentNo_ As String = r("Document No_")
        Dim batchSize As Integer = r("Number No_")
        If batchSize = 0 Then batchSize = r("Quantity")
        Dim LotNo As String = r("Lot No_")
        Dim QRCode As String = r("QRCode")
        Dim yesno As Integer = 0

        Try
            Query.BeginTransaction()
            Dim NumberLine As Integer = 1
            Dim qq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
            Dim J As Integer = qq.Value("EntryNo")

            Dim str3 As String = Framework.MapPath("Pictures", "") & "/"
            Dim ProductType As String = Left(r("Description"), 1) ' P is Product, Limit, K this nghiem

            Dim Workshiftcode As String = Right(r("Work Shift No_"), 1)
            Select Case Workshiftcode
                Case "1"
                    Workshiftcode = "N"
                Case "2"
                    Workshiftcode = "N"
                Case "3"
                    Workshiftcode = "D"
            End Select

            Dim MFGDATE As String = Left(r("Mfg Date"), 10)
            MFGDATE = Replace(MFGDATE, "/", "")


            Dim dataQR As String = ""
            Dim dataQRCode As String = ""

            dataQRCode = r("Item No_") & "*" & ProductType & MFGDATE & Workshiftcode & r("Work Center")
            If LotNo = "" Then LotNo = dataQRCode

            For i As Integer = 0 To batchSize - 1 ' In tblSource.Rows

                dataQR = dataQRCode & FormatDocumentNumber(batchSize, NumberLine)

                Dim sLevel As String = ""

                Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

                Dim qRLinkL = Replace(dataQR, "#", "-")
                qRLinkL = Replace(qRLinkL, "/", "-")
                'qRLinkL = Replace(qRLinkL, "'", "''")
                qRLinkL = Replace(qRLinkL, "*", "-")

                Dim q As Query = Query.From("QRCode").Transaction(True)
                q.Where("Serial No_").Is(qRLinkL)
                'q.And("Item No_").Is(r("Item No_"))
                Dim tblline As DataTable = q.ToTable
                If tblline.Rows.Count > 0 Then

                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = dataQR 'r("QRCode")
                    QueryInsertQREntry.Fields("Item No_") = r("Item No_")
                    QueryInsertQREntry.Fields("Lot No_") = LotNo
                    QueryInsertQREntry.Fields("Document No_") = DocumentNo_

                    QueryInsertQREntry.Fields("Document Type") = 3 'Transfer out or negative adjustment
                    QueryInsertQREntry.Fields("Serial No_") = qRLinkL
                    QueryInsertQREntry.Fields("Description") = r("External Document No_")
                    QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
                    QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
                    QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = -r("Quantity") / batchSize
                    QueryInsertQREntry.Fields("Begin Quantity") = -r("Quantity") / batchSize
                    QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
                    QueryInsertQREntry.Fields("Source Code") = r("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = r("Location Code")
                    QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
                    QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
                    QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = -r("Quantity") / batchSize
                    QueryInsertQREntry.Fields("Entry No_") = J
                    J = J + 1
                    QueryInsertQREntry.Execute()
                    yesno = 1
                    NumberLine = NumberLine + 1
                End If
            Next

            Dim QueryUpdate As Query = Query.Update("Document Entry")
            QueryUpdate.WhereAs("Document No_") = r("Your Reference")

            QueryUpdate.Fields("Serial No_") = r("Serial No_")
            QueryUpdate.Fields("QRCode") = QRCode
            QueryUpdate.Execute()

            'Dim labelall As Integer = 0
            'If labelall = 1 Then
            '    QueryUpdate = Query.Delete("QRCode Buffer")
            '    QueryUpdate.WhereAs("RowID") = r("RowID")
            '    QueryUpdate.Execute()
            'Else
            QueryUpdate = Query.Update("QRCode Buffer")
            QueryUpdate.WhereAs("RowID") = r("RowID")

            QueryUpdate.Fields("Status") = IIf(yesno = 0, 1, 3)
            QueryUpdate.Fields("Blocked") = IIf(yesno = 0, 0, 1)
            QueryUpdate.Execute()
            'End If

            'Dim tableque As String = ""
            'Select Case r("Document Type")
            '    Case 0
            '        tableque = "Purchase Invoice Header"
            '    Case 1
            '        tableque = "Sales Invoice Header"
            '    Case 6
            '        tableque = "Production Order Header Posted"
            '    Case 4
            '        tableque = "Transfer Order Header Posted"
            'End Select
            'QueryQRCode = Query.From(tableque).Transaction(True)
            'QueryQRCode.WhereAs("External Document No_") = r("External Document No_")
            'Dim docno As String = QueryQRCode.Value("Originally Ordered No_")



            Query.EndTransaction()
            If yesno = 1 Then
                WorkSession.MsgML("Successful negative adjustment by kit !")
            Else
                WorkSession.MsgML("QRCode not yet Created !")
            End If

            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub

    'Public Sub CreateQRCodeAll(ByVal Sender As WXSource, ByVal e As WXArgs)

    '    Dim r As Hashtable = Sender.CurrentRow
    '    If r Is Nothing Or r.Count = 0 Then Return

    '    Dim PostQRCodeEntry As Integer = Framework.ZeroNull(r("Post QRCode Entry"))
    '    Dim DocumentNo_ As String = r("Document No_")
    '    Dim LogisticsNo As String = Framework.EmptyNull(r("Logistics No_"))
    '    Dim batchSize As Integer = r("Number No_")
    '    If batchSize = 0 Then batchSize = 1
    '    Dim LotNo As String = r("Lot No_")
    '    If r("Item No_") = "" Then
    '        WorkSession.MsgML("Item No_ Not Blank!")
    '        Return
    '    End If

    '    If Not (r("Type") = 0 Or r("Type") = 6) Then
    '        WorkSession.MsgML("Must by Input from Production Order or Purchasing Process !")
    '        Return
    '    End If

    '    If r("Type") = 6 And ISDBNULL(r("Description"), "") = "" Then
    '        WorkSession.MsgML("Description Not Blank!")
    '        Return
    '    End If

    '    If Left(r("Mfg Date"), 10) = "" Then
    '        WorkSession.MsgML("MFG DATE Not Blank!")
    '        Return
    '    End If
    '    If r("Type") = 6 And Right(r("Work Shift No_"), 1) = "" Then
    '        WorkSession.MsgML("Work Shift Code Not Blank!")
    '        Return
    '    End If
    '    If r("Type") = 6 And r("Work Center") = "" Then
    '        WorkSession.MsgML("Work Center Not Blank!")
    '        Return
    '    End If
    '    Dim imageQRCode As String = ""


    '    Dim NumberLine As Integer = 1
    '    'Dim str3 As String = Framework.MapPath("Pictures", "") & "/"
    '    Dim CurrentDate As Date = Now()
    '    Dim Day As String = CurrentDate.Day
    '    Dim Month As String = CurrentDate.Month
    '    Dim Year As String = CurrentDate.Year
    '    Dim PathDate As String = Day & Month & Year & "/"
    '    Dim qr As Query = Query.From("QR Setup")
    '    Dim ObjectFolder As String = qr.Value("Object Folder")
    '    Dim iIconSize As Integer = 4
    '    Dim iQRHeight As Integer = 70
    '    Dim iQRWidth As Integer = 70
    '    If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
    '    If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
    '    If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")

    '    Dim FullPath As String = ObjectFolder & "Pictures/QRCode/" & PathDate
    '    If Not Directory.Exists(FullPath) Then
    '        Directory.CreateDirectory(FullPath)
    '    End If
    '    Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")

    '    Dim ProductType As String = Left(r("Description"), 1) ' P is Product, Limit, K this nghiem

    '    Dim Workshiftcode As String = Right(r("Work Shift No_"), 1)
    '    Select Case Workshiftcode
    '        Case "1"
    '            Workshiftcode = "N"
    '        Case "2"
    '            Workshiftcode = "N"
    '        Case "3"
    '            Workshiftcode = "D"
    '    End Select

    '    Dim MFGDATE As String = Left(r("Mfg Date"), 10)
    '    MFGDATE = Replace(MFGDATE, "/", "")

    '    Dim dataQR As String = ""
    '    Dim dataQRCode As String = ""
    '    'Select Case r("Source Type")
    '    '    Case 0
    '    '        dataQRCode = "3" & "*" & r("Item No_") & "*" & ProductType & MFGDATE & Workshiftcode & r("Work Center")
    '    '    Case 6
    '    '        dataQRCode = "6" & "*" & r("Item No_") & "*" & ProductType & MFGDATE & Workshiftcode & r("Work Center")
    '    '    Case 14
    '    '        dataQRCode = "8" & "*" & r("Item No_") & "*" & ProductType & MFGDATE & Workshiftcode & r("Work Center")
    '    '    Case Else
    '    dataQRCode = "4" & "*" & r("Item No_") & "*" & ProductType & MFGDATE & Workshiftcode & r("Work Center")
    '    'End Select

    '    dataQRCode = "4" & "*" & r("Item No_") & "*" & ProductType & MFGDATE & Workshiftcode & r("Work Center")

    '    Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
    '    DataqRLinkL = Replace(DataqRLinkL, "/", "-")
    '    'qRLinkL = Replace(qRLinkL, "'", "''")
    '    DataqRLinkL = Replace(DataqRLinkL, "*", "-")

    '    If LotNo = "" Then LotNo = dataQRCode

    '    Dim ss As Query = Query.From("QRCode").Transaction(True)
    '    ss.Where("Lot No_").Is(LotNo)
    '    ss.And("Item No_").Is(r("Item No_"))
    '    ss.And("Document Type").Is(r("Type"))
    '    If ss.RecordCount > 0 Then
    '        WorkSession.MsgML("Already Post QRCode !")
    '        Return
    '    End If

    '    Dim qq As Query = Query.From("QRCode Entry").Transaction(True)
    '    Dim j As Integer = qq.RecordCount + 1

    '    Dim yy As Query = Query.From("Document Entry Header").Transaction(True)
    '    yy.Where("No_").Is(DocumentNo_)
    '    yy.And("Logistics No_").Is(LogisticsNo)
    '    yy.And("Document Type").Is(r("Type"))
    '    Dim Status As Integer = yy.Value("Status")

    '    'chua quet ma QRCode
    '    If yy.RecordCount > 0 And Status = 0 Then
    '        Dim queryDelete As Query = Query.Delete("Document Entry Header")
    '        queryDelete.Where("No_").Is(DocumentNo_)
    '        queryDelete.And("Logistics No_").Is(LogisticsNo)
    '        queryDelete.And("Document Type").Is(r("Type"))
    '        queryDelete.Execute()
    '        queryDelete = Query.Delete("Document Entry")
    '        queryDelete.Where("Document No_").Is(DocumentNo_)
    '        queryDelete.And("Logistics No_").Is(LogisticsNo)
    '        queryDelete.And("Document Type").Is(r("Type"))
    '        queryDelete.Execute()
    '    End If

    '    Try
    '        Query.BeginTransaction()

    '        For i As Integer = 0 To batchSize - 1 ' In tblSource.Rows

    '            dataQR = dataQRCode & "_" & FormatDocumentNumber(batchSize, NumberLine)

    '            'Dim sLevel As String = ""

    '            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

    '            Dim qRLinkL = Replace(dataQR, "#", "-")
    '            qRLinkL = Replace(qRLinkL, "/", "-")
    '            'qRLinkL = Replace(qRLinkL, "'", "''")
    '            qRLinkL = Replace(qRLinkL, "*", "-")

    '            Dim q As Query = Query.From("QRCode").Transaction(True)
    '            q.Where("Serial No_").Is(qRLinkL)
    '            'q.And("Item No_").Is(r("Item No_"))
    '            Dim tblline As DataTable = q.ToTable
    '            If tblline.Rows.Count = 0 Then

    '                'Dim qrGenerator = New QRCoder.QRCodeGenerator()
    '                'Dim qrCodeData As QRCoder.QRCodeData
    '                'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
    '                'Dim qrCode As QRCoder.QRCode
    '                'qrCode = New QRCoder.QRCode(qrCodeData)
    '                'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
    '                ''Dim iIconSize As Integer = 4
    '                ''Dim iQRWidth As Integer = 70
    '                ''Dim iQRHeight As Integer = 70
    '                ''If qr.Value("iIconSize") <> 0 Then iIconSize = qr.Value("iIconSize")
    '                ''If qr.Value("QR Height") <> 0 Then iQRHeight = qr.Value("QR Height")
    '                ''If qr.Value("QR Width") <> 0 Then iQRWidth = qr.Value("QR Width")
    '                'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

    '                'Dim qrImage As System.Drawing.Image
    '                'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
    '                'Dim imageFormat As System.Drawing.Imaging.ImageFormat
    '                'imageFormat = imageFormat.Jpeg
    '                qRLinkL = qRLinkL.ToString().Replace(" ", "")
    '                qRLinkL = qRLinkL.ToString().Replace(":", "")

    '                'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
    '                '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
    '                'End If
    '                'imageQRCode = str3 & "" & qRLinkL & ".jpg"
    '                Dim serverPath As String = str3 + qRLinkL + ".jpg"
    '                CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
    '                imageQRCode = str3 & "" & qRLinkL & ".jpg"

    '                Try

    '                    Dim QueryInsert As Query = Query.Entity("QRCode").Insert

    '                    QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg" ' "Pictures\" & qRLinkL & ".jpg"
    '                    QueryInsert.Fields("QRCode") = dataQR
    '                    QueryInsert.Fields("Serial No_") = qRLinkL
    '                    QueryInsert.Fields("Name") = qRLinkL
    '                    QueryInsert.Fields("Description") = qRLinkL
    '                    QueryInsert.Fields("Item No_") = r("Item No_")
    '                    QueryInsert.Fields("Item Variant") = r("Item Variant")
    '                    QueryInsert.Fields("Lot No_") = dataQRCode
    '                    QueryInsert.Fields("Document Type") = r("Type")
    '                    'Select Case r("Type")
    '                    '    Case 0
    '                    '        QueryInsert.Fields("Source Type") = 3
    '                    '    Case 6
    '                    '        QueryInsert.Fields("Source Type") = 6
    '                    '    Case 14
    '                    '        QueryInsert.Fields("Source Type") = 8
    '                    '    Case Else
    '                    'QueryInsert.Fields("Source Type") = r("Source Type")
    '                    'QueryInsert.Fields("Source No_") = r("Source No_")
    '                    'End Select

    '                    QueryInsert.Fields("Document No_") = r("Document No_")
    '                    QueryInsert.Fields("External Document No_") = r("External Document No_")
    '                    QueryInsert.Fields("Your Reference") = r("Your Reference")
    '                    QueryInsert.Fields("Logistics No_") = LogisticsNo
    '                    QueryInsert.Fields("Packing List") = r("Packing List")
    '                    QueryInsert.Fields("Picking No_") = r("Picking No_") 'PackingNo

    '                    QueryInsert.Fields("Quantity") = r("Quantity") / batchSize
    '                    QueryInsert.Fields("Unit Of Measure") = r("Unit Of Measure")
    '                    QueryInsert.Fields("Qty Unit Of Measure") = r("Qty Unit Of Measure")
    '                    QueryInsert.Fields("Login ID") = Framework.UserID
    '                    QueryInsert.Fields("System Date") = r("System Date")
    '                    QueryInsert.Fields("Expired Date") = r("Expired Date")
    '                    QueryInsert.Fields("Mfg Date") = r("Mfg Date")
    '                    QueryInsert.Fields("Kit") = IIf(batchSize = 1, 1, 0)
    '                    QueryInsert.Fields("Parent") = IIf(r("Qty Unit Of Measure") > 1, 1, 0)
    '                    'QueryInsert.Fields("Kit") = IIf(r("Qty Unit Of Measure") > 1, 1, 0)
    '                    QueryInsert.Execute()

    '                    If PostQRCodeEntry = 1 Then
    '                        Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
    '                        QueryInsertQREntry.Fields("QRCode") = dataQR
    '                        QueryInsertQREntry.Fields("Item No_") = r("Item No_")
    '                        QueryInsertQREntry.Fields("Lot No_") = dataQRCode 'r("Lot No_")
    '                        QueryInsertQREntry.Fields("Document No_") = r("Document No_")

    '                        QueryInsertQREntry.Fields("Document Type") = r("Type")
    '                        QueryInsertQREntry.Fields("Serial No_") = qRLinkL
    '                        QueryInsertQREntry.Fields("Description") = r("External Document No_")
    '                        QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
    '                        QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
    '                        QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
    '                        QueryInsertQREntry.Fields("Usage %") = 0
    '                        QueryInsertQREntry.Fields("Status") = 1
    '                        QueryInsertQREntry.Fields("Created Date") = Now
    '                        QueryInsertQREntry.Fields("Quantity") = r("Quantity") / batchSize
    '                        QueryInsertQREntry.Fields("Begin Quantity") = r("Quantity") / batchSize
    '                        QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
    '                        QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
    '                        QueryInsertQREntry.Fields("Source Code") = r("Source Code")
    '                        QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
    '                        QueryInsertQREntry.Fields("Location Code") = r("Location Code")
    '                        QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
    '                        QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
    '                        QueryInsertQREntry.Fields("Qty_not Temped") = 0
    '                        QueryInsertQREntry.Fields("Last Date Checked") = Now
    '                        QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity") / batchSize
    '                        QueryInsertQREntry.Fields("Entry No_") = j
    '                        j = j + 1
    '                        QueryInsertQREntry.Execute()
    '                    End If

    '                    Dim exist As Query = Query.From("Document Entry").Transaction(True)
    '                    exist.Where("Document No_").Is(DocumentNo_)
    '                    exist.And("Logistics No_").Is(LogisticsNo)
    '                    exist.And("Entry No_").Is(NumberLine)
    '                    exist.And("Item No_").Is(r("Item No_"))
    '                    exist.And("Document Type").Is(r("Type"))

    '                    If exist.RecordCount <= 0 Then
    '                        Dim QueryInsertDE As Query = Query.Entity("Document Entry").Insert

    '                        QueryInsertDE.Fields("Line No_") = NumberLine
    '                        QueryInsertDE.Fields("Entry No_") = NumberLine
    '                        QueryInsertDE.Fields("Description") = LogisticsNo
    '                        QueryInsertDE.Fields("Logistics No_") = LogisticsNo

    '                        QueryInsertDE.Fields("Document No_") = r("Document No_")
    '                        QueryInsertDE.Fields("Document Type") = r("Type")
    '                        QueryInsertDE.Fields("Item No_") = r("Item No_")
    '                        QueryInsertDE.Fields("Variant Code") = r("Item Variant")

    '                        QueryInsertDE.Fields("Quantity") = r("Quantity") / batchSize
    '                        QueryInsertDE.Fields("Unit of Measure") = r("Unit Of Measure")
    '                        QueryInsertDE.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
    '                        QueryInsertDE.Fields("Source Code") = r("Source Code")
    '                        QueryInsertDE.Fields("Responsibility Center") = r("Responsibility Center")
    '                        QueryInsertDE.Fields("Location Code") = r("Location Code")

    '                        QueryInsertDE.Fields("QRCode") = dataQR 'IIf(batchSize = 1, dataQR, "")
    '                        QueryInsertDE.Fields("Attach File") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
    '                        QueryInsertDE.Fields("Serial No_") = qRLinkL
    '                        QueryInsertDE.Fields("Status") = 0

    '                        If r("Lot No_") <> "" Then QueryInsertDE.Fields("Lot No_") = LotNo
    '                        If r("Lot No_") = "" Then QueryInsertDE.Fields("Lot No_") = dataQRCode
    '                        QueryInsertDE.Fields("Real Lot No_") = QueryInsertDE.Fields("Lot No_")
    '                        QueryInsertDE.Fields("Expired Date") = r("Expired Date")
    '                        QueryInsertDE.Fields("Real Expired Date") = r("Expired Date") 'For SM     

    '                        QueryInsertDE.Execute()

    '                    End If

    '                    NumberLine = NumberLine + 1

    '                Catch ex As Exception
    '                    Query.RollBack()
    '                    WorkSession.MsgML(ex.ToString)
    '                    Return
    '                End Try
    '            End If

    '        Next

    '        Dim existHeader As Query = Query.From("Document Entry Header").Transaction(True)
    '        existHeader.Where("No_").Is(DocumentNo_)
    '        existHeader.And("Logistics No_").Is(LogisticsNo)
    '        existHeader.And("Document Type").Is(r("Type"))

    '        If existHeader.RecordCount <= 0 Then
    '            Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
    '            InsertDEH.Fields("Logistics No_") = LogisticsNo
    '            InsertDEH.Fields("Document No_") = r("Document No_")
    '            InsertDEH.Fields("No_") = r("Document No_")
    '            InsertDEH.Fields("Document Type") = r("Type")
    '            InsertDEH.Fields("Status") = 1
    '            InsertDEH.Execute()
    '        End If

    '        If PostQRCodeEntry = 1 Then
    '            Dim QueryUpdate As Query = Query.Delete("QRCode Buffer")
    '            QueryUpdate.WhereAs("RowID") = r("RowID")
    '            QueryUpdate.Execute()
    '        Else
    '            Dim QueryUpdate As Query = Query.Update("QRCode Buffer")
    '            QueryUpdate.WhereAs("RowID") = r("RowID")
    '            'QueryUpdate.Fields("QRCode") = dataQRCode
    '            QueryUpdate.Fields("Serial No_") = DataqRLinkL
    '            'QueryUpdate.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg" 
    '            QueryUpdate.Fields("Lot No_") = dataQRCode
    '            QueryUpdate.Execute()
    '        End If


    '        Query.EndTransaction()
    '        WorkSession.MsgML("Successful!")
    '        Sender.RefreshSource()
    '    Catch ex As Exception
    '        Query.RollBack()
    '        WorkSession.MsgML(ex.ToString)
    '    End Try

    'End Sub

    Public Sub QRCodeDocumentEntryOrderApp(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        Dim qrcode As String = r("QRCode")
        Dim serialno_ As String = r("Serial No_")

        Dim DocumentNo_ As String = r("Document No_")
        Dim ItemNo_ As String = r("Item No_")
        Dim ItemVariant As String = r("Item Variant")
        Dim LotNo_ As String = r("Lot No_")

        Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        Dim i As Integer = qqq.Value("EntryNo")


        Try
            Query.BeginTransaction()
            Dim qqqa As Query = Query.From("Document Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
            Dim J As Integer = qqqa.Value("EntryNo")


            Dim tableID As Integer = 0
            Dim querrydata As Query = Query.From("Document Entry Buffer").Transaction(True)
            querrydata.Where("Document No_").Is(DocumentNo_)
            Dim dbSource As DataTable = querrydata.ToTable


            For Each trow As DataRow In dbSource.Rows
                Dim QueryDocumentEntry As Query = Query.From("Document Entry").Transaction(True)

                QueryDocumentEntry.Where("Document No_").Is(trow("Document No_"))
                QueryDocumentEntry.And("Document Type").Is(trow("Type"))
                'QueryDocumentEntry.And("QRCode").Is(qrcode)
                'QueryDocumentEntry.And("Serial No_").Is(trow("Serial No_"))

                If serialno_ <> "" Then QueryDocumentEntry.And("Serial No_").Is(serialno_)


                If QueryDocumentEntry.ToTable.Rows.Count = 0 Then

                    Dim QueryInsertQREntry As Query = Query.Entity("Document Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryInsertQREntry.Fields("Entry No_") = J
                    J = J + 1
                    QueryInsertQREntry.Fields("Document Type") = trow("Type")

                    Select Case trow("Type")
                        Case 0
                            tableID = 3
                            QueryInsertQREntry.Fields("Table Name") = "Purchase Order"
                        Case 1
                            tableID = 2
                            QueryInsertQREntry.Fields("Table Name") = "Sales Order"
                        Case 4
                            tableID = 4
                            QueryInsertQREntry.Fields("Table Name") = "Transfer Order"
                        Case 6
                            tableID = 6
                            QueryInsertQREntry.Fields("Table Name") = "Work Order"
                        Case 7
                            tableID = 7
                            QueryInsertQREntry.Fields("Table Name") = "Production Order "
                        Case 8
                            tableID = 8
                            QueryInsertQREntry.Fields("Table Name") = "Maintenance"
                    End Select
                    QueryInsertQREntry.Fields("Document Type") = trow("Type") 'tableID
                    QueryInsertQREntry.Fields("Posting Date") = CDate(trow("Mfg Date"))

                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Document No_") = trow("Document No_")
                    QueryInsertQREntry.Fields("Status") = 0
                    QueryInsertQREntry.Fields("User ID") = Framework.UserID
                    QueryInsertQREntry.Fields("Attach File") = trow("Attach File")
                    QueryInsertQREntry.Fields("Attach File 1") = trow("Attach File 1")
                    QueryInsertQREntry.Fields("Attach File 2") = trow("Attach File 2")
                    QueryInsertQREntry.Fields("Attach File 3") = trow("Attach File 3")
                    QueryInsertQREntry.Fields("Attach File 4") = trow("Attach File 4")
                    QueryInsertQREntry.Fields("Line No_") = trow("Line No_")
                    QueryInsertQREntry.Fields("Item No_") = trow("Item No_")
                    QueryInsertQREntry.Execute()
                End If

                Dim QueryQRCode As Query = Query.From("QRCode Entry").Transaction(True)
                QueryQRCode.Where("Document No_").Is(DocumentNo_)
                QueryQRCode.And("Document Type").Is(trow("Type"))
                QueryQRCode.And("QRCode").Is(qrcode)
                'QueryQRCode.And("Item No_").Is(trow("Item No_"))

                If QueryQRCode.ToTable.Rows.Count = 0 Then
                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = trow("QRCode") 'r("QRCode")
                    QueryInsertQREntry.Fields("Item No_") = trow("Item No_")
                    QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Document Type") = trow("Type")
                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Description") = trow("External Document No_")
                    QueryInsertQREntry.Fields("Variant Code") = trow("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = trow("Work Center")
                    QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
                    QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Unit of Measure Code") = trow("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = trow("Qty Unit Of Measure")
                    QueryInsertQREntry.Fields("Source Code") = trow("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = trow("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = ""
                    QueryInsertQREntry.Fields("External Document No_") = trow("External Document No_")
                    QueryInsertQREntry.Fields("Production Date") = CDate(trow("Mfg Date"))
                    QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Entry No_") = i
                    i = i + 1
                    QueryInsertQREntry.Fields("Number No_") = trow("Number No_")
                    QueryInsertQREntry.Fields("Document No_") = DocumentNo_
                    QueryInsertQREntry.Execute()

                End If
            Next

            Dim QueryDelete As Query = Query.Delete("Document Entry Buffer")
            QueryDelete.WhereAs("Document No_") = DocumentNo_
            QueryDelete.Execute()


            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub
    'Dung cho bao tri vi khong nhap va khong xuat tra nen k vo QRcode entry
    Public Sub QRCodeMaintenanceDocEntryApp(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        If r("Serial No_") = "" Then
            WorkSession.MsgML("Please input Serial No_")
            Return
        End If
        Dim QueryQRCode As Query = Query.From("QRCode Entry").Transaction(True)
        QueryQRCode.WhereAs("Serial No_") = r("Serial No_")
        QueryQRCode.WhereAs("Document Type") = 1

        If QueryQRCode.ToTable.Rows.Count = 0 Then
            WorkSession.MsgML("Chưa xuất bán")
            Return
        End If
        Dim QRCode As String = QueryQRCode.Value("QRCode")

        Try
            Query.BeginTransaction()

            Dim qqqa As Query = Query.From("Document Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
            Dim J As Integer = qqqa.Value("EntryNo")

            Dim QueryInsertQREntry As Query = Query.Entity("Document Entry").Insert
            QueryInsertQREntry.Fields("QRCode") = QRCode
            QueryInsertQREntry.Fields("Entry No_") = J

            QueryInsertQREntry.Fields("Table ID") = 8
            QueryInsertQREntry.Fields("Document Type") = 8 'r("Type")
            'Select Case r("Type")
            '    Case 0
            '        QueryInsertQREntry.Fields("Table Name") = "Purchase Order"
            '    Case 1
            '        QueryInsertQREntry.Fields("Table Name") = "Sales Order"
            '    Case 4
            '        QueryInsertQREntry.Fields("Table Name") = "Transfer Order"
            '    Case 6, 7
            'QueryInsertQREntry.Fields("Table Name") = "Production Order"
            '    Case 8
            QueryInsertQREntry.Fields("Table Name") = "Maintenance"
            'End Select
            QueryInsertQREntry.Fields("Posting Date") = CDate(r("Mfg Date"))
            QueryInsertQREntry.Fields("Serial No_") = r("Serial No_")
            QueryInsertQREntry.Fields("Document No_") = r("Document No_")
            QueryInsertQREntry.Fields("Status") = 0
            QueryInsertQREntry.Fields("User ID") = Framework.UserID
            QueryInsertQREntry.Fields("Attach File") = r("Attach File")
            QueryInsertQREntry.Fields("Attach File 1") = r("Attach File 1")
            QueryInsertQREntry.Fields("Attach File 2") = r("Attach File 2")
            QueryInsertQREntry.Fields("Attach File 3") = r("Attach File 3")
            QueryInsertQREntry.Fields("Attach File 4") = r("Attach File 4")
            QueryInsertQREntry.Fields("Line No_") = r("Line No_")
            QueryInsertQREntry.Fields("Item No_") = r("Item No_")

            QueryInsertQREntry.Execute()


            Dim QueryUpdate As Query = Query.Delete("Document Entry Buffer")
            'QueryUpdate.Fields("Blocked") = 1
            QueryUpdate.WhereAs("RowID") = r("RowID")
            QueryUpdate.Execute()

            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub

    Public Sub CreateQRCode(ByVal Sender As WXSource, ByVal e As WXArgs)
        Dim imageQRCode As String

        Dim r As Hashtable = Sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        If Not (r("Type") = 0 Or r("Type") = 6) Then
            WorkSession.MsgML("Must by Input from Production Order or Purchasing Process !")
            Return
        End If

        Dim str3 As String = Framework.MapPath("Pictures", "") & "/"
        Dim ProductType As String = Left(r("Description"), 1) ' P is Product, Limit, K this nghiem

        Dim Workshiftcode As String = Right(r("Work Shift No_"), 1)
        Select Case Workshiftcode
            Case "1"
                Workshiftcode = "N"
            Case "2"
                Workshiftcode = "N"
            Case "3"
                Workshiftcode = "D"
        End Select

        Dim MFGDATE As String = Left(r("Mfg Date"), 10)
        MFGDATE = Replace(MFGDATE, "/", "")

        Dim dataQR As String = ""
        dataQR = r("Item No_") & "*" & ProductType & "MFG" & MFGDATE & "SHIFT" & Workshiftcode & "MC" & r("Work Center")

        Dim sLevel As String = ""

        Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

        Dim qRLinkL = Replace(dataQR, "#", "-")
        qRLinkL = Replace(qRLinkL, "/", "-")
        'qRLinkL = Replace(qRLinkL, "'", "''")
        qRLinkL = Replace(qRLinkL, "*", "-")

        Dim q As Query = Query.From("QRCode").Transaction(True)
        q.Where("Serial No_").Is(qRLinkL)
        'q.And("Item No_").Is(r("Item No_"))
        Dim tblline As DataTable = q.ToTable
        If tblline.Rows.Count > 0 Then
            WorkSession.MsgML("QRcode already Created !")
            Return

        End If

        'Dim qrGenerator = New QRCoder.QRCodeGenerator()
        'Dim qrCodeData As QRCoder.QRCodeData
        'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
        'Dim qrCode As QRCoder.QRCode
        'qrCode = New QRCoder.QRCode(qrCodeData)
        'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
        'Dim iIconSize As Integer = 4
        Dim iQRWidth As Integer = 70
        Dim iQRHeight As Integer = 70
        'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

        'Dim qrImage As System.Drawing.Image
        'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
        'Dim imageFormat As System.Drawing.Imaging.ImageFormat
        'imageFormat = imageFormat.Jpeg
        qRLinkL = qRLinkL.ToString().Replace(" ", "")
        qRLinkL = qRLinkL.ToString().Replace(":", "")
        'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
        '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
        'End If
        'imageQRCode = str3 & "" & qRLinkL & ".jpg"

        Dim serverPath As String = str3 + qRLinkL + ".jpg"
        CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
        imageQRCode = str3 & "" & qRLinkL & ".jpg"

        Try
            Query.BeginTransaction()

            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures\" & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = r("Item No_")
            QueryInsert.Fields("Item Variant") = r("Item Variant")
            QueryInsert.Fields("Lot No_") = dataQR
            QueryInsert.Fields("Document Type") = r("Type")
            QueryInsert.Fields("Quantity") = r("Quantity")
            QueryInsert.Fields("Unit Of Measure") = r("Unit Of Measure")
            QueryInsert.Fields("Qty Unit Of Measure") = r("Qty Unit Of Measure")
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = r("System Date")
            QueryInsert.Fields("Expired Date") = r("Expired Date")
            QueryInsert.Fields("Mfg Date") = r("Mfg Date")
            QueryInsert.Execute()

            Dim QueryUpdate As Query = Query.Update("QRCode Buffer")
            QueryUpdate.WhereAs("RowID") = r("RowID")
            QueryUpdate.Fields("QRCode") = dataQR
            QueryUpdate.Fields("Serial No_") = qRLinkL
            QueryUpdate.Fields("URL") = "Pictures\" & qRLinkL & ".jpg"
            QueryUpdate.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub QRCodeAppAll(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        Dim DocumentNo_ As String = r("Document No_")
        Dim batchSize As Integer = r("Number No_")
        If batchSize = 0 Then batchSize = 1
        Dim LotNo As String = r("Lot No_")
        Dim QRCode As String = r("QRCode")

        'If QRCode = "" Then
        '    WorkSession.MsgML("Please Create QRCode")
        '    Return
        'End If

        Try
            Query.BeginTransaction()
            Dim NumberLine As Integer = 1
            Dim qq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
            Dim J As Integer = qq.Value("EntryNo")

            Dim str3 As String = Framework.MapPath("Pictures", "") & "/"
            Dim ProductType As String = Left(r("Description"), 1) ' P is Product, Limit, K this nghiem

            Dim Workshiftcode As String = Right(r("Work Shift No_"), 1)
            Select Case Workshiftcode
                Case "1"
                    Workshiftcode = "N"
                Case "2"
                    Workshiftcode = "N"
                Case "3"
                    Workshiftcode = "D"
            End Select

            Dim MFGDATE As String = Left(r("Mfg Date"), 10)
            MFGDATE = Replace(MFGDATE, "/", "")


            Dim dataQR As String = ""
            Dim dataQRCode As String = ""

            dataQRCode = r("Item No_") & "*" & ProductType & MFGDATE & Workshiftcode & r("Work Center")
            If LotNo = "" Then LotNo = dataQRCode

            For i As Integer = 0 To batchSize - 1 ' In tblSource.Rows

                dataQR = dataQRCode & FormatDocumentNumber(batchSize, NumberLine)

                Dim sLevel As String = ""

                Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

                Dim qRLinkL = Replace(dataQR, "#", "-")
                qRLinkL = Replace(qRLinkL, "/", "-")
                'qRLinkL = Replace(qRLinkL, "'", "''")
                qRLinkL = Replace(qRLinkL, "*", "-")

                Dim q As Query = Query.From("QRCode").Transaction(True)
                q.Where("Serial No_").Is(qRLinkL)
                'q.And("Item No_").Is(r("Item No_"))
                Dim tblline As DataTable = q.ToTable
                If tblline.Rows.Count > 0 Then

                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = dataQR 'r("QRCode")
                    QueryInsertQREntry.Fields("Item No_") = r("Item No_")
                    QueryInsertQREntry.Fields("Lot No_") = LotNo
                    QueryInsertQREntry.Fields("Document No_") = DocumentNo_

                    QueryInsertQREntry.Fields("Document Type") = r("Type")
                    QueryInsertQREntry.Fields("Serial No_") = qRLinkL
                    QueryInsertQREntry.Fields("Description") = r("External Document No_")
                    QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
                    QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
                    QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = r("Quantity") / batchSize
                    QueryInsertQREntry.Fields("Begin Quantity") = r("Quantity") / batchSize
                    QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
                    QueryInsertQREntry.Fields("Source Code") = r("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = ""
                    QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
                    QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
                    QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity") / batchSize
                    QueryInsertQREntry.Fields("Entry No_") = J
                    J = J + 1
                    QueryInsertQREntry.Execute()

                    NumberLine = NumberLine + 1
                End If
            Next


            Dim Querydelete As Query = Query.Delete("QRCode Buffer")
            'QueryUpdate.Fields("Blocked") = 1
            Querydelete.WhereAs("RowID") = r("RowID")
            Querydelete.Execute()

            'Dim tableque As String = ""
            'Select Case r("Document Type")
            '    Case 0
            '        tableque = "Purchase Invoice Header"
            '    Case 1
            '        tableque = "Sales Invoice Header"
            '    Case 6
            '        tableque = "Production Order Header Posted"
            '    Case 4
            '        tableque = "Transfer Order Header Posted"
            'End Select
            'QueryQRCode = Query.From(tableque).Transaction(True)
            'QueryQRCode.WhereAs("External Document No_") = r("External Document No_")
            'Dim docno As String = QueryQRCode.Value("Originally Ordered No_")

            Dim QueryUpdate As Query = Query.Update("Document Entry")
            QueryUpdate.WhereAs("Document No_") = DocumentNo_ ' r("Your Reference")

            QueryUpdate.Fields("Serial No_") = r("Serial No_")
            QueryUpdate.Fields("QRCode") = QRCode
            QueryUpdate.Execute()

            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub

    Public Sub QRCodeApp(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        Try
            Query.BeginTransaction()

            Dim QRCode As String = r("QRCode")

            If QRCode = "" Then
                WorkSession.MsgML("Please Create QRCode")
                Query.RollBack()
                Return
            End If

            Dim QueryQRCode As Query = Query.From("QRCode").Transaction(True)
            QueryQRCode.WhereAs("QRCode") = QRCode
            If QueryQRCode.ToTable.Rows.Count = 0 Then
                WorkSession.MsgML("Xin vui lòng tạo QRCode")
                Query.RollBack()
                Return
            End If
            Dim qq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
            Dim J As Integer = qq.Value("EntryNo")


            Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
            QueryInsertQREntry.Fields("QRCode") = QRCode 'r("QRCode")
            QueryInsertQREntry.Fields("Item No_") = r("Item No_")
            QueryInsertQREntry.Fields("Lot No_") = r("Lot No_")
            QueryInsertQREntry.Fields("Document No_") = r("Lot No_")

            QueryInsertQREntry.Fields("Document Type") = r("Type")
            QueryInsertQREntry.Fields("Serial No_") = r("Serial No_")
            QueryInsertQREntry.Fields("Description") = r("External Document No_")
            QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
            QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
            QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
            QueryInsertQREntry.Fields("Usage %") = 0
            QueryInsertQREntry.Fields("Status") = 1
            QueryInsertQREntry.Fields("Created Date") = Now
            QueryInsertQREntry.Fields("Quantity") = r("Quantity")
            QueryInsertQREntry.Fields("Begin Quantity") = r("Quantity")
            QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
            QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
            QueryInsertQREntry.Fields("Source Code") = r("Source Code")
            QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
            QueryInsertQREntry.Fields("Location Code") = ""
            QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
            QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
            QueryInsertQREntry.Fields("Qty_not Temped") = 0
            QueryInsertQREntry.Fields("Last Date Checked") = Now
            QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity")
            QueryInsertQREntry.Fields("Entry No_") = J
            QueryInsertQREntry.Execute()


            Dim Querydelete As Query = Query.Delete("QRCode Buffer")
            'QueryUpdate.Fields("Blocked") = 1
            Querydelete.WhereAs("RowID") = r("RowID")
            Querydelete.Execute()

            'Dim tableque As String = ""
            'Select Case r("Document Type")
            '    Case 0
            '        tableque = "Purchase Invoice Header"
            '    Case 1
            '        tableque = "Sales Invoice Header"
            '    Case 6
            '        tableque = "Production Order Header Posted"
            '    Case 4
            '        tableque = "Transfer Order Header Posted"
            'End Select
            'QueryQRCode = Query.From(tableque).Transaction(True)
            'QueryQRCode.WhereAs("External Document No_") = r("External Document No_")
            'Dim docno As String = QueryQRCode.Value("Originally Ordered No_")

            Dim QueryUpdate As Query = Query.Update("Document Entry")
            QueryUpdate.WhereAs("Document No_") = r("Your Reference")

            QueryUpdate.Fields("Serial No_") = r("Serial No_")
            QueryUpdate.Fields("QRCode") = QRCode
            QueryUpdate.Execute()

            Query.EndTransaction()

            WorkSession.MsgML("Successful!")
            sender.RefreshSource()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try
    End Sub

    Public Sub CreaterQRCode(ByVal Sender As WXSource, ByVal e As WXArgs)
        'Dim imageQRCode As String
        Dim r As Hashtable = Sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        Try


            Dim str3 As String = Framework.MapPath("Pictures", "") & "\"

            Dim dataQR As String = ""
            dataQR = r("Item No_") & "*" & r("Expired Date") & "*" & r("Document No_") & "*" & r("Work Shift No_") & "*" & r("Work Center") & "*" & r("Serial No_")

            'Dim sLevel As String = ""

            'Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            qRLinkL = Replace(qRLinkL, "*", "-")
            'Dim qrGenerator = New QRCoder.QRCodeGenerator()
            'Dim qrCodeData As QRCoder.QRCodeData
            'qrCodeData = qrGenerator.CreateQrCode(dataQR, eccLevel)
            'Dim qrCode As QRCoder.QRCode
            'qrCode = New QRCoder.QRCode(qrCodeData)
            'Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
            'Dim iIconSize As Integer = 4
            Dim iQRWidth As Integer = 70
            Dim iQRHeight As Integer = 70
            'Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)

            'Dim qrImage As System.Drawing.Image
            'qrImage = qrCode.GetGraphic(20, "Black", "White", False)
            'Dim imageFormat As System.Drawing.Imaging.ImageFormat
            'imageFormat = imageFormat.Jpeg

            'If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
            '    qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
            'End If
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath, iQRHeight, iQRWidth)
            'imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Try
                Query.BeginTransaction()
                Dim QueryUpdate As Query = Query.Update("QRCode")
                QueryUpdate.WhereAs("RowID") = r("RowID")
                QueryUpdate.Fields("URL") = qRLinkL & ".jpg"
                QueryUpdate.Execute()
                Query.EndTransaction()
            Catch ex As Exception

            End Try
            WorkSession.MsgML("Succes!")
            Sender.RefreshSource()
        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)

        End Try

    End Sub

    'Public Sub CreaterQRCodeDev(ByVal Sender As WXSource, ByVal e As WXArgs)
    '    Dim imageQRCode As String

    '    Try
    '        Dim r As Hashtable = Sender.CurrentRow
    '        Dim str3 As String = Framework.MapPath("Pictures", "")

    '        Dim dataQR As String = ""
    '        dataQR = r("Item No_") & "*" & r("Expired Date") & "*" & r("Document No_") & "*" & r("Work Shift No_") & "*" & r("Work Center") & "*" & r("Serial No_")
    '        'r("Document No_") & "#" & r("Item No_") & "#" & r("Item Variant") & "#" & r("Lot No_") & "#" & r("Quantity")
    '        Dim qRLinkL = Replace(dataQR, "#", "-")
    '        qRLinkL = Replace(qRLinkL, "/", "-")
    '        qRLinkL = Replace(qRLinkL, "*", "-")

    '        Dim barCode As New BarCode()
    '        barCode.Symbology = Symbology.QRCode
    '        barCode.CodeText = dataQR
    '        barCode.BackColor = System.Drawing.Color.White
    '        barCode.ForeColor = System.Drawing.Color.Black
    '        barCode.RotationAngle = 0
    '        barCode.CodeBinaryData = Encoding.Default.GetBytes(barCode.CodeText)
    '        barCode.Options.QRCode.CompactionMode = QRCodeCompactionMode.Byte
    '        barCode.Options.QRCode.ErrorLevel = QRCodeErrorLevel.Q
    '        barCode.Options.QRCode.ShowCodeText = False
    '        barCode.DpiX = 72
    '        barCode.DpiY = 72
    '        barCode.Module = 2.0F

    '        Dim imageFormat As System.Drawing.Imaging.ImageFormat
    '        imageFormat = imageFormat.Jpeg
    '        Dim qrImage As System.Drawing.Image
    '        qrImage = barCode.BarCodeImage
    '        If Not System.IO.File.Exists(str3 + qRLinkL + ".jpg") Then
    '            qrImage.Save(str3 + qRLinkL + ".jpg", imageFormat)
    '        End If
    '        imageQRCode = str3 & "" & qRLinkL & ".jpg"
    '        r("URL") = qRLinkL & ".jpg"

    '        WorkSession.MsgML("Succes!")
    '    Catch ex As Exception
    '        WorkSession.MsgML(ex.ToString)

    '    End Try

    'End Sub

    Public Sub FindItemByQrCode(ByVal sender As WXSource, ByVal e As WXArgs)
        'WorkSession.MsgML("Well come to FindItemByQrCode ")
        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")

        WorkSession.MsgML("QrCode {0}", qrCode)

        If qrCode = "" Then
            'Dim rc As Hashtable = sender.CurrentRow
            'If rc Is Nothing Or rc.Count = 0 Then
            'WorkSession.MsgML("QrCode not found")
            sender.Response("result") = String.Format("QrCode not found !")
            Return
            'End If
            'qrCode = rc("QRCode")
        End If

        Dim qqq As Query = Query.From("QRCode").Transaction(True)
        qqq.Where("QRCode").Is(qrCode)

        'Dim tblline As DataTable = qqq.ToTable
        Dim entity As String = "QRCode"
        Try

            If qqq.RecordCount > 0 Then
                sender.Response("result") = String.Format("Đã tìm thấy QRCode Item !")
                Framework.OpenEntity(entity, String.Format("[QRCode]=N'{0}' ", qrCode))
                Return
            Else
                Dim TableInbound As String = "Inbound Documentary"
                Dim TableOutbound As String = "Outbound Documentary"
                Dim TableISO As String = "ISO Document Line"
                Dim TableQRCodeDocument As String = "QRCode Document"

                'tra cuu cv den
                Dim q As Query = Query.From(TableInbound).Transaction(True)
                q.Where("QRCode").Is(qrCode)
                If q.RecordCount > 0 Then
                    sender.Response("result") = String.Format("Đã tìm thấy công văn đến !")
                    entity = TableInbound
                    Framework.OpenEntity(entity, String.Format("[QRCode]=N'{0}' ", qrCode))
                    Return
                End If

                'tra cuu cv di
                q = Query.From(TableOutbound).Transaction(True)
                q.Where("QRCode").Is(qrCode)
                If q.RecordCount > 0 Then
                    sender.Response("result") = String.Format("Đã tìm thấy công văn đi !")
                    entity = TableOutbound
                    Framework.OpenEntity(entity, String.Format("[QRCode]=N'{0}' ", qrCode))
                    Return
                End If

                'tra cuu cv noi bo
                q = Query.From(TableISO).Transaction(True)
                q.Where("QRCode").Is(qrCode)
                If q.RecordCount > 0 Then
                    sender.Response("result") = String.Format("Đã tìm thấy công văn nội bộ!")
                    entity = TableISO
                    Framework.OpenEntity(entity, String.Format("[QRCode]=N'{0}' ", qrCode))
                    Return
                End If

                'tra cuu phieu
                q = Query.From(TableQRCodeDocument).Transaction(True)
                q.Where("QRCode").Is(qrCode)
                If q.RecordCount > 0 Then
                    sender.Response("result") = String.Format("Đã tìm thấy công văn (Phiếu) !")
                    entity = TableQRCodeDocument
                    Framework.OpenEntity(entity, String.Format("[QRCode]=N'{0}' ", qrCode))
                    Return
                End If
                'WorkSession.MsgML("Not in Our system {0}!", qrCode)
                sender.Response("result") = String.Format("Not in Our system !")
            End If

            'sender.Response("result") = result

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    Public Sub ScanQrCodeInfor(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to ScanQrCodeInfor ")
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            Dim tblline As DataTable = q.ToTable

            If tblline.Rows.Count <= 0 Then
                WorkSession.MsgML("Not in Our system {0}!", qrCode)
                Return
            End If

            Dim filter As String = String.Format("[QRCode]='{0}'", qrCode)
            Framework.OpenEntity("QRCode Entry", filter)

            'Query.EndTransaction()

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub FindQRCodeInfor(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to FindQRCodeInfor ")
        Dim result As New Hashtable
        Try
            'Query.BeginTransaction()

            Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")
                SerialNo = r("Serial No_")
            End If

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)

            'Dim tblline As DataTable = q.ToTable

            If q.RecordCount <= 0 Then
                result("msg") = "Not in Our system "
            Else
                Dim item As DataRow = q.TakeRow
                ' For Each item As Object In tblline.Rows
                result("URL") = item("URL")
                result("QRCode") = item("QRCode")
                result("Serial No_") = item("Serial No_")
                result("Name") = item("Serial No_")

                result("Item No_") = item("Item No_")
                result("Item Variant") = item("Item Variant")
                result("Lot No_") = item("Lot No_")
                result("Document No_") = item("Document No_")
                result("Document Type") = item("Document Type")
                'result("Source Type") = item("Source Type")
                result("Description") = item("Description")
                result("Quantity") = item("Quantity")
                result("Unit Of Measure") = item("Unit Of Measure")
                result("Qty Unit Of Measure") = item("Qty Unit Of Measure")
                result("Login ID") = item("Login ID")
                result("System Date") = item("System Date")
                result("Expired Date") = item("Expired Date")
                result("Mfg Date") = item("Mfg Date")
                ' Next
            End If

            'Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
            result("_ERROR_") = ex.ToString()
        End Try

        'Inform that trigger save order success
        sender.Response("result") = result

    End Sub

    Public Sub FindItemByQrCode4SO(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to FindItemByQrCode4SO ")
        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        'Dim SerialNo As String = ""

        Dim r As Hashtable = sender.CurrentRow

        If qrCode = "" Then
            qrCode = Framework.EmptyNull(r("QRCode"))
            'SerialNo = r("Serial No_")
        End If
        If qrCode = "" Then
            WorkSession.MsgML("QRCode must be filled!")
            Return
        End If

        Dim DocumentType As Integer = r("Document Type")
        Dim DocumentNo As String = r("No_")
        Dim Backend As Integer = r("Backend")

        Dim TableDocumentEntryHeader As String = "Document Entry"

        Dim qs As Query = Query.From("QRCode Entry").Transaction(True)
        qs.Where("qrCode").Is(qrCode)
        qs.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
        Dim InputYes As DataTable = qs.ToTable
        If InputYes.Rows.Count <= 0 And DocumentType = 1 Then
            WorkSession.MsgML("Not Yet Instock {0} to QRCode Entry!", qrCode)
            Return
        End If

        Try

            Dim q As Query = Query.From(TableDocumentEntryHeader)
            q.Where("Document No_").Is(DocumentNo)
            q.And("Document Type").Is(DocumentType)

            Dim DS As DataTable = q.ToTable

            Dim ErrNo As Integer = 0
            'Query.BeginTransaction()

            For i As Integer = 0 To DS.Rows.Count - 1

                ErrNo = PostQrCodeEntry(qrCode, DS.Rows(i), i, 1)
                If ErrNo = 2 Then
                    WorkSession.MsgML("QRCode xuat kho thanh cong {0}!", qrCode)
                    Exit For
                End If
            Next

            'Query.EndTransaction()

        Catch ex As Exception
            'Query.RollBack()
            WorkSession.MsgML(ex.ToString)

        End Try



    End Sub

    Public Function PostQrCodeEntry(ByVal qrCode As String, ByVal rOrder As DataRow, LineNo As Integer, Optional Backend As Integer = 0) As Integer

        Dim DocumentNo As String = rOrder("Document No_")
        Dim Status As Integer = rOrder("Status")

        Dim DocType As Integer = ISDBNULL(rOrder("Document Type"), 1)

        Dim TableQRCode As String = "QRCode"
        Dim TableQRCodeEntry1 As String = "QRCode Entry"
        Dim TableQRCodeEntry As String = "QRCode Entry"
        Dim TableDocumentEntryHeader As String = "Document Entry Header"
        Dim TableDocumentEntry As String = "Document Entry"

        'kiem tra xem don hang da hoan tat chua
        If Status = 2 Then
            WorkSession.MsgML("Món hàng này được quét hết rồi {0} !", LineNo)
            Return 1
        End If

        'kiem tra xem QRCode da nhap kho chua
        Dim q As Query = Query.From(TableQRCodeEntry1).Transaction(True)
        q.Where("QRCode").Is(qrCode)
        If DocType = 4 Or DocType = 14 Then
            q.And("Document Type").Is(DocType + 1)
        Else
            q.And("Document Type").In("0,2,4,6,10,12,14")
        End If

        q.And("Status").Is(1)

        If q.ToTable.Rows.Count = 0 Then
            WorkSession.MsgML("QRCode chưa nhập Kho (QRCode Entry): {0}!", qrCode)
            Return 1
        End If

        'lay QRCode dua vao datasource
        Dim DS As DataTable = q.ToTable
        Dim r As DataRow = DS.Rows(0)

        Dim ItemNo As String = q.Value("Item No_")
        Dim LotNo As String = q.Value("Lot No_")

        'kiem tra xem da khoi tao chua
        q = Query.From(TableDocumentEntry).Transaction(True)
        q.Where("Document No_").Is(DocumentNo)
        q.And("Document Type").Is(DocType)
        q.And("Item No_").Is(ItemNo)
        q.And("Line No_").Is(LineNo)
        q.And("Scan Number").Is(0)

        If q.ToTable.Rows.Count = 0 Then
            WorkSession.MsgML("QRCode chua khoi tao {0}!", ItemNo)
            Return 1
        End If

        Dim RowID As Integer = q.Value("RowID")
        Dim Quantity As Integer = q.Value("Quantity")
        Dim ScanNumber As Integer = q.Value("Scan Number")

        If ScanNumber = Quantity Then
            WorkSession.MsgML("QRCode da scan het cho san pham {0}!", ItemNo)
            Return 1
        End If

        'kiem tra QRCode nay da xuat chua
        q = Query.From(TableQRCodeEntry).Transaction(True)
        q.Where("QRCode").Is(qrCode)
        q.And("Document Type").Is(DocType)
        If q.ToTable.Rows.Count > 0 Then
            WorkSession.MsgML("QRCode đã ghi nhận {0}!", qrCode)
            Return 1
        End If

        Try

            Select Case Backend
                Case 1 'Head Office
                    InsertQRCodeEntryAPP(TableQRCodeEntry, r, rOrder, qrCode, DocType)

                        'Select Case DocumentType
                        '    Case 1 'xuat ban SO
                        '        InsertQRCodeEntryAPP(TableQRCodeEntry, r, rOrder, qrCode, 1)
                        '    Case 4 'nhap xuat noi bo TO
                        '        InsertQRCodeEntryAPP(TableQRCodeEntry, r, rOrder, qrCode, 4)
                        '        'InsertQRCodeEntryAPP(TableQRCodeEntry, r, rOrder, qrCode, 5)
                        '    Case 5
                        '        InsertQRCodeEntryAPP(TableQRCodeEntry, r, rOrder, qrCode, 5)
                        '    Case 7
                        '        InsertQRCodeEntryAPP(TableQRCodeEntry, r, rOrder, qrCode, 7)
                        'End Select

                Case 2 'Branches
                    InsertQRCodeEntryAPP(TableQRCodeEntry1, r, rOrder, qrCode, 1)
                    InsertQRCodeEntryAPP(TableQRCodeEntry, r, rOrder, qrCode, 0) 'nhap mua
                    InsertQRCodeEntryAPP(TableQRCodeEntry1, r, rOrder, qrCode, DocType)

                    'Select Case DocumentType
                    '    Case 1 'xuat ban SO
                    '        InsertQRCodeEntryAPP(TableQRCodeEntry1, r, rOrder, qrCode, 1) 'xuat ban
                    '        InsertQRCodeEntryAPP(TableQRCodeEntry, r, rOrder, qrCode, 0) 'nhap mua
                    '        InsertQRCodeEntryAPP(TableQRCodeEntry, r, rOrder, qrCode, 1) 'xuat ban
                    '    Case Else

                    'End Select


            End Select


            'cap nhat trang thai Document Entry Header
            Dim update As Query = Query.Update(TableDocumentEntryHeader)
            If Status = 0 Then
                update.Where("No_").Is(DocumentNo)
                update.And("Document Type").Is(DocType)
                update.Fields("Status") = 1
                update.Execute()
            End If

            'cap nhat so luong QRCode
            update = Query.Update(TableDocumentEntry)
            update.Where("RowID").Is(RowID)

            Dim ff As Query = Query.From("QRCode").Transaction(True)
            ff.Where("QRCode").Is(qrCode)

            update.Fields("Attach File") = ff.Value("URL")
            If rOrder("Serial No_") = "" Then update.Fields("Serial No_") = ff.Value("Serial No_")
            If rOrder("Lot No_") = "" Then update.Fields("Lot No_") = ff.Value("Lot No_")

            update.Fields("QRCode") = qrCode
            update.Fields("Lot No_") = LotNo
            update.Fields("Scan Number") = 1 + ScanNumber
            update.Fields("Status") = 1
            update.Execute()

            'kiem tra xem qrcode quet het chua
            q = Query.From(TableDocumentEntry).Transaction(True)
            q.Where("Document No_").Is(DocumentNo)
            q.And("Document Type").Is(DocType)
            Dim OrderLine As DataTable = q.ToTable

            Dim Finish As Integer = 1
            For i As Integer = 0 To OrderLine.Rows.Count - 1
                Quantity = OrderLine.Rows(i)("Quantity")
                ScanNumber = OrderLine.Rows(i)("Scan Number")
                If Quantity <> ScanNumber Then
                    Finish = 0
                    Exit For
                End If
            Next

            Dim updateHeader As Query = Query.Update(TableDocumentEntryHeader)
            Dim updateLine As Query = Query.Update(TableDocumentEntry)
            If Finish = 1 Then
                updateHeader.Where("No_").Is(DocumentNo)
                updateHeader.And("Document Type").Is(DocType)
                updateHeader.Fields("Status") = 2
                updateHeader.Execute()

                updateLine.Where("Document No_").Is(DocumentNo)
                updateHeader.And("Document Type").Is(DocType)
                updateLine.Fields("Status") = 2
                updateLine.Execute()
            End If

            Return 2
        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Return 0
        End Try

    End Function
    Public Sub InsertQRCodeEntryAPP(ByVal TableName As String, ByVal r As DataRow, ByVal rOrder As DataRow, ByVal qrCode As String, ByVal DocumentType As Integer)
        'lay so EntryNo cua TableName
        Dim qq As Query = Query.From(TableName).Select("([Entry No_]+1) AS EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        Dim EntryNo As Integer = qq.Value("EntryNo")

        Dim SourceCode As String = ISDBNULL(rOrder("Source Code"), "")
        'Dim FromSourceCode As String = ISDBNULL(rOrder("From Source Code"), "")
        'Dim ToSourceCode As String = ISDBNULL(rOrder("To Source Code"), "")
        Dim LocationCode As String = ISDBNULL(rOrder("Location Code"), "")
        'Dim FromLocationCode As String = ISDBNULL(rOrder("From Location Code"), "")
        'Dim ToLocationCode As String = ISDBNULL(rOrder("To Location Code"), "")
        Dim ResponsibilityCenter As String = ISDBNULL(rOrder("Responsibility Center"), "")
        'Dim FromResponsibilityCenter As String = ISDBNULL(rOrder("From Responsibility Center"), "")
        'Dim ToResponsibilityCenter As String = ISDBNULL(rOrder("To Responsibility Center"), "")

        'insert vao QRCode Entry
        Dim QueryInsert As Query = Query.Entity(TableName).Insert
        Dim QRCodeValue As Integer = -1

        Select Case DocumentType
            Case 0, 6 'nhap
                QRCodeValue = 1

            Case 1, 7 'xuat
                QRCodeValue = -1

            Case 4 'nhap TO
                QRCodeValue = 1
                    'SourceCode = ToSourceCode
                    'LocationCode = ToLocationCode
                    'ResponsibilityCenter = ToResponsibilityCenter
            Case 5 'xuat TO
                QRCodeValue = -1
                'SourceCode = FromSourceCode
                'LocationCode = FromLocationCode
                'ResponsibilityCenter = FromResponsibilityCenter

        End Select

        QueryInsert.Fields("QRCode") = qrCode
        QueryInsert.Fields("Item No_") = r("Item No_")
        QueryInsert.Fields("Lot No_") = r("Lot No_")
        QueryInsert.Fields("Document No_") = rOrder("Document No_")
        ' QueryInsert.Fields("Source No_") = rOrder("Sell-to Customer No_")
        QueryInsert.Fields("Document Type") = DocumentType
        'QueryInsert.Fields("External Document No_") = rOrder("External Document No_")
        QueryInsert.Fields("Source Code") = SourceCode
        QueryInsert.Fields("Responsibility Center") = ResponsibilityCenter
        QueryInsert.Fields("Location Code") = LocationCode
        QueryInsert.Fields("Serial No_") = r("Serial No_")
        QueryInsert.Fields("Number No_") = r("Number No_")
        QueryInsert.Fields("Description") = r("Description")
        QueryInsert.Fields("Variant Code") = r("Variant Code")
        QueryInsert.Fields("Manufacturer Code") = r("Manufacturer Code")
        QueryInsert.Fields("Expiration Date") = CDate(r("Expiration Date"))
        QueryInsert.Fields("Usage %") = 0
        QueryInsert.Fields("Status") = 1
        'QueryInsert.Fields("Created Date") = Now
        QueryInsert.Fields("Quantity") = r("Quantity")
        'QueryInsert.Fields("Begin Quantity") = r("Begin Quantity")
        QueryInsert.Fields("Unit of Measure Code") = r("Unit of Measure Code")
        QueryInsert.Fields("Qty_ per Unit of Measure") = r("Qty_ per Unit of Measure")
        QueryInsert.Fields("Production Date") = CDate(r("Production Date"))
        QueryInsert.Fields("Qty_not Temped") = 0
        QueryInsert.Fields("Last Date Checked") = Now
        'QueryInsert.Fields("Valued Quantity") = r("Valued Quantity")
        QueryInsert.Fields("Entry No_") = EntryNo
        'QueryInsert.Fields("QRCode Value") = QRCodeValue

        QueryInsert.Execute()
    End Sub

    Public Sub FindItemByQrCode4DO(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client

        WorkSession.MsgML("Well come to FindItemByQrCode4DO ")
        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = Framework.EmptyNull(r("QRCode"))
            SerialNo = r("Serial No_")
        End If

        Dim entityname As String = ""
        entityname = "Maintenance"

        Dim filter As String = ""

        Dim InvoiceCode As String = ""
        Dim InvoiceTable As String = "Sales Invoice Header"

        Dim InvoiceLineTable As String = "Sales Invoice Line"
        Try
            Query.BeginTransaction()

            Dim QueryInsert As Query = Query.Entity("Maintenance").Insert

            Dim qqwq As Query = Query.From("QRCode Entry").Transaction(True)
            qqwq.Where("Serial No_").Is(SerialNo)
            qqwq.And("Document Type").Is(1) ' Sales already

            'Dim tbllineq As DataTable = qq.ToTable
            InvoiceCode = qqwq.Value("External Document No_")
            Dim SalesOrderNo As String = ""

            Dim qqq = Query.From("Sales Invoice Header").Transaction(True)
            qqq.Where("External Document No_").Is(InvoiceCode)
            If qqq.recordcount > 0 Then
                InvoiceLineTable = "Sales Invoice Line"
                SalesOrderNo = qqq.Value("No_")
            Else
                InvoiceLineTable = "Sales Order Line"
                InvoiceTable = "Sales Order Header"

                qqq = Query.From("Sales Order Header").Transaction(True)
                qqq.Where("External Document No_").Is(InvoiceCode)
                SalesOrderNo = qqq.Value("No_")
            End If


            Dim qe As Query = Query.From(InvoiceLineTable).Transaction(True)
            qe.Where("Document No_").Is(SalesOrderNo)
            'qe.And("Outstanding Quantity").GreaterThan(0)
            Dim tblline As DataTable = qe.ToTable

            If tblline.Rows.Count <= 0 Then
                WorkSession.MsgML("Chưa có SO hay SI")
            Else

                For Each rc As DataRow In tblline.Rows
                    Dim q As Query = Query.From("Maintenance").Transaction(True)
                    q.Where("Document No_").Is(rc("Document No_"))

                    If q.RecordCount <= 0 Then
                        QueryInsert.Fields("Document No_") = rc("Document No_")
                        QueryInsert.Fields("Item No_") = rc("No_")
                        QueryInsert.Fields("Item Variant") = rc("Variant Code")
                        QueryInsert.Fields("Lot No_") = rc("Lot No_")
                        QueryInsert.Fields("Quantity") = rc("Quantity")
                        QueryInsert.Fields("Unit Of Measure") = rc("Unit of Measure Code")
                        QueryInsert.Fields("Qty Unit Of Measure") = rc("Qty_ per Unit of Measure")

                        QueryInsert.Fields("QRCode") = qrCode

                        QueryInsert.Fields("Serial No_") = SerialNo
                        'QueryInsert.Fields("URL") = ""
                        'QueryInsert.Fields("URL1") = ""
                        'QueryInsert.Fields("URL2") = ""
                        'QueryInsert.Fields("URL3") = ""
                        'QueryInsert.Fields("URL4") = ""
                        'QueryInsert.Fields("Work Shift No_") = ""
                        'QueryInsert.Fields("Work Center") = ""

                        QueryInsert.Fields("Expired Date") = rc("Expiration Date")
                        QueryInsert.Fields("Mfg Date") = rc("FA Posting Date")
                        QueryInsert.Fields("Blocked") = 0

                        'q = Query.From(InvoiceTable)
                        'q.Where("External Document No_").Is(InvoiceCode)
                        'Dim tbllinet As DataTable = q.ToTable
                        'If tbllinet.Rows.Count > 0 Then
                        '    entityname = "TRD Sales Invoice"
                        '    InvoiceTable = "Sales Invoice Header"
                        'Else
                        '    entityname = "TRD Sales Order"
                        '    InvoiceTable = "Sales Order Header"
                        'End If

                        Dim QueryValueEntry As Query = Query.From(InvoiceTable).Transaction(True)
                        QueryValueEntry.WhereAs("No_") = rc("Document No_")

                        QueryInsert.Fields("External Document No_") = QueryValueEntry.Value("External Document No_")

                        QueryInsert.Fields("Your Reference") = rc("Document No_") 'QueryValueEntry.Value("Originally Ordered No_")
                        QueryInsert.Fields("Source Code") = QueryValueEntry.Value("Source Code")
                        QueryInsert.Fields("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")
                        QueryInsert.Fields("Type") = 2 'Customer
                        QueryInsert.Fields("Source No_") = QueryValueEntry.Value("Sell-to Customer No_")
                        QueryInsert.Fields("User ID") = Framework.UserID

                        QueryInsert.Execute()
                    End If

                Next
                filter = String.Format("[Blocked]=0 ")
                Framework.OpenEntity("Maintenance", filter)
            End If

            Query.EndTransaction()

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)

        End Try

    End Sub
    Public Sub FindItemByQrCode4PO(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        'Dim SerialNo As String = ""
        WorkSession.MsgML("Well come to FindItemByQrCode4PO ")
        Dim r As Hashtable = sender.CurrentRow

        If qrCode = "" Then
            qrCode = Framework.EmptyNull(r("QRCode"))
            'SerialNo = r("Serial No_")
        End If
        If qrCode = "" Then
            WorkSession.MsgML("QRCode must be filled!")
            Return
        End If

        Dim DocumentNo As String = r("No_")
        Dim DocumentType As Integer = r("Document Type")
        Dim Backend As Integer = r("Backend")

        Dim TableDocumentEntry As String = "Document Entry"

        Dim qs As Query = Query.From("QRCode Entry").Transaction(True)
        qs.Where("qrCode").Is(qrCode)
        If DocumentType = 10 Then
            qs.And("Document Type").Is(1) 'đa xuất bán roi
        End If

        Dim InputYes As DataTable = qs.ToTable
        If InputYes.Rows.Count <= 0 And DocumentType = 10 Then
            WorkSession.MsgML("Not Yet pickup {0} from QRCode Entry!", qrCode)
            Return
        End If

        Try

            Dim q As Query = Query.From(TableDocumentEntry)
            q.Where("Document No_").Is(DocumentNo)
            q.And("Document Type").Is(DocumentType)

            Dim DS As DataTable = q.ToTable

            Dim ErrNo As Integer = 0
            'Query.BeginTransaction()

            For i As Integer = 0 To DS.Rows.Count - 1

                ErrNo = PostQrCodeEntry(qrCode, DS.Rows(i), i, 1)
                If ErrNo = 2 Then
                    WorkSession.MsgML("QRCode nhập kho thanh cong {0}!", qrCode)
                    Exit For
                End If
            Next

            'Query.EndTransaction()

        Catch ex As Exception
            'Query.RollBack()
            WorkSession.MsgML(ex.ToString)

        End Try

        'Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        'Dim SerialNo As String = ""
        'If qrCode = "" Then
        '    Dim r As Hashtable = sender.CurrentRow
        '    If r Is Nothing Or r.Count = 0 Then Return
        '    qrCode = r("QRCode")
        '    SerialNo = r("Serial No_")
        'End If

        'Try
        '    Query.BeginTransaction()
        '    Dim entityname As String = ""
        '    Dim filter As String = ""

        '    Dim InvoiceCode As String = ""
        '    Dim InvoiceTable As String = "Purchase Invoice Header"
        '    Dim InvoiceLineTable As String = "Purchase Invoice Line"

        '    Dim q As Query = Query.From("QRCode Entry").Transaction(True)
        '    q.Where("Serial No_").Is(SerialNo)
        '    q.And("Document Type").Is(0)
        '    Dim tblline As DataTable = q.ToTable

        '    InvoiceCode = q.Value("External Document No_")
        '    Dim OrderNo As String = q.Value("Document No_")

        '    Dim qq As Query = Query.From("Purchase Invoice Header").Transaction(True)
        '    qq.Where("External Document No_").Is(InvoiceCode)
        '    If qq.RecordCount > 0 Then
        '        entityname = "TRD Purchase Invoice"
        '        InvoiceTable = "Purchase Invoice Header"
        '        InvoiceLineTable = "Purchase Invoice Line"
        '        OrderNo = qq.Value("No_")
        '    Else
        '        entityname = "TRD Purchase Order"
        '        InvoiceTable = "Purchase Order Header"
        '        InvoiceLineTable = "Purchase Order Line"
        '    End If

        '    If tblline.Rows.Count > 0 Then
        '        filter = String.Format("[External Document No_]='{0}'", InvoiceCode)
        '        Framework.OpenEntity(entityname, filter)

        '        WorkSession.MsgML("Already Posted {0}!", qrCode)

        '    Else 'Insert to Document Entry Buffer for Posting to document entry and qrcode entry
        '        entityname = "Document Entry Buffer PO"

        '        Dim QueryInsert As Query = Query.Entity("Document Entry Buffer").Insert

        '        Dim wq As Query = Query.From(InvoiceLineTable).Transaction(True)
        '        wq.Where("Document No_").Is(OrderNo)
        '        wq.And("Outstanding Quantity").GreaterThan(0)
        '        tblline = wq.ToTable

        '        If tblline.Rows.Count <= 0 Then
        '            WorkSession.MsgML("Chưa có PO hay PI")
        '            'Query.EndTransaction()
        '            'Return
        '        Else
        '            For Each rc As DataRow In tblline.Rows
        '                q = Query.From("Document Entry Buffer").Transaction(True)
        '                q.Where("Document No_").Is(rc("Document No_")).And("Type").Is(3)

        '                If q.RecordCount <= 0 Then
        '                    QueryInsert.Fields("Document No_") = rc("Document No_")
        '                    QueryInsert.Fields("Item No_") = rc("No_")
        '                    QueryInsert.Fields("Item Variant") = rc("Variant Code")
        '                    QueryInsert.Fields("Lot No_") = rc("Lot No_")
        '                    QueryInsert.Fields("Quantity") = rc("Quantity")
        '                    QueryInsert.Fields("Unit Of Measure") = rc("Unit of Measure Code")
        '                    QueryInsert.Fields("Qty Unit Of Measure") = rc("Qty_ per Unit of Measure")

        '                    Dim QueryValueEntry As Query = Query.From(InvoiceTable).Transaction(True)
        '                    QueryValueEntry.WhereAs("No_") = rc("Document No_")

        '                    QueryInsert.Fields("External Document No_") = QueryValueEntry.Value("External Document No_")
        '                    QueryInsert.Fields("Your Reference") = rc("Document No_")
        '                    QueryInsert.Fields("Source Code") = QueryValueEntry.Value("Source Code")
        '                    QueryInsert.Fields("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

        '                    QueryInsert.Fields("Serial No_") = SerialNo
        '                    'QueryInsert.Fields("URL") = ""
        '                    'QueryInsert.Fields("URL1") = ""
        '                    'QueryInsert.Fields("URL2") = ""
        '                    'QueryInsert.Fields("URL3") = ""
        '                    'QueryInsert.Fields("URL4") = ""
        '                    'QueryInsert.Fields("Work Shift No_") = ""
        '                    'QueryInsert.Fields("Work Center") = ""
        '                    QueryInsert.Fields("QRCode") = qrCode

        '                    QueryInsert.Fields("Expired Date") = rc("Expiration Date")
        '                    QueryInsert.Fields("Mfg Date") = rc("FA Posting Date")
        '                    QueryInsert.Fields("Blocked") = 0
        '                    QueryInsert.Fields("Type") = 0 'Purchase order
        '                    QueryInsert.Fields("User ID") = Framework.UserID

        '                    QueryInsert.Execute()
        '                End If

        '            Next
        '            filter = String.Format("[Blocked]=0 and [Type] = 0")
        '            Framework.OpenEntity(entityname, filter)
        '        End If

        '        'filter = String.Format("[Blocked]=0 and [Type] = 0")
        '        'Framework.OpenEntity(entityname, filter)
        '    End If
        '    Query.EndTransaction()
        'Catch ex As Exception
        '    Query.RollBack()
        '    WorkSession.MsgML(ex.ToString)

        'End Try

    End Sub
    Public Sub FindItemByQrCode4TO(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to FindItemByQrCode4TO ")
        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        'Dim SerialNo As String = ""

        Dim r As Hashtable = sender.CurrentRow

        If qrCode = "" Then
            qrCode = Framework.EmptyNull(r("QRCode"))
            'SerialNo = r("Serial No_")
        End If
        If qrCode = "" Then
            WorkSession.MsgML("QRCode must be filled!")
            Return
        End If

        Dim DocumentNo As String = r("No_")
        Dim DocumentType As Integer = r("Document Type")
        Dim Backend As Integer = r("Backend")
        Dim TableDocumentEntry As String = "Document Entry"

        Dim qs As Query = Query.From("QRCode Entry").Transaction(True)
        qs.Where("qrCode").Is(qrCode)
        If DocumentType = 4 Then
            qs.And("Document Type").Is(DocumentType + 1) ' Xuất roi
        Else
            qs.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
        End If

        Dim InputYes As DataTable = qs.ToTable
        If InputYes.Rows.Count <= 0 Then
            If DocumentType = 4 Then
                WorkSession.MsgML("Not Yet Pickup {0} from QRCode Entry!", qrCode)
            Else
                WorkSession.MsgML("Not Yet Instock {0} to QRCode Entry!", qrCode)
            End If

            Return
        End If

        Try

            Dim q As Query = Query.From(TableDocumentEntry)
            q.Where("Document No_").Is(DocumentNo)
            q.And("Document Type").Is(DocumentType)

            Dim DS As DataTable = q.ToTable

            Dim ErrNo As Integer = 0
            'Query.BeginTransaction()

            For i As Integer = 0 To DS.Rows.Count - 1

                ErrNo = PostQrCodeEntry(qrCode, DS.Rows(i), i, 1)
                If ErrNo = 2 Then
                    WorkSession.MsgML("QRCode xuất/Nhâp kho thành công {0}!", qrCode)
                    Exit For
                End If
            Next

            'Query.EndTransaction()

        Catch ex As Exception
            'Query.RollBack()
            WorkSession.MsgML(ex.ToString)

        End Try

        'Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        'Dim SerialNo As String = ""
        'If qrCode = "" Then
        '    Dim r As Hashtable = sender.CurrentRow
        '    If r Is Nothing Or r.Count = 0 Then Return
        '    qrCode = r("QRCode")
        '    SerialNo = r("Serial No_")
        'End If
        'Try
        '    Query.BeginTransaction()

        '    Dim entityname As String = ""
        '    Dim filter As String = ""

        '    Dim InvoiceCode As String = ""
        '    Dim InvoiceTable As String = "Transfer Order Header Posted"
        '    Dim InvoiceLineTable As String = "Transfer Order Line Posted"

        '    Dim q As Query = Query.From("QRCode Entry").Transaction(True)
        '    q.Where("Serial No_").Is(SerialNo)
        '    q.And("Document Type").Is(4)
        '    Dim tblline As DataTable = q.ToTable

        '    InvoiceCode = q.Value("External Document No_")
        '    Dim orderno As String = q.Value("Document No_")

        '    Dim qq As Query = Query.From("Transfer Order Header Posted")
        '    qq.Where("External Document No_").Is(InvoiceCode)
        '    If qq.RecordCount > 0 Then
        '        entityname = "Transfer Order Header Posted"
        '        InvoiceTable = "Transfer Order Header Posted"
        '        InvoiceLineTable = "Transfer Order Line Posted"
        '    Else
        '        entityname = "Transfer Order Header"
        '        InvoiceTable = "Transfer Order Header"
        '        InvoiceLineTable = "Transfer Order Line"
        '    End If

        '    If tblline.Rows.Count > 0 Then

        '        filter = String.Format("[External Document No_]='{0}'", InvoiceCode)
        '        Framework.OpenEntity(entityname, filter)

        '        WorkSession.MsgML("Already Posted {0}!", qrCode)

        '    Else 'Insert to Document Entry Buffer for Posting to document entry and qrcode entry
        '        entityname = "Document Entry Buffer TO"
        '        Dim QueryValueEntry As Query

        '        Dim QueryInsert As Query = Query.Entity("Document Entry Buffer").Insert

        '        Dim wq As Query = Query.From(InvoiceLineTable).Transaction(True)
        '        wq.Where("Document No_").Is(orderno)
        '        'wq.And("Outstanding Quantity").GreaterThan(0)
        '        Dim transferline As DataTable = wq.ToTable

        '        If transferline.Rows.Count <= 0 Then
        '            WorkSession.MsgML("Chưa có Transfer Order hay Posted TO")
        '            'Query.EndTransaction()
        '            'Return
        '        Else
        '            For Each rc As DataRow In transferline.Rows
        '                q = Query.From("Document Entry Buffer").Transaction(True)
        '                q.Where("Document No_").Is(rc("Document No_")).And("Type").Is(4)

        '                If q.RecordCount <= 0 Then
        '                    QueryInsert.Fields("Document No_") = rc("Document No_")
        '                    QueryInsert.Fields("Item No_") = rc("No_")
        '                    QueryInsert.Fields("Item Variant") = rc("Variant Code")
        '                    QueryInsert.Fields("Lot No_") = rc("Lot No_")
        '                    QueryInsert.Fields("Quantity") = rc("Quantity")
        '                    QueryInsert.Fields("Unit Of Measure") = rc("Unit of Measure Code")
        '                    QueryInsert.Fields("Qty Unit Of Measure") = rc("Qty_ per Unit of Measure")

        '                    QueryValueEntry = Query.From(InvoiceTable).Transaction(True)
        '                    QueryValueEntry.WhereAs("No_") = rc("Document No_")

        '                    QueryInsert.Fields("External Document No_") = QueryValueEntry.Value("External Document No_")
        '                    QueryInsert.Fields("Your Reference") = rc("Document No_") 'QueryValueEntry.Value("Originally Ordered No_")
        '                    QueryInsert.Fields("Source Code") = QueryValueEntry.Value("Source Code")
        '                    QueryInsert.Fields("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

        '                    QueryInsert.Fields("Serial No_") = SerialNo
        '                    'QueryInsert.Fields("URL") = ""
        '                    'QueryInsert.Fields("URL1") = ""
        '                    'QueryInsert.Fields("URL2") = ""
        '                    'QueryInsert.Fields("URL3") = ""
        '                    'QueryInsert.Fields("URL4") = ""
        '                    'QueryInsert.Fields("Work Shift No_") = ""
        '                    'QueryInsert.Fields("Work Center") = ""
        '                    'QueryInsert.Fields("QRCode") =""

        '                    QueryInsert.Fields("Expired Date") = Now() 'rc("Expiration Date")
        '                    QueryInsert.Fields("Mfg Date") = Now() 'nprc("FA Posting Date")
        '                    QueryInsert.Fields("Blocked") = 0
        '                    QueryInsert.Fields("Type") = 4 'sales order
        '                    QueryInsert.Fields("User ID") = Framework.UserID

        '                    QueryInsert.Execute()
        '                End If
        '            Next

        '            filter = String.Format("[Blocked]=0 and [Type] = 4")
        '            Framework.OpenEntity(entityname, filter)
        '        End If
        '    End If
        '    Query.EndTransaction()


        'Catch ex As Exception
        '    Query.RollBack()
        '    WorkSession.MsgML(ex.ToString)

        'End Try

    End Sub
    Public Sub FindItemByQrCode4WO(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        'Dim SerialNo As String = ""
        WorkSession.MsgML("Well come to FindItemByQrCode4WO ")
        Dim r As Hashtable = sender.CurrentRow

        If qrCode = "" Then
            qrCode = Framework.EmptyNull(r("QRCode"))
            'SerialNo = r("Serial No_")
        End If
        If qrCode = "" Then
            WorkSession.MsgML("QRCode must be filled!")
            Return
        End If

        Dim DocumentNo As String = r("No_")
        Dim DocumentType As Integer = r("Document Type")
        Dim Backend As Integer = r("Backend")

        Dim qs As Query = Query.From("QRCode Entry").Transaction(True)
        qs.Where("qrCode").Is(qrCode)
        If DocumentType = 7 Then
            qs.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
        End If

        Dim InputYes As DataTable = qs.ToTable
        If InputYes.Rows.Count <= 0 And DocumentType = 7 Then
            WorkSession.MsgML("Not Yet Instock {0} to QRCode Entry!", qrCode)
            Return
        End If

        Try
            Dim TableDocumentEntry As String = "Document Entry"
            Dim q As Query = Query.From(TableDocumentEntry)
            q.Where("Document No_").Is(DocumentNo)
            q.And("Document Type").Is(DocumentType)

            Dim DS As DataTable = q.ToTable

            Dim ErrNo As Integer = 0
            'Query.BeginTransaction()

            For i As Integer = 0 To DS.Rows.Count - 1

                ErrNo = PostQrCodeEntry(qrCode, DS.Rows(i), i, 1)
                If ErrNo = 2 Then
                    WorkSession.MsgML("QRCode xuat kho thanh cong {0}!", qrCode)
                    Exit For
                End If
            Next

            'Query.EndTransaction()

        Catch ex As Exception
            'Query.RollBack()
            WorkSession.MsgML(ex.ToString)

        End Try

        'Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        'Dim SerialNo As String = ""
        'If qrCode = "" Then
        '    Dim r As Hashtable = sender.CurrentRow
        '    If r Is Nothing Or r.Count = 0 Then Return
        '    qrCode = r("QRCode")
        '    SerialNo = r("Serial No_")
        'End If
        'Dim entityname As String = ""
        'Dim filter As String = ""
        'Try
        '    Query.BeginTransaction()
        '    Dim InvoiceCode As String = ""
        '    Dim HeaderTable As String = "Production Order Header Posted"
        '    Dim LineTable As String = "Production Order Line Posted"

        '    Dim q As Query = Query.From("QRCode Entry").Transaction(True)
        '    q.Where("Serial No_").Is(SerialNo)
        '    q.And("Document Type").Is(6)

        '    Dim tblline As DataTable = q.ToTable

        '    InvoiceCode = q.Value("External Document No_")
        '    Dim orderno As String = q.Value("Document No_")


        '    Dim qq As Query = Query.From("Production Order Header Posted")
        '    qq.Where("External Document No_").Is(InvoiceCode)
        '    Dim tbllinea As DataTable = qq.ToTable
        '    If tbllinea.Rows.Count > 0 Then
        '        entityname = "MFG Finished Production Order Header"
        '        HeaderTable = "Production Order Header Posted"
        '        LineTable = "Production Order Line Posted"
        '    Else
        '        entityname = "MFG Production Order Header"
        '        HeaderTable = "Production Order Header"
        '        LineTable = "Production Order Line"

        '    End If

        '    If tblline.Rows.Count > 0 Then


        '        filter = String.Format("[External Document No_]='{0}'", InvoiceCode)
        '        Framework.OpenEntity(entityname, filter)

        '        WorkSession.MsgML("Already Posted {0}!", qrCode)

        '    Else 'Insert to Document Entry Buffer for Posting to document entry and qrcode entry
        '        entityname = "Document Entry Buffer WO"
        '        Dim QueryValueEntry As Query

        '        Dim QueryInsert As Query = Query.Entity("Document Entry Buffer").Insert

        '        q = Query.From(LineTable).Transaction(True)
        '        q.Where("Prod_ Order No_").Is(orderno)
        '        'q.And("Outstanding Quantity").GreaterThan(0)
        '        tblline = q.ToTable

        '        If tblline.Rows.Count <= 0 Then
        '            WorkSession.MsgML("Chưa có production PO hay Finished PO")
        '            'Query.EndTransaction()

        '            'Return
        '        Else
        '            For Each rc As DataRow In tblline.Rows
        '                q = Query.From("Document Entry Buffer").Transaction(True)
        '                q.Where("Document No_").Is(rc("Document No_")).And("Type").Is(6)

        '                If q.RecordCount <= 0 Then
        '                    QueryInsert.Fields("Document No_") = rc("Document No_")
        '                    QueryInsert.Fields("Item No_") = rc("No_")
        '                    QueryInsert.Fields("Item Variant") = rc("Variant Code")
        '                    QueryInsert.Fields("Lot No_") = rc("Lot No_")
        '                    QueryInsert.Fields("Quantity") = rc("Quantity")
        '                    QueryInsert.Fields("Unit Of Measure") = rc("Unit of Measure Code")
        '                    QueryInsert.Fields("Qty Unit Of Measure") = rc("Qty_ per Unit of Measure")

        '                    QueryValueEntry = Query.From(HeaderTable).Transaction(True)
        '                    QueryValueEntry.WhereAs("No_") = rc("Document No_")

        '                    QueryInsert.Fields("External Document No_") = QueryValueEntry.Value("External Document No_")
        '                    QueryInsert.Fields("Your Reference") = rc("Document No_") 'QueryValueEntry.Value("Originally Ordered No_")
        '                    QueryInsert.Fields("Source Code") = QueryValueEntry.Value("Source Code")
        '                    QueryInsert.Fields("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

        '                    QueryInsert.Fields("Mfg Date") = QueryValueEntry.Value("Finished Date")

        '                    QueryInsert.Fields("Serial No_") = SerialNo
        '                    'QueryInsert.Fields("URL") = ""
        '                    'QueryInsert.Fields("URL1") = ""
        '                    'QueryInsert.Fields("URL2") = ""
        '                    'QueryInsert.Fields("URL3") = ""
        '                    'QueryInsert.Fields("URL4") = ""
        '                    'QueryInsert.Fields("Work Shift No_") = ""
        '                    'QueryInsert.Fields("Work Center") = ""
        '                    QueryInsert.Fields("QRCode") = qrCode

        '                    QueryInsert.Fields("Expired Date") = rc("Due Date")
        '                    QueryInsert.Fields("Blocked") = 0
        '                    QueryInsert.Fields("Type") = 6 'sales order
        '                    QueryInsert.Fields("User ID") = Framework.UserID

        '                    QueryInsert.Execute()
        '                End If
        '            Next
        '            filter = String.Format("[Blocked]=0 And [Type] = 6")
        '            Framework.OpenEntity(entityname, filter)
        '        End If
        '    End If
        '    Query.EndTransaction()

        'Catch ex As Exception
        '    Query.RollBack()
        '    WorkSession.MsgML(ex.ToString)

        'End Try

    End Sub
    'outsource
    Public Sub FindItemByQrCode4OO(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client

        WorkSession.MsgML("Well come to FindItemByQrCode4OO ")

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = Framework.EmptyNull(r("QRCode"))
            SerialNo = r("Serial No_")
        End If
        Try
            Query.BeginTransaction()

            Dim entityname As String = ""
            Dim filter As String = ""

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode Entry").Transaction(True)
            q.Where("Serial No_").Is(SerialNo)
            Dim tblline As DataTable = q.ToTable

            If tblline.Rows.Count > 0 Then
                InvoiceCode = q.Value("External Document No_")

                q = Query.From("Transfer Order Header Posted")
                q.Where("External Document No_").Is(InvoiceCode)
                tblline = q.ToTable
                If tblline.Rows.Count > 0 Then
                    entityname = "Transfer Order Header Posted"
                Else
                    entityname = "Transfer Order Header"
                End If

                filter = String.Format("[External Document No_]='{0}'", InvoiceCode)

                WorkSession.MsgML("Already Posted {0}!", qrCode)

            Else 'Insert to Document Entry Buffer for Posting to document entry and qrcode entry
                entityname = "Document Entry Buffer TO"
                Dim QueryValueEntry As Query

                Dim QueryInsert As Query = Query.Entity("Document Entry Buffer").Insert

                q = Query.From("Transfer Order Line")
                q.Where("Status").Is(2)
                q.And("Outstanding Quantity").GreaterThan(0)
                tblline = q.ToTable

                If tblline.Rows.Count > 0 Then
                    For Each rc As DataRow In tblline.Rows
                        q = Query.From("Document Entry Buffer").Transaction(True)
                        q.Where("Document No_").Is(rc("Document No_")).And("Type").Is(4)

                        If q.RecordCount <= 0 Then
                            QueryInsert.Fields("Document No_") = rc("Document No_")
                            QueryInsert.Fields("Item No_") = rc("No_")
                            QueryInsert.Fields("Item Variant") = rc("Variant Code")
                            QueryInsert.Fields("Lot No_") = rc("Lot No_")
                            QueryInsert.Fields("Quantity") = rc("Quantity")
                            QueryInsert.Fields("Unit Of Measure") = rc("Unit of Measure Code")
                            QueryInsert.Fields("Qty Unit Of Measure") = rc("Qty_ per Unit of Measure")

                            QueryValueEntry = Query.From("Sales Order Header").Transaction(True)
                            QueryValueEntry.WhereAs("No_") = rc("Document No_")

                            QueryInsert.Fields("External Document No_") = QueryValueEntry.Value("External Document No_")
                            QueryInsert.Fields("Your Reference") = rc("Document No_") 'QueryValueEntry.Value("Originally Ordered No_")
                            QueryInsert.Fields("Source Code") = QueryValueEntry.Value("Source Code")
                            QueryInsert.Fields("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

                            QueryInsert.Fields("Serial No_") = SerialNo
                            'QueryInsert.Fields("URL") = ""
                            'QueryInsert.Fields("URL1") = ""
                            'QueryInsert.Fields("URL2") = ""
                            'QueryInsert.Fields("URL3") = ""
                            'QueryInsert.Fields("URL4") = ""
                            'QueryInsert.Fields("Work Shift No_") = ""
                            'QueryInsert.Fields("Work Center") = ""
                            'QueryInsert.Fields("QRCode") =""

                            QueryInsert.Fields("Expired Date") = Now() 'rc("Expiration Date")
                            QueryInsert.Fields("Mfg Date") = Now() 'nprc("FA Posting Date")
                            QueryInsert.Fields("Blocked") = 0
                            QueryInsert.Fields("Type") = 4 'sales order
                            QueryInsert.Execute()
                        End If

                    Next
                End If

                filter = String.Format("[Blocked]=0 and [Type] = 4")

            End If
            Query.EndTransaction()

            Framework.OpenEntity(entityname, filter)
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)

        End Try

    End Sub
    'adjust
    Public Sub FindItemByQrCode4AO(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to FindItemByQrCode4AO ")

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = Framework.EmptyNull(r("QRCode"))
            SerialNo = r("Serial No_")
        End If

        Dim entityname As String = ""
        Dim filter As String = ""
        Try
            Query.BeginTransaction()

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode Entry").Transaction(True)
            q.Where("Serial No_").Is(SerialNo)
            Dim tblline As DataTable = q.ToTable

            If tblline.Rows.Count > 0 Then
                InvoiceCode = q.Value("External Document No_")

                q = Query.From("Transfer Order Header Posted")
                q.Where("External Document No_").Is(InvoiceCode)
                tblline = q.ToTable
                If tblline.Rows.Count > 0 Then
                    entityname = "Transfer Order Header Posted"
                Else
                    entityname = "Transfer Order Header"
                End If

                filter = String.Format("[External Document No_]='{0}'", InvoiceCode)

                WorkSession.MsgML("Already Posted {0}!", qrCode)

            Else 'Insert to Document Entry Buffer for Posting to document entry and qrcode entry
                entityname = "Document Entry Buffer TO"
                Dim QueryValueEntry As Query

                Dim QueryInsert As Query = Query.Entity("Document Entry Buffer").Insert

                q = Query.From("Transfer Order Line")
                q.Where("Status").Is(2)
                q.And("Outstanding Quantity").GreaterThan(0)
                tblline = q.ToTable

                If tblline.Rows.Count > 0 Then
                    For Each rc As DataRow In tblline.Rows
                        q = Query.From("Document Entry Buffer").Transaction(True)
                        q.Where("Document No_").Is(rc("Document No_")).And("Type").Is(4)

                        If q.RecordCount <= 0 Then
                            QueryInsert.Fields("Document No_") = rc("Document No_")
                            QueryInsert.Fields("Item No_") = rc("No_")
                            QueryInsert.Fields("Item Variant") = rc("Variant Code")
                            QueryInsert.Fields("Lot No_") = rc("Lot No_")
                            QueryInsert.Fields("Quantity") = rc("Quantity")
                            QueryInsert.Fields("Unit Of Measure") = rc("Unit of Measure Code")
                            QueryInsert.Fields("Qty Unit Of Measure") = rc("Qty_ per Unit of Measure")

                            QueryValueEntry = Query.From("Sales Order Header").Transaction(True)
                            QueryValueEntry.WhereAs("No_") = rc("Document No_")

                            QueryInsert.Fields("External Document No_") = QueryValueEntry.Value("External Document No_")
                            QueryInsert.Fields("Your Reference") = rc("Document No_") 'QueryValueEntry.Value("Originally Ordered No_")
                            QueryInsert.Fields("Source Code") = QueryValueEntry.Value("Source Code")
                            QueryInsert.Fields("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

                            QueryInsert.Fields("Serial No_") = SerialNo
                            'QueryInsert.Fields("URL") = ""
                            'QueryInsert.Fields("URL1") = ""
                            'QueryInsert.Fields("URL2") = ""
                            'QueryInsert.Fields("URL3") = ""
                            'QueryInsert.Fields("URL4") = ""
                            'QueryInsert.Fields("Work Shift No_") = ""
                            'QueryInsert.Fields("Work Center") = ""
                            'QueryInsert.Fields("QRCode") =""

                            QueryInsert.Fields("Expired Date") = Now() 'rc("Expiration Date")
                            QueryInsert.Fields("Mfg Date") = Now() 'nprc("FA Posting Date")
                            QueryInsert.Fields("Blocked") = 0
                            QueryInsert.Fields("Type") = 4 'sales order
                            QueryInsert.Execute()
                        End If

                    Next
                End If

                filter = String.Format("[Blocked]=0 and [Type] = 4")

            End If
            Query.EndTransaction()

            Framework.OpenEntity(entityname, filter)
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)

        End Try

    End Sub
    'Customs
    Public Sub FindItemByQrCode4CO(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to FindItemByQrCode4CO ")

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = Framework.EmptyNull(r("QRCode"))
            SerialNo = r("Serial No_")
        End If

        Dim entityname As String = ""
        Dim filter As String = ""
        Try
            Query.BeginTransaction()

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode Entry").Transaction(True)
            q.Where("Serial No_").Is(SerialNo)
            Dim tblline As DataTable = q.ToTable

            If tblline.Rows.Count > 0 Then
                InvoiceCode = q.Value("External Document No_")

                q = Query.From("Transfer Order Header Posted")
                q.Where("External Document No_").Is(InvoiceCode)
                tblline = q.ToTable
                If tblline.Rows.Count > 0 Then
                    entityname = "Transfer Order Header Posted"
                Else
                    entityname = "Transfer Order Header"
                End If

                filter = String.Format("[External Document No_]='{0}'", InvoiceCode)

                WorkSession.MsgML("Already Posted {0}!", qrCode)

            Else 'Insert to Document Entry Buffer for Posting to document entry and qrcode entry
                entityname = "Document Entry Buffer TO"
                Dim QueryValueEntry As Query

                Dim QueryInsert As Query = Query.Entity("Document Entry Buffer").Insert

                q = Query.From("Transfer Order Line")
                q.Where("Status").Is(2)
                q.And("Outstanding Quantity").GreaterThan(0)
                tblline = q.ToTable

                If tblline.Rows.Count > 0 Then
                    For Each rc As DataRow In tblline.Rows
                        q = Query.From("Document Entry Buffer").Transaction(True)
                        q.Where("Document No_").Is(rc("Document No_")).And("Type").Is(4)

                        If q.RecordCount <= 0 Then
                            QueryInsert.Fields("Document No_") = rc("Document No_")
                            QueryInsert.Fields("Item No_") = rc("No_")
                            QueryInsert.Fields("Item Variant") = rc("Variant Code")
                            QueryInsert.Fields("Lot No_") = rc("Lot No_")
                            QueryInsert.Fields("Quantity") = rc("Quantity")
                            QueryInsert.Fields("Unit Of Measure") = rc("Unit of Measure Code")
                            QueryInsert.Fields("Qty Unit Of Measure") = rc("Qty_ per Unit of Measure")

                            QueryValueEntry = Query.From("Sales Order Header").Transaction(True)
                            QueryValueEntry.WhereAs("No_") = rc("Document No_")

                            QueryInsert.Fields("External Document No_") = QueryValueEntry.Value("External Document No_")
                            QueryInsert.Fields("Your Reference") = rc("Document No_") 'QueryValueEntry.Value("Originally Ordered No_")
                            QueryInsert.Fields("Source Code") = QueryValueEntry.Value("Source Code")
                            QueryInsert.Fields("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

                            QueryInsert.Fields("Serial No_") = SerialNo
                            'QueryInsert.Fields("URL") = ""
                            'QueryInsert.Fields("URL1") = ""
                            'QueryInsert.Fields("URL2") = ""
                            'QueryInsert.Fields("URL3") = ""
                            'QueryInsert.Fields("URL4") = ""
                            'QueryInsert.Fields("Work Shift No_") = ""
                            'QueryInsert.Fields("Work Center") = ""
                            'QueryInsert.Fields("QRCode") =""

                            QueryInsert.Fields("Expired Date") = Now() 'rc("Expiration Date")
                            QueryInsert.Fields("Mfg Date") = Now() 'nprc("FA Posting Date")
                            QueryInsert.Fields("Blocked") = 0
                            QueryInsert.Fields("Type") = 4 'sales order
                            QueryInsert.Execute()
                        End If

                    Next
                End If

                filter = String.Format("[Blocked]=0 and [Type] = 4")

            End If
            Query.EndTransaction()

            Framework.OpenEntity(entityname, filter)
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)

        End Try

    End Sub
    'utilize
    Public Sub FindItemByQrCode4UO(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to FindItemByQrCode4UO ")

        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        Dim SerialNo As String = ""
        If qrCode = "" Then
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            qrCode = Framework.EmptyNull(r("QRCode"))
            SerialNo = r("Serial No_")
        End If

        Try
            Query.BeginTransaction()


            Dim entityname As String = ""
            Dim filter As String = ""

            Dim InvoiceCode As String = ""
            Dim q As Query = Query.From("QRCode Entry").Transaction(True)
            q.Where("Serial No_").Is(SerialNo)
            Dim tblline As DataTable = q.ToTable

            If tblline.Rows.Count > 0 Then
                InvoiceCode = q.Value("External Document No_")

                q = Query.From("Transfer Order Header Posted")
                q.Where("External Document No_").Is(InvoiceCode)
                tblline = q.ToTable
                If tblline.Rows.Count > 0 Then
                    entityname = "Transfer Order Header Posted"
                Else
                    entityname = "Transfer Order Header"
                End If

                filter = String.Format("[External Document No_]='{0}'", InvoiceCode)

                WorkSession.MsgML("Already Posted {0}!", qrCode)

            Else 'Insert to Document Entry Buffer for Posting to document entry and qrcode entry
                entityname = "Document Entry Buffer TO"
                Dim QueryValueEntry As Query

                Dim QueryInsert As Query = Query.Entity("Document Entry Buffer").Insert

                q = Query.From("Transfer Order Line")
                q.Where("Status").Is(2)
                q.And("Outstanding Quantity").GreaterThan(0)
                tblline = q.ToTable

                If tblline.Rows.Count > 0 Then
                    For Each rc As DataRow In tblline.Rows
                        q = Query.From("Document Entry Buffer").Transaction(True)
                        q.Where("Document No_").Is(rc("Document No_")).And("Type").Is(4)

                        If q.RecordCount <= 0 Then
                            QueryInsert.Fields("Document No_") = rc("Document No_")
                            QueryInsert.Fields("Item No_") = rc("No_")
                            QueryInsert.Fields("Item Variant") = rc("Variant Code")
                            QueryInsert.Fields("Lot No_") = rc("Lot No_")
                            QueryInsert.Fields("Quantity") = rc("Quantity")
                            QueryInsert.Fields("Unit Of Measure") = rc("Unit of Measure Code")
                            QueryInsert.Fields("Qty Unit Of Measure") = rc("Qty_ per Unit of Measure")

                            QueryValueEntry = Query.From("Sales Order Header").Transaction(True)
                            QueryValueEntry.WhereAs("No_") = rc("Document No_")

                            QueryInsert.Fields("External Document No_") = QueryValueEntry.Value("External Document No_")
                            QueryInsert.Fields("Your Reference") = rc("Document No_") 'QueryValueEntry.Value("Originally Ordered No_")
                            QueryInsert.Fields("Source Code") = QueryValueEntry.Value("Source Code")
                            QueryInsert.Fields("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

                            QueryInsert.Fields("Serial No_") = SerialNo
                            'QueryInsert.Fields("URL") = ""
                            'QueryInsert.Fields("URL1") = ""
                            'QueryInsert.Fields("URL2") = ""
                            'QueryInsert.Fields("URL3") = ""
                            'QueryInsert.Fields("URL4") = ""
                            'QueryInsert.Fields("Work Shift No_") = ""
                            'QueryInsert.Fields("Work Center") = ""
                            'QueryInsert.Fields("QRCode") =""

                            QueryInsert.Fields("Expired Date") = Now() 'rc("Expiration Date")
                            QueryInsert.Fields("Mfg Date") = Now() 'nprc("FA Posting Date")
                            QueryInsert.Fields("Blocked") = 0
                            QueryInsert.Fields("Type") = 4 'sales order
                            QueryInsert.Execute()
                        End If

                    Next
                End If

                filter = String.Format("[Blocked]=0 and [Type] = 4")

            End If
            Query.EndTransaction()

            Framework.OpenEntity(entityname, filter)
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)

        End Try

    End Sub
    'internal
    Public Sub FindItemByQrCode4IO(ByVal sender As WXSource, ByVal e As WXArgs)
        'Get QR code scanned and submit from app client
        WorkSession.MsgML("Well come to FindItemByQrCode4IO ")
        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        'Dim SerialNo As String = ""

        Dim r As Hashtable = sender.CurrentRow

        If qrCode = "" Then
            qrCode = Framework.EmptyNull(r("QRCode"))
            'SerialNo = r("Serial No_")
        End If
        If qrCode = "" Then
            WorkSession.MsgML("QRCode must be filled!")
            Return
        End If

        Dim DocumentNo As String = r("No_")
        Dim DocumentType As Integer = r("Document Type")
        Dim Backend As Integer = r("Backend")

        Dim TableDocumentEntryHeader As String = "Document Entry"

        Dim qs As Query = Query.From("QRCode Entry").Transaction(True)
        qs.Where("qrCode").Is(qrCode)
        If DocumentType = 15 Then
            qs.And("Document Type").Is(DocumentType - 1) ' nhap roi
        Else
            qs.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
        End If

        Dim InputYes As DataTable = qs.ToTable
        If InputYes.Rows.Count <= 0 Then
            WorkSession.MsgML("Not Yet Instock {0} to QRCode Entry!", qrCode)
            Return
        End If

        Try

            Dim q As Query = Query.From(TableDocumentEntryHeader)
            q.Where("Document No_").Is(DocumentNo)
            q.And("Document Type").Is(DocumentType)

            Dim DS As DataTable = q.ToTable

            Dim ErrNo As Integer = 0
            'Query.BeginTransaction()

            For i As Integer = 0 To DS.Rows.Count - 1

                ErrNo = PostQrCodeEntry(qrCode, DS.Rows(i), i, 1)
                If ErrNo = 2 Then
                    WorkSession.MsgML("QRCode xuat kho thanh cong {0}!", qrCode)
                    Exit For
                End If
            Next

            'Query.EndTransaction()

        Catch ex As Exception
            'Query.RollBack()
            WorkSession.MsgML(ex.ToString)

        End Try

        'Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        'Dim SerialNo As String = ""
        'If qrCode = "" Then
        '    Dim r As Hashtable = sender.CurrentRow
        '    If r Is Nothing Or r.Count = 0 Then Return
        '    qrCode = r("QRCode")
        '    SerialNo = r("Serial No_")
        'End If

        'Try
        '    Query.BeginTransaction()

        '    Dim entityname As String = ""
        '    Dim filter As String = ""

        '    Dim InvoiceCode As String = ""
        '    Dim q As Query = Query.From("QRCode Entry").Transaction(True)
        '    q.Where("Serial No_").Is(SerialNo)
        '    Dim tblline As DataTable = q.ToTable

        '    If tblline.Rows.Count > 0 Then
        '        InvoiceCode = q.Value("External Document No_")

        '        q = Query.From("Value Entry")
        '        q.Where("External Document No_").Is(InvoiceCode)
        '        tblline = q.ToTable
        '        If tblline.Rows.Count > 0 Then
        '            entityname = "Value Entry"
        '        Else
        '            entityname = "Value Entry"
        '        End If

        '        filter = String.Format("[External Document No_]='{0}'", InvoiceCode)

        '        WorkSession.MsgML("Already Posted {0}!", qrCode)

        '    Else 'Insert to Document Entry Buffer for Posting to document entry and qrcode entry
        '        entityname = "Document Entry Buffer IO"
        '        Dim QueryValueEntry As Query

        '        Dim QueryInsert As Query = Query.Entity("Document Entry Buffer").Insert

        '        q = Query.From("Transfer Order Line")
        '        q.Where("Status").Is(2)
        '        q.And("Outstanding Quantity").GreaterThan(0)
        '        tblline = q.ToTable

        '        If tblline.Rows.Count > 0 Then
        '            For Each rc As DataRow In tblline.Rows
        '                q = Query.From("Document Entry Buffer").Transaction(True)
        '                q.Where("Document No_").Is(rc("Document No_")).And("Type").Is(4)

        '                If q.RecordCount <= 0 Then
        '                    QueryInsert.Fields("Document No_") = rc("Document No_")
        '                    QueryInsert.Fields("Item No_") = rc("No_")
        '                    QueryInsert.Fields("Item Variant") = rc("Variant Code")
        '                    QueryInsert.Fields("Lot No_") = rc("Lot No_")
        '                    QueryInsert.Fields("Quantity") = rc("Quantity")
        '                    QueryInsert.Fields("Unit Of Measure") = rc("Unit of Measure Code")
        '                    QueryInsert.Fields("Qty Unit Of Measure") = rc("Qty_ per Unit of Measure")

        '                    QueryValueEntry = Query.From("Sales Order Header").Transaction(True)
        '                    QueryValueEntry.WhereAs("No_") = rc("Document No_")

        '                    QueryInsert.Fields("External Document No_") = QueryValueEntry.Value("External Document No_")
        '                    QueryInsert.Fields("Your Reference") = rc("Document No_") 'QueryValueEntry.Value("Originally Ordered No_")
        '                    QueryInsert.Fields("Source Code") = QueryValueEntry.Value("Source Code")
        '                    QueryInsert.Fields("Responsibility Center") = QueryValueEntry.Value("Responsibility Center")

        '                    QueryInsert.Fields("Serial No_") = SerialNo
        '                    'QueryInsert.Fields("URL") = ""
        '                    'QueryInsert.Fields("URL1") = ""
        '                    'QueryInsert.Fields("URL2") = ""
        '                    'QueryInsert.Fields("URL3") = ""
        '                    'QueryInsert.Fields("URL4") = ""
        '                    'QueryInsert.Fields("Work Shift No_") = ""
        '                    'QueryInsert.Fields("Work Center") = ""
        '                    'QueryInsert.Fields("QRCode") =""

        '                    QueryInsert.Fields("Expired Date") = Now() 'rc("Expiration Date")
        '                    QueryInsert.Fields("Mfg Date") = Now() 'nprc("FA Posting Date")
        '                    QueryInsert.Fields("Blocked") = 0
        '                    QueryInsert.Fields("Type") = 4 'sales order
        '                    QueryInsert.Execute()
        '                End If

        '            Next
        '        End If

        '        filter = String.Format("[Blocked]=0 and [Type] = 101")

        '    End If
        '    Query.EndTransaction()

        '    Framework.OpenEntity(entityname, filter)
        'Catch ex As Exception
        '    Query.RollBack()
        '    WorkSession.MsgML(ex.ToString)

        'End Try

    End Sub

    Public Sub FindItemByQrCode4AO_CSMN(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        If qrCode = "" Then
            Dim rc As Hashtable = sender.CurrentRow
            If rc Is Nothing Or rc.Count = 0 Then
                qrCode = "ABC"
            Else
                qrCode = rc("QRCode")
            End If
        End If

        WorkSession.MsgML("da tim thay QRCode !")

        'Dim TableTaskControlRegister As String = "Task Control Register"

        Try
            'tra cuu cong viec
            Dim q As Query = Query.From("Task Control Register").Transaction(True)
            q.Where("QRCode").Is(qrCode)
            If q.RecordCount > 0 Then
                Dim TaskCode As String = q.Value("Task Code")

                Dim qTask As Query = Query.From("Task Template Setup").Transaction(True)
                qTask.Where("Code").Is(TaskCode)
                Dim EntityName As String = qTask.Value("Entity Detail")

                If EntityName = "" Then
                    WorkSession.MsgML("Chưa cài entity chi tiết công việc !")
                    Return
                End If

                Dim ClientEntity As New ClientContext(EntityName)
                Dim parameters As DataRow = ClientEntity.Parameters
                parameters("No_") = q.Value("No_")
                parameters("Document Type") = q.Value("Document Type")
                parameters("User ID") = q.Value("User ID")
                parameters("Department") = q.Value("Department")
                parameters("Position") = q.Value("Position")
                parameters("Subject") = q.Value("Subject")
                parameters("Content") = q.Value("Content")
                parameters("Member") = q.Value("Member")
                parameters("Vehicle") = q.Value("Vehicle")
                parameters("File Attach") = q.Value("File Attach")
                parameters("Eating Amount") = q.Value("Eating Amount")
                parameters("Eating Invoice") = q.Value("Eating Invoice")
                parameters("Hotel Amount") = q.Value("Hotel Amount")
                parameters("Hotel Invoice") = q.Value("Hotel Invoice")
                parameters("Moving Amount") = q.Value("Moving Amount")
                parameters("Moving Invoice") = q.Value("Moving Invoice")
                parameters("Washing Amount") = q.Value("Washing Amount")
                parameters("Washing Invoice") = q.Value("Washing Invoice")
                parameters("Vehicle Amount") = q.Value("Vehicle Amount")
                parameters("Vehicle Invoice") = q.Value("Vehicle Invoice")
                parameters("Party Amount") = q.Value("Party Amount")
                parameters("Party Invoice") = q.Value("Party Invoice")
                parameters("Other Amount") = q.Value("Other Amount")
                parameters("Other Invoice") = q.Value("Other Invoice")
                parameters("Priority") = q.Value("Priority")
                parameters("Planning") = q.Value("Planning")
                parameters("Starting Place") = q.Value("Starting Place")
                parameters("Ending Place") = q.Value("Ending Place")
                parameters("From Date") = q.Value("From Date")
                parameters("To Date") = q.Value("To Date")
                parameters("From Time") = ISDBNULL(q.Value("From Time"), "00:00")
                parameters("To Time") = ISDBNULL(q.Value("To Time"), "00:00")
                parameters("Material") = q.Value("Material")
                parameters("Car Driver") = q.Value("Car Driver")
                parameters("Reason Code") = q.Value("Reason Code")
                parameters("Description") = q.Value("Description")
                parameters("Quantity") = q.Value("Quantity")
                parameters("Job Description") = q.Value("Job Description")
                parameters("Posting Date") = q.Value("Posting Date")
                parameters("Employee Number") = q.Value("Employee Number")
                parameters("Labor Support") = q.Value("Labor Support")
                parameters("Room No") = q.Value("Room No")
                parameters("User Receive") = q.Value("User Receive")
                parameters("Invoice No") = q.Value("Invoice No")
                parameters("Amount") = q.Value("Amount")
                parameters("Payment Method") = q.Value("Payment Method")
                parameters("File Attach 1") = q.Value("File Attach 1")
                parameters("File Attach 2") = q.Value("File Attach 2")
                parameters("File Attach 3") = q.Value("File Attach 3")
                parameters("Request Type") = q.Value("Request Type")
                parameters("Equipment Type") = q.Value("Equipment Type")
                parameters("Equipment Infor") = q.Value("Equipment Infor")
                parameters("Document Date") = q.Value("Document Date")
                parameters("Destination") = q.Value("Destination")
                parameters("Source Code") = q.Value("Source Code")
                parameters("Status") = q.Value("Status")

                ClientEntity.Show()

                'Return

            End If

            WorkSession.MsgML("Công việc không tồn tại !")

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub
    Public Sub FindItemByQrCode4OO_CSMN(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        If qrCode = "" Then
            Dim rc As Hashtable = sender.CurrentRow
            qrCode = rc("QRCode")
        End If

        WorkSession.MsgML("da tim thay QRCode !")

        Dim TableTaskControlRegister As String = "Task Control Register"

        Dim DocumentNo As String = ""
        Dim TaskCode As String = ""
        Dim PostingDate As String = ""

        Try
            'tra cuu cong viec
            Dim q As Query = Query.From(TableTaskControlRegister).Transaction(True)
            q.Where("QRCode").Is(qrCode)
            If q.RecordCount > 0 Then
                DocumentNo = q.Value("No_")
                TaskCode = q.Value("Task Code")
                PostingDate = q.Value("Posting Date")

                WorkSession.MsgML("Đã tìm thấy công việc {0} ngày {1} mã số {2}", DocumentNo, PostingDate, TaskCode)

                'Return
            End If

            WorkSession.MsgML("Công việc không tồn tại !")

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)

        End Try

    End Sub

    Public Sub FindItemByQrCode4CO_CSMN(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim qrCode As String = ISDBNULL(sender.Request("__QRCODE__"), "")
        If qrCode = "" Then
            Dim rc As Hashtable = sender.CurrentRow
            qrCode = rc("QRCode")
        End If


        Dim TableQRCodeEntry As String = "DataLinked1 QRCode Entry"
        Dim entityname As String = "DataLinked1 QRCode Entry CO"
        Dim filter As String = ""

        'kiem tra xem QRCode da nhap kho chua
        Dim q As Query = Query.From(TableQRCodeEntry).Transaction(True)
        q.Where("QRCode").Is(qrCode)
        q.And("Document Type").Is(6)
        q.And("Status").Is(1)
        If q.ToTable.Rows.Count = 0 Then
            WorkSession.MsgML("QR Code chua nhap kho {0}!", qrCode)
            Return
        End If

        Dim RowID As Integer = q.Value("RowID")

        'kiem tra xem QRCode da nhap phe chua
        q = Query.From(TableQRCodeEntry).Transaction(True)
        q.Where("QRCode").Is(qrCode)
        q.And("Document Type").Is(6)
        q.And("Status").Is(0)
        If q.ToTable.Rows.Count > 0 Then
            WorkSession.MsgML("QRCode da ton tai {0}!", qrCode)
            Return
        End If

        Try

            Dim update As Query = Query.Update(TableQRCodeEntry)
            update.Where("RowID").Is(RowID)
            update.Fields("Status") = 0
            update.Execute()

            'filter = String.Format("[QRCode]=" & qrCode & " And [Document Type]=6 And [Status]=0")
            'Framework.OpenEntity(entityname, filter)
            WorkSession.MsgML("Nhap phe thanh cong {0}!", qrCode)

        Catch ex As Exception

            WorkSession.MsgML(ex.ToString)

        End Try

    End Sub

    Public Function CheckQrCodeTransaction(ByVal qrCode As String, Optional ByVal Sourcecode As String = "", Optional ByVal locationcode As String = "") As Integer

        'Dim DocumentNo As String = rOrder("No_")
        ''Dim Status As String = rOrder("Status")
        'Dim Backend As Integer = rOrder("Backend")
        'Dim DocType As Integer = ISDBNULL(rOrder("Document Type"), 1)
        Dim flat As Integer = 0

        Dim TableQRCode As String = "QRCode"
        Dim TableQRCodeEntry1 As String = "QRCode Entry"
        'Dim TableQRCodeEntry As String = "QRCode Entry"
        'Dim TableDocumentEntryHeader As String = "Document Entry Header"
        'Dim TableDocumentEntry As String = "Document Entry"


        'kiem tra xem QRCode da nhap kho chua
        Dim q As Query = Query.From(TableQRCodeEntry1).Transaction(True)
        q.Where("QRCode").Is(qrCode)
        If Sourcecode <> "" Then q.And("Source Code").Is(Sourcecode)
        If locationcode <> "" Then q.And("Location Code").Is(locationcode)
        q.And("Document Type").Is(6)
        q.And("Status").Is(0)

        If q.ToTable.Rows.Count > 0 Then
            WorkSession.MsgML("QRCode đã hủy do phế SX {0}!", qrCode)
            Return 3
        End If

        'q = Query.From(TableQRCodeEntry1).Transaction(True)
        'q.Where("QRCode").Is(qrCode)
        'If Sourcecode <> "" Then q.And("Source Code").Is(Sourcecode)
        'If locationcode <> "" Then q.And("Location Code").Is(locationcode)
        'q.And("Document Type").Is(6)
        'q.And("Status").Is(1)
        'If q.ToTable.Rows.Count > 0 Then
        '    WorkSession.MsgML("QRCode đã nhập sản xuất {0}!", qrCode)
        '    flat = 6
        'End If

        q = Query.From(TableQRCodeEntry1).Transaction(True)
        q.Where("QRCode").Is(qrCode)
        If Sourcecode <> "" Then q.And("Source Code").Is(Sourcecode)
        If locationcode <> "" Then q.And("Location Code").Is(locationcode)
        'q.And("Document Type").Is(6)
        'q.And("Status").Is(1)
        'lay QRCode dua vao datasource
        q.OrderBy("Created Date").DESC()

        If q.ToTable.Rows.Count = 0 Then
            WorkSession.MsgML("QRCode chưa phát sinh {0}!", qrCode)
            Return -1
        End If
        Dim r As DataRow = q.TakeRow()

        Select Case r("Document Type")
            Case 0
                WorkSession.MsgML("QRCode đã nhập mua {0}!", qrCode)
                flat = 0
            Case 1
                WorkSession.MsgML("QRCode xuất bán {0}!", qrCode)
                flat = 1
            Case 2
                WorkSession.MsgML("QRCode đã nhập điều chỉnh tăng {0}!", qrCode)
                flat = 2
            Case 3
                WorkSession.MsgML("QRCode đã xuất hủy {0}!", qrCode)
                flat = 3
            Case 4
                WorkSession.MsgML("QRCode đã nhập chuyển kho nội bộ {0}!", qrCode)
                flat = 4
            Case 5
                WorkSession.MsgML("QRCode đã xuất chuyển kho nội bộ {0}!", qrCode)
                flat = 5
            Case 6
                WorkSession.MsgML("QRCode đã nhập sản xuất {0}!", qrCode)
                flat = 6
            Case 7
                WorkSession.MsgML("QRCode đã xuất tiêu hao {0}!", qrCode)
                flat = 7
            Case 8
                WorkSession.MsgML("QRCode đã nhập bảo trì {0}!", qrCode)
                flat = 8
            Case 9
                WorkSession.MsgML("QRCode đã xuất trả hàng NCC {0}!", qrCode)
                flat = 9
            Case 10
                WorkSession.MsgML("QRCode đã nhập trả hàng khách hàng {0}!", qrCode)
                flat = 10
            Case 11
                WorkSession.MsgML("QRCode đã xuất trả bảo trì {0}!", qrCode)
                flat = 11
            Case 12
                WorkSession.MsgML("QRCode đã nhập kí gửi hàng đại lý {0}!", qrCode)
                flat = 12
            Case 14
                WorkSession.MsgML("QRCode đã nhập gia công {0}!", qrCode)
                flat = 14
            Case 15
                WorkSession.MsgML("QRCode đã xuất gia công {0}!", qrCode)
                flat = 15
            Case 101
                WorkSession.MsgML("QRCode xuất tiêu hao {0}!", qrCode)
                flat = 101
            Case Else
                WorkSession.MsgML("QRCode chưa phát sinh {0}!", qrCode)
                flat = -1
        End Select

        Return flat

    End Function

#End Region

#Region "QR Code packing list"

    Public Sub ColumnValueChange_QRCodeCreate(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim FRowID As Integer = sender.GetParameter("FRowID")
            Dim FItemNo_ As String = sender.GetParameter("FItemNo_")
            Dim FQRCode As String = sender.GetParameter("FQRCode")
            Dim FQuantity As Decimal = sender.GetParameter("FQuantity")

            Dim r As Hashtable = sender.CurrentRow

            Dim sender_Db As New DataTable
            sender_Db = WorkSession.DataSource
            If r("RowID").ToString = "" Then
                r("RowID") = sender_Db.Rows.Count + 1
                r("QRCode") = FQRCode & "." & r("RowID")
            End If
            Select Case sender.ColumnName
                Case "Quantity"
                    Dim sumqty As Decimal = 0
                    If sender_Db IsNot Nothing AndAlso sender_Db.Rows.Count > 0 Then
                        sumqty = Code.Library.Library.ISDBNULL(sender_Db.Compute("sum(Quantity)", "RowID<>" & r("RowID") & ""), 0)
                    End If

                    sumqty = Code.Library.Library.ISDBNULL(sumqty, 0) + r("Quantity")
                    If sumqty > FQuantity Then
                        WorkSession.MsgML("Số lượng vượt mức qrcode chuẩn!")
                        r("Quantity") = 0
                    End If
            End Select
        Catch ex As Exception

        End Try
    End Sub
    Public Shared Sub TRDOpen_QRCodeBufferCreater(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            WorkSession.Save("parentEntityID", sender.ClientID)


            Dim ClientEntity As New ClientContext("QRCode Buffer Creater")
            Dim parameters As DataRow = ClientEntity.Parameters
            Dim r As Hashtable = sender.CurrentRow
            Dim RowID As Integer = r("RowID")
            parameters("FRowID") = RowID
            parameters("FItemNo_") = r("Item No_")
            parameters("FQRCode") = r("QRCode")

            parameters("FQuantity") = r("Quantity")
            ClientEntity.Show()

        Catch ex As Exception

        End Try
    End Sub
    Public Sub Create_QRCodeBuffer(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim RowID As Integer = sender.GetParameter("FRowID")
            Dim FQuantity As Integer = sender.GetParameter("FQuantity")
            Dim qQRCode As Query = Query.From("QRCode").Transaction(True)
            qQRCode.WhereAs("RowID") = RowID
            Dim drow As DataRow = qQRCode.TakeRow

            Dim sender_Db As New DataTable
            sender_Db = WorkSession.DataSource


            Dim sumqty As Decimal = 0
            sumqty = Code.Library.Library.ISDBNULL(sender_Db.Compute("sum(Quantity)", ""), 0)
            If sumqty < FQuantity Then
                WorkSession.MsgML("Số lượng tách chưa bảng số lương tổng")
                Return
            End If
            Query.BeginTransaction()
            Dim CurrentDate As Date = Now()
            Dim Day As String = CurrentDate.Day
            Dim Month As String = CurrentDate.Month
            Dim Year As String = CurrentDate.Year
            Dim PathDate As String = Day & Month & Year & "/"
            'Dim QRCode As String = qQRCode.Value("QRCode")

            Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")
            If Not Directory.Exists(str3) Then
                Directory.CreateDirectory(str3)
            End If

            For Each trow As DataRow In sender_Db.Rows
                Dim rqty As Decimal = trow("Quantity")
                If rqty <> 0 Then
                    Dim dataQR As String = trow("QRCode")

                    Dim QCheck_QRCode As Query = Query.From("QRCode").Transaction(True)
                    QCheck_QRCode.WhereAs("QRCode") = dataQR
                    If QCheck_QRCode.ToTable.Rows.Count > 0 Then
                        WorkSession.MsgML("Đã tồn tại qrcode!" & dataQR)
                        Query.RollBack()
                        Return
                    End If

                    Dim qRLinkL = Replace(dataQR, "#", "-")
                    qRLinkL = Replace(qRLinkL, "/", "-")
                    'qRLinkL = Replace(qRLinkL, "'", "''")
                    qRLinkL = Replace(qRLinkL, "*", "-")
                    qRLinkL = qRLinkL.ToString().Replace(" ", "")
                    qRLinkL = qRLinkL.ToString().Replace(":", "")
                    Dim serverPath As String = str3 + qRLinkL + ".jpg"
                    CreateQRImage(dataQR, serverPath)

                    Dim imageQRCode As String = ""
                    imageQRCode = serverPath

                    Dim InsertQRCode As Query = Query.Entity("QRCode 1").Insert
                    InsertQRCode.WithValues(drow)

                    InsertQRCode.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
                    InsertQRCode.Fields("QRCode") = dataQR
                    InsertQRCode.Fields("Serial No_") = qRLinkL
                    InsertQRCode.Fields("Name") = qRLinkL
                    InsertQRCode.Fields("Description") = qRLinkL
                    InsertQRCode.Fields("Quantity") = rqty
                    InsertQRCode.Execute()

                End If
            Next

            If qQRCode.ToTable.Rows.Count > 0 AndAlso FQuantity > 0 Then


                Dim UpQRCode As Query = Query.Update("QRCode")
                UpQRCode.WhereAs("RowID") = RowID

                UpQRCode.Fields("Blocked") = 1
                UpQRCode.Execute()
            End If

            Query.EndTransaction()

            WorkSession.Client.Close()
            'Doc lai bien session chua ID cua entity cha A
            Dim parentID As String = CStr(WorkSession.Read("parentEntityID"))
            'Now refresh parent
            Framework.RefreshSource(parentID)

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub QrCodeBlocked(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = sender.CurrentRow
            Dim RowID As Integer = r("RowID")
            Query.BeginTransaction()
            Dim qUpdateQRCode As Query = Query.Update("QRCode")
            qUpdateQRCode.WhereAs("RowID") = RowID
            qUpdateQRCode.Fields("Blocked") = 1
            qUpdateQRCode.Fields("System Date") = Now()
            qUpdateQRCode.Execute()
            Query.EndTransaction()
            sender.RefreshSource()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub
    Public Sub QrCodeReopenBlocked(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = sender.CurrentRow
            Dim RowID As Integer = r("RowID")
            Query.BeginTransaction()
            Dim qUpdateQRCode As Query = Query.Update("QRCode")
            qUpdateQRCode.WhereAs("RowID") = RowID
            qUpdateQRCode.Fields("Blocked") = 0
            qUpdateQRCode.Fields("System Date") = Now()
            qUpdateQRCode.Execute()
            Query.EndTransaction()
            sender.RefreshSource()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub
    Public Shared Function scanStockCheck(QRcode As String, Doctype As Integer, Optional Voucher As String = "", Optional QTy As Decimal = 1) As Integer
        Dim q As Query = Query.From("QRCode Entry").Transaction(True)
        q = Query.From("QRCode Entry").Transaction(True)
        q.Where("QRCode").Is(QRcode)
        q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
        Dim tblline As DataTable = q.ToTable
        Dim Flag As Integer = tblline.Rows.Count


        Select Case Doctype
            Case 0, 2, 6, 12, 14, 16, 18
                Return 1 'okla
            Case 1 'sales shipment
                If Flag <= 0 Then Return 0
            Case 3, 5, 7, 9, 11, 13, 15, 17, 19
                If Flag <= 0 Then Return 0
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").Is(1)
                If q.ToTable.Rows.Count > 0 Then Return 0
            Case 8
                If Flag <= 0 Then Return 0
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").Is(1)
                If q.ToTable.Rows.Count <= 0 Then Return 0

            Case Else '4,10
                If Flag <= 0 Then Return 0
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").Is(1)
                If q.ToTable.Rows.Count > 0 Then Return 0
        End Select

        Return 1

    End Function

    Public Shared Function scanStockPost(QRcode As String, Doctype As Integer, Logistics As String, QTy As Decimal, BinCode As String, LineNo As Integer, DocumentEntry As Integer, Optional NewBinCode As String = "") As Integer
        Dim Finish As Integer = 1
        Dim tableID As Integer = 0

        Dim q As Query = Query.From("QRCode").Transaction(True)
        q.Where("QRCode").Is(QRcode)
        If q.RecordCount <= 0 Then Return 0

        Dim trow As DataRow = q.TakeRow
        Dim ItemCode As String = q.Value("Item No_")
        Dim Update As Query
        Dim querrydata As Query

        Select Case Doctype
            Case 4, 5
                Dim Zone As String = ""
                Dim qr As Query = Query.From("Bin").Transaction(True)
                qr.Where("Code").Is(BinCode)
                Zone = qr.Value("Zone")
                querrydata = Query.From("QRCode Entry").Transaction(True)
                querrydata.Where("QRCode").Is(QRcode)
                querrydata.And("Bin").Is(BinCode)
                querrydata.And("Document Type").Is(Doctype)

                If querrydata.RecordCount > 0 Then
                    Update = Query.Update("QRCode Entry")
                    Update.Where("QRCode").Is(QRcode)
                    Update.And("Document Type").Is(Doctype)
                    'querrydata.And("Item No_").Is(ItemCode)
                    Update.Fields("Bin") = NewBinCode
                    Update.Fields("Bin History", "+") = BinCode + "|"
                    Update.Fields("Zone") = Zone
                    Update.Fields("Zone History", "+") = querrydata.Value("Zone") + "|"

                    Update.Execute()

                    Update = Query.Update("Document Entry")
                    Update.Where("Logistics No_").Is(Logistics)
                    Update.And("Document Type").Is(Doctype)
                    Update.And("Item No_").Is(ItemCode)
                    Update.And("QRCode").Is(QRcode)
                    'Update.And("Line No_").Is(LineNo)
                    'Update.And("Entry No_").Is(DocumentEntry)

                    Update.Fields("Bin") = NewBinCode
                    Update.Fields("Bin History", "+") = BinCode + ","
                    Update.Fields("Zone") = Zone
                    Update.Fields("Zone History", "+") = querrydata.Value("Zone") + "|"

                    Update.Fields("Scan Number", "+") = 1
                    Update.Fields("Status") = 2
                    If trow("URL") = "" Then Update.Fields("Attach File") = trow("URL")
                    If trow("Serial No_") = "" Then Update.Fields("Serial No_") = trow("Serial No_")
                    If trow("Lot No_") = "" Then Update.Fields("Lot No_") = trow("Lot No_")
                    If trow("Real Lot No_") = "" Then Update.Fields("Real Lot No_") = trow("Real Lot No_")

                    Update.Execute()
                Else 'Insert QRCode Entry

                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = QRcode
                    QueryInsertQREntry.Fields("Item No_") = ItemCode
                    QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
                    QueryInsertQREntry.Fields("Real Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Real Expiration Date") = CDate(trow("Expired Date"))

                    QueryInsertQREntry.Fields("Bin") = BinCode
                    QueryInsertQREntry.Fields("Zone") = Zone

                    QueryInsertQREntry.Fields("Document Type") = Doctype
                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Description") = trow("Name")
                    QueryInsertQREntry.Fields("Variant Code") = trow("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = trow("Work Center")

                    QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

                    'QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    'QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Unit Of Measure Code") = trow("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit Of Measure") = trow("Qty_ per Unit Of Measure")
                    QueryInsertQREntry.Fields("Source Code") = trow("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = trow("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = trow("Location Code")
                    QueryInsertQREntry.Fields("External Document No_") = trow("External Document No_")
                    'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    'QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Entry No_") = DocumentEntry
                    QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                    QueryInsertQREntry.Fields("Logistics No_") = Logistics
                    QueryInsertQREntry.Fields("Document No_") = trow("Document No_")
                    QueryInsertQREntry.Fields("Packing List") = trow("Packing List")
                    QueryInsertQREntry.Fields("Picking No_") = trow("Picking No_")
                    QueryInsertQREntry.Fields("Source Type") = trow("Source Type")
                    QueryInsertQREntry.Fields("Source No_") = trow("Source No_")
                    QueryInsertQREntry.Execute()

                    Dim QueryUpdate As Query = Query.Update("Document Entry")
                    QueryUpdate.WhereAs("Logistics No_") = Logistics
                    QueryUpdate.WhereAs("QRCode") = trow("QRCode")
                    QueryUpdate.WhereAs("Item No_") = trow("Item No_")
                    'QueryUpdate.WhereAs("Line No_") = lineno
                    QueryUpdate.WhereAs("Document Type") = Doctype

                    QueryUpdate.Fields("Bin") = BinCode
                    QueryUpdate.Fields("Zone") = Zone
                    QueryUpdate.Fields("Scan Number", "+") = 1
                    QueryUpdate.Fields("Status") = 2
                    If trow("URL") = "" Then QueryUpdate.Fields("Attach File") = trow("URL")
                    If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = trow("Serial No_")
                    If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = trow("Lot No_")
                    If trow("Real Lot No_") = "" Then QueryUpdate.Fields("Real Lot No_") = trow("Real Lot No_")

                    QueryUpdate.Execute()

                End If
            Case 0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19

                Dim Zone As String = ""
                Dim qr As Query = Query.From("Bin").Transaction(True)
                qr.Where("Code").Is(BinCode)
                Zone = qr.Value("Zone")

                querrydata = Query.From("QRCode Entry").Transaction(True)
                querrydata.Where("QRCode").Is(QRcode)
                'querrydata.And("Bin").Is(BinCode)
                querrydata.And("Document Type").Is(Doctype)

                If querrydata.RecordCount > 0 Then
                    Update = Query.Update("QRCode Entry")
                    Update.Where("QRCode").Is(QRcode)
                    Update.And("Document Type").Is(Doctype)
                    'querrydata.And("Item No_").Is(ItemCode)
                    Update.Fields("Bin") = BinCode
                    'Update.Fields("Bin History") = BinCode
                    Update.Fields("Zone") = Zone
                    'Update.Fields("Zone History") = BinCode

                    Update.Execute()

                    Update = Query.Update("Document Entry")
                    Update.Where("Logistics No_").Is(Logistics)
                    Update.And("Document Type").Is(Doctype)
                    Update.And("Item No_").Is(ItemCode)
                    Update.And("QRCode").Is(QRcode)
                    'Update.And("Line No_").Is(LineNo)
                    'Update.And("Entry No_").Is(DocumentEntry)

                    Update.Fields("Bin") = BinCode
                    'Update.Fields("Bin History") = BinCode
                    Update.Fields("Zone") = Zone
                    'Update.Fields("Zone History") = BinCode

                    Update.Fields("Scan Number", "+") = 1
                    Update.Fields("Status") = 2
                    If trow("URL") = "" Then Update.Fields("Attach File") = trow("URL")
                    If trow("Serial No_") = "" Then Update.Fields("Serial No_") = trow("Serial No_")
                    If trow("Lot No_") = "" Then Update.Fields("Lot No_") = trow("Lot No_")
                    If trow("Real Lot No_") = "" Then Update.Fields("Real Lot No_") = trow("Real Lot No_")

                    Update.Execute()
                Else 'Insert QRCode Entry

                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = QRcode
                    QueryInsertQREntry.Fields("Item No_") = ItemCode
                    QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
                    QueryInsertQREntry.Fields("Real Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Real Expiration Date") = CDate(trow("Expired Date"))

                    QueryInsertQREntry.Fields("Bin") = BinCode
                    QueryInsertQREntry.Fields("Zone") = Zone

                    QueryInsertQREntry.Fields("Document Type") = Doctype
                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Description") = trow("Name")
                    QueryInsertQREntry.Fields("Variant Code") = trow("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = trow("Work Center")

                    QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

                    'QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    'QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Unit Of Measure Code") = trow("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit Of Measure") = trow("Qty_ per Unit Of Measure")
                    QueryInsertQREntry.Fields("Source Code") = trow("Source Code")
                    QueryInsertQREntry.Fields("Responsibility Center") = trow("Responsibility Center")
                    QueryInsertQREntry.Fields("Location Code") = trow("Location Code")
                    QueryInsertQREntry.Fields("External Document No_") = trow("External Document No_")
                    'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    'QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Entry No_") = DocumentEntry
                    QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                    QueryInsertQREntry.Fields("Logistics No_") = Logistics
                    QueryInsertQREntry.Fields("Document No_") = trow("Document No_")
                    QueryInsertQREntry.Fields("Packing List") = trow("Packing List")
                    QueryInsertQREntry.Fields("Picking No_") = trow("Picking No_")
                    QueryInsertQREntry.Fields("Source Type") = trow("Source Type")
                    QueryInsertQREntry.Fields("Source No_") = trow("Source No_")
                    QueryInsertQREntry.Execute()

                    Dim QueryUpdate As Query = Query.Update("Document Entry")
                    QueryUpdate.WhereAs("Logistics No_") = Logistics
                    QueryUpdate.WhereAs("QRCode") = trow("QRCode")
                    QueryUpdate.WhereAs("Item No_") = trow("Item No_")
                    'QueryUpdate.WhereAs("Line No_") = lineno
                    QueryUpdate.WhereAs("Document Type") = Doctype

                    QueryUpdate.Fields("Bin") = BinCode
                    QueryUpdate.Fields("Zone") = Zone

                    QueryUpdate.Fields("Scan Number", "+") = 1
                    QueryUpdate.Fields("Status") = 2
                    If trow("URL") = "" Then QueryUpdate.Fields("Attach File") = trow("URL")
                    If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = trow("Serial No_")
                    If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = trow("Lot No_")
                    If trow("Real Lot No_") = "" Then QueryUpdate.Fields("Real Lot No_") = trow("Real Lot No_")

                    QueryUpdate.Execute()

                End If

            Case Else

        End Select

        Update = Query.Update("Document Entry Header")
        Update.Where("Logistics No_").Is(Logistics)
        Update.And("Document Type").Is(Doctype)
        Update.Fields("Status") = 2
        Update.Execute()

        Return 1
    End Function

    Public Shared Sub InsertLogEnvert(ByVal DocumentCode As String, ByVal LoginID As String,
                            ByVal PostingDate As Date, ByVal StatusType As Integer,
                            ByVal Description As String, Optional ByVal TableID As String = "")
        Try
            Dim InsertLogEvent As Query = Query.Insert("History Log Event")
            InsertLogEvent.Fields("Document Code") = DocumentCode
            InsertLogEvent.Fields("Login ID") = LoginID
            InsertLogEvent.Fields("Posting Date") = PostingDate
            InsertLogEvent.Fields("System Date") = Now
            InsertLogEvent.Fields("Status Type") = StatusType
            InsertLogEvent.Fields("Description") = Description
            InsertLogEvent.Fields("TableID") = TableID
            InsertLogEvent.Execute()
        Catch ex As Exception
            WorkSession.Msg(ex.ToString())
        End Try
    End Sub

    Public Sub DocType_Status(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Query.BeginTransaction()
            Dim r As Hashtable = sender.CurrentRow
            Dim FStatus As Integer = sender.GetParameter("URL")
            FStatus = Code.Logics.CodeLogics.ISDBNULL(FStatus, 1)
            Dim No_ As String = r("No_")
            If r.Contains("Document No_") Then
                No_ = r("Document No_")
            End If
            Dim QUpdate As Query = Query.Update("Document Entry Header")
            QUpdate.Fields("Status") = FStatus
            QUpdate.WhereAs("No_") = No_
            QUpdate.Execute()
            InsertLogEnvert(No_, Framework.UserID, Now,
                            FStatus, "Thay đổi chứng từ " & No_ & "-" & FStatus,
                             "Document Entry Header") ' insert log
            Query.EndTransaction()
            WorkSession.MsgML("Thành công!")
            sender.RefreshSource()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    'Public Shared Function scanStockCheck02(QRcode As String, Doctype As Integer,
    '                                        Optional Voucher As String = "", Optional QTy As Decimal = 1) As Integer
    '    Dim q As Query = Query.From("QRCode Entry").Transaction(True)
    '    Dim tblline As DataTable
    '    Dim Flag As Integer = 0

    '    Select Case Doctype
    '        Case 0, 2, 6
    '            Return 1 'okla
    '        Case 8, 10
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(1)
    '            'If q.ToTable.Rows.Count <= 0 Then Return 0
    '            If q.ToTable.Rows.Count <= 0 Then
    '                WorkSession.MsgML("QRCode chưa xuất bán : {0} !", QRcode)
    '                Return 0
    '            End If

    '        Case 4, 12, 14, 16, 18
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(Doctype + 1)
    '            'If q.ToTable.Rows.Count <= 0 Then Return 0
    '            If q.ToTable.Rows.Count <= 0 Then
    '                WorkSession.MsgML("QRCode chưa xuất điều đi : {0} !", QRcode)
    '                Return 0
    '            End If
    '        Case 1 'sales shipment
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            'q = Query.From("QRCode Entry").Transaction(True)
    '            'q.Where("QRCode").Is(QRcode)
    '            'q.And("Document Type").Is(1)
    '            'If q.ToTable.Rows.Count > 0 Then Return 0
    '        Case 3, 9
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If
    '            ' công thêm trên lươi so với dữ liệu đã post 
    '        Case 7
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            Dim qty_recept As Decimal = 0
    '            qty_recept = q.Value("Quantity")
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If
    '            Dim DocNo_ As String = Voucher
    '            Dim ItemNo_ As String = q.Value("Item No_")
    '            Dim q_docEntryLine As Query = Query.From("Document Entry").Transaction(True)
    '            q_docEntryLine.WhereAs("Document No_") = DocNo_
    '            q_docEntryLine.WhereAs("Item No_") = ItemNo_
    '            Dim qsumDocEntryLine As Decimal = q_docEntryLine.Select("sum([Quantity]) qty").Value("qty")

    '            Dim q_doctyp7 As Query = Query.From("QRCode Entry").Transaction(True)
    '            q_doctyp7.WhereAs("Document No_") = DocNo_
    '            q_doctyp7.WhereAs("Item No_") = ItemNo_
    '            q_doctyp7.WhereAs("Document Type") = 7
    '            Dim qty_sum As Decimal = q_doctyp7.Select("sum([Valued Quantity]) qty").Value("qty")

    '            If qty_sum + qty_recept > qsumDocEntryLine Then
    '                WorkSession.MsgML("Số lượng quét vượt số lượng yêu câu {0} số lượng xuất {1} !", qsumDocEntryLine, String.Format("{0:#,##0.####}", CDec(qty_sum + qty_recept)))
    '                Return 0
    '            End If


    '            ' công thêm trên lươi so với dữ liệu đã post 
    '        Case 5
    '            'q = Query.From("QRCode Entry").Transaction(True)
    '            'q.Where("QRCode").Is(QRcode)
    '            'q.And("Document Type").Is(Doctype)
    '            'If q.ToTable.Rows.Count > 0 Then Return 0

    '        Case 11, 13, 15, 17, 19
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            'q = Query.From("QRCode Entry").Transaction(True)
    '            'q.Where("QRCode").Is(QRcode)
    '            'q.And("Document Type").Is(Doctype)
    '            'If q.ToTable.Rows.Count > 0 Then Return 0

    '        Case Else
    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").In("0, 2, 4, 6,10, 12, 14, 16") 'đa nhap roi
    '            tblline = q.ToTable
    '            Flag = tblline.Rows.Count
    '            If Flag <= 0 Then
    '                WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
    '                Return 0
    '            End If

    '            q = Query.From("QRCode Entry").Transaction(True)
    '            q.Where("QRCode").Is(QRcode)
    '            q.And("Document Type").Is(1)
    '            If q.ToTable.Rows.Count > 0 Then
    '                WorkSession.MsgML("QRCode đã xuất bán : {0} !", QRcode)
    '                Return 0
    '            End If

    '    End Select

    '    'WorkSession.MsgML("Checking result")
    '    Return 1

    'End Function

    'Public Sub scanStock02(ByVal sender As WXSource, ByVal e As WXArgs)
    '    WorkSession.MsgML("scanStock02 function!")

    '    Dim Data = ISDBNULL(sender.Request("__DATA__"), "")
    '    'WorkSession.MsgML("scanStock function! data {0}", Data)
    '    If Data = "" Then Return

    '    Dim js As New JavaScriptSerializer()
    '    Dim items = js.Deserialize(Of ArrayList)(Data)
    '    'WorkSession.MsgML("scanStock function! data Item {0}", items.Count)
    '    If items.Count <= 0 Then Return

    '    Try
    '        Query.BeginTransaction()

    '        Dim Doctype As Integer = 0
    '        Dim BinQRCode As String = ""
    '        Dim Logistics As String = ""
    '        Dim Qty As Integer = 0
    '        Dim UOM As String = ""
    '        Dim QRCodeItem As String = ""
    '        Dim Flag As Integer = 0

    '        Dim i As Integer = 0
    '        Dim Loopqty As Integer = 0

    '        Dim productDict = New Dictionary(Of String, Integer)
    '        Dim productDictDoc7 = New Dictionary(Of String, Integer)
    '        For Each item As Object In items



    '            If Not productDict.ContainsKey(item("Qr")) Then
    '                productDict.Add(item("Qr"), item("Qty"))
    '            Else
    '                productDict(item("Qr")) += item("Qty")
    '                Loopqty += 1
    '            End If
    '            If Doctype = 7 Then
    '                Dim q As Query = Query.From("QRCode Entry").Transaction(True)
    '                q.Where("QRCode").Is(item("Qr"))
    '                q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
    '                Dim ItemNo_ As String = q.Value("Item No_")
    '                Dim Qty_Receipt As Decimal = q.Value("Quantity")
    '                If Not productDictDoc7.ContainsKey(ItemNo_) Then
    '                    productDictDoc7.Add(ItemNo_, Qty_Receipt)
    '                Else
    '                    productDictDoc7(ItemNo_) += Qty_Receipt
    '                    Loopqty += 1
    '                End If
    '            End If
    '        Next


    '        If Loopqty = 0 Then
    '            Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
    '            Dim Entry As Integer = qqq.Value("EntryNo")

    '            For Each item As Object In items
    '                BinQRCode = items(0)("Bin")

    '                Dim qr As Query = Query.From("Bin").Transaction(True)
    '                qr.Where("Code").Is(BinQRCode)
    '                Dim Zone As String = qr.Value("Zone")

    '                QRCodeItem = item("Qr")
    '                'WorkSession.MsgML("Mã QR SP {0}", QRCodeItem)
    '                Qty = CInt(item("Qty"))
    '                'WorkSession.MsgML("Số lượng {0}", Qty)
    '                'BinQRCode = item("Bin")
    '                'WorkSession.MsgML("Mã QR ngăn kệ {0}", BinQRCode)
    '                Doctype = CInt(item("docType"))
    '                'WorkSession.MsgML("Loại nghiệp vụ {0}", Doctype)
    '                Logistics = item("logistics")
    '                'WorkSession.MsgML("Mã giao nhận (Logistics No_ {0}", Logistics)

    '                Select Case CInt(Doctype)
    '                    Case 0, 1, 4, 5, 6, 7
    '                        Flag = scanStockCheck02(QRCodeItem, Doctype, Logistics, 1)
    '                        If Flag <> 0 Then scanStockPost02(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
    '                    Case Else
    '                End Select
    '                'scanStockPost02(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)

    '                Entry += 1
    '                i += 1
    '            Next

    '            WorkSession.MsgML("scanStock Successfully !")

    '        Else
    '            WorkSession.MsgML("QRCode Parent need edit before post !")

    '            'Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
    '            'Dim Entry As Integer = qqq.Value("EntryNo")

    '            Dim insert As Query = Query.Entity("QRCode Line").Insert

    '            BinQRCode = items(0)("Bin")
    '            'WorkSession.MsgML("Mã QR ngăn kệ {0}", BinQRCode)
    '            Doctype = CInt(items(0)("docType"))
    '            'WorkSession.MsgML("Loại nghiệp vụ {0}", Doctype)
    '            Logistics = items(0)("logistics")

    '            Dim qr As Query = Query.From("Bin").Transaction(True)
    '            qr.Where("Code").Is(BinQRCode)
    '            Dim Zone As String = qr.Value("Zone")
    '            Dim LocationCode As String = qr.Value("Location Code")

    '            'For Each qrcode As String In productDict.Keys
    '            '    QRCodeItem = qrcode
    '            '    ' WorkSession.MsgML("Mã QR SP {0}", QRCodeItem)
    '            '    Qty = CInt(productDict(qrcode))
    '            '    'WorkSession.MsgML("Số lượng {0}", Qty)
    '            'next

    '            For Each kvp As KeyValuePair(Of String, Integer) In productDict
    '                'Dim key As String = kvp.Key
    '                'Dim val As Integer = kvp.Value
    '                'WorkSession.MsgML("Key QRCode '{0}'", key)
    '                'WorkSession.MsgML("Số lượng {0}", Val)

    '                QRCodeItem = kvp.Key
    '                Qty = kvp.Value

    '                'Select Case CInt(Doctype)
    '                '    Case 0, 1, 4, 5, 6, 7
    '                '        Flag = scanStockCheck(QRCodeItem, Doctype, Logistics, 1)
    '                '        If Flag <> 0 Then scanStockPost(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
    '                '    Case Else
    '                'End Select

    '                'Dim existLine As Query = Query.From("QRCode Line").Transaction(True)
    '                'existLine.WhereAs("Document Type") = CInt(Doctype)
    '                'existLine.WhereAs("Logistics No_") = Logistics
    '                'existLine.WhereAs("QRCode") = QRCodeItem

    '                Dim QRCodeInfo As Query = Query.From("QRCode").Transaction(True)
    '                QRCodeInfo.Where("QRCode").Is(QRCodeItem)
    '                Dim QRcodeParent As Integer = QRCodeInfo.Value("Parent")

    '                'If existLine.RecordCount <= 0 Or QRcodeParent = 1 Then

    '                insert = Query.Entity("QRCode Line").Insert
    '                insert.Fields("Type") = 4
    '                insert.Fields("No_") = QRCodeInfo.Value("Item No_")

    '                insert.Fields("QRCode") = QRCodeItem
    '                insert.Fields("Quantity") = CInt(Qty)

    '                If CInt(Qty) <= 1 Then
    '                    insert.Fields("Unit Of Measure") = QRCodeInfo.Value("Unit Of Measure")
    '                    insert.Fields("Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")
    '                Else
    '                    If QRcodeParent = 1 Then
    '                        Dim ItemUOM As Query = Query.From("Item Unit of Measure").Transaction(True)
    '                        ItemUOM.Where("Item No_").Is(QRCodeInfo.Value("Item No_"))

    '                        ItemUOM.And("Qty_ per Unit of Measure").LessThan(QRCodeInfo.Value("Qty Unit Of Measure"))
    '                        ItemUOM.OrderBy("Qty_ per Unit of Measure").DESC()

    '                        insert.Fields("Qty_ per Unit of Measure") = IIf(ItemUOM.Value("Qty_ per Unit of Measure") = 0, 1, ItemUOM.Value("Qty_ per Unit of Measure"))
    '                        insert.Fields("Unit Of Measure") = ItemUOM.Value("Code")
    '                    Else
    '                        insert.Fields("Unit Of Measure") = QRCodeInfo.Value("Unit Of Measure")
    '                        insert.Fields("Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")
    '                        insert.Fields("Quantity") = 1
    '                    End If


    '                End If

    '                insert.Fields("Document Type") = CInt(Doctype)
    '                insert.Fields("Logistics No_") = Logistics
    '                Select Case CInt(Doctype)
    '                    Case 4
    '                        insert.Fields("From Bin Code") = GetBinCodeFromQRCodeEntry(QRCodeItem, Doctype, Zone)
    '                        insert.Fields("From Zone") = Zone
    '                        insert.Fields("From Location Code") = LocationCode 'MasterRow("From Location Code")
    '                        insert.Fields("Bin Code") = insert.Fields("From Bin Code")
    '                        insert.Fields("Zone Code") = Zone
    '                        insert.Fields("To Bin Code") = BinQRCode
    '                        insert.Fields("Location Code") = LocationCode

    '                        insert.Fields("To Unit of Measure") = QRCodeInfo.Value("Unit Of Measure")
    '                        insert.Fields("To Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")

    '                    Case 5
    '                        insert.Fields("Bin Code") = BinQRCode
    '                        insert.Fields("From Bin Code") = BinQRCode
    '                        'insert.Fields("To Bin Code") = GetBinCodeFromInTransitLocation(r("Source Code"), r("Responsibility Center"), Zone, InTransit)
    '                        'insert.Fields("To Zone") = Zone
    '                        'insert.Fields("To Location Code") = InTransit
    '                    Case Else
    '                        insert.Fields("Bin Code") = BinQRCode
    '                        insert.Fields("Zone Code") = Zone
    '                        insert.Fields("Location Code") = LocationCode
    '                        insert.Fields("From Bin Code") = BinQRCode
    '                        insert.Fields("From Zone") = Zone
    '                        insert.Fields("From Location Code") = LocationCode
    '                        'insert.Fields("To Zone") = Zone
    '                        'insert.Fields("To Bin Code") = BinQRCode
    '                        'insert.Fields("To Location Code") = LocationCode
    '                End Select

    '                insert.Execute()

    '                'Entry += 1
    '                i += 1
    '                'End If
    '            Next


    '            Dim exist As Query = Query.From("QRCode Header").Transaction(True)
    '            exist.WhereAs("Document Type") = CInt(Doctype)
    '            exist.WhereAs("Logistics No_") = Logistics
    '            If exist.RecordCount <= 0 Then
    '                Dim Hinsert As Query = Query.Entity("QRCode Header").Insert
    '                Hinsert.Fields("Document Type") = CInt(Doctype)
    '                Hinsert.Fields("Logistics No_") = Logistics
    '                Hinsert.Fields("Location Code") = LocationCode
    '                Hinsert.Fields("Zone Code") = Zone
    '                Hinsert.Fields("Bin Code") = BinQRCode
    '                Hinsert.Execute()
    '            End If

    '            'Dim Hinsert As Query = Query.Entity("QRCode Header").Insert
    '            'Hinsert.Fields("Document Type") = CInt(Doctype)
    '            'Hinsert.Fields("Logistics No_") = Logistics
    '            'Hinsert.Fields("Bin Code") = BinQRCode
    '            'Hinsert.Execute()

    '            Framework.OpenEntity("QRCode Line", String.Format("[Logistics No_]=N'{0}' and [Document Type]={1}", Logistics, Doctype))

    '        End If

    '        Query.EndTransaction()

    '    Catch ex As Exception
    '        WorkSession.MsgML(ex.ToString)
    '        Query.RollBack()
    '    End Try


    'End Sub

    Public Shared Function scanStockCheck02(QRcode As String, Doctype As Integer,
                                            Optional Voucher As String = "", Optional QTy As Decimal = 1) As Integer
        Dim q As Query = Query.From("QRCode Entry").Transaction(True)
        Dim tblline As DataTable
        Dim Flag As Integer = 0

        Select Case Doctype
            Case 0, 2, 6
                Return 1 'okla
            Case 8, 10
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
                tblline = q.ToTable
                Flag = tblline.Rows.Count
                If Flag <= 0 Then
                    WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
                    Return 0
                End If

                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").Is(1)
                'If q.ToTable.Rows.Count <= 0 Then Return 0
                If q.ToTable.Rows.Count <= 0 Then
                    WorkSession.MsgML("QRCode chưa xuất bán : {0} !", QRcode)
                    Return 0
                End If

            Case 4, 12, 14, 16, 18
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
                tblline = q.ToTable
                Flag = tblline.Rows.Count
                If Flag <= 0 Then
                    WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
                    Return 0
                End If

                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").Is(Doctype + 1)
                'If q.ToTable.Rows.Count <= 0 Then Return 0
                If q.ToTable.Rows.Count <= 0 Then
                    WorkSession.MsgML("QRCode chưa xuất điều đi : {0} !", QRcode)
                    Return 0
                End If
            Case 1 'sales shipment
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
                tblline = q.ToTable
                Flag = tblline.Rows.Count
                If Flag <= 0 Then
                    WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
                    Return 0
                End If

                'q = Query.From("QRCode Entry").Transaction(True)
                'q.Where("QRCode").Is(QRcode)
                'q.And("Document Type").Is(1)
                'If q.ToTable.Rows.Count > 0 Then Return 0
            Case 3, 9
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
                tblline = q.ToTable
                Flag = tblline.Rows.Count
                If Flag <= 0 Then
                    WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
                    Return 0
                End If
                ' công thêm trên lươi so với dữ liệu đã post 
            Case 7
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
                tblline = q.ToTable
                Flag = tblline.Rows.Count
                Dim qty_recept As Decimal = 0
                qty_recept = q.Value("Quantity")
                If Flag <= 0 Then
                    WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
                    Return 0
                End If
                Dim DocNo_ As String = Voucher
                Dim ItemNo_ As String = q.Value("Item No_")
                Dim q_docEntryLine As Query = Query.From("Document Entry").Transaction(True)
                q_docEntryLine.WhereAs("Document No_") = DocNo_
                q_docEntryLine.WhereAs("Item No_") = ItemNo_
                Dim qsumDocEntryLine As Decimal = q_docEntryLine.Select("sum([Quantity]) qty").Value("qty")

                Dim q_doctyp7 As Query = Query.From("QRCode Entry").Transaction(True)
                q_doctyp7.WhereAs("Document No_") = DocNo_
                q_doctyp7.WhereAs("Item No_") = ItemNo_
                q_doctyp7.WhereAs("Document Type") = 7
                Dim qty_sum As Decimal = q_doctyp7.Select("sum([Valued Quantity]) qty").Value("qty")

                If qty_sum + qty_recept > qsumDocEntryLine Then
                    WorkSession.MsgML("Số lượng quét vượt số lượng yêu câu {0} số lượng xuất {1} !", qsumDocEntryLine, String.Format("{0:#,##0.####}", CDec(qty_sum + qty_recept)))
                    Return 0
                End If


                ' công thêm trên lươi so với dữ liệu đã post 
            Case 5
                'q = Query.From("QRCode Entry").Transaction(True)
                'q.Where("QRCode").Is(QRcode)
                'q.And("Document Type").Is(Doctype)
                'If q.ToTable.Rows.Count > 0 Then Return 0

            Case 11, 13, 15, 17, 19
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").In("0, 2, 4, 6, 10, 12, 14, 16") 'đa nhap roi
                tblline = q.ToTable
                Flag = tblline.Rows.Count
                If Flag <= 0 Then
                    WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
                    Return 0
                End If

                'q = Query.From("QRCode Entry").Transaction(True)
                'q.Where("QRCode").Is(QRcode)
                'q.And("Document Type").Is(Doctype)
                'If q.ToTable.Rows.Count > 0 Then Return 0

            Case Else
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").In("0, 2, 4, 6,10, 12, 14, 16") 'đa nhap roi
                tblline = q.ToTable
                Flag = tblline.Rows.Count
                If Flag <= 0 Then
                    WorkSession.MsgML("QRCode chưa quét nhập kho: {0} !", QRcode)
                    Return 0
                End If

                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRcode)
                q.And("Document Type").Is(1)
                If q.ToTable.Rows.Count > 0 Then
                    WorkSession.MsgML("QRCode đã xuất bán : {0} !", QRcode)
                    Return 0
                End If

        End Select

        'WorkSession.MsgML("Checking result")
        Return 1

    End Function

    Public Sub scanStockTest(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("scanStock tesk debug function!")
        Dim r As Hashtable = sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then
            WorkSession.MsgML("Empty !")
            Return
        End If
        If sender.TableName <> "QRCode Header" Then Return

        Dim q As Query = Query.From("QRCode Line").Transaction(True)
        q.Where("Document No_").Is(r("No_"))
        q.And("Logistics No_").Is(r("Logistics No_"))
        q.And("Document Type").Is(r("Document Type"))
        q.And("Bin Code").IsNot("")
        'q.And("Status").Is(2)

        If q.RecordCount <= 0 Then Return

        Dim items As DataTable = q.ToTable

        Try
            Query.BeginTransaction()

            Dim Doctype As Integer = 0
            Dim BinQRCode As String = ""
            Dim Logistics As String = ""
            Dim Qty As Integer = 0
            Dim UOM As String = ""
            Dim QRCodeItem As String = ""
            Dim Flag As Integer = 0
            Dim i As Integer = 0

            Dim qq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
            Dim Entry As Integer = qq.Value("EntryNo")

            For Each item As DataRow In items.Rows
                BinQRCode = item("Bin Code")

                Dim qr As Query = Query.From("Bin").Transaction(True)
                qr.Where("Code").Is(BinQRCode)
                Dim Zone As String = qr.Value("Zone")

                QRCodeItem = item("QRCode")
                Qty = CInt(item("Quantity"))
                Doctype = CInt(item("Document Type"))
                Logistics = item("Logistics No_")

                Select Case CInt(Doctype)
                    Case 0, 1, 4, 5, 6, 7
                        Flag = scanStockCheck(QRCodeItem, Doctype, Logistics, 1)
                        If Flag <> 0 Then scanStockPost(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
                    Case Else

                End Select
                Entry += 1
                i += 1
            Next

            WorkSession.MsgML("scanStock Successfully !")

            Query.EndTransaction()

            Framework.OpenEntity("QRCode Entry", String.Format("[Logistics No_] = N'{0}' and [Document Type]={1}", Logistics, Doctype))

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try

    End Sub


    Public Shared Function scanStockPost02(QRcode As String, Doctype As Integer, Logistics As String, QTy As Decimal, BinCode As String, LineNo As Integer, DocumentEntry As Integer, Optional NewBinCode As String = "") As Integer
        Dim Finish As Integer = 1
        Dim tableID As Integer = 0

        Dim q As Query = Query.From("QRCode").Transaction(True)
        q.Where("QRCode").Is(QRcode)
        If q.RecordCount <= 0 Then Return 0

        Dim trow As DataRow = q.TakeRow
        Dim ItemCode As String = q.Value("Item No_")

        Dim rr As Query = Query.From("Logistics Data").Transaction(True)
        rr.Where("Logistics No_").Is(Logistics)
        rr.And("Document Type").Is(Doctype)
        rr.And("Item No_").Is(ItemCode)

        Dim SourceCode As String = rr.Value("Source Code")
        Dim Respon As String = rr.Value("Responsibility Center")
        Dim LocationCode As String = rr.Value("Location Code")

        If SourceCode = "" Then SourceCode = q.Value("Source Code")
        If Respon = "" Then Respon = q.Value("Responsibility Center")
        If LocationCode = "" Then LocationCode = q.Value("Location Code")

        Dim Update As Query
        Dim querrydata As Query

        Select Case Doctype
            Case 4, 5
                Dim Zone As String = ""
                Dim qr As Query = Query.From("Bin").Transaction(True)
                qr.Where("Code").Is(BinCode)
                Zone = qr.Value("Zone")
                If LocationCode = "" Then LocationCode = qr.Value("Location Code")

                querrydata = Query.From("QRCode Entry").Transaction(True)
                querrydata.Where("QRCode").Is(QRcode)
                querrydata.And("Bin").Is(BinCode)
                querrydata.And("Document Type").Is(Doctype)

                If querrydata.RecordCount > 0 Then
                    Update = Query.Update("QRCode Entry")
                    Update.Where("QRCode").Is(QRcode)
                    Update.And("Document Type").Is(Doctype)
                    'querrydata.And("Item No_").Is(ItemCode)
                    Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
                    Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
                    Update.Fields("Location Code") = LocationCode
                    Update.Fields("Zone") = Zone
                    Update.Fields("Zone History", "+") = Zone + "|"
                    Update.Fields("Bin Status") = IIf(Doctype = 5, 1, 0)
                    Update.Execute()

                    Update = Query.Update("Document Entry")
                    Update.Where("Logistics No_").Is(Logistics)
                    Update.And("Document Type").Is(Doctype)
                    Update.And("Item No_").Is(ItemCode)
                    Update.And("QRCode").Is(QRcode)
                    'Update.And("Line No_").Is(LineNo)
                    'Update.And("Entry No_").Is(DocumentEntry)

                    Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
                    Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
                    Update.Fields("Zone") = Zone
                    Update.Fields("Zone History", "+") = Zone + "|"
                    Update.Fields("Location Code") = LocationCode
                    'Update.Fields("Bin Status") = IIf(Doctype = 5, 1, 0)

                    Update.Fields("Scan Number", "+") = 1
                    Update.Fields("Status") = 2
                    If trow("URL") = "" Then Update.Fields("Attach File") = trow("URL")
                    If trow("Serial No_") = "" Then Update.Fields("Serial No_") = trow("Serial No_")
                    If trow("Lot No_") = "" Then Update.Fields("Lot No_") = trow("Lot No_")
                    'If trow("Real Lot No_") = "" Then Update.Fields("Real Lot No_") = trow("Real Lot No_")

                    Update.Execute()

                Else 'Insert QRCode Entry

                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = QRcode
                    QueryInsertQREntry.Fields("Item No_") = ItemCode
                    QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
                    QueryInsertQREntry.Fields("Real Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Real Expiration Date") = CDate(trow("Expired Date"))

                    QueryInsertQREntry.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
                    QueryInsertQREntry.Fields("Zone") = Zone
                    QueryInsertQREntry.Fields("Bin Status") = IIf(Doctype = 5, 1, 0)
                    QueryInsertQREntry.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
                    QueryInsertQREntry.Fields("Zone History", "+") = Zone + "|"

                    QueryInsertQREntry.Fields("Document Type") = Doctype
                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Description") = trow("Name")
                    QueryInsertQREntry.Fields("Variant Code") = trow("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = trow("Work Center")

                    QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

                    'QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    'QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Unit Of Measure Code") = trow("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit Of Measure") = trow("Qty Unit Of Measure")
                    QueryInsertQREntry.Fields("Source Code") = SourceCode
                    QueryInsertQREntry.Fields("Responsibility Center") = Respon
                    QueryInsertQREntry.Fields("Location Code") = LocationCode
                    QueryInsertQREntry.Fields("External Document No_") = trow("External Document No_")
                    'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    'QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Entry No_") = DocumentEntry
                    QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                    QueryInsertQREntry.Fields("Logistics No_") = Logistics
                    QueryInsertQREntry.Fields("Document No_") = trow("Document No_")
                    QueryInsertQREntry.Fields("Packing List") = trow("Packing List")
                    'QueryInsertQREntry.Fields("Picking No_") = trow("Picking No_")
                    QueryInsertQREntry.Fields("Source Type") = trow("Source Type")
                    QueryInsertQREntry.Fields("Source No_") = trow("Source No_")
                    QueryInsertQREntry.Execute()

                    Dim QueryUpdate As Query = Query.Update("Document Entry")
                    QueryUpdate.WhereAs("Logistics No_") = Logistics
                    QueryUpdate.WhereAs("QRCode") = trow("QRCode")
                    QueryUpdate.WhereAs("Item No_") = trow("Item No_")
                    'QueryUpdate.WhereAs("Line No_") = lineno
                    QueryUpdate.WhereAs("Document Type") = Doctype

                    QueryUpdate.Fields("Location Code") = LocationCode
                    QueryUpdate.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
                    QueryUpdate.Fields("Zone") = Zone
                    QueryUpdate.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
                    QueryUpdate.Fields("Zone History", "+") = Zone + "|"

                    QueryUpdate.Fields("Scan Number", "+") = 1
                    QueryUpdate.Fields("Status") = 2
                    If trow("URL") = "" Then QueryUpdate.Fields("Attach File") = trow("URL")
                    If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = trow("Serial No_")
                    If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = trow("Lot No_")
                    'If trow("Real Lot No_") = "" Then QueryUpdate.Fields("Real Lot No_") = trow("Real Lot No_")

                    QueryUpdate.Execute()

                End If
            Case 0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19

                Dim Zone As String = ""
                Dim qr As Query = Query.From("Bin").Transaction(True)
                qr.Where("Code").Is(BinCode)
                Zone = qr.Value("Zone")
                If LocationCode = "" Then LocationCode = qr.Value("Location Code")

                querrydata = Query.From("QRCode Entry").Transaction(True)
                querrydata.Where("QRCode").Is(QRcode)
                querrydata.And("Bin").Is(BinCode)
                querrydata.And("Document Type").Is(Doctype)

                If querrydata.RecordCount > 0 Then
                    Update = Query.Update("QRCode Entry")
                    Update.Where("QRCode").Is(QRcode)
                    Update.And("Document Type").Is(Doctype)
                    'querrydata.And("Item No_").Is(ItemCode)
                    Update.Fields("Location Code") = LocationCode
                    Update.Fields("Bin") = BinCode
                    'Update.Fields("Bin History") = BinCode
                    Update.Fields("Zone") = Zone
                    'Update.Fields("Zone History") = BinCode

                    Select Case Doctype
                        Case 1, 3, 5, 7, 9, 11, 13, 15, 17, 19
                            Update.Fields("Bin Status") = 1
                            Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
                            Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
                            Update.Fields("Zone") = Zone
                            Update.Fields("Zone History", "+") = Zone + "|"
                        Case Else
                            Update.Fields("Bin Status") = 0
                            Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
                            Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
                            Update.Fields("Zone") = Zone
                            Update.Fields("Zone History", "+") = Zone + "|"
                    End Select

                    Update.Execute()

                    Update = Query.Update("Document Entry")
                    Update.Where("Logistics No_").Is(Logistics)
                    Update.And("Document Type").Is(Doctype)
                    Update.And("Item No_").Is(ItemCode)
                    Update.And("QRCode").Is(QRcode)
                    'Update.And("Line No_").Is(LineNo)
                    'Update.And("Entry No_").Is(DocumentEntry)

                    Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
                    'Update.Fields("Bin History") = BinCode
                    Update.Fields("Zone") = Zone
                    'Update.Fields("Zone History") = BinCode
                    'Update.Fields("Bin History", "+") = BinCode + "|"
                    'Update.Fields("Zone History", "+") = Zone + "|"

                    Update.Fields("Location Code") = LocationCode

                    Select Case Doctype
                        Case 1, 3, 5, 7, 9, 11, 13, 15, 17, 19
                            'Update.Fields("Bin Status") = 1
                            Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
                            Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
                            Update.Fields("Zone") = Zone
                            Update.Fields("Zone History", "+") = Zone + "|"

                        Case Else
                            'Update.Fields("Bin Status") = 0
                            Update.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
                            Update.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
                            Update.Fields("Zone") = Zone
                            Update.Fields("Zone History", "+") = Zone + "|"
                    End Select

                    Update.Fields("Scan Number", "+") = 1
                    Update.Fields("Status") = 2
                    If trow("URL") = "" Then Update.Fields("Attach File") = trow("URL")
                    If trow("Serial No_") = "" Then Update.Fields("Serial No_") = trow("Serial No_")
                    If trow("Lot No_") = "" Then Update.Fields("Lot No_") = trow("Lot No_")
                    'If trow("Real Lot No_") = "" Then Update.Fields("Real Lot No_") = trow("Real Lot No_")
                    Update.Execute()

                Else 'Insert QRCode Entry

                    Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                    QueryInsertQREntry.Fields("QRCode") = QRcode
                    QueryInsertQREntry.Fields("Item No_") = ItemCode
                    QueryInsertQREntry.Fields("Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Expiration Date") = CDate(trow("Expired Date"))
                    QueryInsertQREntry.Fields("Real Lot No_") = trow("Lot No_")
                    QueryInsertQREntry.Fields("Real Expiration Date") = CDate(trow("Expired Date"))

                    QueryInsertQREntry.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
                    QueryInsertQREntry.Fields("Zone") = Zone
                    QueryInsertQREntry.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
                    QueryInsertQREntry.Fields("Zone History", "+") = Zone + "|"

                    QueryInsertQREntry.Fields("Document Type") = Doctype
                    QueryInsertQREntry.Fields("Serial No_") = trow("Serial No_")
                    QueryInsertQREntry.Fields("Description") = trow("Name")
                    QueryInsertQREntry.Fields("Variant Code") = trow("Item Variant")
                    QueryInsertQREntry.Fields("Manufacturer Code") = trow("Work Center")

                    QueryInsertQREntry.Fields("Production Date") = trow("MFG Date")

                    'QueryInsertQREntry.Fields("Usage %") = 0
                    QueryInsertQREntry.Fields("Status") = 1
                    'QueryInsertQREntry.Fields("Created Date") = Now
                    QueryInsertQREntry.Fields("Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Begin Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Unit Of Measure Code") = trow("Unit Of Measure")
                    QueryInsertQREntry.Fields("Qty_ per Unit Of Measure") = trow("Qty Unit Of Measure")
                    QueryInsertQREntry.Fields("Source Code") = SourceCode
                    QueryInsertQREntry.Fields("Responsibility Center") = Respon
                    QueryInsertQREntry.Fields("Location Code") = LocationCode
                    QueryInsertQREntry.Fields("External Document No_") = trow("External Document No_")
                    'QueryInsertQREntry.Fields("Qty_not Temped") = 0
                    'QueryInsertQREntry.Fields("Last Date Checked") = Now
                    QueryInsertQREntry.Fields("Valued Quantity") = trow("Quantity")
                    QueryInsertQREntry.Fields("Entry No_") = DocumentEntry
                    QueryInsertQREntry.Fields("Number No_") = trow("Quantity") 'trow("Number No_")
                    QueryInsertQREntry.Fields("Logistics No_") = Logistics
                    QueryInsertQREntry.Fields("Document No_") = trow("Document No_")
                    QueryInsertQREntry.Fields("Packing List") = trow("Packing List")
                    'QueryInsertQREntry.Fields("Picking No_") = trow("Picking No_")
                    QueryInsertQREntry.Fields("Source Type") = trow("Source Type")
                    QueryInsertQREntry.Fields("Source No_") = trow("Source No_")
                    QueryInsertQREntry.Execute()

                    Dim QueryUpdate As Query = Query.Update("Document Entry")
                    QueryUpdate.WhereAs("Logistics No_") = Logistics
                    QueryUpdate.WhereAs("QRCode") = trow("QRCode")
                    QueryUpdate.WhereAs("Item No_") = trow("Item No_")
                    'QueryUpdate.WhereAs("Line No_") = lineno
                    QueryUpdate.WhereAs("Document Type") = Doctype

                    QueryUpdate.Fields("Bin") = IIf(NewBinCode = "", BinCode, NewBinCode)
                    QueryUpdate.Fields("Zone") = Zone
                    QueryUpdate.Fields("Location Code") = LocationCode
                    QueryUpdate.Fields("Bin History", "+") = IIf(NewBinCode = "", BinCode, NewBinCode) + "|"
                    QueryUpdate.Fields("Zone History", "+") = Zone + "|"

                    QueryUpdate.Fields("Scan Number", "+") = 1
                    QueryUpdate.Fields("Status") = 2
                    If trow("URL") = "" Then QueryUpdate.Fields("Attach File") = trow("URL")
                    If trow("Serial No_") = "" Then QueryUpdate.Fields("Serial No_") = trow("Serial No_")
                    If trow("Lot No_") = "" Then QueryUpdate.Fields("Lot No_") = trow("Lot No_")
                    'If trow("Real Lot No_") = "" Then QueryUpdate.Fields("Real Lot No_") = trow("Real Lot No_")

                    QueryUpdate.Execute()

                End If

            Case Else

        End Select

        Update = Query.Update("Document Entry Header")
        Update.Where("Logistics No_").Is(Logistics)
        Update.And("Document Type").Is(Doctype)
        Update.Fields("Status") = 2
        Update.Execute()

        Return 1
    End Function


    Public Sub CheckscanStock02(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim QRCode As String = Code.Library.Library.ISDBNULL(sender.Request("__Qr__"), "")
        Dim LogisticsNo As String = Code.Library.Library.ISDBNULL(sender.Request("__logistics__"), "")
        Dim Doctype As Integer = Code.Library.Library.ISDBNULL(sender.Request("__docType__"), 0)
        Dim BinQRCode As String = Code.Library.Library.ISDBNULL(sender.Request("__Bin__"), "")
        Dim Qty As Decimal = Code.Library.Library.ISDBNULL(sender.Request("__Qty__"), 1)

        'WorkSession.MsgML("QRCode '{0}'", QRCode)
        'WorkSession.MsgML("Logistic '{0}'", LogisticsNo)
        'WorkSession.MsgML("Doctype {0}", Doctype)
        'WorkSession.MsgML("BinQRCode '{0}'", BinQRCode)
        'WorkSession.MsgML("Qty {0}", Qty)
        Dim qr As Query = Query.From("Bin").Transaction(True)
        qr.Where("QRCode").Is(BinQRCode)
        Dim Zone As String = qr.Value("Zone")
        Dim LocationCode As String = qr.Value("Location Code")

        If qr.RecordCount <= 0 Then
            WorkSession.MsgML("QRCode BIN is not correct 02!")
            'sender.Response("message”) = “QRCode BIN is not correct ! ”
            sender.Response("valid”) = 0
            Return
        End If

        Dim q As Query = Query.From("QRCode View").Transaction(True)
        q.Where("QRCode").Is(QRCode)
        Dim ItemCode As String = ""
        Dim ItemName As String = ""
        Dim QRcodeParent As Integer = 0
        Dim UOM As String = ""
        Dim Qtyper As Decimal = 0

        If q.RecordCount <= 0 Then
            WorkSession.MsgML("QRCode is not belong to company 02!")
            'sender.Response("message”) = “QRCode is not belong to company! ”
            sender.Response("valid”) = 0
            Return
        Else
            ItemCode = q.Value("Item No_")
            UOM = q.Value("Unit Of Measure")
            Qtyper = q.Value("Qty Unit Of Measure")
            Qty = q.Value("Quantity")
            QRcodeParent = q.Value("Parent") '= 0 not allowed to add anymore, 1 is allowed to add more
            ItemName = ItemCode + " product name: " + q.Value("Name")

            'sender.Response("item”) = ItemName
            'sender.Response("parent”) = QRcodeParent
            'sender.Response("qty”) = Qty
            'sender.Response("uom”) = UOM
            'sender.Response("qtyper”) = Qtyper
            'sender.Response("message”) = “Successful !”
            'sender.Response("valid”) = 1
            'WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
            'WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
            'WorkSession.MsgML("Product Name '{0}'", ItemName)
            'WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
            'WorkSession.MsgML("Product Quantity:  {0}", Qty)
            'WorkSession.MsgML("Product UOM: '{0}'", UOM)
            'WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)
        End If

        q = Query.From("Logistics Data").Transaction(True) ' q = Query.From("QRCode Tracking").Transaction(True)
        q.Where("Item No_").Is(ItemCode)
        q.And("Logistics No_").Is(LogisticsNo)
        If q.RecordCount <= 0 Then
            Select Case CInt(Doctype)
                Case 0, 10
                    'sender.Response("message”) = "QRCode is not belong to Receipt Order!"
                    WorkSession.MsgML("QRCode is not belong to Receipt Order!")
                Case 1, 9
                    'sender.Response("message”) = "QRCode is not belong to Delivery Order!"
                    WorkSession.MsgML("QRCode is not belong to Delivery Order!")
                Case 4, 5, 11, 12, 14, 15, 17, 18
                    'sender.Response("message”) = "QRCode is not belong to Transfer Order!"
                    WorkSession.MsgML("QRCode is not belong to Transfer Order!")
                Case 6, 7
                    'sender.Response("message”) = "QRCode is not belong to Work Order!"
                    WorkSession.MsgML("QRCode is not belong to Work Order!")
                Case 8
                    'sender.Response("message”) = "QRCode is not belong to Maintennace Order!"
                    WorkSession.MsgML("QRCode is not belong to Maintennace Order!")
                Case Else
                    'sender.Response("message”) = "QRCode is not belong to Receipt Order or Delivery Order!"
                    WorkSession.MsgML("QRCode is not belong to Receipt Order or Delivery Order!")
            End Select

            'sender.Response("item”) = ItemName
            'sender.Response("parent”) = QRcodeParent
            'sender.Response("qty”) = Qty
            'sender.Response("uom”) = UOM
            'sender.Response("qtyper”) = Qtyper
            WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
            WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
            WorkSession.MsgML("Product Name '{0}'", ItemName)
            WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
            WorkSession.MsgML("Product Quantity:  {0}", Qty)
            WorkSession.MsgML("Product UOM: '{0}'", UOM)
            WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

            sender.Response("valid”) = 0
            Return
        End If

        Select Case Doctype

            Case 8, 10
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                'q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(1) 'Sold
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not sold yet!")
                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper

                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    sender.Response("valid”) = 0
                    Return
                End If
            Case 9
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                'q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(0) 'Purchased
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not purchased!")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 4
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                'q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").In("5,11,15,17,19") 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not transfered Order shippment! ")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 12, 14, 16, 18
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").In("11,15,17,19") 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not transfered Order shippment! ")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 12
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(11) 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not Consignee shippment ! ")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 14
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(15) 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not transfered Order shippment ! ")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 16
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(17) 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not Outsource Order shippment ! ")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
            Case 18
                q = Query.From("QRCode Entry").Transaction(True)
                q.Where("QRCode").Is(QRCode)
                q.And("Logistics No_").Is(LogisticsNo)
                q.And("Document Type").Is(19) 'Transfer Order Received
                If q.RecordCount <= 0 Then
                    WorkSession.MsgML("QRCode is not Company Outsourced Order shippment !")
                    WorkSession.MsgML("QRCode for BIN: '{0}'", BinQRCode)
                    WorkSession.MsgML("QRCode for Product: '{0}'", QRCode)
                    WorkSession.MsgML("Product Name '{0}'", ItemName)
                    WorkSession.MsgML("QRCode Parent: {0}", QRcodeParent)
                    WorkSession.MsgML("Product Quantity:  {0}", Qty)
                    WorkSession.MsgML("Product UOM: '{0}'", UOM)
                    WorkSession.MsgML("Product Quantity Per UOM : {0}", Qtyper)

                    'sender.Response("item”) = ItemName
                    'sender.Response("parent”) = QRcodeParent
                    'sender.Response("qty”) = Qty
                    'sender.Response("uom”) = UOM
                    'sender.Response("qtyper”) = Qtyper
                    sender.Response("valid”) = 0
                    Return
                End If
        End Select

        ''===
        ''Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
        ''Dim Entry As Integer = qqq.Value("EntryNo")

        'Dim exist As Query = Query.From("QRCode Line").Transaction(True)
        'exist.WhereAs("Document Type") = CInt(Doctype)
        'exist.WhereAs("Logistics No_") = LogisticsNo
        'exist.WhereAs("QRCode") = QRCode

        'If exist.RecordCount <= 0 Or QRcodeParent = 1 Then
        '    Dim insert As Query = Query.Entity("QRCode Line").Insert

        '    'Select Case CInt(Doctype)
        '    '    Case 0, 1, 4, 5, 6, 7
        '    '        Flag = scanStockCheck(QRCodeItem, Doctype, Logistics, 1)
        '    '        If Flag <> 0 Then scanStockPost(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
        '    '    Case Else
        '    'End Select

        '    insert.Fields("Document Type") = CInt(Doctype)
        '    insert.Fields("Logistics No_") = LogisticsNo
        '    insert.Fields("Location Code") = LocationCode
        '    insert.Fields("Zone Code") = Zone

        '    Select Case CInt(Doctype)
        '        Case 4
        '            insert.Fields("From Bin Code") = GetBinCodeFromQRCodeEntry(QRCode, Doctype, Zone)
        '            insert.Fields("From Zone") = Zone
        '            insert.Fields("From Location Code") = LocationCode 'MasterRow("From Location Code")
        '            insert.Fields("Bin Code") = insert.Fields("From Bin Code")
        '            insert.Fields("Zone") = Zone
        '            insert.Fields("To Bin Code") = BinQRCode
        '            insert.Fields("Location Code") = LocationCode
        '        Case 5
        '            insert.Fields("Bin Code") = BinQRCode
        '            'insert.Fields("Location Code") = LocationCode
        '            'insert.Fields("Zone Code") = Zone
        '            insert.Fields("From Bin Code") = BinQRCode
        '            'insert.Fields("To Bin Code") = GetBinCodeFromInTransitLocation(r("Source Code"), r("Responsibility Center"), Zone, InTransit)
        '            'insert.Fields("To Zone") = Zone
        '            'insert.Fields("To Location Code") = InTransit
        '        Case Else
        '            insert.Fields("Bin Code") = BinQRCode
        '            'insert.Fields("Location Code") = LocationCode
        '            'insert.Fields("Zone Code") = Zone
        '    End Select

        '    insert.Fields("Item No_") = ItemCode
        '    insert.Fields("QRCode") = QRCode
        '    insert.Fields("Quantity") = CInt(Qty)
        '    insert.Fields("Unit Of Measure") = UOM
        '    insert.Fields("Qty_ per Unit of Measure") = Qtyper

        '    insert.Execute()
        'End If


        'exist = Query.From("QRCode Header").Transaction(True)
        'exist.WhereAs("Document Type") = CInt(Doctype)
        'exist.WhereAs("Logistics No_") = LogisticsNo
        'If exist.RecordCount <= 0 Then
        '    Dim Hinsert As Query = Query.Entity("QRCode Header").Insert
        '    Hinsert.Fields("Document Type") = CInt(Doctype)
        '    Hinsert.Fields("Logistics No_") = LogisticsNo
        '    Hinsert.Fields("Location Code") = LocationCode
        '    Hinsert.Fields("Zone Code") = Zone
        '    Hinsert.Fields("Bin Code") = BinQRCode
        '    Hinsert.Execute()
        'End If

        sender.Response("valid”) = 1
    End Sub

    Public Sub scanStock02(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.MsgML("scanStock02 function!")

        Dim Data = Code.Logics.CodeLogics.ISDBNULL(sender.Request("__DATA__"), "")
        'WorkSession.MsgML("scanStock function! data {0}", Data)
        'If Data = "" Then
        '    Data = "[{""Qr"":""MPLTHB0031-BDH02957-CIBB24170314-193"",""Qty"":10,""docType"":7,""logistics"":""XPL0100/008339"",""Bin"":""011I1I1.1""}]"


        'End If
        If Data = "" Then
            WorkSession.MsgML("Not QRCode")
            Return
        End If
        Dim js As New JavaScriptSerializer()
        Dim items = js.Deserialize(Of ArrayList)(Data)
        'WorkSession.MsgML("scanStock function! data Item {0}", items.Count)
        If items.Count <= 0 Then Return

        Try
            Query.BeginTransaction()

            Dim Doctype As Integer = 0
            Dim BinQRCode As String = ""
            Dim Logistics As String = ""
            Dim Qty As Integer = 0
            Dim UOM As String = ""
            Dim QRCodeItem As String = ""
            Dim Flag As Integer = 0

            Dim i As Integer = 0
            Dim Loopqty As Integer = 0

            Dim productDict = New Dictionary(Of String, Integer)

            For Each item As Object In items
                If Not productDict.ContainsKey(item("Qr")) Then
                    productDict.Add(item("Qr"), item("Qty"))
                Else
                    productDict(item("Qr")) += item("Qty")
                    Loopqty += 1
                End If
            Next


            If Loopqty = 0 Then
                Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                Dim Entry As Integer = qqq.Value("EntryNo")

                For Each item As Object In items
                    BinQRCode = items(0)("Bin")

                    Dim qr As Query = Query.From("Bin").Transaction(True)
                    qr.Where("Code").Is(BinQRCode)
                    Dim Zone As String = qr.Value("Zone")

                    QRCodeItem = item("Qr")
                    'WorkSession.MsgML("Mã QR SP {0}", QRCodeItem)
                    Qty = CInt(item("Qty"))
                    'WorkSession.MsgML("Số lượng {0}", Qty)
                    'BinQRCode = item("Bin")
                    'WorkSession.MsgML("Mã QR ngăn kệ {0}", BinQRCode)
                    Doctype = CInt(item("docType"))
                    'WorkSession.MsgML("Loại nghiệp vụ {0}", Doctype)
                    Logistics = item("logistics")
                    'WorkSession.MsgML("Mã giao nhận (Logistics No_ {0}", Logistics)

                    Select Case CInt(Doctype)
                        Case 0, 1, 4, 5, 6, 7
                            Flag = scanStockCheck02(QRCodeItem, Doctype, Logistics, 1)
                            If Flag <> 0 Then scanStockPost02(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
                        Case Else
                    End Select
                    'scanStockPost02(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)

                    Entry += 1
                    i += 1
                Next
                WorkSession.MsgML("scanStock Successfully !")

            Else
                WorkSession.MsgML("QRCode Parent need edit before post !")

                'Dim qqq As Query = Query.From("QRCode Entry").Select("([Entry No_]+1) As EntryNo ").Top(1).OrderBy("EntryNo").DESC.Transaction(True)
                'Dim Entry As Integer = qqq.Value("EntryNo")

                Dim insert As Query = Query.Entity("QRCode Line").Insert

                BinQRCode = items(0)("Bin")
                'WorkSession.MsgML("Mã QR ngăn kệ {0}", BinQRCode)
                Doctype = CInt(items(0)("docType"))
                'WorkSession.MsgML("Loại nghiệp vụ {0}", Doctype)
                Logistics = items(0)("logistics")

                Dim qr As Query = Query.From("Bin").Transaction(True)
                qr.Where("Code").Is(BinQRCode)
                Dim Zone As String = qr.Value("Zone")
                Dim LocationCode As String = qr.Value("Location Code")

                'For Each qrcode As String In productDict.Keys
                '    QRCodeItem = qrcode
                '    ' WorkSession.MsgML("Mã QR SP {0}", QRCodeItem)
                '    Qty = CInt(productDict(qrcode))
                '    'WorkSession.MsgML("Số lượng {0}", Qty)
                'next

                For Each kvp As KeyValuePair(Of String, Integer) In productDict
                    'Dim key As String = kvp.Key
                    'Dim val As Integer = kvp.Value
                    'WorkSession.MsgML("Key QRCode '{0}'", key)
                    'WorkSession.MsgML("Số lượng {0}", Val)

                    QRCodeItem = kvp.Key
                    Qty = kvp.Value

                    'Select Case CInt(Doctype)
                    '    Case 0, 1, 4, 5, 6, 7
                    '        Flag = scanStockCheck(QRCodeItem, Doctype, Logistics, 1)
                    '        If Flag <> 0 Then scanStockPost(QRCodeItem, Doctype, Logistics, Qty, BinQRCode, i, Entry)
                    '    Case Else
                    'End Select

                    'Dim existLine As Query = Query.From("QRCode Line").Transaction(True)
                    'existLine.WhereAs("Document Type") = CInt(Doctype)
                    'existLine.WhereAs("Logistics No_") = Logistics
                    'existLine.WhereAs("QRCode") = QRCodeItem

                    Dim QRCodeInfo As Query = Query.From("QRCode").Transaction(True)
                    QRCodeInfo.Where("QRCode").Is(QRCodeItem)
                    Dim QRcodeParent As Integer = QRCodeInfo.Value("Parent")

                    'If existLine.RecordCount <= 0 Or QRcodeParent = 1 Then

                    insert = Query.Entity("QRCode Line").Insert
                    insert.Fields("Type") = 4
                    insert.Fields("No_") = QRCodeInfo.Value("Item No_")

                    insert.Fields("QRCode") = QRCodeItem
                    insert.Fields("Quantity") = CInt(Qty)

                    If CInt(Qty) <= 1 Then
                        insert.Fields("Unit Of Measure") = QRCodeInfo.Value("Unit Of Measure")
                        insert.Fields("Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")
                    Else
                        If QRcodeParent = 1 Then
                            Dim ItemUOM As Query = Query.From("Item Unit of Measure").Transaction(True)
                            ItemUOM.Where("Item No_").Is(QRCodeInfo.Value("Item No_"))

                            ItemUOM.And("Qty_ per Unit of Measure").LessThan(QRCodeInfo.Value("Qty Unit Of Measure"))
                            ItemUOM.OrderBy("Qty_ per Unit of Measure").DESC()

                            insert.Fields("Qty_ per Unit of Measure") = IIf(ItemUOM.Value("Qty_ per Unit of Measure") = 0, 1, ItemUOM.Value("Qty_ per Unit of Measure"))
                            insert.Fields("Unit Of Measure") = ItemUOM.Value("Code")
                        Else
                            insert.Fields("Unit Of Measure") = QRCodeInfo.Value("Unit Of Measure")
                            insert.Fields("Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")
                            insert.Fields("Quantity") = 1
                        End If


                    End If

                    insert.Fields("Document Type") = CInt(Doctype)
                    insert.Fields("Logistics No_") = Logistics
                    Select Case CInt(Doctype)
                        Case 4
                            insert.Fields("From Bin Code") = GetBinCodeFromQRCodeEntry(QRCodeItem, Doctype, Zone)
                            insert.Fields("From Zone") = Zone
                            insert.Fields("From Location Code") = LocationCode 'MasterRow("From Location Code")
                            insert.Fields("Bin Code") = insert.Fields("From Bin Code")
                            insert.Fields("Zone Code") = Zone
                            insert.Fields("To Bin Code") = BinQRCode
                            insert.Fields("Location Code") = LocationCode

                            insert.Fields("To Unit of Measure") = QRCodeInfo.Value("Unit Of Measure")
                            insert.Fields("To Qty_ per Unit of Measure") = QRCodeInfo.Value("Qty Unit Of Measure")

                        Case 5
                            insert.Fields("Bin Code") = BinQRCode
                            insert.Fields("From Bin Code") = BinQRCode
                            'insert.Fields("To Bin Code") = GetBinCodeFromInTransitLocation(r("Source Code"), r("Responsibility Center"), Zone, InTransit)
                            'insert.Fields("To Zone") = Zone
                            'insert.Fields("To Location Code") = InTransit
                        Case Else
                            insert.Fields("Bin Code") = BinQRCode
                            insert.Fields("Zone Code") = Zone
                            insert.Fields("Location Code") = LocationCode
                            insert.Fields("From Bin Code") = BinQRCode
                            insert.Fields("From Zone") = Zone
                            insert.Fields("From Location Code") = LocationCode
                            'insert.Fields("To Zone") = Zone
                            'insert.Fields("To Bin Code") = BinQRCode
                            'insert.Fields("To Location Code") = LocationCode
                    End Select

                    insert.Execute()

                    'Entry += 1
                    i += 1
                    'End If
                Next


                Dim exist As Query = Query.From("QRCode Header").Transaction(True)
                exist.WhereAs("Document Type") = CInt(Doctype)
                exist.WhereAs("Logistics No_") = Logistics
                If exist.RecordCount <= 0 Then
                    Dim Hinsert As Query = Query.Entity("QRCode Header").Insert
                    Hinsert.Fields("Document Type") = CInt(Doctype)
                    Hinsert.Fields("Logistics No_") = Logistics
                    Hinsert.Fields("Location Code") = LocationCode
                    Hinsert.Fields("Zone Code") = Zone
                    Hinsert.Fields("Bin Code") = BinQRCode
                    Hinsert.Execute()
                End If

                'Dim Hinsert As Query = Query.Entity("QRCode Header").Insert
                'Hinsert.Fields("Document Type") = CInt(Doctype)
                'Hinsert.Fields("Logistics No_") = Logistics
                'Hinsert.Fields("Bin Code") = BinQRCode
                'Hinsert.Execute()

                Framework.OpenEntity("QRCode Line", String.Format("[Logistics No_]=N'{0}' and [Document Type]={1}", Logistics, Doctype))

            End If

            Query.EndTransaction()

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString)
            Query.RollBack()
        End Try


    End Sub
    Public Sub CreateQRImage(ByVal qrCodeText As String, ByVal PathFileName As String,
                              Optional ByVal Height As Integer = 60, Optional ByVal Width As Integer = 60)
        Try
            Dim dataQR As String = qrCodeText
            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")
            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")

            Dim options As QrCodeEncodingOptions = New QrCodeEncodingOptions()
            options = New QrCodeEncodingOptions With {
                    .DisableECI = True,
                    .CharacterSet = "UTF-8",
                    .Width = Width,
                    .Height = Height,
                      .Margin = 0
                }
            Dim writer = New BarcodeWriter()
            writer.Format = BarcodeFormat.QR_CODE
            writer.Options = options

            Dim qrImage As System.Drawing.Bitmap
            qrImage = New System.Drawing.Bitmap(writer.Write(qrCodeText))
            If System.IO.File.Exists(PathFileName) Then
                System.IO.File.Delete(PathFileName)
            End If
            If Not System.IO.File.Exists(PathFileName) Then
                qrImage.Save(PathFileName)
            End If

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString())
        End Try

    End Sub

    Public Sub QuanlityCheckHeader(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim LoginID As String = Framework.UserID
            Dim AppUserID As String = Framework.EmptyNull(WorkSession.Read("FrontEndAppUserId"))
            If AppUserID <> "" Then
                LoginID = AppUserID
            End If

            Dim r As Hashtable = sender.CurrentRow
            Query.BeginTransaction()
            Dim rInsertQAQC As Query = Query.Entity("Quality Check Header").Insert
            rInsertQAQC.Fields("No_") = r("No_")
            rInsertQAQC.Fields("Item No_") = r("Item No_")
            rInsertQAQC.Fields("Originally Ordered No_") = r("PO No_")
            rInsertQAQC.Fields("Order Quantity") = r("Quantity")
            rInsertQAQC.Fields("Source Code") = r("Source Code")
            rInsertQAQC.Fields("Responsibility Center") = r("Responsibility Center")
            rInsertQAQC.Fields("Login ID") = LoginID
            rInsertQAQC.Fields("Posting Date") = CDate(Now())
            rInsertQAQC.Fields("Document Date") = CDate(r("Document Date"))
            rInsertQAQC.Fields("Item Type") = 0
            rInsertQAQC.Fields("Status") = 0
            rInsertQAQC.Fields("External Document No_") = r("External Document No_")
            rInsertQAQC.Fields("Unit of Measure") = r("Unit of Measure")
            rInsertQAQC.Execute()
            Query.EndTransaction()
            sender.RefreshSource()
            Dim parentID As String = sender.ClientID
            'Now refresh parent
            Framework.OpenEntity("View PackingList QAQC Approve")

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub
    Public Shared Function GetandUpdateSeriesNumber(ByVal Sequence As String, ByVal Series As String, ByVal SourceCode As String,
                                                    ByVal Res As String, ByVal LocationCode As String, ByRef External As String) As String
        Dim SeriesNo As String = ""

        Dim UserID As String = Framework.UserID
        Dim POSSolution As String = Query.From("Number Sequence").Value(Sequence)
        Dim rQuery As Query = Query.From("No_ Series Line").Transaction(True)
        rQuery.WhereAs("Series Code") = POSSolution
        rQuery.WhereAs("UserID") = UserID
        Dim DataRow As DataRow = rQuery.TakeRow

        If rQuery.RecordCount <= 0 Then
            Dim qe As Query = Query.From("User Setup")
            qe.Where("User ID").Is(UserID)
            Dim UserIDrespons As String = qe.Value("Responsibility Center")
            Dim UserIDsourcecode As String = qe.Value("Source Code")
            Dim UserIDLocationCode As String = qe.Value("Location Code")

            If UserIDrespons <> "" And UserIDsourcecode <> "" Then
                POSSolution = Query.From("Number Sequence").Value(Sequence)
                rQuery = Query.From("No_ Series Line").Transaction(True)
                rQuery.WhereAs("Series Code") = POSSolution
                rQuery.And("Source Code").Is(UserIDsourcecode)
                rQuery.And("Responsibility Center").Is(UserIDrespons)
                'rQuery.And("Location Code").Is(UserIDLocationCode)

                DataRow = rQuery.TakeRow

                If rQuery.RecordCount <= 0 Then
                    POSSolution = Query.From("Number Sequence").Value(Sequence)
                    rQuery = Query.From("No_ Series Line").Transaction(True)
                    rQuery.WhereAs("Series Code") = POSSolution
                    rQuery.And("Source Code").Is(UserIDsourcecode)
                    DataRow = rQuery.TakeRow

                    If rQuery.RecordCount <= 0 Then
                        POSSolution = Query.From("Number Sequence").Value(Sequence)
                        rQuery = Query.From("No_ Series Line").Transaction(True)
                        rQuery.WhereAs("Series Code") = POSSolution
                        DataRow = rQuery.TakeRow
                    End If
                End If
            Else
                POSSolution = Query.From("Number Sequence").Value(Sequence)
                rQuery = Query.From("No_ Series Line").Transaction(True)
                rQuery.WhereAs("Series Code") = POSSolution
                DataRow = rQuery.TakeRow
            End If

        End If

        If DataRow Is Nothing Then
            WorkSession.MsgML("Series Number is not setup !")
            Return SeriesNo
        End If

        Dim StartDocPrefix As String = DataRow("Starting No_")
        Dim IncByNo As Integer = DataRow("Increment-by No_")
        Dim LastNoUsed As Integer = DataRow("Last No_ Used")
        Dim EndNo As Integer = DataRow("Ending No_")
        Dim SourceCoderr As String = DataRow("Source Code")
        Dim LocationCoderr As String = DataRow("Location Code")
        Dim Responsibility As String = DataRow("Responsibility Center")
        Dim DefaultCustomer As String = DataRow("Default Customer")
        Dim DefaultBank As String = DataRow("Default Bank")
        Dim StartExtDocPrefix As String = DataRow("Ext_ Starting No_")
        Dim ExtLastNoUsed As Integer = DataRow("Ext_ Last No_ Used")
        Dim ExtIncByNo As Integer = DataRow("Ext_ Increment-by No_")
        Dim Lastdate As Date = DataRow("Last Date Used")
        Dim Type As Integer = DataRow("Setup Type")
        Dim RowID As Integer = DataRow("RowID")
        Dim AllowEdit As Integer = StartDocPrefix.Length
        Dim AllowEditExt As Integer = StartExtDocPrefix.Length

        AllowEdit = Math.Min(AllowEdit, DataRow("Blocked"))
        AllowEditExt = Math.Min(AllowEditExt, DataRow("Blocked"))

        Dim Infix As String = ""
        Dim Todate As Date = Now()
        Dim Day As Integer = Todate.Day
        Dim Month As Integer = Todate.Month
        Dim year As Integer = Todate.Year

        Select Case Type
            Case 0
                Infix = ""
            Case 1
                If Lastdate.Date <> Todate.Date Then
                    StartDocPrefix = Left(StartDocPrefix, AllowEdit)
                    StartExtDocPrefix = Left(StartExtDocPrefix, AllowEditExt)
                    Infix = Right(year.ToString, 2) & FormatDocumentNumber(99, Month.ToString) & FormatDocumentNumber(99, Day.ToString)
                End If
            Case 2
                If Lastdate.Month <> Todate.Month And Lastdate.Year <> Todate.Year Then
                    StartDocPrefix = Left(StartDocPrefix, AllowEdit)
                    StartExtDocPrefix = Left(StartExtDocPrefix, AllowEditExt)
                    Infix = Right(year.ToString, 2) & FormatDocumentNumber(99, Month.ToString)
                End If
            Case 3
                If Lastdate.Year <> Todate.Year Then
                    StartDocPrefix = Left(StartDocPrefix, AllowEdit)
                    StartExtDocPrefix = Left(StartExtDocPrefix, AllowEditExt)
                    Infix = Right(year.ToString, 2)
                End If
        End Select

        If LastNoUsed < EndNo Then

            Dim qq As Query = Query.Update("No_ Series Line")
            qq.WhereAs("RowID") = RowID

            If Type <> 0 And Infix <> "" Then 'reset
                qq.Fields("Last No_ Used") = IncByNo
                qq.Fields("Ext_ Last No_ Used") = ExtIncByNo
                qq.Fields("Last Date Used") = Now()
                qq.Fields("Starting No_") = StartDocPrefix & Infix & "/"
                qq.Fields("Ext_ Starting No_") = StartExtDocPrefix & Infix & "|"
                SeriesNo = StartDocPrefix & Infix & "/" & FormatDocumentNumber(EndNo, IncByNo)
                External = StartExtDocPrefix & Infix & "|" & FormatDocumentNumber(EndNo, ExtIncByNo)

            Else
                qq.Fields("Last No_ Used") = LastNoUsed + IncByNo
                qq.Fields("Ext_ Last No_ Used") = ExtLastNoUsed + ExtIncByNo
                SeriesNo = StartDocPrefix & FormatDocumentNumber(EndNo, LastNoUsed + IncByNo)
                External = StartExtDocPrefix & FormatDocumentNumber(EndNo, ExtLastNoUsed + ExtIncByNo)

            End If

            qq.Execute()
        End If

        Return SeriesNo

    End Function
    Public Function CheckOrderQRCodeInit(Order As String, Logistics As String, PickingNo As String, Type As Integer) As Integer
        Dim SS As Integer = 0

        'If Logistics <> "" Then
        Dim q As Query = Query.From("Document Entry Header").Transaction(True)
        q = Query.From("Document Entry Header").Transaction(True)
        q.Where("No_").Is(Order)
        q.And("Logistics No_").IsNot("")
        q.And("Picking No_").Is(PickingNo)
        q.And("Document Type").Is(Type)
        'q.And("Status").GreaterThan(0)
        If q.RecordCount > 0 Then
            SS = 1
        End If

        Select Case Type
            Case 0, 6, 14, 16, 18
                Dim qq = Query.Delete("QRCode Buffer")
                qq.Where("Document No_").Is(Order)
                qq.And("Logistics No_").Is(Logistics)
                'qq.And("Picking No_").Is(PickingNo)
                qq.And("Type").Is(Type)
                qq.Execute()

        End Select

        Return SS
    End Function

    'For datalink Item Order Header
    Public Sub PurchaseOrderQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then Return
        If CheckOrderQRCodeInit(rOrder("No_"), rOrder("Logistics No_"), rOrder("Picking No_"), 0) = 1 Then
            WorkSession.MsgML("Already Init !")
            Return
        End If

        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting Date")
        Dim EndingDate As Date = rOrder("Posting Date")
        Dim StartingDate As Date = rOrder("Posting Date")
        Dim DueDate As Date = rOrder("Posting Date")
        Dim CurrencyCode As String = rOrder("Currency Code")
        Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
        Dim SourceCode As String = rOrder("Source Code")
        Dim ResponsibilityCenter As String = rOrder("Responsibility Center")
        Dim LocationCode As String = rOrder("Location Code")
        Dim DocumentNo As String = rOrder("No_")
        Dim LogisticsNo As String = rOrder("Logistics No_")
        Dim PickingNo As String = rOrder("Picking No_")
        Dim PackingList As String = rOrder("Packing List")

        ''lấy series
        LogisticsNo = GetandUpdateSeriesNumber("WhsReceipt", "", SourceCode, ResponsibilityCenter, LocationCode, PackingList)


        Dim qqq As Query = Query.From("Logistics Purchase Order")
        qqq.Where("Document No_").Is(DocumentNo)
        'qqq.And("Logistics No_").Is(LogisticsNo)
        'qqq.And("Document Type").Is(0)
        Dim DTSource As DataTable = qqq.ToTable

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To DTSource.Rows.Count - 1

                Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert
                insertLine.Fields("Type") = 0
                insertLine.Fields("Source Type") = 3 'NCC

                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Logistics No_") = LogisticsNo
                insertLine.Fields("Picking No_") = IIf(PackingList = "", LogisticsNo, PackingList)
                insertLine.Fields("Packing List") = PackingList
                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Your Reference") = insertLine.Fields("Picking No_")
                insertLine.Fields("Source Code") = SourceCode
                insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                insertLine.Fields("Location Code") = DTSource.Rows(i)("Location Code")

                insertLine.Fields("Item No_") = DTSource.Rows(i)("No_")
                insertLine.Fields("Item Variant") = DTSource.Rows(i)("Variant Code")

                insertLine.Fields("Lot No_") = DTSource.Rows(i)("Lot No_")
                insertLine.Fields("Real Lot No_") = DTSource.Rows(i)("Lot No_")
                insertLine.Fields("Expired Date") = DTSource.Rows(i)("Expiration Date")
                insertLine.Fields("Real Expired Date") = DTSource.Rows(i)("Expiration Date")

                insertLine.Fields("Unit of Measure") = DTSource.Rows(i)("Unit of Measure")
                insertLine.Fields("Qty Unit Of Measure") = DTSource.Rows(i)("Qty_ per Unit of Measure")
                insertLine.Fields("Quantity") = DTSource.Rows(i)("Qty_ to Receive")

                insertLine.Fields("Login ID") = Framework.UserID
                'insertLine.Fields("System Date") = Now()
                'insertLine.Fields("URL") = ""

                'insertLine.Fields("QRCode") = ""
                'insertLine.Fields("Serial No_") = ""

                insertLine.Fields("Mfg Date") = DTSource.Rows(i)("MFG Date")
                'insertLine.Fields("Work Shift No_") = DTSource.Rows(i)("Work Shift No_")
                'insertLine.Fields("Work Center") = DTSource.Rows(i)("Work Center")
                'insertLine.Fields("Entry No_") = 0
                'insertLine.Fields("Blocked") = 0
                insertLine.Fields("Number No_") = DTSource.Rows(i)("Qty_ to Receive")
                insertLine.Fields("Description") = ExternalDocumentNo

                insertLine.Fields("Post QRCode Entry") = 1
                insertLine.Fields("Status") = 1
                insertLine.Fields("Kit") = IIf(DTSource.Rows(i)("Qty_ per Unit of Measure") > 1, 1, 0)
                insertLine.Fields("Parent") = IIf(DTSource.Rows(i)("Qty_ per Unit of Measure") > 1, 1, 0)

                insertLine.Execute()


            Next

            Query.EndTransaction()

            Framework.OpenEntity("QRCode Generation", String.Format("[Document No_]=N'{0}' and [Type]=0", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub
    Public Function getdocNo_(ByVal LoginID As String, ByVal Sq As String) As String
        Dim DocPurchase As String = ""
        Try
            Dim rQuery As Query = Query.From("No_ Series Line").Transaction(True)
            rQuery.WhereAs("Series Code") = Sq
            rQuery.WhereAs("UserID") = LoginID
            If rQuery.ToTable.Rows.Count = 0 Then
                rQuery = Query.From("No_ Series Line").Transaction(True)
                rQuery.WhereAs("Series Code") = Sq
            End If
            Dim lastNumberUsed As Integer = rQuery.Value("Last No_ Used")
            Dim incrementBy As Integer = rQuery.Value("Increment-by No_")
            Dim startPrefix As String = rQuery.Value("Starting No_")

            DocPurchase = startPrefix & FormatDocumentNumber(rQuery.Value("Ending No_"), lastNumberUsed + incrementBy)
            Dim SeriesRowID As Integer = rQuery.Value("RowID")

            Dim updateSeries As Query = Query.Update("No_ Series Line")
            updateSeries.Fields("Last No_ Used") = lastNumberUsed + incrementBy
            updateSeries.WhereAs("RowID") = SeriesRowID
            updateSeries.Execute()

        Catch ex As Exception
            Return ""
        End Try
        Return DocPurchase
    End Function
    Public Sub OpenDocumentPackinglst(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Query.BeginTransaction()
            Dim DocPurchase As String = ""
            Dim DocSales As String = ""
            Dim LoginID As String = Framework.UserID
            Dim AppUserID As String = Framework.EmptyNull(WorkSession.Read(“FrontEndAppUserId”))
            If AppUserID <> "" Then
                LoginID = AppUserID
            End If

            Dim QNumber_sq As Query = Query.From("Number Sequence").Select("PurchaseOrder,SalesOrder").Transaction(True)



            Dim QDocHeader As Query = Query.From("Document Entry Header").Transaction(True)
            QDocHeader.WhereAs("No_") = "QRCodePackinglst"
            QDocHeader.WhereAs("Document Type") = 0
            Dim PurchaseOrder As String = QNumber_sq.Value("PurchaseOrder")
            Dim SalesOrder As String = QNumber_sq.Value("SalesOrder")

            If QDocHeader.ToTable.Rows.Count = 0 Then
                'DocPurchase = getdocNo_(LoginID, PurchaseOrder)
                Dim QInserDocHeader As Query = Query.Entity("Document Entry Header Packinglst").Insert
                QInserDocHeader.Fields("No_") = "QRCodePackinglst"
                QInserDocHeader.Fields("Document Type") = 0
                QInserDocHeader.Fields("User ID") = LoginID
                QInserDocHeader.Fields("Table ID") = 0
                QInserDocHeader.Execute()
            End If

            QDocHeader = Query.From("Document Entry Header").Transaction(True)
            QDocHeader.WhereAs("User ID") = LoginID
            QDocHeader.WhereAs("Document Type") = 1
            If QDocHeader.ToTable.Rows.Count = 0 Then
                DocSales = getdocNo_(LoginID, SalesOrder)
                Dim QInserDocHeader_1 As Query = Query.Entity("Document Entry Header Packinglst").Insert
                QInserDocHeader_1.Fields("No_") = DocSales
                QInserDocHeader_1.Fields("Document Type") = 1
                QInserDocHeader_1.Fields("User ID") = LoginID
                QInserDocHeader_1.Fields("Table ID") = 1
                QInserDocHeader_1.Execute()
            End If

            Query.EndTransaction()
            Framework.OpenEntity("Document Entry Header Packinglst", String.Format("[Packing List]=N'{0}'", "QRCodePackinglst"))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub
    Public Sub Open_Scan_QRCode(ByVal dbsource As Hashtable)
        Try

        Catch ex As Exception

        End Try
    End Sub
    Public Sub scanqrcode06(ByVal sender As WXSource, ByVal e As WXArgs) 'scan khoang
        Try
            WorkSession.MsgML("scanqrcode08!")
            sender.SetParameter("QRCode", "scanqrcode08")
        Catch ex As Exception

        End Try
    End Sub
    Public Sub scanqrcode07(ByVal sender As WXSource, ByVal e As WXArgs) 'scan khoang
        Try
            WorkSession.MsgML("scanqrcode08!")
            Dim result As New Hashtable

            Dim LoginID As String = Framework.UserID
            Dim AppUserID As String = Framework.EmptyNull(WorkSession.Read(“FrontEndAppUserId”))
            If AppUserID <> "" Then
                LoginID = AppUserID
            End If
            Dim qrCode As String = Code.Library.Library.ISDBNULL(sender.Request("__QRCODE__"), "")

            If qrCode = "" Then
                qrCode = "6*KHOANG01*K01"
            End If
            Framework.OpenEntity("View QRCode Bin PackingLst", String.Format("[Bin]=N'{0}'", qrCode))

        Catch ex As Exception

        End Try
    End Sub

    Public Sub scanqrcode08(ByVal sender As WXSource, ByVal e As WXArgs) 'scan nvl
        'WorkSession.MsgML("scanqrcode08!")
        Dim result As New Hashtable

        Dim LoginID As String = Framework.UserID
        Dim AppUserID As String = Framework.EmptyNull(WorkSession.Read(“FrontEndAppUserId”))
        If AppUserID <> "" Then
            LoginID = AppUserID
        End If
        Dim nameEntity As String = sender.Entity.Name


        Try
            Dim qrCode As String = Code.Library.Library.ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then

                qrCode = "MPLTHB0031-BDH02953-CIBB24170314-187"
                qrCode = sender.GetParameter("QrCode")

                Select Case nameEntity
                    Case "Appview_packinglst_Info_Bincode"
                        qrCode = "011A1A1.1"

                    Case "Appview_packinglst_Info_Zonecode"
                        qrCode = "011A"
                    Case "Appview_packinglst_Info_Item_TP"
                        qrCode = "BDH03043-2"
                End Select

            End If



            Select Case nameEntity
                Case "Appview_packinglst_Info_Item_TP"
                    result = New Hashtable

                    Dim q As Query = Query.From("Packing List XTP").Transaction(True)
                    q.Where("QRCode").Is(qrCode)
                    Dim QRCodeEntry As Query = Query.From("QRCode Entry").Transaction(True)
                    QRCodeEntry.WhereAs("QRCode") = qrCode
                    Dim ItemNo_ As String = ""
                    Dim Style As String = ""
                    Dim ItemCategory As String = ""
                    Dim ColorNo_ As String = ""
                    Dim Size As String = ""

                    Dim q_stored As Query = Query.StoredProc("SP_DataPackingListTP")
                    q_stored.Parameters.Add("DocNo", q.Value("No_"))

                    Dim dtchitiet_sytle As DataTable = q_stored.ToTable()

                    Dim r_carton() As DataRow = dtchitiet_sytle.Select("[Carton No_]='" & q.Value("Carton No_") & "' and [Sales Order No_]='" & q.Value("Sales Order No_") & "' ")
                    For iCarton As Integer = 0 To r_carton.Length - 1
                        If ItemNo_ = "" Then
                            ItemNo_ = r_carton(iCarton)("Finish No_")
                        Else
                            ItemNo_ &= "," & r_carton(iCarton)("Finish No_")
                        End If
                        If Style = "" Then
                            Style = r_carton(iCarton)("Finish Name")
                        Else
                            Style &= "," & r_carton(iCarton)("Finish Name")
                        End If
                        If ItemCategory = "" Then
                            ItemCategory = r_carton(iCarton)("Item Category")
                        Else
                            ItemCategory &= "," & r_carton(iCarton)("Item Category")
                        End If
                        If ColorNo_ = "" AndAlso r_carton(iCarton)("Color No_") <> "" Then
                            ColorNo_ = r_carton(iCarton)("Color No_")
                        ElseIf r_carton(iCarton)("Color No_") <> "" And ColorNo_ <> "" Then
                            ColorNo_ &= "," & r_carton(iCarton)("Color No_")
                        End If
                        If Size = "" AndAlso r_carton(iCarton)("Size No_") <> "" Then
                            Size = r_carton(iCarton)("Size No_")
                        ElseIf r_carton(iCarton)("Size No_") <> "" And ColorNo_ <> "" Then
                            Size &= "," & r_carton(iCarton)("Size No_")
                        End If
                    Next
                    result.Add("QRCode", qrCode)
                    result.Add("Carton No_", q.Value("Carton No_"))

                    Dim strsqL_QrCodeEntry As String = "select top 2 * from [QRCode Entry] with (nolock) "
                    strsqL_QrCodeEntry &= " where QRCode ='" & qrCode & "' and [Document Type] in (1,7)"
                    strsqL_QrCodeEntry &= " and  Bin ='" & QRCodeEntry.Value("Bin") & "' "
                    Dim QRCodeEntry_DocType As Query = Query.Sql(strsqL_QrCodeEntry).Transaction(True)

                    If QRCodeEntry_DocType.ToTable.Rows.Count > 0 Then
                        result.Add("Bin", "")
                    Else
                        result.Add("Bin", QRCodeEntry.Value("Bin"))
                    End If

                    result.Add("Item No_", ItemNo_)
                    result.Add("Style", Style)
                    result.Add("PickingList", q.Value("No_"))
                    result.Add("Sales Order No_", q.Value("Sales Order No_"))
                    result.Add("Item Category", ItemCategory)
                    result.Add("Color No_", ColorNo_)
                    result.Add("Size", Size)
                    result.Add("Posting Date", q.Value("Posting Date"))
                    result.Add("Quantity", q.Value("Quantity"))
                    result.Add("Net Weight", q.Value("NW"))
                    result.Add("UOM Net Weight", q.Value("Unit of Measure NW"))
                    result.Add("Gross Weight", q.Value("Weight"))
                    result.Add("UOM Gross Weight", q.Value("Unit of Measure GW"))
                    result.Add("CBM", q.Value("CBM"))

                    Dim ClientEntity As New ClientContext("QRCodeScanPackinglst_tp")
                    Dim parameters As DataRow = ClientEntity.Parameters
                    For Each entry As DictionaryEntry In result
                        If parameters.Table.Columns.Contains(entry.Key) Then
                            parameters(entry.Key) = entry.Value
                        End If

                    Next

                    ClientEntity.Show()


                Case "Appview_packinglst_Info_Item"
                    Dim q As Query = Query.From("QRCode").Transaction(True)
                    q.Where("QRCode").Is(qrCode)

                    Dim ItemNo_ As String = ""
                    Dim QItem As Query = Query.From("View Item").Transaction(True)
                    If q.RecordCount <= 0 Then

                        result.Add("msg", "Not in Our system ")
                    Else
                        ItemNo_ = q.Value("Item No_")
                        'Dim item As DataRow = qqq.TakeRow
                        Dim arrValue() As String = qrCode.Split("-")
                        Dim rowID As Integer = arrValue(3)
                        Dim QPackinglst As Query = Query.From("Packing List").Transaction(True)
                        QPackinglst.WhereAs("RowID") = rowID
                        If QPackinglst.RecordCount > 0 Then
                            Dim qEntry As Query = Query.From("QRCode Entry").Transaction(True)
                            qEntry.Where("QRCode").Is(qrCode)


                            QItem.WhereAs("No_") = ItemNo_

                            result.Add("QRCode", qrCode)
                            result.Add("Style", QPackinglst.Value("Style"))
                            result.Add("PO No_", QPackinglst.Value("PO No_"))   'Đơn hàng NCC
                            result.Add("External Document No_", QPackinglst.Value("External Document No_")) 'Hoá đơn NCC
                            result.Add("Posting Date", QPackinglst.Value("Posting Date")) 'Ngày nhập kho
                            result.Add("Item category", QPackinglst.Value("Item category"))
                            result.Add("Inventory Posting Group", QPackinglst.Value("Inventory Posting Group"))
                            result.Add("Code Number", QPackinglst.Value("Code Number")) 'Số code vải
                            result.Add("Component", QPackinglst.Value("Component")) 'Thành phần vải
                            result.Add("Color", QPackinglst.Value("Color")) 'Màu vải
                            result.Add("Weight Of Length", QPackinglst.Value("Weight Of Length")) 'Trọng lượng gam/m2 của vải
                            result.Add("Size", QPackinglst.Value("Size")) 'Đơn vị tính theo chiều dài CM/INCH
                            result.Add("Lot No_", QPackinglst.Value("Lot No_")) 'Lô/mẻ nhuộm vải
                            result.Add("Color light", QPackinglst.Value("Color light")) 'ánh màu
                            result.Add("Roll", QPackinglst.Value("Roll")) 'Roll cây vải
                            result.Add("Quantity", QPackinglst.Value("Quantity")) 'Đơn vị tính theo chiều dài YARD/MÉT
                            result.Add("Unit of Measure", QPackinglst.Value("Unit of Measure")) 'Unit of Measure
                            result.Add("Qty_ Unit of Measure", QPackinglst.Value("Qty_ Unit of Measure"))
                            result.Add("Net Weight", QPackinglst.Value("Net Weight")) 'Đơn vị tính theo trong lượng net KG/LBS
                            result.Add("Gross Weight", QPackinglst.Value("Gross Weight")) 'Đơn vị tính theo trong lượng Gross KG/LBS

                            'result.Add("Bin", qEntry.Value("Bin")) 'Khung
                            Dim strsqL_QrCodeEntry As String = "select top 2 * from [QRCode Entry] with (nolock) "
                            strsqL_QrCodeEntry &= " where QRCode ='" & qrCode & "' and [Document Type] in (1,7)"
                            strsqL_QrCodeEntry &= " and  Bin ='" & qEntry.Value("Bin") & "' "
                            Dim QRCodeEntry_DocType As Query = Query.Sql(strsqL_QrCodeEntry).Transaction(True)

                            If QRCodeEntry_DocType.ToTable.Rows.Count > 0 Then
                                result.Add("Bin", "")
                            Else
                                result.Add("Bin", qEntry.Value("Bin"))
                            End If
                            result.Add("Item Group", QPackinglst.Value("Item Group")) 'Item Group
                            result.Add("PackingLst", QPackinglst.Value("No_")) 'Item Group

                            result.Add("Item No_", ItemNo_) 'ItemNo_



                            result.Add("Unit of Measure NW", QPackinglst.Value("Unit of Measure NW")) 'Đơn vị tính theo chiều dài YARD/MÉT
                            result.Add("Unit of Measure GW", QPackinglst.Value("Unit of Measure GW")) 'Unit of Measure
                            result.Add("CBM", QPackinglst.Value("CBM"))

                        Else
                            result.Add("msg", "Not in Our system ") 'Khung

                        End If



                    End If

                    Dim OpenEntity As String = "QRCodeScanPackinglst"
                    If ItemNo_ <> "" Then

                        Dim IVItemPostingGroup As String = QItem.Value("Inventory Posting Group")
                        Dim QItemItemPostingGroup As Query = Query.From("Inventory Posting Group").Transaction(True)
                        QItemItemPostingGroup.WhereAs("Code") = IVItemPostingGroup
                        OpenEntity = Code.Library.Library.ISDBNULL(QItemItemPostingGroup.Value("Open Entity Info"), "QRCodeScanPackinglst")

                    End If


                    Dim ClientEntity As New ClientContext(OpenEntity)
                    Dim parameters As DataRow = ClientEntity.Parameters
                    For Each entry As DictionaryEntry In result
                        If parameters.Table.Columns.Contains(entry.Key) Then
                            parameters(entry.Key) = entry.Value
                        End If

                    Next

                    ClientEntity.Show()
                Case "Appview_packinglst_Info_Bincode"
                    ' qrCode = "011A1A1.1"
                    Framework.OpenEntity("View QRCode Bin PackingLst", String.Format("[Bin]=N'{0}'", qrCode))
                Case "Appview_packinglst_Info_Zonecode"
                    '  qrCode = "011A"
                    Framework.OpenEntity("View QRCode Zone PackingLst", String.Format("[Zone]=N'{0}'", qrCode))
            End Select


        Catch ex As Exception
            result("_ERROR_") = ex.ToString()
        End Try
        sender.Response("result") = result
    End Sub

    Public Sub Open_info_Zone_list(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim QrCode As String = sender.GetParameter("QrCode")
            If QrCode = "" Then
                QrCode = "011A"
            End If
            Framework.OpenEntity("View QRCode Zone PackingLst", String.Format("[Zone]=N'{0}'", QrCode))
        Catch ex As Exception
        End Try
    End Sub


    Public Sub Open_info_Bin_list(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim QrCode As String = sender.GetParameter("QrCode")
            If QrCode = "" Then
                QrCode = "6*KHOANG01*K01"
            End If
            Framework.OpenEntity("View QRCode Bin PackingLst", String.Format("[Bin]=N'{0}'", QrCode))
        Catch ex As Exception
        End Try
    End Sub

    Public Sub View_Entity_Info_Item(ByVal QRCode As String)
        Dim OpenEntity As String = "QRCodeScanPackinglst"
        Dim ClientEntity As New ClientContext(OpenEntity)
        Dim result As New Hashtable
        Try
            'Dim q As Query = Query.From("QRCode").Transaction(True)
            'q.Where("QRCode").Is(QRCode)
            Dim sqlQrcode As String = "select * from QRCode with (nolock) where QRCode like '" & QRCode & "' "
            Dim q As Query = Query.Sql(sqlQrcode).Transaction(True)
            Dim ItemNo_ As String = ""
            Dim QItem As Query = Query.From("View Item").Transaction(True)
            If q.RecordCount <= 0 Then
                result.Add("msg", "Not in Our system ")
            Else
                ItemNo_ = q.Value("Item No_")
                'Dim item As DataRow = qqq.TakeRow
                Dim arrValue() As String = QRCode.Split("-")
                Dim rowID As Integer = arrValue(3)
                Dim QPackinglst As Query = Query.From("Packing List").Transaction(True)
                QPackinglst.WhereAs("RowID") = rowID
                If QPackinglst.RecordCount > 0 Then
                    Dim qEntry As Query = Query.From("QRCode Entry").Transaction(True)
                    qEntry.Where("QRCode").Is(QRCode)


                    QItem.WhereAs("No_") = ItemNo_

                    result.Add("QRCode", QRCode)
                    result.Add("Style", QPackinglst.Value("Style"))
                    result.Add("PO No_", QPackinglst.Value("PO No_"))   'Đơn hàng NCC
                    result.Add("External Document No_", QPackinglst.Value("External Document No_")) 'Hoá đơn NCC
                    result.Add("Posting Date", QPackinglst.Value("Posting Date")) 'Ngày nhập kho
                    result.Add("Item category", QPackinglst.Value("Item category"))
                    result.Add("Inventory Posting Group", QPackinglst.Value("Inventory Posting Group"))
                    result.Add("Code Number", QPackinglst.Value("Code Number")) 'Số code vải
                    result.Add("Component", QPackinglst.Value("Component")) 'Thành phần vải
                    result.Add("Color", QPackinglst.Value("Color")) 'Màu vải
                    result.Add("Weight Of Length", QPackinglst.Value("Weight Of Length")) 'Trọng lượng gam/m2 của vải
                    result.Add("Size", QPackinglst.Value("Size")) 'Đơn vị tính theo chiều dài CM/INCH
                    result.Add("Lot No_", QPackinglst.Value("Lot No_")) 'Lô/mẻ nhuộm vải
                    result.Add("Color light", QPackinglst.Value("Color light")) 'ánh màu
                    result.Add("Roll", QPackinglst.Value("Roll")) 'Roll cây vải
                    result.Add("Quantity", QPackinglst.Value("Quantity")) 'Đơn vị tính theo chiều dài YARD/MÉT
                    result.Add("Unit of Measure", QPackinglst.Value("Unit of Measure")) 'Unit of Measure
                    result.Add("Qty_ Unit of Measure", QPackinglst.Value("Qty_ Unit of Measure"))
                    result.Add("Net Weight", QPackinglst.Value("Net Weight")) 'Đơn vị tính theo trong lượng net KG/LBS
                    result.Add("Gross Weight", QPackinglst.Value("Gross Weight")) 'Đơn vị tính theo trong lượng Gross KG/LBS

                    'result.Add("Bin", qEntry.Value("Bin")) 'Khung
                    Dim strsqL_QrCodeEntry As String = "select top 2 * from [QRCode Entry] with (nolock) "
                    strsqL_QrCodeEntry &= " where QRCode ='" & QRCode & "' and [Document Type] in (1,7)"
                    strsqL_QrCodeEntry &= " and  Bin ='" & qEntry.Value("Bin") & "' "
                    Dim QRCodeEntry_DocType As Query = Query.Sql(strsqL_QrCodeEntry).Transaction(True)

                    If QRCodeEntry_DocType.ToTable.Rows.Count > 0 Then
                        result.Add("Bin", "")
                    Else
                        result.Add("Bin", qEntry.Value("Bin"))
                    End If
                    result.Add("Item Group", QPackinglst.Value("Item Group")) 'Item Group
                    result.Add("PackingLst", QPackinglst.Value("No_")) 'Item Group

                    result.Add("Item No_", ItemNo_) 'ItemNo_


                    result.Add("Unit of Measure NW", QPackinglst.Value("Unit of Measure NW")) 'Đơn vị tính theo chiều dài YARD/MÉT
                    result.Add("Unit of Measure GW", QPackinglst.Value("Unit of Measure GW")) 'Unit of Measure
                    result.Add("CBM", QPackinglst.Value("CBM"))


                Else
                    result.Add("msg", "Not in Our system ") 'Khung

                End If



            End If


            If ItemNo_ <> "" Then

                Dim IVItemPostingGroup As String = QItem.Value("Inventory Posting Group")
                Dim QItemItemPostingGroup As Query = Query.From("Inventory Posting Group").Transaction(True)
                QItemItemPostingGroup.WhereAs("Code") = IVItemPostingGroup
                OpenEntity = Code.Library.Library.ISDBNULL(QItemItemPostingGroup.Value("Open Entity Info"), "QRCodeScanPackinglst")
                ClientEntity = New ClientContext(OpenEntity)
            End If
            Select Case OpenEntity
                Case "QRCodePackingList_NTP"
                    result = New Hashtable
                    Dim parameters As DataRow = ClientEntity.Parameters
                    For Each entry As DictionaryEntry In result
                        If parameters.Table.Columns.Contains(entry.Key) Then
                            parameters(entry.Key) = entry.Value
                        End If

                    Next
                Case Else
                    Dim parameters As DataRow = ClientEntity.Parameters
                    For Each entry As DictionaryEntry In result
                        If parameters.Table.Columns.Contains(entry.Key) Then
                            parameters(entry.Key) = entry.Value
                        End If

                    Next
            End Select



            ' WorkSession.MsgML("qrCode : {0}", QRCode)

        Catch ex As Exception
            result("_ERROR_") = ex.ToString()
        End Try
        ClientEntity.Show()

    End Sub
    Public Sub Open_info_Item_TP(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim QrCode As String = sender.GetParameter("QrCode")
            Dim Result As New Hashtable

            Dim q As Query = Query.From("Packing List XTP").Transaction(True)
            q.Where("QRCode").Is(QrCode)
            'Dim QRCodeEntry As Query = Query.From("QRCode Entry").Transaction(True)
            'QRCodeEntry.WhereAs("QRCode") = QrCode

            Dim sqlQrcode As String = "select * from [QRCode Entry] with (nolock) where QRCode like '" & QrCode & "' "
            Dim QRCodeEntry As Query = Query.Sql(sqlQrcode).Transaction(True)

            Dim ItemNo_ As String = ""
            Dim Style As String = ""
            Dim ItemCategory As String = ""
            Dim ColorNo_ As String = ""
            Dim Size As String = ""

            Dim q_stored As Query = Query.StoredProc("SP_DataPackingListTP")
            q_stored.Parameters.Add("DocNo", q.Value("No_"))

            Dim dtchitiet_sytle As DataTable = q_stored.ToTable()

            Dim r_carton() As DataRow = dtchitiet_sytle.Select("[Carton No_]='" & q.Value("Carton No_") & "' and [Sales Order No_]='" & q.Value("Sales Order No_") & "' ")
            For iCarton As Integer = 0 To r_carton.Length - 1
                If ItemNo_ = "" Then
                    ItemNo_ = r_carton(iCarton)("Finish No_")
                Else
                    ItemNo_ &= "," & r_carton(iCarton)("Finish No_")
                End If
                If Style = "" Then
                    Style = r_carton(iCarton)("Finish Name")
                Else
                    Style &= "," & r_carton(iCarton)("Finish Name")
                End If
                If ItemCategory = "" Then
                    ItemCategory = r_carton(iCarton)("Item Category")
                Else
                    ItemCategory &= "," & r_carton(iCarton)("Item Category")
                End If
                If ColorNo_ = "" AndAlso r_carton(iCarton)("Color No_") <> "" Then
                    ColorNo_ = r_carton(iCarton)("Color No_")
                ElseIf r_carton(iCarton)("Color No_") <> "" And ColorNo_ <> "" Then
                    ColorNo_ &= "," & r_carton(iCarton)("Color No_")
                End If
                If Size = "" AndAlso r_carton(iCarton)("Size No_") <> "" Then
                    Size = r_carton(iCarton)("Size No_")
                ElseIf r_carton(iCarton)("Size No_") <> "" And ColorNo_ <> "" Then
                    Size &= "," & r_carton(iCarton)("Size No_")
                End If
            Next
            Result.Add("QRCode", QrCode)
            Result.Add("Carton No_", q.Value("Carton No_"))
            Result.Add("Bin", QRCodeEntry.Value("Bin"))
            Result.Add("Item No_", ItemNo_)
            Result.Add("Style", Style)
            Result.Add("PickingList", q.Value("No_"))
            Result.Add("Sales Order No_", q.Value("Sales Order No_"))
            Result.Add("Item Category", ItemCategory)
            Result.Add("Color No_", ColorNo_)
            Result.Add("Size", Size)
            Result.Add("Posting Date", q.Value("Posting Date"))
            Result.Add("Quantity", q.Value("Quantity"))
            Result.Add("Net Weight", q.Value("NW"))
            Result.Add("UOM Net Weight", q.Value("Unit of Measure NW"))
            Result.Add("Gross Weight", q.Value("Weight"))
            Result.Add("UOM Gross Weight", q.Value("Unit of Measure GW"))
            Result.Add("CBM", q.Value("CBM"))

            Dim ClientEntity As New ClientContext("QRCodeScanPackinglst_tp")
            Dim parameters As DataRow = ClientEntity.Parameters
            For Each entry As DictionaryEntry In Result
                If parameters.Table.Columns.Contains(entry.Key) Then
                    parameters(entry.Key) = entry.Value
                End If

            Next
            WorkSession.MsgML("qrCode : {0}", QrCode)
            ClientEntity.Show()
        Catch ex As Exception

        End Try
    End Sub

    Public Sub Open_info_item(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim result As New Hashtable
        Try
            Dim LoginID As String = Framework.UserID
            Dim AppUserID As String = Framework.EmptyNull(WorkSession.Read("FrontEndAppUserId"))
            If AppUserID <> "" Then
                LoginID = AppUserID
            End If
            Dim QrCode As String = sender.GetParameter("QrCode")
            View_Entity_Info_Item(QrCode)

        Catch ex As Exception

        End Try


    End Sub
    Public Sub Open_info_item_Curr(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim result As New Hashtable
        Dim curr As Hashtable = sender.CurrentRow
        Try
            Dim LoginID As String = Framework.UserID
            Dim AppUserID As String = Framework.EmptyNull(WorkSession.Read("FrontEndAppUserId"))
            If AppUserID <> "" Then
                LoginID = AppUserID
            End If
            Dim QrCode As String = curr("QRCode")
            View_Entity_Info_Item(QrCode)

        Catch ex As Exception

        End Try


    End Sub
    Public Sub InsertQRCode(ByVal curRow As Hashtable)
        Try
            Dim LoginID As String = Framework.UserID
            Dim AppUserID As String = Framework.EmptyNull(WorkSession.Read(“FrontEndAppUserId”))
            If AppUserID <> "" Then
                LoginID = AppUserID
            End If

            Query.BeginTransaction()
            Dim QDelete As Query = Query.Delete("QRCode Scan Packinglst")
            QDelete.WhereAs("Login ID") = Framework.UserID
            QDelete.Execute()


            For Each entry As DictionaryEntry In curRow
                Dim Insert_QRCode As Query = Query.Entity("QRCode Scan Packinglst").Insert
                Insert_QRCode.Fields("Column Name") = entry.Key
                Insert_QRCode.Fields("Column Value") = entry.Value
                Insert_QRCode.Fields("Login ID") = Framework.UserID
                Insert_QRCode.Execute()
            Next entry

            Query.EndTransaction()
        Catch ex As Exception
            Query.RollBack()
        End Try
    End Sub



    Public Sub ScanQrCodeInforType1(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim result As New Hashtable
        Try
            'Get QR code scanned and submit from app client
            WorkSession.MsgML("Well come to SCanQRCodeInforType1 ")

            Dim qrCode As String = Code.Library.Library.ISDBNULL(sender.Request("__QRCODE__"), "")
            Dim SerialNo As String = ""
            If qrCode = "" Then
                Dim r As Hashtable = sender.CurrentRow
                If r Is Nothing Or r.Count = 0 Then Return
                qrCode = r("QRCode")

            End If
            Dim q As Query = Query.From("QRCode").Transaction(True)
            q.Where("QRCode").Is(qrCode)
            If q.RecordCount <= 0 Then
                result("msg") = "Not in Our system "
            Else
                'Dim item As DataRow = qqq.TakeRow
                Dim arrValue() As String = qrCode.Split("*")
                result("QRCode") = qrCode
            End If

        Catch ex As Exception
            result("_ERROR_") = ex.ToString()
        End Try
    End Sub
    Public Sub createQRCodeBinLst(ByVal Sender As WXSource, ByVal e As WXArgs)
        Try
            Query.BeginTransaction()
            Dim dbSource As New DataTable
            dbSource = Sender.DataSource
            Dim tableID As String = Sender.Entity.TableName
            Dim HeaderTable As String = tableID
            Dim CurrentDate As Date = Now()
            Dim Day As String = CurrentDate.Day
            Dim Month As String = CurrentDate.Month
            Dim Year As String = CurrentDate.Year
            Dim PathDate As String = Day & Month & Year & "/"
            Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")
            If Not Directory.Exists(str3) Then
                Directory.CreateDirectory(str3)
            End If

            For Each trow As DataRow In dbSource.Rows
                Dim QRCodeString As String = Code.Library.Library.ISDBNULL(trow("QRCode String"), "")
                Dim QRCode_Code As String = Code.Library.Library.ISDBNULL(trow("QRCode"), "")
                Dim QRCodeURL As String = Code.Library.Library.ISDBNULL(trow("QRCode URL"), "")
                If QRCode_Code = "" Then
                    Dim dataQR As String = ""
                    Dim dataQRCode As String = QRCodeString
                    Dim QRCodeString_split() As String = QRCodeString.Split("*")
                    For iqr_len As Integer = 0 To QRCodeString_split.Length - 1
                        Dim nameColm As String = QRCodeString_split(iqr_len)
                        nameColm = nameColm.Replace("[", "").Replace("]", "")
                        If dbSource.Columns.Contains(nameColm) Then
                            Dim datavalue As String = trow(nameColm)
                            dataQRCode = dataQRCode.Replace(nameColm, datavalue)
                        End If
                    Next
                    dataQRCode = dataQRCode.Replace("[", "").Replace("]", "")
                    Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
                    DataqRLinkL = Replace(DataqRLinkL, "/", "-")
                    'qRLinkL = Replace(qRLinkL, "'", "''")
                    DataqRLinkL = Replace(DataqRLinkL, "*", "-")
                    Dim ss As Query = Query.From("QRCode").Transaction(True)
                    ss.Where("QRCode").Is(dataQRCode)
                    If ss.ToTable.Rows.Count = 0 Then


                        Dim qr As Query = Query.From("QR Setup").Select("[Object Folder],[QR Height] Height,[QR Width] Width,iIconSize Size")
                        Dim ObjectFolder As String = qr.Value("Object Folder")



                        dataQR = dataQRCode
                        Dim qRLinkL = Replace(dataQR, "#", "-")
                        qRLinkL = Replace(qRLinkL, "/", "-")
                        'qRLinkL = Replace(qRLinkL, "'", "''")
                        qRLinkL = Replace(qRLinkL, "*", "-")
                        qRLinkL = qRLinkL.ToString().Replace(" ", "")
                        qRLinkL = qRLinkL.ToString().Replace(":", "")
                        Dim serverPath As String = str3 + qRLinkL + ".jpg"
                        CreateQRImage(dataQR, serverPath)
                        Dim imageQRCode As String = ""
                        imageQRCode = serverPath
                        Dim QueryInsert As Query = Query.Entity("QRCode").Insert
                        QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
                        QueryInsert.Fields("QRCode") = dataQR
                        QueryInsert.Fields("Serial No_") = qRLinkL
                        QueryInsert.Fields("Name") = qRLinkL
                        QueryInsert.Fields("Description") = qRLinkL
                        QueryInsert.Fields("Item No_") = ""
                        QueryInsert.Fields("Item Variant") = ""
                        QueryInsert.Fields("Lot No_") = ""
                        'QueryInsert.Fields("Document Type") = 0
                        ' QueryInsert.Fields("Type") = 6
                        'QueryInsert.Fields("Source Type") = 6
                        QueryInsert.Fields("Source No_") = trow("Code")
                        QueryInsert.Fields("Document No_") = trow("Code")
                        QueryInsert.Fields("External Document No_") = ""

                        QueryInsert.Fields("Quantity") = 1
                        QueryInsert.Fields("Unit Of Measure") = ""
                        QueryInsert.Fields("Qty Unit Of Measure") = 1
                        QueryInsert.Fields("Login ID") = Framework.UserID
                        QueryInsert.Fields("System Date") = Now()
                        QueryInsert.Fields("Expired Date") = Now()
                        QueryInsert.Fields("Mfg Date") = Now()
                        QueryInsert.Fields("Kit") = 0
                        QueryInsert.Fields("Document Type") = 0 'r("Type")
                        Select Case HeaderTable.ToUpper
                            Case "BANK ACCOUNT"
                                QueryInsert.Fields("Source Type") = 1
                                QueryInsert.Fields("Source No_") = trow("Code")
                            Case "CUSTOMER"
                                QueryInsert.Fields("Source Type") = 2
                                QueryInsert.Fields("Source No_") = trow("Code")
                            Case "VENDOR"
                                QueryInsert.Fields("Source Type") = 3
                                QueryInsert.Fields("Source No_") = trow("Code")
                            Case "ITEM"
                                QueryInsert.Fields("Source Type") = 4
                                QueryInsert.Fields("Source No_") = trow("Code")
                            Case "EMPLOYEE"
                                QueryInsert.Fields("Source Type") = 5
                                QueryInsert.Fields("Source No_") = trow("Code")
                            Case "ASSET"
                                QueryInsert.Fields("Source Type") = 6
                                QueryInsert.Fields("Source No_") = trow("Code")
                            Case "BIN"
                                QueryInsert.Fields("Source Type") = 6
                                QueryInsert.Fields("Source No_") = trow("Code")
                            Case "ZONE", "LOCATION"
                                QueryInsert.Fields("Source Type") = 6
                                QueryInsert.Fields("Source No_") = trow("Code")
                                QueryInsert.Fields("Parent") = 1 ' IIf(r("Qty Unit Of Measure") > 1, 1, 0)
                                QueryInsert.Fields("Kit") = 1 ' IIf(r("Qty Unit Of Measure") > 1, 1, 0)

                            Case "CONTACT"
                                QueryInsert.Fields("Source Type") = 7
                                QueryInsert.Fields("Source No_") = trow("Code")
                            Case "PROJECT"
                                QueryInsert.Fields("Source Type") = 8
                                QueryInsert.Fields("Source No_") = trow("Code")
                            Case "SALESPERSON_PURCHASER"
                                QueryInsert.Fields("Source Type") = 9
                                QueryInsert.Fields("Source No_") = trow("Code")
                            Case "SHIPPER"
                                QueryInsert.Fields("Source Type") = 10
                                QueryInsert.Fields("Source No_") = trow("Code")
                            Case Else
                                QueryInsert.Fields("Source Type") = 0
                                'QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("No_")
                        End Select

                        QueryInsert.Execute()

                        Dim QUpdateTableID As Query = Query.Update(tableID)
                        QUpdateTableID.WhereAs("RowID") = trow("RowID")
                        QUpdateTableID.Fields("QRCode") = dataQR
                        QUpdateTableID.Fields("QRCode URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
                        QUpdateTableID.Execute()
                    End If

                End If
            Next
            Query.EndTransaction()
            Sender.RefreshSource()
            WorkSession.MsgML("Thành Công!")
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub
    Public Sub createQRCodeBinZone(ByVal Sender As WXSource, ByVal e As WXArgs)
        Try
            Query.BeginTransaction()
            Dim r As Hashtable = Sender.CurrentRow
            Dim tableID As String = Sender.Entity.TableName
            If r Is Nothing Or r.Count = 0 Then Return

            Dim QRCodeString As String = Code.Library.Library.ISDBNULL(r("QRCode String"), "")
            Dim QRCode_Code As String = Code.Library.Library.ISDBNULL(r("QRCode"), "")
            Dim QRCodeURL As String = Code.Library.Library.ISDBNULL(r("QRCode URL"), "")
            If QRCode_Code = "" Then
                Dim dataQR As String = ""


                Dim dataQRCode As String = QRCodeString
                Dim QRCodeString_split() As String = QRCodeString.Split("*")
                For iqr_len As Integer = 0 To QRCodeString_split.Length - 1
                    Dim nameColm As String = QRCodeString_split(iqr_len)
                    nameColm = nameColm.Replace("[", "").Replace("]", "")
                    If r.Contains(nameColm) Then
                        Dim datavalue As String = r(nameColm)
                        dataQRCode = dataQRCode.Replace(nameColm, datavalue)
                    End If
                Next
                dataQRCode = dataQRCode.Replace("[", "").Replace("]", "")
                Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
                DataqRLinkL = Replace(DataqRLinkL, "/", "-")
                'qRLinkL = Replace(qRLinkL, "'", "''")
                DataqRLinkL = Replace(DataqRLinkL, "*", "-")
                Dim ss As Query = Query.From("QRCode").Transaction(True)
                ss.Where("QRCode").Is(dataQRCode)
                If ss.ToTable.Rows.Count = 0 Then

                    Dim CurrentDate As Date = Now()
                    Dim Day As String = CurrentDate.Day
                    Dim Month As String = CurrentDate.Month
                    Dim Year As String = CurrentDate.Year
                    Dim PathDate As String = Day & Month & Year & "/"
                    Dim qr As Query = Query.From("QR Setup").Select("[Object Folder],[QR Height] Height,[QR Width] Width,iIconSize Size")
                    Dim ObjectFolder As String = qr.Value("Object Folder")

                    'Dim FullPath As String = Framework.MapPath(ObjectFolder) & PathDate '& "Pictures\Document\"
                    'If Not Directory.Exists(FullPath) Then
                    '    Directory.CreateDirectory(FullPath)
                    'End If
                    'If Not Directory.Exists(FullPath) Then
                    '    Directory.CreateDirectory(FullPath)
                    'End If
                    Dim str3 As String = Framework.MapPath("Pictures/QRCode/" & PathDate, "")
                    If Not Directory.Exists(str3) Then
                        Directory.CreateDirectory(str3)
                    End If
                    dataQR = dataQRCode
                    Dim qRLinkL = Replace(dataQR, "#", "-")
                    qRLinkL = Replace(qRLinkL, "/", "-")
                    'qRLinkL = Replace(qRLinkL, "'", "''")
                    qRLinkL = Replace(qRLinkL, "*", "-")
                    Dim sLevel As String = ""
                    Dim imageQRCode As String = ""

                    Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
                    Dim iIconSize As Integer = 4
                    Dim iQRWidth As Integer = 70
                    Dim iQRHeight As Integer = 70
                    If qr.Value("Size") <> 0 Then iIconSize = qr.Value("Size")
                    If qr.Value("Height") <> 0 Then iQRHeight = qr.Value("Height")
                    If qr.Value("Width") <> 0 Then iQRWidth = qr.Value("Width")
                    Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)



                    Dim serverPath As String = str3 + qRLinkL + ".jpg"
                    CreateQRImage(dataQR, serverPath)
                    imageQRCode = str3 & "" & qRLinkL & ".jpg"
                    Dim QueryInsert As Query = Query.Entity("QRCode").Insert
                    QueryInsert.Fields("URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
                    QueryInsert.Fields("QRCode") = dataQR
                    QueryInsert.Fields("Serial No_") = qRLinkL
                    QueryInsert.Fields("Name") = qRLinkL
                    QueryInsert.Fields("Description") = qRLinkL
                    QueryInsert.Fields("Item No_") = ""
                    QueryInsert.Fields("Item Variant") = ""
                    QueryInsert.Fields("Lot No_") = ""

                    QueryInsert.Fields("Source No_") = r("Code")
                    QueryInsert.Fields("Document No_") = r("Code")
                    QueryInsert.Fields("External Document No_") = ""

                    QueryInsert.Fields("Quantity") = 1
                    QueryInsert.Fields("Unit Of Measure") = ""
                    QueryInsert.Fields("Qty Unit Of Measure") = 1
                    QueryInsert.Fields("Login ID") = Framework.UserID
                    QueryInsert.Fields("System Date") = Now()
                    QueryInsert.Fields("Expired Date") = Now()
                    QueryInsert.Fields("Mfg Date") = Now()
                    QueryInsert.Fields("Kit") = 0

                    QueryInsert.Fields("Document Type") = 0 'r("Type")
                    Select Case tableID.ToUpper
                        Case "BANK ACCOUNT"
                            QueryInsert.Fields("Source Type") = 1
                            QueryInsert.Fields("Source No_") = r("Code")
                        Case "CUSTOMER"
                            QueryInsert.Fields("Source Type") = 2
                            QueryInsert.Fields("Source No_") = r("Code")
                        Case "VENDOR"
                            QueryInsert.Fields("Source Type") = 3
                            QueryInsert.Fields("Source No_") = r("Code")
                        Case "ITEM"
                            QueryInsert.Fields("Source Type") = 4
                            QueryInsert.Fields("Source No_") = r("Code")
                        Case "EMPLOYEE"
                            QueryInsert.Fields("Source Type") = 5
                            QueryInsert.Fields("Source No_") = r("Code")
                        Case "ASSET"
                            QueryInsert.Fields("Source Type") = 6
                            QueryInsert.Fields("Source No_") = r("Code")
                        Case "BIN"
                            QueryInsert.Fields("Source Type") = 6
                            QueryInsert.Fields("Source No_") = r("Code")
                        Case "ZONE", "LOCATION"
                            QueryInsert.Fields("Source Type") = 6
                            QueryInsert.Fields("Source No_") = r("Code")
                            QueryInsert.Fields("Parent") = 1 ' IIf(r("Qty Unit Of Measure") > 1, 1, 0)
                            QueryInsert.Fields("Kit") = 1 ' IIf(r("Qty Unit Of Measure") > 1, 1, 0)

                        Case "CONTACT"
                            QueryInsert.Fields("Source Type") = 7
                            QueryInsert.Fields("Source No_") = r("Code")
                        Case "PROJECT"
                            QueryInsert.Fields("Source Type") = 8
                            QueryInsert.Fields("Source No_") = r("Code")
                        Case "SALESPERSON_PURCHASER"
                            QueryInsert.Fields("Source Type") = 9
                            QueryInsert.Fields("Source No_") = r("Code")
                        Case "SHIPPER"
                            QueryInsert.Fields("Source Type") = 10
                            QueryInsert.Fields("Source No_") = r("Code")
                        Case Else
                            QueryInsert.Fields("Source Type") = 0
                            'QueryInsert.Fields("Source No_") = InvoiceLine.Rows(i)("No_")
                    End Select

                    QueryInsert.Execute()

                    Dim QUpdateTableID As Query = Query.Update(tableID)
                    QUpdateTableID.WhereAs("RowID") = r("RowID")
                    QUpdateTableID.Fields("QRCode") = dataQR
                    QUpdateTableID.Fields("QRCode URL") = "Pictures/QRCode/" & PathDate & qRLinkL & ".jpg"
                    QUpdateTableID.Execute()
                End If

            End If
            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
            ' Framework.OpenEntity("QRCode Tracking", String.Format("[Document No_]=N'{0}' and [Source Type]=6", r("Code")))
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub
    Public Sub CreateQRCodeByBatch(ByVal Sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = Sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return
        If r("Status") < 1 Then
            WorkSession.MsgML("Must be validated!")
            Return
        End If
        Dim DocumentNo_QR As String = r("Your Reference")
        Dim LogisticsNo As String = r("Packing List")

        Dim PostQRCodeEntry As Integer = Framework.ZeroNull(r("Post QRCode Entry"))
        Dim DocumentNo_ As String = r("Document No_")
        Dim batchSize As Integer = r("Number No_")
        If batchSize = 0 Then batchSize = r("Quantity")
        Dim LotNo As String = r("Lot No_")
        If r("Item No_") = "" Then
            WorkSession.MsgML("Item No_ Not Blank!")
            Return
        End If

        If Not (r("Type") = 0 Or r("Type") = 6 Or r("Type") = 4) Then
            WorkSession.MsgML("Must by Input from Production Order, Transfer Order or Purchasing Process !")
            Return

            If r("Type") = 4 And r("Status") <> 3 Then
                WorkSession.MsgML("Must be block Qrcode first !")
                Return
            End If
        End If

        If r("Type") = 6 And Code.Library.Library.ISDBNULL(r("Description"), "") = "" Then
            WorkSession.MsgML("Description Not Blank!")
            Return
        End If

        If Left(r("Mfg Date"), 10) = "" Then
            WorkSession.MsgML("MFG DATE Not Blank!")
            Return
        End If
        If r("Type") = 6 And Right(r("Work Shift No_"), 1) = "" Then
            WorkSession.MsgML("Work Shift Code Not Blank!")
            Return
        End If
        If r("Type") = 6 And r("Work Center") = "" Then
            WorkSession.MsgML("Work Center Not Blank!")
            Return
        End If

        Dim imageQRCode As String = ""


        Dim NumberLine As Integer = 1
        Dim str3 As String = Framework.MapPath("Pictures", "") & "/" & Now.Year & Now.Month & "/"
        Dim ProductType As String = Left(r("Description"), 1) ' P is Product, Limit, K this nghiem

        If (Not System.IO.Directory.Exists(str3)) Then
            System.IO.Directory.CreateDirectory(str3)
        End If

        Dim WorkCenter As String = r("Work Center")
        If r("Type") <> 6 And WorkCenter = "" Then
            WorkCenter = "*" & DocumentNo_
        End If

        Dim MFGDATE As String = Left(r("Mfg Date"), 10)
        MFGDATE = Replace(MFGDATE, "/", "")

        Dim dataQR As String = ""
        Dim dataQRCode As String = ""
        dataQRCode = r("Item No_") & "*" & r("Document No_") & "*" & r("External Document No_") & "*" & r("Entry No_")
        'r("Document No_") & "*" & r("Packing List") & "*" & r("Item No_") & "*" & r("Entry No_")
        Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
        DataqRLinkL = Replace(DataqRLinkL, "/", "-")
        'qRLinkL = Replace(qRLinkL, "'", "''")
        DataqRLinkL = Replace(DataqRLinkL, "*", "-")

        If LotNo = "" Then LotNo = dataQRCode
        If r("Type") = 6 And DocumentNo_ <> "" Then LotNo = DocumentNo_

        Dim ss As Query = Query.From("QRCode").Transaction(True)
        ss.Where("Lot No_").Is(LotNo)
        ss.And("Document No_").Is(DocumentNo_)
        ss.And("QRCode").Is(dataQRCode)

        If ss.RecordCount > 0 Then
            WorkSession.MsgML("Already Post QRCode !")
            Return
        End If

        Dim qq As Query = Query.From("QRCode Entry").Transaction(True)
        Dim j As Integer = qq.RecordCount + 1

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To batchSize - 1 ' In tblSource.Rows

                dataQR = dataQRCode
                '& FormatDocumentNumber(batchSize, NumberLine)

                Dim sLevel As String = ""

                Dim eccLevel As QRCoder.QRCodeGenerator.ECCLevel = 0

                Dim qRLinkL = Replace(dataQR, "#", "-")
                qRLinkL = Replace(qRLinkL, "/", "-")
                'qRLinkL = Replace(qRLinkL, "'", "''")
                qRLinkL = Replace(qRLinkL, "*", "-")

                Dim q As Query = Query.From("QRCode").Transaction(True)
                q.Where("Serial No_").Is(qRLinkL)
                'q.And("Item No_").Is(r("Item No_"))
                Dim tblline As DataTable = q.ToTable
                If tblline.Rows.Count = 0 Then


                    Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
                    Dim iIconSize As Integer = 4
                    Dim iQRWidth As Integer = 70
                    Dim iQRHeight As Integer = 70
                    Dim size As New System.Drawing.Size(iQRWidth, iQRHeight)
                    qRLinkL = qRLinkL.ToString().Replace(" ", "")
                    qRLinkL = qRLinkL.ToString().Replace(":", "")
                    imageQRCode = str3 & "" & qRLinkL & ".jpg"
                    Dim serverPath = str3 & "" & qRLinkL & ".jpg"
                    CreateQRImage(dataQR, serverPath)
                    Try

                        Dim QueryInsert As Query = Query.Entity("QRCode").Insert

                        QueryInsert.Fields("URL") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
                        QueryInsert.Fields("QRCode") = dataQR
                        QueryInsert.Fields("Serial No_") = qRLinkL
                        QueryInsert.Fields("Name") = qRLinkL
                        QueryInsert.Fields("Description") = qRLinkL
                        QueryInsert.Fields("Item No_") = r("Item No_")
                        QueryInsert.Fields("Item Variant") = r("Item Variant")
                        QueryInsert.Fields("Lot No_") = LotNo ' IIf(LotNo <> "", LotNo, dataQRCode)
                        QueryInsert.Fields("Document Type") = r("Type")

                        QueryInsert.Fields("Document No_") = r("Document No_")
                        QueryInsert.Fields("External Document No_") = r("External Document No_")

                        QueryInsert.Fields("Quantity") = r("Quantity") / batchSize
                        QueryInsert.Fields("Unit Of Measure") = r("Unit Of Measure")
                        QueryInsert.Fields("Qty Unit Of Measure") = r("Qty Unit Of Measure")
                        QueryInsert.Fields("Login ID") = Framework.UserID
                        QueryInsert.Fields("System Date") = r("System Date")
                        QueryInsert.Fields("Expired Date") = r("Expired Date")
                        QueryInsert.Fields("Mfg Date") = r("Mfg Date")
                        QueryInsert.Fields("Kit") = IIf(r("Qty Unit Of Measure") = 1, 1, 0)
                        QueryInsert.Execute()


                        Dim exist As Query = Query.From("Document Entry").Transaction(True)
                        exist.Where("Document No_").Is(DocumentNo_QR)
                        exist.And("Logistics No_").Is(LogisticsNo)
                        exist.And("Line No_").Is(r("Entry No_"))
                        exist.And("Item No_").Is(r("Item No_"))
                        exist.And("Document Type").Is(0)

                        If exist.RecordCount <= 0 Then
                            Dim QueryInsertDE As Query = Query.Entity("Document Entry").Insert

                            QueryInsertDE.Fields("Line No_") = r("RowID")

                            QueryInsertDE.Fields("Description") = ""
                            QueryInsertDE.Fields("Logistics No_") = LogisticsNo
                            QueryInsertDE.Fields("Packing List") = DocumentNo_QR

                            QueryInsertDE.Fields("Document No_") = r("Document No_")
                            QueryInsertDE.Fields("Document Type") = 0
                            QueryInsertDE.Fields("Item No_") = r("Item No_")
                            QueryInsertDE.Fields("Variant Code") = ""

                            QueryInsertDE.Fields("Quantity") = r("Quantity")
                            QueryInsertDE.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(r("Unit of Measure"), "")
                            QueryInsertDE.Fields("Qty_ per Unit of Measure") = Code.Library.Library.ISDBNULL(r("Qty_ Unit of Measure"), 0)
                            QueryInsertDE.Fields("Source Code") = r("Source Code")
                            QueryInsertDE.Fields("Responsibility Center") = r("Responsibility Center")
                            QueryInsertDE.Fields("Location Code") = r("Location Code")

                            QueryInsertDE.Fields("QRCode") = dataQR 'IIf(batchSize = 1, dataQR, "")
                            QueryInsertDE.Fields("Attach File") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
                            QueryInsertDE.Fields("Serial No_") = qRLinkL
                            QueryInsertDE.Fields("Status") = 0

                            If r("Lot No_") <> "" Then QueryInsertDE.Fields("Lot No_") = LotNo
                            If r("Lot No_") = "" Then QueryInsertDE.Fields("Lot No_") = dataQRCode
                            QueryInsertDE.Fields("Real Lot No_") = QueryInsertDE.Fields("Lot No_")
                            QueryInsertDE.Fields("Expired Date") = r("Expired Date")
                            QueryInsertDE.Fields("Real Expired Date") = r("Expired Date") 'For SM     

                            QueryInsertDE.Execute()
                        End If


                        NumberLine = NumberLine + 1

                    Catch ex As Exception
                        Query.RollBack()
                        WorkSession.MsgML(ex.ToString)
                        Return
                    End Try
                End If

            Next

            Dim QueryUpdate As Query = Query.Update("QRCode Buffer")
            QueryUpdate.WhereAs("RowID") = r("RowID")
            QueryUpdate.Fields("QRCode") = IIf(batchSize = 1, dataQR, "")
            QueryUpdate.Fields("URL") = IIf(batchSize = 1, "Pictures\" & DataqRLinkL & ".jpg", "")
            QueryUpdate.Fields("Serial No_") = DataqRLinkL
            QueryUpdate.Fields("Status") = 2
            If LotNo <> "" Then QueryUpdate.Fields("Lot No_") = dataQRCode
            QueryUpdate.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub CreateQRCodeAll(ByVal Sender As WXSource, ByVal e As WXArgs)

        Dim r As Hashtable = Sender.CurrentRow
        If r Is Nothing Or r.Count = 0 Then Return

        Dim PostQRCodeEntry As Integer = Framework.ZeroNull(r("Post QRCode Entry"))
        Dim DocumentNo_ As String = r("Document No_")
        Dim batchSize As Integer = r("Number No_")
        If batchSize = 0 Then batchSize = 1
        Dim LotNo As String = r("Lot No_")
        If r("Item No_") = "" Then
            WorkSession.MsgML("Item No_ Not Blank!")
            Return
        End If

        If Not (r("Type") = 0 Or r("Type") = 6) Then
            WorkSession.MsgML("Must by Input from Production Order or Purchasing Process !")
            Return
        End If

        If r("Type") = 6 And Code.Library.Library.ISDBNULL(r("Description"), "") = "" Then
            WorkSession.MsgML("Description Not Blank!")
            Return
        End If

        If Left(r("Mfg Date"), 10) = "" Then
            WorkSession.MsgML("MFG DATE Not Blank!")
            Return
        End If
        If r("Type") = 6 And Right(r("Work Shift No_"), 1) = "" Then
            WorkSession.MsgML("Work Shift Code Not Blank!")
            Return
        End If
        If r("Type") = 6 And r("Work Center") = "" Then
            WorkSession.MsgML("Work Center Not Blank!")
            Return
        End If
        Dim imageQRCode As String = ""


        Dim NumberLine As Integer = 1
        Dim str3 As String = Framework.MapPath("Pictures", "") & "/" & Now.Year & Now.Month
        Dim ProductType As String = Left(r("Description"), 1) ' P is Product, Limit, K this nghiem




        Dim dataQR As String = ""
        Dim dataQRCode As String = ""
        dataQRCode = r("Document No_") & "*" & r("Packing List") & "*" & r("Item No_") & "*" & r("Entry No_")

        Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
        DataqRLinkL = Replace(DataqRLinkL, "/", "-")
        'qRLinkL = Replace(qRLinkL, "'", "''")
        DataqRLinkL = Replace(DataqRLinkL, "*", "-")

        If LotNo = "" Then LotNo = dataQRCode

        Dim ss As Query = Query.From("QRCode").Transaction(True)
        ss.Where("QRCode").Is(dataQRCode)
        'ss.And("Item No_").Is(r("Item No_"))
        'ss.And("Document Type").Is(r("Type"))
        If ss.RecordCount > 0 Then
            WorkSession.MsgML("Already Post QRCode !")
            Return
        End If

        Dim qq As Query = Query.From("QRCode Entry").Transaction(True)
        Dim j As Integer = qq.RecordCount + 1

        Try
            Query.BeginTransaction()

            For i As Integer = 0 To batchSize - 1 ' In tblSource.Rows

                dataQR = dataQRCode & FormatDocumentNumber(batchSize, NumberLine)

                Dim sLevel As String = ""



                Dim qRLinkL = Replace(dataQR, "#", "-")
                qRLinkL = Replace(qRLinkL, "/", "-")
                'qRLinkL = Replace(qRLinkL, "'", "''")
                qRLinkL = Replace(qRLinkL, "*", "-")

                Dim q As Query = Query.From("QRCode").Transaction(True)
                q.Where("Serial No_").Is(qRLinkL)
                'q.And("Item No_").Is(r("Item No_"))
                Dim tblline As DataTable = q.ToTable
                If tblline.Rows.Count = 0 Then


                    Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"



                    qRLinkL = qRLinkL.ToString().Replace(" ", "")
                    qRLinkL = qRLinkL.ToString().Replace(":", "")

                    Dim serverPath As String = str3 + qRLinkL + ".jpg"
                    CreateQRImage(dataQR, serverPath)

                    Try

                        Dim QueryInsert As Query = Query.Entity("QRCode").Insert

                        QueryInsert.Fields("URL") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
                        QueryInsert.Fields("QRCode") = dataQR
                        QueryInsert.Fields("Serial No_") = qRLinkL
                        QueryInsert.Fields("Name") = qRLinkL
                        QueryInsert.Fields("Description") = qRLinkL
                        QueryInsert.Fields("Item No_") = r("Item No_")
                        QueryInsert.Fields("Item Variant") = r("Item Variant")
                        QueryInsert.Fields("Lot No_") = dataQRCode
                        QueryInsert.Fields("Document Type") = r("Type")

                        QueryInsert.Fields("Document No_") = r("Document No_")
                        QueryInsert.Fields("External Document No_") = r("External Document No_")

                        QueryInsert.Fields("Quantity") = r("Quantity") / batchSize
                        QueryInsert.Fields("Unit Of Measure") = r("Unit Of Measure")
                        QueryInsert.Fields("Qty Unit Of Measure") = r("Qty Unit Of Measure")
                        QueryInsert.Fields("Login ID") = Framework.UserID
                        QueryInsert.Fields("System Date") = r("System Date")
                        QueryInsert.Fields("Expired Date") = r("Expired Date")
                        QueryInsert.Fields("Mfg Date") = r("Mfg Date")
                        QueryInsert.Fields("Kit") = IIf(batchSize = 1, 1, 0)
                        QueryInsert.Execute()

                        If PostQRCodeEntry = 1 Then
                            Dim QueryInsertQREntry As Query = Query.Entity("QRCode Entry").Insert
                            QueryInsertQREntry.Fields("QRCode") = dataQR
                            QueryInsertQREntry.Fields("Item No_") = r("Item No_")
                            QueryInsertQREntry.Fields("Lot No_") = dataQRCode 'r("Lot No_")
                            QueryInsertQREntry.Fields("Document No_") = r("Document No_")

                            QueryInsertQREntry.Fields("Document Type") = r("Type")
                            QueryInsertQREntry.Fields("Serial No_") = qRLinkL
                            QueryInsertQREntry.Fields("Description") = r("External Document No_")
                            QueryInsertQREntry.Fields("Variant Code") = r("Item Variant")
                            QueryInsertQREntry.Fields("Manufacturer Code") = r("Work Center")
                            QueryInsertQREntry.Fields("Expiration Date") = CDate(r("Expired Date"))
                            QueryInsertQREntry.Fields("Usage %") = 0
                            QueryInsertQREntry.Fields("Status") = 1
                            QueryInsertQREntry.Fields("Created Date") = Now
                            QueryInsertQREntry.Fields("Quantity") = r("Quantity") / batchSize
                            QueryInsertQREntry.Fields("Begin Quantity") = r("Quantity") / batchSize
                            QueryInsertQREntry.Fields("Unit of Measure Code") = r("Unit Of Measure")
                            QueryInsertQREntry.Fields("Qty_ per Unit of Measure") = r("Qty Unit Of Measure")
                            QueryInsertQREntry.Fields("Source Code") = r("Source Code")
                            QueryInsertQREntry.Fields("Responsibility Center") = r("Responsibility Center")
                            QueryInsertQREntry.Fields("Location Code") = r("Location Code")
                            QueryInsertQREntry.Fields("External Document No_") = r("External Document No_")
                            QueryInsertQREntry.Fields("Production Date") = CDate(r("Mfg Date"))
                            QueryInsertQREntry.Fields("Qty_not Temped") = 0
                            QueryInsertQREntry.Fields("Last Date Checked") = Now
                            QueryInsertQREntry.Fields("Valued Quantity") = r("Quantity") / batchSize
                            QueryInsertQREntry.Fields("Entry No_") = j
                            j = j + 1
                            QueryInsertQREntry.Execute()
                        End If


                        NumberLine = NumberLine + 1

                    Catch ex As Exception
                        Query.RollBack()
                        WorkSession.MsgML(ex.ToString)
                        Return
                    End Try
                End If

            Next

            If PostQRCodeEntry = 1 Then
                Dim QueryUpdate As Query = Query.Delete("QRCode Buffer")
                QueryUpdate.WhereAs("RowID") = r("RowID")
                QueryUpdate.Execute()
            Else
                Dim QueryUpdate As Query = Query.Update("QRCode Buffer")
                QueryUpdate.WhereAs("RowID") = r("RowID")
                'QueryUpdate.Fields("QRCode") = dataQRCode
                QueryUpdate.Fields("Serial No_") = DataqRLinkL
                'QueryUpdate.Fields("URL") = "Pictures\" & DataqRLinkL & ".jpg"
                QueryUpdate.Fields("Lot No_") = dataQRCode
                QueryUpdate.Execute()
            End If


            Query.EndTransaction()
            WorkSession.MsgML("Successful!")
            Sender.RefreshSource()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub POHPackinglistQRCodeScanOpen(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim DocumentNo_QR As String = "QRCodePackinglst" 'Your Reference
        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then Return


        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting Date")
        Dim EndingDate As Date = rOrder("Posting Date")
        Dim StartingDate As Date = rOrder("Posting Date")
        Dim DueDate As Date = rOrder("Posting Date")
        Dim CurrencyCode As String = rOrder("Currency Code")
        Dim CurrencyFactor As Decimal = rOrder("Currency Factor")
        Dim SourceCode As String = rOrder("Source Code")
        Dim ResponsibilityCenter As String = rOrder("Responsibility Center")
        Dim LocationCode As String = rOrder("Location Code")


        Dim DocumentNo As String = rOrder("No_")


        Dim qqq As Query = Query.From("View Packing List")
        qqq.Where("PO No_").Is(DocumentNo)
        'q.And("Document Type").Is(DocType)
        Dim DTSource As DataTable = qqq.ToTable
        Dim TableDocumentEntryHeader As String = "Document Entry Header"
        Dim TableDocumentEntry As String = "Document Entry"
        Try
            Query.BeginTransaction()
            'chua quet ma QRCode

            Dim q As Query = Query.From(TableDocumentEntryHeader).Transaction(True)
            q.Where("No_").Is(DocumentNo)
            q.And("Document Type").Is(0)

            Dim Status As Integer = q.Value("Status")

            If Status = 0 Then
                Dim queryDelete As Query = Query.Delete(TableDocumentEntryHeader)
                queryDelete.Where("No_").Is(DocumentNo)
                queryDelete.And("Document Type").Is(0)
                queryDelete.Execute()

                queryDelete = Query.Delete(TableDocumentEntry)
                queryDelete.Where("Document No_").Is(DocumentNo)
                queryDelete.And("Document Type").Is(0)
                queryDelete.Execute()

                queryDelete = Query.Delete("QRCode Buffer")
                queryDelete.Where("Document No_").Is(DocumentNo)
                queryDelete.And("Type").Is(0)
                queryDelete.Execute()

            End If


            Dim existHeader As Query = Query.From("Document Entry Header").Transaction(True)
            existHeader.Where("No_").Is(DocumentNo_QR)
            existHeader.And("Logistics No_").Is(DocumentNo_QR)
            existHeader.And("Document Type").Is(0)
            If existHeader.RecordCount <= 0 Then
                Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
                InsertDEH.Fields("Logistics No_") = DocumentNo_QR
                InsertDEH.Fields("Document No_") = DocumentNo_QR
                InsertDEH.Fields("No_") = DocumentNo_QR
                InsertDEH.Fields("Document Type") = 0
                InsertDEH.Fields("Packing List") = DocumentNo_QR
                InsertDEH.Fields("Status") = 1
                InsertDEH.Execute()
            End If

            For Each trow As DataRow In DTSource.Rows


                Dim LogisticsNo As String = trow("No_")

                Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert
                insertLine.Fields("Type") = 0
                insertLine.Fields("Document No_") = DocumentNo
                insertLine.Fields("Packing List") = LogisticsNo


                insertLine.Fields("Item No_") = trow("Item No_")
                'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")

                insertLine.Fields("Lot No_") = trow("Lot No_")

                insertLine.Fields("Expired Date") = trow("Posting Date")


                insertLine.Fields("Unit of Measure") = trow("Unit of Measure")
                insertLine.Fields("Qty Unit Of Measure") = trow("Qty_ Unit of Measure")
                insertLine.Fields("Quantity") = trow("Quantity")

                insertLine.Fields("Login ID") = Framework.UserID

                insertLine.Fields("External Document No_") = ExternalDocumentNo
                insertLine.Fields("Your Reference") = DocumentNo_QR
                insertLine.Fields("Source Code") = SourceCode
                insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                insertLine.Fields("Location Code") = rOrder("Location Code")


                insertLine.Fields("Mfg Date") = rOrder("Posting Date")

                insertLine.Fields("Number No_") = 1
                insertLine.Fields("Description") = ExternalDocumentNo

                insertLine.Fields("Post QRCode Entry") = 1
                insertLine.Fields("Status") = 1
                insertLine.Fields("Kit") = IIf(trow("Qty_ Unit of Measure") > 1, 1, 0)
                insertLine.Fields("Parent") = IIf(trow("Qty_ Unit of Measure") > 1, 1, 0)
                insertLine.Fields("Entry No_") = trow("RowID")
                insertLine.Execute()



                '---------------
                Dim insertLineLogis As Query = Query.Entity("Logistics List").Insert
                'insertLine = Query.Entity("Logistics List").Insert
                insertLineLogis.Fields("Document Type") = 0
                insertLineLogis.Fields("Document No_") = DocumentNo_QR
                insertLineLogis.Fields("Your Reference") = DocumentNo
                insertLineLogis.Fields("Logistics No_") = DocumentNo
                insertLineLogis.Fields("Packing List") = LogisticsNo
                insertLineLogis.Fields("Picking No_") = DocumentNo

                insertLineLogis.Fields("No_") = trow("Item No_")
                insertLineLogis.Fields("Item No_") = trow("Item No_")
                insertLineLogis.Fields("Variant Code") = ""
                insertLineLogis.Fields("Lot No_") = trow("Lot No_")
                insertLineLogis.Fields("Real Lot No_") = trow("Lot No_")
                insertLineLogis.Fields("Real Expiration Date") = trow("Posting Date") '] [datetime] NULL,

                insertLineLogis.Fields("Unit of Measure") = trow("Unit of Measure") 'UOM
                insertLineLogis.Fields("Qty_ per Unit of Measure") = trow("Qty_ Unit of Measure")
                insertLineLogis.Fields("Qty_ to Receive") = trow("Quantity")
                insertLineLogis.Fields("Outstanding Quantity") = trow("Quantity")
                insertLineLogis.Fields("Quantity") = trow("Quantity")
                insertLineLogis.Fields("Location Code") = ""
                insertLineLogis.Fields("Description") = LogisticsNo  '] [nvarchar](50) NULL,
                insertLineLogis.Fields("Expiration Date") = trow("Posting Date") '] [datetime] NULL,
                insertLineLogis.Fields("MFG Date") = rOrder("Posting Date")
                insertLineLogis.Fields("Work Center") = ""  ' Dataset.Value("")
                insertLineLogis.Execute()


            Next




            Query.EndTransaction()

            Framework.OpenEntity("QRCode Generation PackingLst", String.Format("[Document No_]=N'{0}' and [Type]=0", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub
    Public Sub PutInTransferOrder(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = sender.CurrentRow
            If r Is Nothing Or r.Count = 0 Then Return
            Query.BeginTransaction()
            Dim No_ As String = r("No_")
            Dim strLineView As String = "select * from [View Transfer Order Line]  where [Document No_]='" & No_ & "'"
            Dim QLineView As Query = Query.Sql(strLineView).Transaction(True)
            Dim tblLineView As New DataTable
            tblLineView = QLineView.ToTable

            Dim No_4 As String = No_ & "NNB"
            Dim No_5 As String = No_ & "XNB"

            Dim QDocHeader As Query = Query.From("Document Entry Header").Transaction(True)
            QDocHeader.WhereAs("No_") = No_4
            If QDocHeader.ToTable.Rows.Count > 0 Then
                WorkSession.MsgML("Đơn hàng này có đã tạo xác nhận")
                Query.RollBack()
                Return
            End If

            For Each trow_C As DataRow In tblLineView.Rows
                'If trow_C("QRCode") = "" Then
                '    WorkSession.MsgML("Đơn hàng này có mã sản phẩm" & trow_C("Item No_") & " chưa có QRCode")
                '    Query.RollBack()
                '    Return
                'End If
                'Dim Q_QRCode As Query = Query.From("QRCode").Transaction(True)
                'Q_QRCode.WhereAs("QRCode") = trow_C("QRCode")
                'If Q_QRCode.ToTable.Rows.Count = 0 Then
                '    WorkSession.MsgML("Mã qrcode này không tồn tại")
                '    Query.RollBack()
                '    Return
                'End If
                'Dim dataQR As String = Q_QRCode.Value("QRCode")
                'Dim URL As String = Q_QRCode.Value("URL")
                'Dim qRLinkL As String = Q_QRCode.Value("Serial No_")
                'Dim QueryInsert As Query = Query.Entity("QRCode").Insert

                'QueryInsert.Fields("URL") = URL
                'QueryInsert.Fields("QRCode") = dataQR
                'QueryInsert.Fields("Serial No_") = qRLinkL
                'QueryInsert.Fields("Name") = qRLinkL
                'QueryInsert.Fields("Description") = qRLinkL
                'QueryInsert.Fields("Item No_") = trow_C("Item No_")
                'QueryInsert.Fields("Item Variant") = ""
                'QueryInsert.Fields("Lot No_") = trow_C("Lot No_") ' IIf(LotNo <> "", LotNo, dataQRCode)
                'QueryInsert.Fields("Document Type") = 4

                'QueryInsert.Fields("Document No_") = No_4
                'QueryInsert.Fields("External Document No_") = ""

                'QueryInsert.Fields("Quantity") = trow_C("Quantity") / 1
                'QueryInsert.Fields("Unit Of Measure") = trow_C("Unit of Measure Code")
                'QueryInsert.Fields("Qty Unit Of Measure") = 1
                'QueryInsert.Fields("Login ID") = Framework.UserID
                'QueryInsert.Fields("System Date") = CDate(Now())
                'QueryInsert.Fields("Expired Date") = CDate(Now())
                'QueryInsert.Fields("Mfg Date") = CDate(Now())
                'QueryInsert.Fields("Kit") = 1
                'QueryInsert.Execute()
                'QueryInsert.Fields("Document Type") = 5

                'QueryInsert.Fields("Document No_") = No_5
                'QueryInsert.Execute()
                '-------
                Dim QueryInsertDE As Query = Query.Entity("Document Entry").Insert

                QueryInsertDE.Fields("Line No_") = trow_C("RowID")

                QueryInsertDE.Fields("Description") = ""
                QueryInsertDE.Fields("Logistics No_") = No_4
                QueryInsertDE.Fields("Packing List") = No_4

                QueryInsertDE.Fields("Document No_") = No_4
                QueryInsertDE.Fields("Document Type") = 4
                QueryInsertDE.Fields("Item No_") = trow_C("Item No_")
                QueryInsertDE.Fields("Variant Code") = ""

                QueryInsertDE.Fields("Quantity") = trow_C("Quantity")
                QueryInsertDE.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(trow_C("Unit of Measure Code"), "")
                QueryInsertDE.Fields("Qty_ per Unit of Measure") = Code.Library.Library.ISDBNULL(trow_C("Qty_ per Unit of Measure"), 0)
                QueryInsertDE.Fields("Source Code") = r("To Source Code")
                QueryInsertDE.Fields("Responsibility Center") = r("To Responsibility Center")
                QueryInsertDE.Fields("Location Code") = ""

                QueryInsertDE.Fields("QRCode") = "" 'IIf(batchSize = 1, dataQR, "")
                QueryInsertDE.Fields("Attach File") = ""
                QueryInsertDE.Fields("Serial No_") = ""
                QueryInsertDE.Fields("Status") = 0

                QueryInsertDE.Fields("Lot No_") = trow_C("Lot No_") '
                QueryInsertDE.Fields("Real Lot No_") = QueryInsertDE.Fields("Lot No_")
                QueryInsertDE.Fields("Expired Date") = CDate(Now())
                QueryInsertDE.Fields("Real Expired Date") = CDate(Now()) 'For SM   
                QueryInsertDE.Execute()

                QueryInsertDE.Fields("Logistics No_") = No_5
                QueryInsertDE.Fields("Packing List") = No_5

                QueryInsertDE.Fields("Document No_") = No_5
                QueryInsertDE.Fields("Document Type") = 5
                QueryInsertDE.Execute()
                '--------
                Dim insertLineLogis As Query = Query.Entity("Logistics List").Insert
                'insertLine = Query.Entity("Logistics List").Insert
                insertLineLogis.Fields("Document Type") = 5
                insertLineLogis.Fields("Document No_") = No_5
                insertLineLogis.Fields("Your Reference") = No_
                insertLineLogis.Fields("Logistics No_") = No_5
                insertLineLogis.Fields("Packing List") = No_5
                insertLineLogis.Fields("Description") = No_5  '] [nvarchar](50) NULL,
                insertLineLogis.Fields("Picking No_") = ""

                insertLineLogis.Fields("No_") = trow_C("Item No_")
                insertLineLogis.Fields("Item No_") = trow_C("Item No_")
                insertLineLogis.Fields("Variant Code") = ""
                insertLineLogis.Fields("Lot No_") = trow_C("Lot No_")
                insertLineLogis.Fields("Real Lot No_") = trow_C("Lot No_")
                insertLineLogis.Fields("Real Expiration Date") = r("Posting Date") '] [datetime] NULL,

                insertLineLogis.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(trow_C("Unit of Measure Code"), "")
                insertLineLogis.Fields("Qty_ per Unit of Measure") = Code.Library.Library.ISDBNULL(trow_C("Qty_ per Unit of Measure"), 0)
                insertLineLogis.Fields("Qty_ to Receive") = trow_C("Quantity")
                insertLineLogis.Fields("Outstanding Quantity") = trow_C("Quantity")
                insertLineLogis.Fields("Quantity") = trow_C("Quantity")
                insertLineLogis.Fields("Location Code") = ""

                insertLineLogis.Fields("Expiration Date") = r("Posting Date") '] [datetime] NULL,
                insertLineLogis.Fields("MFG Date") = r("Posting Date")
                insertLineLogis.Fields("Work Center") = ""  ' Dataset.Value("")
                insertLineLogis.Execute()


                insertLineLogis.Fields("Document Type") = 4
                insertLineLogis.Fields("Document No_") = No_4
                insertLineLogis.Fields("Your Reference") = No_
                insertLineLogis.Fields("Logistics No_") = No_4
                insertLineLogis.Fields("Packing List") = No_4
                insertLineLogis.Fields("Description") = No_4  '] [nvarchar](50) NULL,
                insertLineLogis.Execute()

                Dim QInsertTransferLine As Query = Query.Entity("Transfer Order Line").Insert
                For Each tcol As DataColumn In tblLineView.Columns
                    Dim colName As String = tcol.ColumnName
                    If tcol.ColumnName <> "RowID" Then
                        QInsertTransferLine.Fields(colName) = trow_C(colName)
                    End If
                Next

                QInsertTransferLine.Execute()
            Next

            Dim QInsertTransferHeader As Query = Query.Entity("Transfer Order").Insert
            For Each key As Object In r.Keys
                Dim value As Object = r(key)
                If key <> "RowID" And key <> "Doc Entry" Then
                    QInsertTransferHeader.Fields(key) = value
                End If

            Next
            QInsertTransferHeader.Execute()
            Dim existHeader As Query = Query.From("Document Entry Header").Transaction(True)
            existHeader.Where("No_").Is(No_4)
            existHeader.And("Logistics No_").Is(No_4)
            existHeader.And("Document Type").Is(4)
            If existHeader.RecordCount <= 0 Then
                Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
                InsertDEH.Fields("Logistics No_") = No_4
                InsertDEH.Fields("Document No_") = No_4
                InsertDEH.Fields("Reference No_") = No_
                InsertDEH.Fields("No_") = No_4
                InsertDEH.Fields("Document Type") = 4
                InsertDEH.Fields("Packing List") = No_4
                InsertDEH.Fields("Status") = 1
                InsertDEH.Execute()
            End If

            Dim existHeader5 As Query = Query.From("Document Entry Header").Transaction(True)
            existHeader5.Where("No_").Is(No_5)
            existHeader5.And("Logistics No_").Is(No_5)
            existHeader5.And("Document Type").Is(5)
            If existHeader.RecordCount <= 0 Then
                Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
                InsertDEH.Fields("Logistics No_") = No_5
                InsertDEH.Fields("Document No_") = No_5
                InsertDEH.Fields("Reference No_") = No_
                InsertDEH.Fields("No_") = No_5
                InsertDEH.Fields("Document Type") = 5
                InsertDEH.Fields("Packing List") = No_5
                InsertDEH.Fields("Status") = 1
                InsertDEH.Execute()
            End If


            Query.EndTransaction()
            sender.RefreshSource()
            WorkSession.MsgML("Thành Công!")
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    ''' <summary>
    ''' QRCode
    ''' Document Entry 
    ''' Logistics List
    ''' Document Entry Header
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Public Sub PutinlXSD(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim rOrder As Hashtable = sender.CurrentRow
            If rOrder Is Nothing Or rOrder.Count = 0 Then Return

            Dim dataQRCode As String = ""
            Dim DocNo_ As String = rOrder("No_")
            dataQRCode = rOrder("Sales Order No_") & "-" & rOrder("Item No_") & "-" & rOrder("No_") & "-" & rOrder("Line No_")
            Dim ItemNo_ As String = dataQRCode

            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(DocNo_)
            ss.And("QRCode").Is(dataQRCode)
            If ss.RecordCount > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If
            Dim TableDocumentEntryHeader As String = "Document Entry Header"
            Dim TableDocumentEntry As String = "Document Entry"
            Query.BeginTransaction()
            Dim LogisticsNo As String
            LogisticsNo = GetandUpdateSeriesNumber("WOOverhead", "", "", "", "", "")
            Dim imageQRCode As String = ""
            Dim str3 As String = Framework.MapPath("Pictures", "") & "/" & Now.Year & Now.Month & "/"
            If (Not System.IO.Directory.Exists(str3)) Then
                System.IO.Directory.CreateDirectory(str3)
            End If
            Dim dataQR As String = ""
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            dataQR = dataQRCode
            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")

            Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
            Dim iIconSize As Integer = 4
            Dim iQRWidth As Integer = 70
            Dim iQRHeight As Integer = 70

            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")
            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            'CreateQRImage(dataQR, serverPath)
            imageQRCode = str3 & "" & qRLinkL & ".jpg"

            Dim QRCodeItem As Query = Query.From("QRCode").Transaction(True)
            QRCodeItem.WhereAs("Document Type") = 0
            QRCodeItem.WhereAs("Item No_") = rOrder("Item No_")
            dataQR = QRCodeItem.Value("QRCode")

            Dim exist As Query = Query.From("Document Entry").Transaction(True)
            exist.Where("Document No_").Is(DocNo_)
            exist.And("Line No_").Is(rOrder("Line No_"))

            exist.And("Item No_").Is(rOrder("Item No_"))
            exist.And("Document Type").Is(7)

            If exist.RecordCount <= 0 Then
                Dim QueryInsertDE As Query = Query.Entity("Document Entry").Insert

                QueryInsertDE.Fields("Line No_") = rOrder("Line No_")

                QueryInsertDE.Fields("Description") = ""
                QueryInsertDE.Fields("Logistics No_") = DocNo_
                QueryInsertDE.Fields("Packing List") = rOrder("Line No_")

                QueryInsertDE.Fields("Document No_") = DocNo_
                QueryInsertDE.Fields("Document Type") = 7
                QueryInsertDE.Fields("Item No_") = rOrder("Item No_")
                QueryInsertDE.Fields("Variant Code") = ""

                QueryInsertDE.Fields("Quantity") = rOrder("Quantity")
                QueryInsertDE.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
                QueryInsertDE.Fields("Qty_ per Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Qty per Unit of Measure"), "")
                QueryInsertDE.Fields("Source Code") = ""
                QueryInsertDE.Fields("Responsibility Center") = ""
                QueryInsertDE.Fields("Location Code") = ""

                QueryInsertDE.Fields("QRCode") = dataQR 'IIf(batchSize = 1, dataQR, "")
                QueryInsertDE.Fields("Attach File") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
                QueryInsertDE.Fields("Serial No_") = qRLinkL
                QueryInsertDE.Fields("Status") = 0
                QueryInsertDE.Fields("Lot No_") = ""
                QueryInsertDE.Fields("Real Lot No_") = ""
                QueryInsertDE.Fields("Expired Date") = CDate(Now())
                QueryInsertDE.Fields("Real Expired Date") = CDate(Now()) 'For SM     
                QueryInsertDE.Execute()


            End If

            '--------
            Dim insertLineLogis As Query = Query.Entity("Logistics List").Insert
            'insertLine = Query.Entity("Logistics List").Insert
            insertLineLogis.Fields("Document Type") = 7
            insertLineLogis.Fields("Document No_") = DocNo_
            insertLineLogis.Fields("Your Reference") = DocNo_
            insertLineLogis.Fields("Logistics No_") = DocNo_
            insertLineLogis.Fields("Packing List") = rOrder("Line No_")
            insertLineLogis.Fields("Description") = ""  '] [nvarchar](50) NULL,
            insertLineLogis.Fields("Picking No_") = ""

            insertLineLogis.Fields("No_") = DocNo_
            insertLineLogis.Fields("Item No_") = rOrder("Item No_")
            insertLineLogis.Fields("Variant Code") = ""
            insertLineLogis.Fields("Lot No_") = ""
            insertLineLogis.Fields("Real Lot No_") = ""
            insertLineLogis.Fields("Real Expiration Date") = CDate(Now()) '] [datetime] NULL,

            insertLineLogis.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
            insertLineLogis.Fields("Qty_ per Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Qty per Unit of Measure"), "")
            insertLineLogis.Fields("Qty_ to Receive") = rOrder("Quantity")
            insertLineLogis.Fields("Outstanding Quantity") = rOrder("Quantity")
            insertLineLogis.Fields("Quantity") = rOrder("Quantity")
            insertLineLogis.Fields("Location Code") = ""

            insertLineLogis.Fields("Expiration Date") = CDate(Now())  '] [datetime] NULL,
            insertLineLogis.Fields("MFG Date") = CDate(Now())
            insertLineLogis.Fields("Work Center") = ""  ' Dataset.Value("")
            insertLineLogis.Execute()



            Dim existHeader As Query = Query.From("Document Entry Header").Transaction(True)
            existHeader.Where("No_").Is(DocNo_)

            existHeader.And("Document Type").Is(7)
            If existHeader.RecordCount <= 0 Then
                Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
                InsertDEH.Fields("Logistics No_") = DocNo_
                InsertDEH.Fields("Document No_") = DocNo_
                InsertDEH.Fields("Reference No_") = DocNo_
                InsertDEH.Fields("No_") = DocNo_
                InsertDEH.Fields("Document Type") = 7
                InsertDEH.Fields("Packing List") = DocNo_
                InsertDEH.Fields("Status") = 1
                InsertDEH.Execute()
            End If




            Dim QInsertPackinglst As Query = Query.Insert("Packing List XSD")
            For Each key As Object In rOrder.Keys
                Dim value As Object = rOrder(key)
                If key <> "RowID" And key <> "Doc Entry" Then
                    QInsertPackinglst.Fields(key) = value
                End If
                QInsertPackinglst.Fields("QRCode") = dataQR.Trim

            Next
            QInsertPackinglst.Execute()

            Query.EndTransaction()
            WorkSession.MsgML("Thành công!")
            sender.RefreshSource()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub



    Public Sub PutinlXSD_ALL(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim FFLenhXuatSuDung As String = sender.GetParameter("FFLenhXuatSuDung")
        If FFLenhXuatSuDung = "" Then
            WorkSession.MsgML("Xin vui long chọn lệnh xuất sử dụng!")
            Return
        End If
        Dim tbl_Order As New DataTable
        Dim QPackingList As Query = Query.From("View ChiTietLenhXuatHang").Transaction(True)
        QPackingList.WhereAs("No_") = FFLenhXuatSuDung
        tbl_Order = QPackingList.ToTable
        If tbl_Order Is Nothing Or tbl_Order.Rows.Count = 0 Then Return


        If tbl_Order Is Nothing Or tbl_Order.Rows.Count = 0 Then Return
        Dim TableDocumentEntryHeader As String = "Document Entry Header"
        Dim TableDocumentEntry As String = "Document Entry"
        Try
            Dim str3 As String = Framework.MapPath("Pictures", "") & "/" & Now.Year & Now.Month & "/"
            If (Not System.IO.Directory.Exists(str3)) Then
                System.IO.Directory.CreateDirectory(str3)
            End If

            Query.BeginTransaction()
            For Each rOrder As DataRow In tbl_Order.Rows
                Dim dataQRCode As String = ""
                Dim DocNo_ As String = rOrder("No_")
                dataQRCode = rOrder("Sales Order No_") & "-" & rOrder("Item No_") & "-" & rOrder("No_") & "-" & rOrder("Line No_")
                Dim ItemNo_ As String = dataQRCode
                Dim ss As Query = Query.From("QRCode").Transaction(True)
                ss.Where("Document No_").Is(DocNo_)
                ss.And("QRCode").Is(dataQRCode)
                If ss.RecordCount > 0 Then
                    WorkSession.MsgML("Mã: " & dataQRCode & " đã tạo qrcode!")
                    Continue For

                End If

                Dim imageQRCode As String = ""

                Dim dataQR As String = ""
                Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
                DataqRLinkL = Replace(DataqRLinkL, "/", "-")
                DataqRLinkL = Replace(DataqRLinkL, "*", "-")
                dataQR = dataQRCode
                Dim qRLinkL = Replace(dataQR, "#", "-")
                qRLinkL = Replace(qRLinkL, "/", "-")
                'qRLinkL = Replace(qRLinkL, "'", "''")
                qRLinkL = Replace(qRLinkL, "*", "-")
                Dim QRCodeItem As Query = Query.From("QRCode").Transaction(True)
                QRCodeItem.WhereAs("Document Type") = 0
                QRCodeItem.WhereAs("Item No_") = rOrder("Item No_")
                dataQR = QRCodeItem.Value("QRCode")
                Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
                Dim iIconSize As Integer = 4
                Dim iQRWidth As Integer = 70
                Dim iQRHeight As Integer = 70

                qRLinkL = qRLinkL.ToString().Replace(" ", "")
                qRLinkL = qRLinkL.ToString().Replace(":", "")
                Dim serverPath As String = str3 + qRLinkL + ".jpg"
                'CreateQRImage(dataQR, serverPath)
                imageQRCode = str3 & "" & qRLinkL & ".jpg"


                Dim exist As Query = Query.From("Document Entry").Transaction(True)
                exist.Where("Document No_").Is(DocNo_)
                exist.And("Line No_").Is(rOrder("Line No_"))

                exist.And("Item No_").Is(rOrder("Item No_"))
                exist.And("Document Type").Is(7)

                If exist.RecordCount <= 0 Then
                    Dim QueryInsertDE As Query = Query.Entity("Document Entry").Insert

                    QueryInsertDE.Fields("Line No_") = rOrder("Line No_")

                    QueryInsertDE.Fields("Description") = ""
                    QueryInsertDE.Fields("Logistics No_") = DocNo_
                    QueryInsertDE.Fields("Packing List") = rOrder("Line No_")

                    QueryInsertDE.Fields("Document No_") = DocNo_
                    QueryInsertDE.Fields("Document Type") = 7
                    QueryInsertDE.Fields("Item No_") = rOrder("Item No_")
                    QueryInsertDE.Fields("Variant Code") = ""

                    QueryInsertDE.Fields("Quantity") = rOrder("Quantity")
                    QueryInsertDE.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
                    QueryInsertDE.Fields("Qty_ per Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Qty_ per Unit of Measure"), "")
                    QueryInsertDE.Fields("Source Code") = ""
                    QueryInsertDE.Fields("Responsibility Center") = ""
                    QueryInsertDE.Fields("Location Code") = ""

                    QueryInsertDE.Fields("QRCode") = dataQR 'IIf(batchSize = 1, dataQR, "")
                    QueryInsertDE.Fields("Attach File") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
                    QueryInsertDE.Fields("Serial No_") = qRLinkL
                    QueryInsertDE.Fields("Status") = 0
                    QueryInsertDE.Fields("Lot No_") = ""
                    QueryInsertDE.Fields("Real Lot No_") = ""
                    QueryInsertDE.Fields("Expired Date") = CDate(Now())
                    QueryInsertDE.Fields("Real Expired Date") = CDate(Now()) 'For SM     
                    QueryInsertDE.Execute()


                End If

                '--------
                Dim insertLineLogis As Query = Query.Entity("Logistics List").Insert
                'insertLine = Query.Entity("Logistics List").Insert
                insertLineLogis.Fields("Document Type") = 7
                insertLineLogis.Fields("Document No_") = DocNo_
                insertLineLogis.Fields("Your Reference") = DocNo_
                insertLineLogis.Fields("Logistics No_") = DocNo_
                insertLineLogis.Fields("Packing List") = rOrder("Line No_")
                insertLineLogis.Fields("Description") = ""  '] [nvarchar](50) NULL,
                insertLineLogis.Fields("Picking No_") = ""

                insertLineLogis.Fields("No_") = DocNo_
                insertLineLogis.Fields("Item No_") = rOrder("Item No_")
                insertLineLogis.Fields("Variant Code") = ""
                insertLineLogis.Fields("Lot No_") = ""
                insertLineLogis.Fields("Real Lot No_") = ""
                insertLineLogis.Fields("Real Expiration Date") = CDate(Now()) '] [datetime] NULL,

                insertLineLogis.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
                insertLineLogis.Fields("Qty_ per Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Qty_ per Unit of Measure"), "")
                insertLineLogis.Fields("Qty_ to Receive") = rOrder("Quantity")
                insertLineLogis.Fields("Outstanding Quantity") = rOrder("Quantity")
                insertLineLogis.Fields("Quantity") = rOrder("Quantity")
                insertLineLogis.Fields("Location Code") = ""

                insertLineLogis.Fields("Expiration Date") = CDate(Now())  '] [datetime] NULL,
                insertLineLogis.Fields("MFG Date") = CDate(Now())
                insertLineLogis.Fields("Work Center") = ""  ' Dataset.Value("")
                insertLineLogis.Execute()



                Dim QInsertPackinglst As Query = Query.Insert("Packing List XSD")
                If tbl_Order.Columns.Count > 0 Then
                    For Each tcol As DataColumn In tbl_Order.Columns
                        If tcol.ColumnName <> "RowID" And tcol.ColumnName <> "Doc Entry" Then
                            QInsertPackinglst.Fields(tcol.ColumnName) = rOrder(tcol.ColumnName)
                        End If

                    Next
                    QInsertPackinglst.Fields("QRCode") = dataQR.Trim
                    QInsertPackinglst.Execute()
                End If

            Next


            Dim existHeader As Query = Query.From("Document Entry Header").Transaction(True)
            existHeader.Where("No_").Is(FFLenhXuatSuDung)

            existHeader.And("Document Type").Is(7)
            If existHeader.RecordCount <= 0 Then
                Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
                InsertDEH.Fields("Logistics No_") = FFLenhXuatSuDung
                InsertDEH.Fields("Document No_") = FFLenhXuatSuDung
                InsertDEH.Fields("Reference No_") = FFLenhXuatSuDung
                InsertDEH.Fields("No_") = FFLenhXuatSuDung
                InsertDEH.Fields("Document Type") = 7
                InsertDEH.Fields("Packing List") = FFLenhXuatSuDung
                InsertDEH.Fields("Status") = 1
                InsertDEH.Execute()
            End If

            Query.EndTransaction()
            WorkSession.MsgML("Thành công!")
            sender.RefreshSource()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try

    End Sub

    ''' <summary>
    ''' QRCode
    ''' Document Entry 
    ''' Logistics List
    ''' Document Entry Header
    ''' </summary>
    ''' <param name="sender"></param>
    ''' <param name="e"></param>
    Public Sub PutinlXHTP(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim rOrder As Hashtable = sender.CurrentRow
            If rOrder Is Nothing Or rOrder.Count = 0 Then Return

            Dim dataQRCode As String = ""
            Dim DocNo_ As String = rOrder("No_")
            dataQRCode = rOrder("Sales Order No_") & "-" & rOrder("Carton No_")
            Dim ItemNo_ As String = dataQRCode

            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(DocNo_)
            ss.And("QRCode").Is(dataQRCode)
            If ss.RecordCount > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If
            Dim TableDocumentEntryHeader As String = "Document Entry Header"
            Dim TableDocumentEntry As String = "Document Entry"
            Query.BeginTransaction()

            Dim imageQRCode As String = ""
            Dim str3 As String = Framework.MapPath("Pictures", "") & "/" & Now.Year & Now.Month & "/"
            If (Not System.IO.Directory.Exists(str3)) Then
                System.IO.Directory.CreateDirectory(str3)
            End If
            Dim dataQR As String = ""
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            dataQR = dataQRCode
            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")

            Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
            Dim iIconSize As Integer = 4
            Dim iQRWidth As Integer = 70
            Dim iQRHeight As Integer = 70

            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")
            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath)
            imageQRCode = str3 & "" & qRLinkL & ".jpg"
            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = ItemNo_
            QueryInsert.Fields("Item Variant") = ""
            QueryInsert.Fields("Lot No_") = "" ' IIf(LotNo <> "", LotNo, dataQRCode)
            QueryInsert.Fields("Document Type") = 6

            QueryInsert.Fields("Document No_") = rOrder("No_")
            QueryInsert.Fields("External Document No_") = ""

            QueryInsert.Fields("Quantity") = rOrder("Quantity") / 1
            QueryInsert.Fields("Unit Of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
            QueryInsert.Fields("Qty Unit Of Measure") = 1
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = CDate(Now())
            QueryInsert.Fields("Expired Date") = CDate(Now())
            QueryInsert.Fields("Mfg Date") = CDate(Now())
            QueryInsert.Fields("Kit") = 1

            QueryInsert.Execute()
            ' rOrder("Sales Order No_") & "*" & rOrder("Carton No_")

            Dim exist As Query = Query.From("Document Entry").Transaction(True)
            exist.Where("Document No_").Is(DocNo_)


            exist.And("Item No_").Is(ItemNo_)
            exist.And("Document Type").Is(6)

            If exist.RecordCount <= 0 Then
                Dim QueryInsertDE As Query = Query.Entity("Document Entry").Insert

                QueryInsertDE.Fields("Line No_") = rOrder("Line No_")

                QueryInsertDE.Fields("Description") = ""
                QueryInsertDE.Fields("Logistics No_") = DocNo_
                QueryInsertDE.Fields("Packing List") = DocNo_

                QueryInsertDE.Fields("Document No_") = DocNo_
                QueryInsertDE.Fields("Document Type") = 6
                QueryInsertDE.Fields("Item No_") = ItemNo_
                QueryInsertDE.Fields("Variant Code") = ""

                QueryInsertDE.Fields("Quantity") = rOrder("Quantity")
                QueryInsertDE.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
                QueryInsertDE.Fields("Qty_ per Unit of Measure") = 1
                QueryInsertDE.Fields("Source Code") = ""
                QueryInsertDE.Fields("Responsibility Center") = ""
                QueryInsertDE.Fields("Location Code") = ""

                QueryInsertDE.Fields("QRCode") = dataQR 'IIf(batchSize = 1, dataQR, "")
                QueryInsertDE.Fields("Attach File") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
                QueryInsertDE.Fields("Serial No_") = qRLinkL
                QueryInsertDE.Fields("Status") = 0
                QueryInsertDE.Fields("Lot No_") = ""
                QueryInsertDE.Fields("Real Lot No_") = ""
                QueryInsertDE.Fields("Expired Date") = CDate(Now())
                QueryInsertDE.Fields("Real Expired Date") = CDate(Now()) 'For SM     

                If rOrder.Contains("CBM") Then
                    QueryInsertDE.Fields("CBM") = Code.Library.Library.ISDBNULL(rOrder("CBM"), 0)
                End If
                If rOrder.Contains("Weight") Then
                    QueryInsertDE.Fields("Weight") = Code.Library.Library.ISDBNULL(rOrder("Weight"), 0)
                End If

                QueryInsertDE.Execute()

                QueryInsertDE.Fields("Logistics No_") = ""
                QueryInsertDE.Fields("Packing List") = DocNo_ & "XB"

                QueryInsertDE.Fields("Document No_") = DocNo_ & "XB"
                QueryInsertDE.Fields("Document Type") = 1
                QueryInsertDE.Execute()
            End If

            '--------
            Dim insertLineLogis As Query = Query.Entity("Logistics List").Insert
            'insertLine = Query.Entity("Logistics List").Insert
            insertLineLogis.Fields("Document Type") = 6
            insertLineLogis.Fields("Document No_") = DocNo_
            insertLineLogis.Fields("Your Reference") = DocNo_
            insertLineLogis.Fields("Logistics No_") = DocNo_
            insertLineLogis.Fields("Packing List") = DocNo_
            insertLineLogis.Fields("Description") = ""  '] [nvarchar](50) NULL,
            insertLineLogis.Fields("Picking No_") = ""

            insertLineLogis.Fields("No_") = DocNo_
            insertLineLogis.Fields("Item No_") = ItemNo_
            insertLineLogis.Fields("Variant Code") = ""
            insertLineLogis.Fields("Lot No_") = ""
            insertLineLogis.Fields("Real Lot No_") = ""
            insertLineLogis.Fields("Real Expiration Date") = CDate(Now()) '] [datetime] NULL,

            insertLineLogis.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
            insertLineLogis.Fields("Qty_ per Unit of Measure") = 1
            insertLineLogis.Fields("Qty_ to Receive") = rOrder("Quantity")
            insertLineLogis.Fields("Outstanding Quantity") = rOrder("Quantity")
            insertLineLogis.Fields("Quantity") = rOrder("Quantity")
            insertLineLogis.Fields("Location Code") = ""

            insertLineLogis.Fields("Expiration Date") = CDate(Now())  '] [datetime] NULL,
            insertLineLogis.Fields("MFG Date") = CDate(Now())
            insertLineLogis.Fields("Work Center") = ""  ' Dataset.Value("")
            insertLineLogis.Execute()

            insertLineLogis.Fields("Document Type") = 1
            insertLineLogis.Fields("Document No_") = DocNo_ & "XB"
            insertLineLogis.Fields("Your Reference") = DocNo_ & "XB"
            insertLineLogis.Fields("Logistics No_") = ""
            insertLineLogis.Fields("Packing List") = DocNo_ & "XB"
            insertLineLogis.Execute()

            Dim existHeader As Query = Query.From("Document Entry Header").Transaction(True)
            existHeader.Where("No_").Is(DocNo_)
            'existHeader.And("Logistics No_").Is(LogisticsNo)
            existHeader.And("Document Type").Is(6)
            If existHeader.RecordCount <= 0 Then
                Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
                InsertDEH.Fields("Logistics No_") = DocNo_
                InsertDEH.Fields("Document No_") = DocNo_
                InsertDEH.Fields("Reference No_") = DocNo_
                InsertDEH.Fields("No_") = DocNo_
                InsertDEH.Fields("Document Type") = 6
                InsertDEH.Fields("Packing List") = DocNo_
                InsertDEH.Fields("Status") = 1
                InsertDEH.Execute()

                InsertDEH.Fields("Logistics No_") = ""
                InsertDEH.Fields("Document No_") = DocNo_ & ".XB"
                InsertDEH.Fields("Reference No_") = DocNo_
                InsertDEH.Fields("No_") = DocNo_ & ".XB"

                InsertDEH.Fields("Packing List") = DocNo_
                InsertDEH.Fields("Document Type") = 1
                InsertDEH.Execute()
            End If
            Dim QInsertPackinglst As Query = Query.Insert("Packing List XTP")
            For Each key As Object In rOrder.Keys
                Dim value As Object = rOrder(key)
                If key <> "RowID" And key <> "Doc Entry" Then
                    QInsertPackinglst.Fields(key) = value
                End If
                QInsertPackinglst.Fields("QRCode") = dataQR.Trim()

            Next
            QInsertPackinglst.Execute()
            Query.EndTransaction()
            WorkSession.MsgML("Thành công!")
            sender.RefreshSource()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    '<ThreadingWorker()>
    Public Sub PutinlXHTP_ALL(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim DocNo As String = sender.GetParameter("DocNo")
            If DocNo = "" Then
                WorkSession.MsgML("Xin vui lòng chọn lệnh xuất thành phẩm")
                Return
            End If
            Dim tbl_Order As New DataTable
            tbl_Order = sender.DataSource
            If tbl_Order Is Nothing Or tbl_Order.Rows.Count = 0 Then Return
            Dim TableDocumentEntryHeader As String = "Document Entry Header"
            Dim TableDocumentEntry As String = "Document Entry"



            Query.BeginTransaction()

            Dim str3 As String = Framework.MapPath("Pictures", "") & "/" & Now.Year & Now.Month & "/"
            If (Not System.IO.Directory.Exists(str3)) Then
                System.IO.Directory.CreateDirectory(str3)
            End If

            Dim CountRow As Integer = 0
            For Each rOrder As DataRow In tbl_Order.Rows


                Dim dataQRCode As String = ""
                Dim DocNo_ As String = rOrder("No_")
                dataQRCode = rOrder("Sales Order No_") & "-" & rOrder("Carton No_")
                Dim ItemNo_ As String = dataQRCode

                Dim ss As Query = Query.From("QRCode").Transaction(True)
                ss.Where("Document No_").Is(DocNo_)
                ss.And("QRCode").Is(dataQRCode)
                If ss.RecordCount > 0 Then
                    WorkSession.MsgML("Mã !" & rOrder("Sales Order No_") & "-" & rOrder("Carton No_") & " đã tạo QRCode!")
                    Continue For
                End If

                'Dim LogisticsNo As String
                'LogisticsNo = GetandUpdateSeriesNumber("Production Order", "", "", "", "", "")
                Dim imageQRCode As String = ""

                Dim dataQR As String = ""
                Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
                DataqRLinkL = Replace(DataqRLinkL, "/", "-")
                DataqRLinkL = Replace(DataqRLinkL, "*", "-")
                dataQR = dataQRCode
                Dim qRLinkL = Replace(dataQR, "#", "-")
                qRLinkL = Replace(qRLinkL, "/", "-")
                'qRLinkL = Replace(qRLinkL, "'", "''")
                qRLinkL = Replace(qRLinkL, "*", "-")

                Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
                Dim iIconSize As Integer = 4
                Dim iQRWidth As Integer = 70
                Dim iQRHeight As Integer = 70

                qRLinkL = qRLinkL.ToString().Replace(" ", "")
                qRLinkL = qRLinkL.ToString().Replace(":", "")
                Dim serverPath As String = str3 + qRLinkL + ".jpg"
                CreateQRImage(dataQR, serverPath)
                imageQRCode = str3 & "" & qRLinkL & ".jpg"
                Dim QueryInsert As Query = Query.Entity("QRCode").Insert

                QueryInsert.Fields("URL") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
                QueryInsert.Fields("QRCode") = dataQR
                QueryInsert.Fields("Serial No_") = qRLinkL
                QueryInsert.Fields("Name") = qRLinkL
                QueryInsert.Fields("Description") = qRLinkL
                QueryInsert.Fields("Item No_") = ItemNo_
                QueryInsert.Fields("Item Variant") = ""
                QueryInsert.Fields("Lot No_") = "" ' IIf(LotNo <> "", LotNo, dataQRCode)
                QueryInsert.Fields("Document Type") = 6

                QueryInsert.Fields("Document No_") = rOrder("No_")
                QueryInsert.Fields("External Document No_") = ""

                QueryInsert.Fields("Quantity") = rOrder("Quantity") / 1
                QueryInsert.Fields("Unit Of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
                QueryInsert.Fields("Qty Unit Of Measure") = 1
                QueryInsert.Fields("Login ID") = Framework.UserID
                QueryInsert.Fields("System Date") = CDate(Now())
                QueryInsert.Fields("Expired Date") = CDate(Now())
                QueryInsert.Fields("Mfg Date") = CDate(Now())
                QueryInsert.Fields("Kit") = 1

                QueryInsert.Execute()
                ' rOrder("Sales Order No_") & "*" & rOrder("Carton No_")

                Dim exist As Query = Query.From("Document Entry").Transaction(True)
                exist.Where("Document No_").Is(DocNo_)


                exist.And("Item No_").Is(ItemNo_)
                exist.And("Document Type").Is(6)

                If exist.RecordCount <= 0 Then
                    Dim QueryInsertDE As Query = Query.Entity("Document Entry").Insert

                    QueryInsertDE.Fields("Line No_") = rOrder("Line No_")

                    QueryInsertDE.Fields("Description") = ""
                    QueryInsertDE.Fields("Logistics No_") = DocNo_
                    QueryInsertDE.Fields("Packing List") = DocNo_

                    QueryInsertDE.Fields("Document No_") = DocNo_
                    QueryInsertDE.Fields("Document Type") = 6
                    QueryInsertDE.Fields("Item No_") = ItemNo_
                    QueryInsertDE.Fields("Variant Code") = ""

                    QueryInsertDE.Fields("Quantity") = rOrder("Quantity")
                    QueryInsertDE.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
                    QueryInsertDE.Fields("Qty_ per Unit of Measure") = 1
                    QueryInsertDE.Fields("Source Code") = ""
                    QueryInsertDE.Fields("Responsibility Center") = ""
                    QueryInsertDE.Fields("Location Code") = ""

                    QueryInsertDE.Fields("QRCode") = dataQR 'IIf(batchSize = 1, dataQR, "")
                    QueryInsertDE.Fields("Attach File") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
                    QueryInsertDE.Fields("Serial No_") = qRLinkL
                    QueryInsertDE.Fields("Status") = 0
                    QueryInsertDE.Fields("Lot No_") = ""
                    QueryInsertDE.Fields("Real Lot No_") = ""
                    QueryInsertDE.Fields("Expired Date") = CDate(Now())
                    QueryInsertDE.Fields("Real Expired Date") = CDate(Now()) 'For SM     

                    If tbl_Order.Columns.Contains("CBM") Then
                        QueryInsertDE.Fields("CBM") = Code.Library.Library.ISDBNULL(rOrder("CBM"), 0)
                    End If
                    If tbl_Order.Columns.Contains("Weight") Then
                        QueryInsertDE.Fields("Weight") = Code.Library.Library.ISDBNULL(rOrder("Weight"), 0)
                    End If

                    QueryInsertDE.Execute()

                    QueryInsertDE.Fields("Logistics No_") = DocNo_ & "XB"
                    QueryInsertDE.Fields("Packing List") = DocNo_ & "XB"

                    QueryInsertDE.Fields("Document No_") = DocNo_ & ".XB"
                    QueryInsertDE.Fields("Document Type") = 1
                    QueryInsertDE.Execute()
                End If

                '--------
                Dim insertLineLogis As Query = Query.Entity("Logistics List").Insert
                'insertLine = Query.Entity("Logistics List").Insert
                insertLineLogis.Fields("Document Type") = 6
                insertLineLogis.Fields("Document No_") = DocNo_
                insertLineLogis.Fields("Your Reference") = DocNo_
                insertLineLogis.Fields("Logistics No_") = DocNo_
                insertLineLogis.Fields("Packing List") = DocNo_
                insertLineLogis.Fields("Description") = ""  '] [nvarchar](50) NULL,
                insertLineLogis.Fields("Picking No_") = ""

                insertLineLogis.Fields("No_") = DocNo_
                insertLineLogis.Fields("Item No_") = ItemNo_
                insertLineLogis.Fields("Variant Code") = ""
                insertLineLogis.Fields("Lot No_") = ""
                insertLineLogis.Fields("Real Lot No_") = ""
                insertLineLogis.Fields("Real Expiration Date") = CDate(Now()) '] [datetime] NULL,

                insertLineLogis.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
                insertLineLogis.Fields("Qty_ per Unit of Measure") = 1
                insertLineLogis.Fields("Qty_ to Receive") = rOrder("Quantity")
                insertLineLogis.Fields("Outstanding Quantity") = rOrder("Quantity")
                insertLineLogis.Fields("Quantity") = rOrder("Quantity")
                insertLineLogis.Fields("Location Code") = ""

                insertLineLogis.Fields("Expiration Date") = CDate(Now())  '] [datetime] NULL,
                insertLineLogis.Fields("MFG Date") = CDate(Now())
                insertLineLogis.Fields("Work Center") = ""  ' Dataset.Value("")
                insertLineLogis.Execute()

                insertLineLogis.Fields("Document Type") = 1
                insertLineLogis.Fields("Document No_") = DocNo_ & ".XB"
                insertLineLogis.Fields("Your Reference") = DocNo_
                insertLineLogis.Fields("Logistics No_") = DocNo_ & ".XB"
                insertLineLogis.Fields("Packing List") = DocNo_
                insertLineLogis.Execute()

                Dim existHeader As Query = Query.From("Document Entry Header").Transaction(True)
                existHeader.Where("No_").Is(DocNo_)
                'existHeader.And("Logistics No_").Is(LogisticsNo)
                existHeader.And("Document Type").Is(6)
                If existHeader.RecordCount <= 0 Then
                    Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
                    InsertDEH.Fields("Logistics No_") = DocNo_
                    InsertDEH.Fields("Document No_") = DocNo_
                    InsertDEH.Fields("Reference No_") = DocNo_
                    InsertDEH.Fields("No_") = DocNo_
                    InsertDEH.Fields("Document Type") = 6
                    InsertDEH.Fields("Packing List") = DocNo_
                    InsertDEH.Fields("Status") = 1
                    InsertDEH.Execute()


                End If
                existHeader = Query.From("Document Entry Header").Transaction(True)
                existHeader.Where("No_").Is(DocNo_ & ".XB")
                'existHeader.And("Logistics No_").Is(LogisticsNo)
                existHeader.And("Document Type").Is(1)
                If existHeader.RecordCount <= 0 Then


                    Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
                    InsertDEH.Fields("Logistics No_") = DocNo_ & ".XB"
                    InsertDEH.Fields("Document No_") = DocNo_ & ".XB"
                    InsertDEH.Fields("Reference No_") = DocNo_
                    InsertDEH.Fields("No_") = DocNo_ & ".XB"
                    InsertDEH.Fields("Document Type") = 1
                    InsertDEH.Fields("Packing List") = DocNo_
                    InsertDEH.Execute()

                End If
                Dim QInsertPackinglst As Query = Query.Insert("Packing List XTP")
                If tbl_Order.Columns.Count > 0 Then
                    For Each tcol As DataColumn In tbl_Order.Columns
                        If tcol.ColumnName <> "RowID" And tcol.ColumnName <> "Doc Entry" Then
                            QInsertPackinglst.Fields(tcol.ColumnName) = rOrder(tcol.ColumnName)
                        End If

                    Next
                    QInsertPackinglst.Fields("QRCode") = dataQR.Trim()
                    QInsertPackinglst.Execute()
                End If

                CountRow = CountRow + 1
                '  WorkSession.SetProgress("Calculate Account: " & tbl_Order.Rows.Count & "/" & CountRow & ":" & rOrder("Sales Order No_") & "-" & rOrder("Carton No_"))
            Next
            Query.EndTransaction()
            WorkSession.MsgML("Thành công!")
            sender.RefreshSource()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub PutinPackingLstV1_All(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim FFNo_ As String = sender.GetParameter("FFNo_")
        If FFNo_ = "" Then
            WorkSession.MsgML("Xin vui lòng chọn mã Pakinglist")
            Return
        End If
        Dim tbl_Order As New DataTable

        Dim QPackingList As Query = Query.From("View Packing List").Transaction(True)
        QPackingList.WhereAs("No_") = FFNo_
        tbl_Order = QPackingList.ToTable
        If tbl_Order Is Nothing Or tbl_Order.Rows.Count = 0 Then Return

        Dim TableDocumentEntryHeader As String = "Document Entry Header"
        Dim TableDocumentEntry As String = "Document Entry"

        Dim DocumentNo_QR As String = "QRCodePackinglst" 'Your Reference

        Try
            Dim str3 As String = Framework.MapPath("Pictures", "") & "/" & Now.Year & Now.Month & "/"
            If (Not System.IO.Directory.Exists(str3)) Then
                System.IO.Directory.CreateDirectory(str3)
            End If
            Query.BeginTransaction()

            ' Dim LogisticsNo As String
            Dim RC As String = ""
            Dim SO As String = ""
            Dim externaldoc As String = ""
            If tbl_Order.Rows.Count > 0 Then
                RC = Code.Library.Library.ISDBNULL(tbl_Order.Rows(0)("Responsibility Center"), "")
                SO = Code.Library.Library.ISDBNULL(tbl_Order.Rows(0)("SO No_"), "")
                externaldoc = Code.Library.Library.ISDBNULL(tbl_Order.Rows(0)("PO No_"), "")
            End If
            'LogisticsNo = GetandUpdateSeriesNumber("WhsReceipt", "", "", RC, "", "DocumentNo")
            Dim CountRow As Integer = 1

            For Each rOrder As DataRow In tbl_Order.Rows

                Dim ExternalDocumentNo As String = rOrder("External Document No_")
                Dim PostingDate As Date = rOrder("Posting date")
                Dim EndingDate As Date = rOrder("Posting date")
                Dim StartingDate As Date = rOrder("Posting date")
                Dim DueDate As Date = rOrder("Posting date")
                Dim CurrencyCode As String = "VND"
                Dim CurrencyFactor As Decimal = 1
                Dim SourceCode As String = Code.Library.Library.ISDBNULL(rOrder("Source Code"), "")
                Dim ResponsibilityCenter As String = Code.Library.Library.ISDBNULL(rOrder("Responsibility Center"), "")
                Dim LocationCode As String = Code.Library.Library.ISDBNULL(rOrder("Location Code"), "")


                Dim DocumentNo As String = rOrder("PO No_")
                Dim ItemNo_ As String = rOrder("Item No_")

                Dim qqq As Query = Query.From("View Packing List")
                qqq.Where("PO No_").Is(DocumentNo).And("RowID").Is(rOrder("RowID"))
                'q.And("Document Type").Is(DocType)
                Dim DTSource As DataTable = qqq.ToTable



                Dim dataQRCode As String = ""
                dataQRCode = rOrder("Item No_") & "-" & rOrder("SO No_") & "-" & rOrder("External Document No_") & "-" & rOrder("RowID")
                Dim ss As Query = Query.From("QRCode").Transaction(True)
                'ss.Where("Document No_").Is(rOrder("PO No_"))
                ss.Where("QRCode").Is(dataQRCode)
                If ss.RecordCount > 0 Then
                    WorkSession.MsgML("Mã " & rOrder("Item No_") & "-" & rOrder("SO No_") & "-" & rOrder("External Document No_") & "-" & rOrder("RowID") & " đã tạo qrCode!")
                    Continue For
                End If



                Dim imageQRCode As String = ""



                Dim dataQR As String = ""
                Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
                DataqRLinkL = Replace(DataqRLinkL, "/", "-")
                DataqRLinkL = Replace(DataqRLinkL, "*", "-")
                dataQR = dataQRCode
                Dim qRLinkL = Replace(dataQR, "#", "-")
                qRLinkL = Replace(qRLinkL, "/", "-")
                'qRLinkL = Replace(qRLinkL, "'", "''")
                qRLinkL = Replace(qRLinkL, "*", "-")

                Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
                Dim iIconSize As Integer = 4
                Dim iQRWidth As Integer = 70
                Dim iQRHeight As Integer = 70


                qRLinkL = qRLinkL.ToString().Replace(" ", "")
                qRLinkL = qRLinkL.ToString().Replace(":", "")
                Dim serverPath As String = str3 + qRLinkL + ".jpg"
                CreateQRImage(dataQR, serverPath)

                imageQRCode = str3 & "" & qRLinkL & ".jpg"
                Dim QueryInsert As Query = Query.Entity("QRCode").Insert

                QueryInsert.Fields("URL") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
                QueryInsert.Fields("QRCode") = dataQR
                QueryInsert.Fields("Serial No_") = qRLinkL
                QueryInsert.Fields("Name") = qRLinkL
                QueryInsert.Fields("Description") = qRLinkL
                QueryInsert.Fields("Item No_") = rOrder("Item No_")
                QueryInsert.Fields("Item Variant") = ""
                QueryInsert.Fields("Lot No_") = rOrder("Lot No_") ' IIf(LotNo <> "", LotNo, dataQRCode)
                QueryInsert.Fields("Document Type") = 0

                QueryInsert.Fields("Document No_") = FFNo_
                QueryInsert.Fields("External Document No_") = rOrder("External Document No_")

                QueryInsert.Fields("Quantity") = rOrder("Quantity") / 1
                QueryInsert.Fields("Unit Of Measure") = rOrder("Unit of Measure")
                QueryInsert.Fields("Qty Unit Of Measure") = 1
                QueryInsert.Fields("Login ID") = Framework.UserID
                QueryInsert.Fields("System Date") = CDate(Now())
                QueryInsert.Fields("Expired Date") = CDate(Now())
                QueryInsert.Fields("Mfg Date") = CDate(Now())
                QueryInsert.Fields("Kit") = 1
                'If rOrder.Contains("Cubage") Then
                '    QueryInsert.Fields("Cubage") = ISDBNULL(rOrder("Cubage"), 0)
                'End If
                'If rOrder.Contains("Gross Weight") Then
                '    QueryInsert.Fields("Weight") = ISDBNULL(rOrder("Gross Weight"), 0)
                'End If
                QueryInsert.Execute()

                Dim exist As Query = Query.From("Document Entry").Transaction(True)
                exist.Where("Document No_").Is(FFNo_)
                'exist.And("Logistics No_").Is(LogisticsNo)
                exist.And("Line No_").Is(rOrder("RowID"))
                exist.And("Item No_").Is(rOrder("Item No_"))
                exist.And("Document Type").Is(0)
                If exist.RecordCount <= 0 Then
                    Dim QueryInsertDE As Query = Query.Entity("Document Entry").Insert
                    QueryInsertDE.Fields("Line No_") = rOrder("RowID")
                    QueryInsertDE.Fields("Description") = ""
                    QueryInsertDE.Fields("Logistics No_") = FFNo_
                    QueryInsertDE.Fields("Packing List") = FFNo_
                    QueryInsertDE.Fields("Document No_") = FFNo_
                    QueryInsertDE.Fields("Document Type") = 0
                    QueryInsertDE.Fields("Item No_") = rOrder("Item No_")
                    QueryInsertDE.Fields("Variant Code") = ""
                    QueryInsertDE.Fields("Quantity") = rOrder("Quantity")
                    QueryInsertDE.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
                    QueryInsertDE.Fields("Qty_ per Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Qty_ Unit of Measure"), 0)
                    QueryInsertDE.Fields("Source Code") = Code.Library.Library.ISDBNULL(rOrder("Source Code"), "")
                    QueryInsertDE.Fields("Responsibility Center") = Code.Library.Library.ISDBNULL(rOrder("Responsibility Center"), "")
                    QueryInsertDE.Fields("Location Code") = ""
                    QueryInsertDE.Fields("QRCode") = dataQR 'IIf(batchSize = 1, dataQR, "")
                    QueryInsertDE.Fields("Attach File") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
                    QueryInsertDE.Fields("Serial No_") = qRLinkL
                    QueryInsertDE.Fields("Status") = 0
                    If rOrder("Lot No_") <> "" Then QueryInsertDE.Fields("Lot No_") = ""
                    If rOrder("Lot No_") = "" Then QueryInsertDE.Fields("Lot No_") = dataQRCode
                    QueryInsertDE.Fields("Real Lot No_") = Code.Library.Library.ISDBNULL(QueryInsertDE.Fields("Lot No_"), "")
                    QueryInsertDE.Fields("Expired Date") = CDate(Now())
                    QueryInsertDE.Fields("Real Expired Date") = CDate(Now()) 'For SM     
                    If tbl_Order.Columns.Contains("CBM") Then
                        QueryInsertDE.Fields("CBM") = Code.Library.Library.ISDBNULL(rOrder("CBM"), 0)
                    End If
                    If tbl_Order.Columns.Contains("Gross Weight") Then
                        QueryInsertDE.Fields("Weight") = Code.Library.Library.ISDBNULL(rOrder("Gross Weight"), 0)
                    End If
                    QueryInsertDE.Execute()
                End If

                '--------
                Dim insertLineLogis As Query = Query.Entity("Logistics List").Insert
                'insertLine = Query.Entity("Logistics List").Insert
                insertLineLogis.Fields("Document Type") = 0
                insertLineLogis.Fields("Document No_") = FFNo_
                insertLineLogis.Fields("Your Reference") = FFNo_
                insertLineLogis.Fields("Logistics No_") = FFNo_
                insertLineLogis.Fields("Packing List") = FFNo_
                insertLineLogis.Fields("Description") = ""  '] [nvarchar](50) NULL,
                insertLineLogis.Fields("Picking No_") = ""

                insertLineLogis.Fields("No_") = rOrder("Item No_")
                insertLineLogis.Fields("Item No_") = rOrder("Item No_")
                insertLineLogis.Fields("Variant Code") = ""
                insertLineLogis.Fields("Lot No_") = rOrder("Lot No_")
                insertLineLogis.Fields("Real Lot No_") = rOrder("Lot No_")
                insertLineLogis.Fields("Real Expiration Date") = CDate(Now()) '] [datetime] NULL,

                insertLineLogis.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
                insertLineLogis.Fields("Qty_ per Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Qty_ Unit of Measure"), 0)
                insertLineLogis.Fields("Qty_ to Receive") = rOrder("Quantity")
                insertLineLogis.Fields("Outstanding Quantity") = rOrder("Quantity")
                insertLineLogis.Fields("Quantity") = rOrder("Quantity")
                insertLineLogis.Fields("Location Code") = ""

                insertLineLogis.Fields("Expiration Date") = CDate(Now())  '] [datetime] NULL,
                insertLineLogis.Fields("MFG Date") = CDate(Now())
                insertLineLogis.Fields("Work Center") = ""  ' Dataset.Value("")
                insertLineLogis.Execute()

                Dim QInsertPackinglst As Query = Query.Insert("Packing List")
                If tbl_Order.Columns.Count > 0 Then
                    For Each tcol As DataColumn In tbl_Order.Columns
                        If tcol.ColumnName <> "Doc Entry" Then
                            QInsertPackinglst.Fields(tcol.ColumnName) = rOrder(tcol.ColumnName)
                        End If



                    Next
                    QInsertPackinglst.Fields("QR Code") = dataQR.Trim()
                    QInsertPackinglst.Execute()
                End If

                CountRow = CountRow + 1
                '  WorkSession.SetProgress("Calculate Account: " & tbl_Order.Rows.Count & "/" & CountRow & ":" & rOrder("Item No_") & "-" & rOrder("SO No_") & "-" & rOrder("External Document No_") & "-" & rOrder("RowID"))
            Next
            Dim existHeader As Query = Query.From("Document Entry Header").Transaction(True)
            existHeader.Where("No_").Is(FFNo_)
            existHeader.And("Document Type").Is(0)
            If existHeader.RecordCount <= 0 Then
                Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
                InsertDEH.Fields("Logistics No_") = FFNo_
                InsertDEH.Fields("Document No_") = FFNo_
                InsertDEH.Fields("Reference No_") = FFNo_
                InsertDEH.Fields("External Document No_") = externaldoc
                InsertDEH.Fields("No_") = FFNo_
                InsertDEH.Fields("Reference No_") = SO
                InsertDEH.Fields("Document Type") = 0
                InsertDEH.Fields("Packing List") = DocumentNo_QR
                InsertDEH.Fields("Status") = 1
                InsertDEH.Execute()
            End If
            Query.EndTransaction()

            WorkSession.MsgML("Thành Công!")
            Framework.OpenEntity("QRCode 1", String.Format("[Document No_]=N'{0}'", FFNo_))



        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub PutinPackingLstV1(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then Return

        Dim DocumentNo_QR As String = "QRCodePackinglst" 'Your Reference
        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting date")
        Dim EndingDate As Date = rOrder("Posting date")
        Dim StartingDate As Date = rOrder("Posting date")
        Dim DueDate As Date = rOrder("Posting date")
        Dim CurrencyCode As String = "VND"
        Dim CurrencyFactor As Decimal = 1
        Dim SourceCode As String = Code.Library.Library.ISDBNULL(rOrder("Source Code"), "")
        Dim ResponsibilityCenter As String = Code.Library.Library.ISDBNULL(rOrder("Responsibility Center"), "")
        Dim LocationCode As String = Code.Library.Library.ISDBNULL(rOrder("Location Code"), "")


        Dim DocumentNo As String = rOrder("PO No_")
        Dim ItemNo_ As String = rOrder("Item No_")

        Dim qqq As Query = Query.From("View Packing List")
        qqq.Where("PO No_").Is(DocumentNo).And("RowID").Is(rOrder("RowID"))
        'q.And("Document Type").Is(DocType)
        Dim DTSource As DataTable = qqq.ToTable
        Dim TableDocumentEntryHeader As String = "Document Entry Header"
        Dim TableDocumentEntry As String = "Document Entry"
        Try

            Dim dataQRCode As String = ""
            dataQRCode = rOrder("Item No_") & "-" & rOrder("SO No_") & "-" & rOrder("External Document No_") & "-" & rOrder("RowID")
            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(rOrder("PO No_"))
            ss.And("QRCode").Is(dataQRCode)
            If ss.RecordCount > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If

            Query.BeginTransaction()
            'chua quet ma QRCode
            '  Dim LogisticsNo As String
            ' LogisticsNo = GetandUpdateSeriesNumber("WhsReceipt", "", "", ResponsibilityCenter, "", "DocumentNo")

            Dim imageQRCode As String = ""
            Dim str3 As String = Framework.MapPath("Pictures", "") & "/" & Now.Year & Now.Month & "/"
            If (Not System.IO.Directory.Exists(str3)) Then
                System.IO.Directory.CreateDirectory(str3)
            End If

            Dim dataQR As String = ""
            Dim DataqRLinkL = Replace(dataQRCode, "#", "-")
            DataqRLinkL = Replace(DataqRLinkL, "/", "-")
            DataqRLinkL = Replace(DataqRLinkL, "*", "-")
            dataQR = dataQRCode
            Dim qRLinkL = Replace(dataQR, "#", "-")
            qRLinkL = Replace(qRLinkL, "/", "-")
            'qRLinkL = Replace(qRLinkL, "'", "''")
            qRLinkL = Replace(qRLinkL, "*", "-")

            Dim sIconBitmapPath As String = str3 + qRLinkL + ".bmp"
            Dim iIconSize As Integer = 4
            Dim iQRWidth As Integer = 70
            Dim iQRHeight As Integer = 70




            qRLinkL = qRLinkL.ToString().Replace(" ", "")
            qRLinkL = qRLinkL.ToString().Replace(":", "")
            Dim serverPath As String = str3 + qRLinkL + ".jpg"
            CreateQRImage(dataQR, serverPath)

            imageQRCode = str3 & "" & qRLinkL & ".jpg"
            Dim QueryInsert As Query = Query.Entity("QRCode").Insert

            QueryInsert.Fields("URL") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
            QueryInsert.Fields("QRCode") = dataQR
            QueryInsert.Fields("Serial No_") = qRLinkL
            QueryInsert.Fields("Name") = qRLinkL
            QueryInsert.Fields("Description") = qRLinkL
            QueryInsert.Fields("Item No_") = rOrder("Item No_")
            QueryInsert.Fields("Item Variant") = ""
            QueryInsert.Fields("Lot No_") = rOrder("Lot No_") ' IIf(LotNo <> "", LotNo, dataQRCode)
            QueryInsert.Fields("Document Type") = 0

            QueryInsert.Fields("Document No_") = rOrder("No_")
            QueryInsert.Fields("External Document No_") = rOrder("External Document No_")

            QueryInsert.Fields("Quantity") = rOrder("Quantity") / 1
            QueryInsert.Fields("Unit Of Measure") = rOrder("Unit of Measure")
            QueryInsert.Fields("Qty Unit Of Measure") = 1
            QueryInsert.Fields("Login ID") = Framework.UserID
            QueryInsert.Fields("System Date") = CDate(Now())
            QueryInsert.Fields("Expired Date") = CDate(Now())
            QueryInsert.Fields("Mfg Date") = CDate(Now())
            QueryInsert.Fields("Kit") = 1
            'If rOrder.Contains("Cubage") Then
            '    QueryInsert.Fields("Cubage") = ISDBNULL(rOrder("Cubage"), 0)
            'End If
            'If rOrder.Contains("Gross Weight") Then
            '    QueryInsert.Fields("Weight") = ISDBNULL(rOrder("Gross Weight"), 0)
            'End If


            QueryInsert.Execute()
            Dim exist As Query = Query.From("Document Entry").Transaction(True)
            exist.Where("Document No_").Is(DocumentNo_QR)
            'exist.And("Logistics No_").Is(LogisticsNo)
            exist.And("Line No_").Is(rOrder("RowID"))
            exist.And("Item No_").Is(rOrder("Item No_"))
            exist.And("Document Type").Is(0)
            If exist.RecordCount <= 0 Then
                Dim QueryInsertDE As Query = Query.Entity("Document Entry").Insert

                QueryInsertDE.Fields("Line No_") = rOrder("RowID")

                QueryInsertDE.Fields("Description") = ""
                QueryInsertDE.Fields("Logistics No_") = rOrder("No_")
                QueryInsertDE.Fields("Packing List") = DocumentNo_QR

                QueryInsertDE.Fields("Document No_") = rOrder("No_")
                QueryInsertDE.Fields("Document Type") = 0
                QueryInsertDE.Fields("Item No_") = rOrder("Item No_")
                QueryInsertDE.Fields("Variant Code") = ""

                QueryInsertDE.Fields("Quantity") = rOrder("Quantity")
                QueryInsertDE.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
                QueryInsertDE.Fields("Qty_ per Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Qty_ Unit of Measure"), 0)
                QueryInsertDE.Fields("Source Code") = Code.Library.Library.ISDBNULL(rOrder("Source Code"), "")
                QueryInsertDE.Fields("Responsibility Center") = Code.Library.Library.ISDBNULL(rOrder("Responsibility Center"), "")
                QueryInsertDE.Fields("Location Code") = ""

                QueryInsertDE.Fields("QRCode") = dataQR 'IIf(batchSize = 1, dataQR, "")
                QueryInsertDE.Fields("Attach File") = "Pictures\" & Now.Year & Now.Month & "\" & qRLinkL & ".jpg"
                QueryInsertDE.Fields("Serial No_") = qRLinkL
                QueryInsertDE.Fields("Status") = 0

                If rOrder("Lot No_") <> "" Then QueryInsertDE.Fields("Lot No_") = ""
                If rOrder("Lot No_") = "" Then QueryInsertDE.Fields("Lot No_") = dataQRCode
                QueryInsertDE.Fields("Real Lot No_") = Code.Library.Library.ISDBNULL(QueryInsertDE.Fields("Lot No_"), "")
                QueryInsertDE.Fields("Expired Date") = CDate(Now())
                QueryInsertDE.Fields("Real Expired Date") = CDate(Now()) 'For SM     



                If rOrder.Contains("CBM") Then
                    QueryInsert.Fields("CBM") = Code.Library.Library.ISDBNULL(rOrder("CBM"), 0)
                End If
                If rOrder.Contains("Gross Weight") Then
                    QueryInsert.Fields("Weight") = Code.Library.Library.ISDBNULL(rOrder("Gross Weight"), 0)
                End If


                QueryInsertDE.Execute()
            End If


            '--------
            Dim insertLineLogis As Query = Query.Entity("Logistics List").Insert
            'insertLine = Query.Entity("Logistics List").Insert
            insertLineLogis.Fields("Document Type") = 0
            insertLineLogis.Fields("Document No_") = rOrder("No_")
            insertLineLogis.Fields("Your Reference") = DocumentNo
            insertLineLogis.Fields("Logistics No_") = ""
            insertLineLogis.Fields("Packing List") = DocumentNo_QR
            insertLineLogis.Fields("Description") = ""  '] [nvarchar](50) NULL,
            insertLineLogis.Fields("Picking No_") = ""

            insertLineLogis.Fields("No_") = rOrder("Item No_")
            insertLineLogis.Fields("Item No_") = rOrder("Item No_")
            insertLineLogis.Fields("Variant Code") = ""
            insertLineLogis.Fields("Lot No_") = rOrder("Lot No_")
            insertLineLogis.Fields("Real Lot No_") = rOrder("Lot No_")
            insertLineLogis.Fields("Real Expiration Date") = CDate(Now()) '] [datetime] NULL,

            insertLineLogis.Fields("Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Unit of Measure"), "")
            insertLineLogis.Fields("Qty_ per Unit of Measure") = Code.Library.Library.ISDBNULL(rOrder("Qty_ Unit of Measure"), 0)
            insertLineLogis.Fields("Qty_ to Receive") = rOrder("Quantity")
            insertLineLogis.Fields("Outstanding Quantity") = rOrder("Quantity")
            insertLineLogis.Fields("Quantity") = rOrder("Quantity")
            insertLineLogis.Fields("Location Code") = ""

            insertLineLogis.Fields("Expiration Date") = CDate(Now())  '] [datetime] NULL,
            insertLineLogis.Fields("MFG Date") = CDate(Now())
            insertLineLogis.Fields("Work Center") = ""  ' Dataset.Value("")
            insertLineLogis.Execute()



            For Each trow As DataRow In DTSource.Rows
                Dim existHeader As Query = Query.From("Document Entry Header").Transaction(True)
                existHeader.Where("No_").Is(DocumentNo)
                'existHeader.And("Logistics No_").Is(LogisticsNo)
                existHeader.And("Document Type").Is(0)
                If existHeader.RecordCount <= 0 Then
                    Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
                    InsertDEH.Fields("Logistics No_") = ""
                    InsertDEH.Fields("Document No_") = rOrder("No_")
                    InsertDEH.Fields("Reference No_") = rOrder("No_")
                    InsertDEH.Fields("No_") = rOrder("No_")
                    InsertDEH.Fields("Document Type") = 0
                    InsertDEH.Fields("Packing List") = ""
                    InsertDEH.Fields("Status") = 1
                    InsertDEH.Execute()
                End If




            Next


            Dim QInsertPackinglst As Query = Query.Insert("Packing List")
            For Each key As Object In rOrder.Keys
                Dim value As Object = rOrder(key)
                If key <> "Doc Entry" Then
                    QInsertPackinglst.Fields(key) = value
                End If


                QInsertPackinglst.Fields("QR Code") = dataQR.Trim()

            Next
            QInsertPackinglst.Execute()


            Query.EndTransaction()
            WorkSession.MsgML("Thành Công!")

            Framework.OpenEntity("QRCode PackingLst", String.Format("[Document No_]=N'{0}' and [Item No_]=N'{1}'", rOrder("No_"), ItemNo_))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub

    Public Sub PutinPackingLst(ByVal sender As WXSource, ByVal e As WXArgs)

        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then Return

        Dim DocumentNo_QR As String = "QRCodePackinglst" 'Your Reference
        Dim ExternalDocumentNo As String = rOrder("External Document No_")
        Dim PostingDate As Date = rOrder("Posting date")
        Dim EndingDate As Date = rOrder("Posting date")
        Dim StartingDate As Date = rOrder("Posting date")
        Dim DueDate As Date = rOrder("Posting date")
        Dim CurrencyCode As String = "VND"
        Dim CurrencyFactor As Decimal = 1
        Dim SourceCode As String = Code.Library.Library.ISDBNULL(rOrder("Source Code"), "")
        Dim ResponsibilityCenter As String = Code.Library.Library.ISDBNULL(rOrder("Responsibility Center"), "")
        Dim LocationCode As String = Code.Library.Library.ISDBNULL(rOrder("Location Code"), "")


        Dim DocumentNo As String = rOrder("PO No_")


        Dim qqq As Query = Query.From("View Packing List")
        qqq.Where("PO No_").Is(DocumentNo).And("RowID").Is(rOrder("RowID"))
        'q.And("Document Type").Is(DocType)
        Dim DTSource As DataTable = qqq.ToTable
        Dim TableDocumentEntryHeader As String = "Document Entry Header"
        Dim TableDocumentEntry As String = "Document Entry"
        Try

            Dim dataQRCode As String = ""
            dataQRCode = rOrder("Item No_") & "*" & rOrder("PO No_") & "*" & rOrder("External Document No_") & "*" & rOrder("RowID")
            Dim ss As Query = Query.From("QRCode").Transaction(True)
            ss.Where("Document No_").Is(rOrder("PO No_"))
            ss.And("QRCode").Is(dataQRCode)
            If ss.RecordCount > 0 Then
                WorkSession.MsgML("Already Post QRCode !")
                Return
            End If

            Query.BeginTransaction()
            'chua quet ma QRCode
            Dim LogisticsNo As String
            LogisticsNo = GetandUpdateSeriesNumber("WhsReceipt", "", "", ResponsibilityCenter, "", "DocumentNo")


            For Each trow As DataRow In DTSource.Rows


                Dim q As Query = Query.From("QRCode Buffer").Transaction(True)
                q.Where("Document No_").Is(DocumentNo)
                q.And("Packing List").Is(LogisticsNo)
                q.And("Item No_").Is(trow("Item No_"))
                q.And("Status").LessEqual(2)
                q.And("Entry No_").Is(trow("RowID"))

                If q.RecordCount > 0 Then
                    Dim queryDelete As Query = Query.Delete("QRCode Buffer")
                    queryDelete.Where("Document No_").Is(DocumentNo)
                    queryDelete.And("Packing List").Is(LogisticsNo)
                    queryDelete.And("Item No_").Is(trow("Item No_"))
                    queryDelete.And("Type").Is(0)
                    queryDelete.And("Entry No_").Is(trow("RowID"))
                    queryDelete.Execute()
                End If
                q = Query.From("QRCode Buffer").Transaction(True)
                q.Where("Document No_").Is(DocumentNo)
                q.And("Packing List").Is(LogisticsNo)
                q.And("Item No_").Is(trow("Item No_"))
                q.And("Status").Is(2)
                q.And("Entry No_").Is(trow("RowID"))

                Dim existHeader As Query = Query.From("Document Entry Header").Transaction(True)
                existHeader.Where("No_").Is(DocumentNo)
                existHeader.And("Logistics No_").Is(LogisticsNo)
                existHeader.And("Document Type").Is(0)
                If existHeader.RecordCount <= 0 Then
                    Dim InsertDEH As Query = Query.Entity("Document Entry Header").Insert
                    InsertDEH.Fields("Logistics No_") = LogisticsNo
                    InsertDEH.Fields("Document No_") = DocumentNo
                    InsertDEH.Fields("Reference No_") = DocumentNo
                    InsertDEH.Fields("No_") = DocumentNo
                    InsertDEH.Fields("Document Type") = 0
                    InsertDEH.Fields("Packing List") = DocumentNo_QR
                    InsertDEH.Fields("Status") = 1
                    InsertDEH.Execute()
                End If

                If q.RecordCount = 0 Then
                    Dim insertLine As Query = Query.Entity("QRCode Buffer").Insert
                    insertLine.Fields("Type") = 0
                    insertLine.Fields("Document No_") = DocumentNo
                    insertLine.Fields("Packing List") = LogisticsNo
                    insertLine.Fields("Item No_") = trow("Item No_")
                    'insertLine.Fields("Variant Code") = DTSource.Rows(i)("Variant Code")

                    insertLine.Fields("Lot No_") = trow("Lot No_")

                    insertLine.Fields("Expired Date") = trow("Posting date")


                    insertLine.Fields("Unit of Measure") = trow("Unit of Measure")
                    insertLine.Fields("Qty Unit Of Measure") = trow("Qty_ Unit of Measure")
                    insertLine.Fields("Quantity") = trow("Quantity")

                    insertLine.Fields("Login ID") = Framework.UserID

                    insertLine.Fields("External Document No_") = ExternalDocumentNo
                    insertLine.Fields("Your Reference") = DocumentNo_QR
                    insertLine.Fields("Source Code") = SourceCode
                    insertLine.Fields("Responsibility Center") = ResponsibilityCenter
                    insertLine.Fields("Location Code") = rOrder("Location Code")


                    insertLine.Fields("Mfg Date") = trow("Posting date")

                    insertLine.Fields("Number No_") = 1
                    insertLine.Fields("Description") = ExternalDocumentNo

                    insertLine.Fields("Post QRCode Entry") = 1
                    insertLine.Fields("Status") = 1
                    insertLine.Fields("Kit") = IIf(trow("Qty_ Unit of Measure") > 1, 1, 0)
                    insertLine.Fields("Parent") = IIf(trow("Qty_ Unit of Measure") > 1, 1, 0)
                    insertLine.Fields("Entry No_") = trow("RowID")
                    insertLine.Execute()


                    '---------------
                    Dim insertLineLogis As Query = Query.Entity("Logistics List").Insert
                    'insertLine = Query.Entity("Logistics List").Insert
                    insertLineLogis.Fields("Document Type") = 0
                    insertLineLogis.Fields("Document No_") = DocumentNo
                    insertLineLogis.Fields("Your Reference") = DocumentNo
                    insertLineLogis.Fields("Logistics No_") = LogisticsNo
                    insertLineLogis.Fields("Packing List") = LogisticsNo
                    insertLineLogis.Fields("Picking No_") = DocumentNo

                    insertLineLogis.Fields("No_") = trow("Item No_")
                    insertLineLogis.Fields("Item No_") = trow("Item No_")
                    insertLineLogis.Fields("Variant Code") = ""
                    insertLineLogis.Fields("Lot No_") = trow("Lot No_")
                    insertLineLogis.Fields("Real Lot No_") = trow("Lot No_")
                    insertLineLogis.Fields("Real Expiration Date") = trow("Posting Date") '] [datetime] NULL,

                    insertLineLogis.Fields("Unit of Measure") = trow("Unit of Measure") 'UOM
                    insertLineLogis.Fields("Qty_ per Unit of Measure") = trow("Qty_ Unit of Measure")
                    insertLineLogis.Fields("Qty_ to Receive") = trow("Quantity")
                    insertLineLogis.Fields("Outstanding Quantity") = trow("Quantity")
                    insertLineLogis.Fields("Quantity") = trow("Quantity")
                    insertLineLogis.Fields("Location Code") = ""
                    insertLineLogis.Fields("Description") = LogisticsNo  '] [nvarchar](50) NULL,
                    insertLineLogis.Fields("Expiration Date") = trow("Posting Date") '] [datetime] NULL,
                    insertLineLogis.Fields("MFG Date") = trow("Posting Date")
                    insertLineLogis.Fields("Work Center") = ""  ' Dataset.Value("")
                    insertLineLogis.Execute()

                End If


            Next


            Query.EndTransaction()

            Framework.OpenEntity("QRCode Generation PackingLst", String.Format("[Document No_]=N'{0}' and [Type]=0", DocumentNo))

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub
#End Region

#Region "Kho vận"
    Public Sub TRD_OpenTyleLapDay(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim LoginID As String = Framework.UserID
            Dim AppUserID As String = Framework.EmptyNull(WorkSession.Read(“FrontEndAppUserId”))
            If AppUserID <> "" Then
                LoginID = AppUserID
            End If

            Dim Open_Entity As String = "View Tyle Lapday"
            Dim FWarehouse As String = sender.GetParameter("FWarehouse")
            Dim FZone As String = sender.GetParameter("FZone")
            Dim ZBin As String = sender.GetParameter("ZBin")
            Dim FType As Integer = sender.GetParameter("FType")


            Dim strwhere As String = " where 1=1 "
            If FWarehouse <> "" Then
                strwhere &= " and " & Code.Library.CheckRange.ParseFilter(FWarehouse, "C.Code", 3)
            End If
            If FZone <> "" Then
                strwhere &= " and  " & Code.Library.CheckRange.ParseFilter(FZone, "B.Code", 3) & "  "
            End If
            If ZBin <> "" Then
                strwhere &= " and " & Code.Library.CheckRange.ParseFilter(ZBin, "A.Code", 3) & "  "
            End If

            Query.BeginTransaction()
            Dim QDelete As Query = Query.Delete("View Tyle Lapday")
            QDelete.WhereAs("Login ID") = LoginID
            QDelete.Execute()
            Dim strSQL As String = ""
            strSQL = <a><![CDATA[
                select 
                cast(ROW_NUMBER() OVER (ORDER BY  T.Warehouse,T.Zone,T.Type) AS int) AS RowID,

                T.*
                from
                (
                --------Warehous ----------

	                select 
	                C.Code [Code] ,C.Description [Name] ,sum(A.Cubage) Cubage
	                ,sum(isnull(D.[Cubage Actual],0)) [Cubage Actual]
	                ,sum(A.Cubage)-sum(isnull(D.[Cubage Actual],0)) [Cubage Out]
	                ,sum(A.Weight) Weight
	                ,sum(isnull(D.[Weight Actual],0)) [Weight Actual]
	                ,sum(A.Weight)-sum(isnull(D.[Weight Actual],0)) [Weight Out]
	                ,0 Type
	                ,A.Warehouse
	                ,'' Zone
	                ,'' [Bin] 
	                from Bin A
	                inner join  [Zone] B on A.[Zone Code]=B.Code
	                inner join [Warehouse Class] C on A.Warehouse=C.Code
	                left join 
	                (
		                select A.bin,A.[Item No_],A.QRCode,A.[Unit Of Measure],
		                A.Quantity,A.Quantity * ISNULL(A.CBM,0) [Cubage Actual]
		                ,A.Quantity * ISNULL(A.Weight,0) [Weight Actual]
		                from [Document Entry] A
	                ) D on A.QRCode=D.bin
                     {0}
	                group by C.Code  ,c.Description ,a.Warehouse
                ---------Zone-----
	                Union ALL
	                select 
	                '  ' + B.Code [Code] ,'  ' +B.Description [Name] ,sum(A.Cubage) Cubage
	                ,sum(isnull(D.[Cubage Actual],0)) [Cubage Actual]
	                ,sum(A.Cubage)-sum(isnull(D.[Cubage Actual],0)) [Cubage Out]
	                ,sum(A.Weight) Weight
	                ,sum(isnull(D.[Weight Actual],0)) [Weight Actual]
	                ,sum(A.Weight)-sum(isnull(D.[Weight Actual],0)) [Weight Out]
	                ,1 Type
	                ,A.Warehouse
	                ,B.Code [Zone]
	                ,'' [Bin] 
	                from Bin A
	                inner join  [Zone] B on A.[Zone Code]=B.Code
	                inner join [Warehouse Class] C on A.Warehouse=C.Code
	          
	                left join 
	                (
		                select A.bin,A.[Item No_],A.QRCode,A.[Unit Of Measure],
		                A.Quantity,A.Quantity * ISNULL(A.CBM,0) [Cubage Actual]
		                ,A.Quantity * ISNULL(A.Weight,0) [Weight Actual]
		                from [Document Entry] A
	                ) D on A.QRCode=D.bin
                     {0}
	                group by B.Code  ,B.Description ,a.Warehouse,B.Code 
                ---------Bin-----
	                Union ALL
	                select 
	                '    ' + A.Code [Code] , '    ' + A.Description [Name] ,sum(A.Cubage) Cubage
	                ,sum(isnull(D.[Cubage Actual],0)) [Cubage Actual]
	                ,sum(A.Cubage)-sum(isnull(D.[Cubage Actual],0)) [Cubage Out]
	                ,sum(A.Weight) Weight
	                ,sum(isnull(D.[Weight Actual],0)) [Weight Actual]
	                ,sum(A.Weight)-sum(isnull(D.[Weight Actual],0)) [Weight Out]
	                ,2 Type
	                ,A.Warehouse
	                ,B.Code [Zone]
	                ,A.Code [Bin] 
	                from Bin A
	                inner join  [Zone] B on A.[Zone Code]=B.Code
	                inner join [Warehouse Class] C on A.Warehouse=C.Code
	                left join 
	                (
		                select A.bin,A.[Item No_],A.QRCode,A.[Unit Of Measure],
		                A.Quantity,A.Quantity * ISNULL(A.CBM,0) [Cubage Actual]
		                ,A.Quantity * ISNULL(A.Weight,0) [Weight Actual]
		                from [Document Entry] A
	                ) D on A.QRCode=D.bin
                     {0}
	                group by A.Code  ,A.Description ,a.Warehouse,B.Code
                )T

                                                   ]]></a>
            strSQL = String.Format(strSQL, strwhere)
            strSQL = strSQL & "  where 1=1 "
            Select Case FType
                Case 1 'nhà kho
                    strSQL &= " and T.Type=0"
                Case 2 'Dãy kệ
                    strSQL &= " and T.Type=1"
                Case 3 'khoang
                    strSQL &= " and T.Type=2"
            End Select
            Dim tbl_DBSource As New DataTable
            Dim Q_DB As Query = Query.Sql(strSQL).Transaction(True)
            tbl_DBSource = Q_DB.ToTable
            For Each trow As DataRow In tbl_DBSource.Rows
                Dim InsertView As Query = Query.Entity("View Tyle Lapday").Insert
                InsertView.Fields("Code") = trow("Code")
                InsertView.Fields("Name") = trow("Name")
                InsertView.Fields("Cubage") = trow("Cubage")
                InsertView.Fields("Cubage Actual") = trow("Cubage Actual")
                InsertView.Fields("Cubage Out") = trow("Cubage Out")
                InsertView.Fields("Weight") = trow("Weight")
                InsertView.Fields("Weight Actual") = trow("Weight Actual")
                InsertView.Fields("Weight Out") = trow("Weight Out")
                InsertView.Fields("Type") = trow("Type")
                InsertView.Fields("Login ID") = LoginID
                InsertView.Execute()
            Next
            Query.EndTransaction()
            Framework.OpenEntity("View Tyle Lapday", "[Login ID]='" & LoginID & "'")
        Catch ex As Exception

            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub
    Public Sub Open_TyleLapday(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = sender.CurrentRow
            Dim ClientEntity As New ClientContext("View TyleLapDay Curr")
            Dim parameters As DataRow = ClientEntity.Parameters
            parameters("Code") = r("Code")
            parameters("Name") = r("Name")
            parameters("Cubage") = r("Cubage")
            parameters("Cubage Actual") = r("Cubage Actual")
            parameters("Cubage Out") = r("Cubage Out")
            parameters("Weight") = r("Weight")
            parameters("Weight Actual") = r("Weight Actual")
            parameters("Weight Out") = r("Weight Out")
            ClientEntity.Show()
        Catch ex As Exception

        End Try
    End Sub
    Public Sub ColumValueChange_Bin(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim r As Hashtable = sender.CurrentRow
            Select Case sender.ColumnName
                Case "Zone Code"
                    Dim QZone As Query = Query.From("Zone").Transaction(True)
                    QZone.WhereAs("Code") = r("Zone Code")
                    r("Warehouse") = QZone.Value("Warehouse Class Code")
            End Select
        Catch ex As Exception

        End Try
    End Sub

    'Public Shared Sub New_IVBOMTransactionPostingHeader_LotNo(ByVal sender As WXSource, ByVal e As WXArgs)

    '    Try
    '        Query.BeginTransaction()
    '        Dim r As Hashtable = sender.CurrentRow
    '        If (r Is Nothing OrElse r.Count <= 0) Then
    '            Query.RollBack()
    '            Return
    '        End If
    '        Dim DocApply As String = ""
    '        If r("Status") < 2 Then
    '            Query.RollBack()
    '            WorkSession.MsgML("This Document must be Released first !")
    '            Return
    '        End If

    '        Dim Qes As Query = Query.From("Item Journal Line").Transaction(True)
    '        Qes.Where("Document No_").Is(r("No_"))

    '        If Qes.RecordCount < 0 Then
    '            Query.RollBack()
    '            Return
    '        End If
    '        Dim messAlert As New StringBuilder
    '        If r("Document Type") = 0 Or r("Document Type") = 2 Then
    '            Dim strItemLotNo_ As String = "select A.[Source No_],A.[Item No_],A.[Lot No_],A.[Expiration Date] from [Item Journal Line] B with (nolock)"
    '            strItemLotNo_ &= " inner join [Item Journal Line Lot No_] A with (nolock) on B.[Document No_]=A.[Document No_]"
    '            strItemLotNo_ &= " and A.[Item No_]=B.[Item No_] and A.[Line No_]=B.[Line No_]"
    '            strItemLotNo_ &= " where B.[Document No_]='" & r("No_") & "'"

    '            Dim dtItemLotNo_ As New DataTable
    '            Dim QItemLot As Query = Query.Sql(strItemLotNo_).Transaction(True)
    '            dtItemLotNo_ = QItemLot.ToTable
    '            For Each tItemLot As DataRow In dtItemLotNo_.Rows
    '                Dim TLotNo_ As String = tItemLot("Lot No_")
    '                Dim TSourceNo_ As String = tItemLot("Source No_")
    '                Dim TExpirationDate As String = tItemLot("Expiration Date")
    '                Dim TItemNo_ As String = tItemLot("Item No_")
    '                Dim strValue As String = "select top 1 A.[Item No_],A.[Expiration Date] from [Value Entry] A with (nolock)"
    '                strValue &= " where A.[Item No_]='" & TItemNo_ & "' and A.[Lot No_]='" & TLotNo_ & "'"
    '                strValue &= " and A.[Variant Code]='" & TSourceNo_ & "' and convert(Date,A.[Expiration Date])<>convert(Date," & Framework.SQLTODATE(TExpirationDate) & ")"
    '                Dim QValue As Query = Query.Sql(strValue).Transaction(True)
    '                If QValue.ToTable.Rows.Count > 0 Then
    '                    messAlert.AppendLine(" Mã hàng:" & TItemNo_ & " Số Lô:" & TLotNo_ & " Nhà Cung cấp:" & TSourceNo_ & " đã có hạn dùng là:" & QValue.Value("Expiration Date"))
    '                End If
    '            Next
    '            If messAlert.ToString() <> "" Then
    '                WorkSession.MsgML(messAlert.ToString())
    '                Query.RollBack()
    '                Return
    '            End If
    '        End If


    '        Dim DocNo1 As String = r("No_")
    '        Dim DocType1 As Integer = r("Document Type")
    '        Dim Originally As String = r("Originally Ordered No_")
    '        If DocType1 = 1 Then
    '            If Convert.ToDateTime(r("Posting Date")) > Date.Now Then
    '                Query.RollBack()
    '                WorkSession.MsgML("Không thể xuất kho ngày chứng từ lớn hơn ngày hiện tại!!!")
    '                Return
    '            End If
    '        End If
    '        Dim rLine As DataRow = Qes.TakeRow(0)
    '        Dim tblLineName As String = sender.Relations(0).TableName
    '        Dim JournalTemplate As String = r("Journal Template Name")
    '        Dim JournalBatch As String = r("Name")
    '        Dim SourceCode As String = r("Source Code")
    '        Dim Responsibility As String = ""
    '        Dim DocumentNo As String = r("No_")
    '        Responsibility = r("Responsibility Center")

    '        Dim Qt4Customer As String = ISDBNULL(rLine("Parent Source No_"), "")
    '        Dim SeriesCode As String = r("No_ Series")
    '        Dim LineCode As String = r("Posting No_ Series")
    '        Dim ResponsibilityCenter As String = r("Responsibility Center")

    '        Dim q As Query = Query.From("Item Journal Line").Transaction(True)
    '        'q.WhereAs("Journal Template Name") = JournalTemplate
    '        '' q.WhereAs("Journal Batch Name") = JournalBatch
    '        'q.WhereAs("Source Code") = SourceCode
    '        'q.WhereAs("Originally Ordered No_") = rLine("Originally Ordered No_")

    '        Dim sSqlText As String = Framework.ReadResourceText("DECCodeLogics.ItemLot.sql")

    '        Dim Policy As Query = Query.Sql(sSqlText)

    '        Policy.Parameters("@DocumentNo_") = r("No_")

    '        Dim dt As DataTable = Policy.ToTable
    '        If dt.Rows.Count = 0 Then
    '            Query.RollBack()
    '            Return
    '        End If
    '        Dim QLine As New Query
    '        Dim Tbl_journal As New DataTable
    '        Dim Tbl_temp As New DataTable
    '        Dim Tbl_salesline As New DataTable

    '        QLine = Query.From("Item Journal Line").Select("Item No_").Transaction(True)
    '        QLine.WhereAs("Journal Template Name") = JournalTemplate
    '        QLine.WhereAs("Journal Batch Name") = JournalBatch
    '        QLine.WhereAs("Source Code") = SourceCode
    '        QLine.WhereAs("Originally Ordered No_") = rLine("Originally Ordered No_")
    '        QLine.WhereAs("Document No_") = rLine("Document No_")
    '        QLine.GroupBy("Item No_")
    '        Tbl_temp = QLine.ToTable
    '        Dim HeaderPostingGroup As String = ""
    '        Dim OrderLineTable As New DataTable
    '        If r("Document Type") = 1 Then
    '            '======================= kiem tra so luong Lot No_======================
    '            For ii As Integer = 0 To Tbl_temp.Rows.Count - 1
    '                Dim Qtybasic_SO As Decimal = 0
    '                Dim Qtybasic_IL As Decimal = 0
    '                Dim Qtyper As Decimal = 0
    '                QLine = Query.From("Item Journal Line").Select("[Item No_],Sum([Quantity] * [Qty_ per Unit of Measure]) as [Quantity]").Transaction(True)
    '                QLine.WhereAs("Journal Template Name") = JournalTemplate
    '                QLine.WhereAs("Journal Batch Name") = JournalBatch
    '                QLine.WhereAs("Source Code") = SourceCode
    '                QLine.WhereAs("Originally Ordered No_") = rLine("Originally Ordered No_")
    '                QLine.WhereAs("Item No_") = Tbl_temp.Rows(ii)("Item No_")
    '                QLine.WhereAs("Document No_") = rLine("Document No_")
    '                QLine.GroupBy("[Item No_]")
    '                Tbl_journal = QLine.Transaction(True).ToTable
    '                For i As Integer = 0 To Tbl_journal.Rows.Count - 1
    '                    'Qtyper = ItemInfo.GetQtyPer(Tbl_journal.Rows(i)("Item No_"), Tbl_journal.Rows(i)("Unit of Measure Code"))
    '                    Qtybasic_IL += Tbl_journal.Rows(i)("Quantity") '* Qtyper
    '                Next
    '                QLine = Query.From("Sales Order Line").Select("[No_], Sum([Outstanding Quantity]* [Qty_ per Unit of Measure]) AS [Quantity],[Unit of Measure]").Transaction(True)
    '                QLine.WhereAs("Document No_") = rLine("Originally Ordered No_")
    '                QLine.WhereAs("No_") = Tbl_temp.Rows(ii)("Item No_")
    '                QLine.GroupBy("[No_],[Unit of Measure]")
    '                Tbl_salesline = QLine.ToTable
    '                For i As Integer = 0 To Tbl_salesline.Rows.Count - 1
    '                    'Qtyper = ItemInfo.GetQtyPer(Tbl_salesline.Rows(i)("No_"), Tbl_salesline.Rows(i)("Unit of Measure"))
    '                    Qtybasic_SO += Tbl_salesline.Rows(i)("Quantity") '* Qtyper
    '                Next
    '                If Qtybasic_IL > Qtybasic_SO Then
    '                    Query.RollBack()
    '                    WorkSession.MsgML("Quantity of item {0} is greater than order", Tbl_temp.Rows(ii)("Item No_"))
    '                    Return
    '                End If

    '            Next
    '            '======================= End ======================

    '            For m As Integer = 0 To dt.Rows.Count - 1
    '                If DocApply.IndexOf(dt.Rows(m)("Originally Ordered No_")) Then
    '                    If m = 0 Then
    '                        DocApply = dt.Rows(m)("Originally Ordered No_")
    '                    Else
    '                        DocApply &= "|" & dt.Rows(m)("Originally Ordered No_")
    '                    End If
    '                End If
    '            Next
    '            q = Query.From("Sales Order Line").Transaction(True)
    '            q.Where("Document No_").InRange(DocApply)
    '            OrderLineTable = q.ToTable
    '            QLine = Query.From("Item Journal Line").Transaction(True)
    '            QLine.WhereAs("Journal Template Name") = JournalTemplate
    '            QLine.WhereAs("Journal Batch Name") = JournalBatch
    '            QLine.WhereAs("Source Code") = SourceCode
    '            QLine.WhereAs("Originally Ordered No_") = rLine("Originally Ordered No_")
    '            QLine.WhereAs("Document No_") = rLine("Document No_")
    '            Tbl_temp = QLine.ToTable
    '            For ii As Integer = 0 To Tbl_temp.Rows.Count - 1
    '                Dim Loca As New Location(Tbl_temp.Rows(ii)("Location Code"))
    '                If (Loca.GetLotRequire = 1 AndAlso Tbl_temp.Rows(ii)("Lot No_") = "") Then
    '                    Query.RollBack()
    '                    WorkSession.MsgML("Location {0} must input LotNo_", Tbl_temp.Rows(ii)("Location Code"))
    '                    Return
    '                End If
    '            Next
    '        Else
    '            If r("Document Type") = 0 Then
    '                For m As Integer = 0 To dt.Rows.Count - 1
    '                    If DocApply.IndexOf(dt.Rows(m)("Originally Ordered No_")) Then
    '                        If m = 0 Then
    '                            DocApply = dt.Rows(m)("Originally Ordered No_")
    '                        Else
    '                            DocApply &= "|" & dt.Rows(m)("Originally Ordered No_")
    '                        End If
    '                    End If
    '                Next
    '                QLine = Query.From("Item Journal Line").Transaction(True)
    '                QLine.WhereAs("Journal Template Name") = JournalTemplate
    '                QLine.WhereAs("Journal Batch Name") = JournalBatch
    '                QLine.WhereAs("Source Code") = SourceCode
    '                QLine.WhereAs("Originally Ordered No_") = rLine("Originally Ordered No_")
    '                QLine.WhereAs("Document No_") = rLine("Document No_")
    '                Tbl_temp = QLine.ToTable
    '                For ii As Integer = 0 To Tbl_temp.Rows.Count - 1
    '                    Dim Loca As New Location(Tbl_temp.Rows(ii)("Location Code"))
    '                    If (Loca.GetLotRequire = 1 AndAlso Tbl_temp.Rows(ii)("Lot No_") = "") Then
    '                        Query.RollBack()
    '                        WorkSession.MsgML("Location {0} must input LotNo_", Tbl_temp.Rows(ii)("Location Code"))
    '                        Return
    '                    End If
    '                    Dim sql As String = "   select [Code] from [Item Unit of Measure] A where A.[Qty_ per Unit of Measure] = 1 AND A.[Item No_] = '" & Tbl_temp.Rows(ii)("Item No_") & "'	 "
    '                    Dim selectItem As Query = Query.Sql(sql).Transaction(True)
    '                    'Dim insertPurchaseView As Query = Query.Entity("Cost Purchase View 001").Insert.Transaction(True)
    '                    'insertPurchaseView.Fields("Item No_") = Tbl_temp.Rows(ii)("Item No_")
    '                    'insertPurchaseView.Fields("Document No_") = Tbl_temp.Rows(ii)("Originally Ordered No_")
    '                    'insertPurchaseView.Fields("Source No_") = Tbl_temp.Rows(ii)("Source No_")
    '                    'insertPurchaseView.Fields("Posting Date") = DateTime.Now
    '                    'insertPurchaseView.Fields("Unit Of Measure") = CodeLibrary.ObjectName.GetObjectName("Item Unit of Measure", "Code", "Qty_ per Unit of Measure", 1, 3)
    '                    'insertPurchaseView.Fields("Unit Cost") = docLines("Unit Cost")
    '                    'insertPurchaseView.Fields("Unit Of Measure") = selectItem.Value("Code")
    '                    'insertPurchaseView.Fields("Unit Cost") = Tbl_temp.Rows(ii)("Unit Cost") / Tbl_temp.Rows(ii)("Qty_ per Unit of Measure")
    '                    'insertPurchaseView.Fields("Quantity") = Tbl_temp.Rows(ii)("Quantity")
    '                    'insertPurchaseView.Fields("Amount") = Tbl_temp.Rows(ii)("Amount")
    '                    'insertPurchaseView.Execute()
    '                Next
    '                QLine = Query.From("Purchase Order Header").Transaction(True)
    '                QLine.Where("No_").Is(rLine("Originally Ordered No_"))
    '                HeaderPostingGroup = QLine.Value("Vendor Posting Group")
    '            End If
    '        End If
    '        Dim str As String = ""
    '        'Check validate
    '        If Not ItemPostingCheck(dt, str, SeriesCode, LineCode) Then
    '            Query.RollBack()
    '            WorkSession.MsgML(str)
    '            sender.RefreshSource()
    '            Return
    '        End If
    '        If Not PostingDateValid(dt, str) Then
    '            Query.RollBack()
    '            WorkSession.MsgML(str)
    '            Return
    '        End If
    '        If Not DimensionValid(dt, str) Then
    '            Query.RollBack()
    '            WorkSession.MsgML(str)
    '            Return
    '        End If

    '        Dim docs() As Object = GetDistinctValues(dt, "Document No_")
    '        Dim objSeries As New SeriesNumber(SeriesCode, SourceCode, ResponsibilityCenter, tblLineName, Framework.UserID, LineCode)
    '        Dim DocNo As Integer = 0
    '        Dim ExtdocNo As Integer = 0
    '        Dim DocStr As String = ""
    '        Dim ExtDocStr As String = ""
    '        Dim ExchRate As Decimal
    '        Dim GLItemExDocNo As String = ""
    '        For i As Integer = 0 To docs.Length - 1
    '            If docs(i) Is Nothing Then
    '                Continue For
    '            End If
    '            If (docs(i)("Status")) <> 2 Then
    '                Query.RollBack()
    '                WorkSession.MsgML("You must approve first !")
    '                Return
    '            End If
    '        Next
    '        'Compile External number used
    '        For i As Integer = 0 To docs.Length - 1
    '            If docs(i) Is Nothing Then
    '                Continue For
    '            End If
    '            If (DocStr.IndexOf(docs(i)("Document No_"))) < 0 Then
    '                If (i < docs.Length - 1 AndAlso docs.Length > 0) Then
    '                    DocStr &= ","
    '                End If
    '                DocStr &= docs(i)("Document No_")
    '            End If
    '            If (ExtDocStr.IndexOf(dt.Rows(i)("External Document No_"))) < 0 Then
    '                If (i < docs.Length - 1 AndAlso docs.Length > 0) Then
    '                    DocStr &= ","
    '                End If
    '                ExtDocStr &= IIf(dt.Rows(i)("External Document No_") IsNot System.DBNull.Value, dt.Rows(i)("External Document No_"), "")
    '            End If
    '        Next
    '        'Check is Direct posting to GL 
    '        Dim querySetup As Query = Query.From("Inventory Setup").Select("[Automatic Cost Posting],[Expected Cost Posting to G_L]").Transaction(True)
    '        Dim rsSetup As DataTable = querySetup.ToTable()
    '        Dim expectedCost As Integer = rsSetup.Rows(0)("Expected Cost Posting to G_L")
    '        Dim isDirectPosting As Integer = rsSetup.Rows(0)("Automatic Cost Posting")
    '        If isDirectPosting = 0 Then
    '            expectedCost = 0
    '        End If
    '        q = Query.From("Purchases Payables Setup").Transaction(True)
    '        Dim ReceiptOnVendorLedger As Integer = q.Value("Receipt On Vendor Ledger")
    '        Dim QtyTolerant As Decimal = q.Value("Quantity Tolerant Percent")
    '        Dim GLPosting As Integer = q.WithDefault(1).Value("GL Posting")
    '        Dim Ex_manda As Integer = 0
    '        Ex_manda = q.Value("Ext_ Doc_ No_ Mandatory")
    '        ''If WorkSession.MsgML("Post now?") Then Return
    '        Dim objPurchase As New PurchasesPayablesSetup()
    '        Dim hPurchase As Hashtable = objPurchase.GetPurchaseSetup()
    '        Dim flVATPPost As Integer = 0
    '        If (hPurchase.ContainsKey("Interim Purchase VAT")) Then
    '            flVATPPost = CInt(CodeLibrary.Library.ISDBNULL(hPurchase("Interim Purchase VAT"), 0))
    '        End If
    '        Dim RndQtyBase As Integer = 0
    '        Dim objInventory As New InventorySetup()
    '        Dim hSetup As Hashtable = objInventory.GetInventorySetup()
    '        If (hSetup.ContainsKey("Rounding Base Unit") = True) Then
    '            RndQtyBase = CInt(ISDBNULL(hSetup("Rounding Base Unit"), 0))
    '        End If

    '        Dim StrSql As String = ""
    '        Dim Adjustment As Integer = 0

    '        q = Query.From("Value Entry").Select("([Entry No_]+1) AS ItemEntryNo").Top(1).OrderBy("ItemEntryNo").DESC.Transaction(True)
    '        'Dim rs As DataTable = q.ToTable()
    '        Dim ItemEntryNo As Integer = q.Value("ItemEntryNo")
    '        If ItemEntryNo = 0 Then ItemEntryNo = 1
    '        Dim ItemregFromEntry As Integer = ItemEntryNo
    '        Dim regJounalBatch As String = ""
    '        Dim regSourceCode As String = ""
    '        Dim TemplateName As String
    '        Dim regFromVATEntry As Integer
    '        Dim regToVATEntry As Integer
    '        Dim TransNo As Integer = 1
    '        Dim EntryNo As Integer = GLAccount.GetMaxGLEntry(0, TransNo)
    '        'ItemEntryNo = GLAccount.GetMaxGLEntry(4, 0)

    '        Dim ItemregToEntry As Integer = ItemregFromEntry
    '        If EntryNo <= 0 Then EntryNo = 1
    '        If TransNo <= 0 Then TransNo = 1
    '        Dim regFromEntry As Integer = EntryNo
    '        Dim regToEntry As Integer = EntryNo
    '        Dim doc As String = ""
    '        'Post
    '        For i As Integer = 0 To docs.Length - 1
    '            'If (docs(i) Is Nothing OrElse docs(i).Count <= 0) Then Continue For
    '            If (docs(i) Is Nothing) Then Continue For
    '            doc = CStr(docs(i)("Document No_"))
    '            'Get document lines
    '            Dim docLines() As DataRow = dt.Select(String.Format("[Document No_]='{0}'", doc))
    '            Dim InventoryAccount As String = ""
    '            Dim InvAccount As String = ""
    '            Dim InventoryAdjAccount As String = ""
    '            Dim InvAdjAccount As String = ""

    '            'For each line post information to Entry
    '            For k As Integer = 0 To docLines.Length - 1
    '                Dim objItem As New CodeLibrary.ItemInfo(CStr(docLines(k)("Item No_")))
    '                Dim oCurr As New Currency(CStr(docLines(k)("Currency Code")))
    '                If (objItem.GetMessages <> "") Then
    '                    Query.RollBack()
    '                    WorkSession.MsgML(objItem.GetMessages)
    '                    Return
    '                End If
    '                Dim ItemNo As String = CStr(docLines(k)("Item No_"))
    '                Dim SourceNo As String = CStr(docLines(k)("Source No_"))
    '                Dim ExtDocumentNo As String = CStr(docLines(k)("External Document No_"))
    '                Dim OrderLineRow As DataRow = Nothing
    '                'Check customer
    '                If (CInt(docLines(k)("Document Type")) = 1 And SourceNo = "") Or (CInt(docLines(k)("Document Type")) = 10 And SourceNo = "") Then  '2 Ship
    '                    Query.RollBack()
    '                    WorkSession.MsgML("(*) Customer code must input")
    '                    Return
    '                End If
    '                'Check Vendor
    '                If (CInt(docLines(k)("Document Type")) = 0 And SourceNo = "") Or (CInt(docLines(k)("Document Type")) = 9 And SourceNo = "") Then '3 Vendor No
    '                    Query.RollBack()
    '                    WorkSession.MsgML("(*) Vendor code must input")
    '                    Return
    '                End If
    '                If CDec(docLines(k)("Quantity")) = 0 Then
    '                    Query.RollBack()
    '                    WorkSession.MsgML("(*) Quantity must be input")
    '                    Return
    '                End If
    '                'Query costing method
    '                Dim costMethod As Integer = objItem.GetCostingMethod
    '                Dim docApplyEntry As Integer = CInt(docLines(k)("Applies-to Entry"))
    '                If docApplyEntry = 0 And costMethod = 3 And CInt(docLines(k)("Document Type")) = 1 Then '3 Specific cost - 1 Ship, 0: Receipt
    '                    Query.RollBack()
    '                    WorkSession.MsgML("(*) Item {0} is specific cost method. Apply to entry must input", CStr(docLines(k)("Item No_")))
    '                    Return
    '                End If
    '                'Assign line value to entry
    '                TemplateName = CStr(docLines(k)("Journal Template Name"))
    '                regJounalBatch = CStr(docLines(k)("Journal Batch Name"))
    '                regSourceCode = CStr(docLines(k)("Source Code"))
    '                'Get exchange rate
    '                ExchRate = CDec(docLines(k)("Overhead Rate"))
    '                If ExchRate = 0 Then ExchRate = 1
    '                Dim LocationCode As String = CStr(docLines(k)("Location Code"))
    '                Dim objLlocation As New Location(LocationCode)
    '                Dim hLocation As Hashtable = objLlocation.GetFields
    '                'Dim hstAcc As Hashtable = objLlocation.GetPostingSetup(p)
    '                Dim blInterim As Boolean = CInt(ISDBNULL(hLocation("Type"), 0)) = 4
    '                blInterim = blInterim AndAlso expectedCost = 1
    '                Dim ItemInterimAccount As String = ""
    '                Dim hstItemAccount As Hashtable = objItem.GetPostingGroup(LocationCode)

    '                If (hstItemAccount Is Nothing OrElse hstItemAccount.Count <= 0) Then
    '                    Query.RollBack()
    '                    WorkSession.MsgML(objItem.GetMessages & " Posting Group must setup for Location '{0}' and Group '{1}'", LocationCode, objItem.GetInventoryGroup)
    '                    Return
    '                End If
    '                Dim TotalCost As Decimal = oCurr.RoundAmt(CDec(docLines(k)("Amount")) - CDec(docLines(k)("Discount Amount")))
    '                Dim TotalCostLCY As Decimal = oCurr.RoundAmt(CDec(docLines(k)("Amount (LCY)")) - CDec(docLines(k)("Discount Amount")) * ExchRate)
    '                Dim totalPrice As Decimal = oCurr.UnitRoundAmt(CDec(docLines(k)("Unit Amount")) * CDec(docLines(k)("Quantity"))) '* ExchRate
    '                Dim unitcostLCY As Decimal, Unitprice As Decimal
    '                Dim UnitCost As Decimal = oCurr.UnitRoundAmt(CDec(docLines(k)("Unit Amount")) * CDec(docLines(k)("Quantity")))
    '                Dim VATAmt As Decimal = CDec(docLines(k)("VAT Amount"))
    '                unitcostLCY = oCurr.RoundAmt(UnitCost * ExchRate)
    '                Dim sign, doctype As Integer
    '                Dim adjtype As Integer
    '                Dim Sourcetype As Integer
    '                Select Case CInt(docLines(k)("Document Type"))
    '                    Case 0
    '                        Dim ItemQuotaC As String = objItem.GetCommonItem    'q.Value("Common Item No_")
    '                        Dim iCheckQuota As Integer = objItem.GetQuotaRequest  'q.Value("Quota Request")
    '                        If (iCheckQuota > 0) Then
    '                            Dim UnitQtyQuo As String = ""
    '                            Dim qtyperQuo As Decimal = 1
    '                            Dim qtyofUOM As Decimal = 1
    '                            Dim Qotaremain As Decimal = 0
    '                            Dim Tam As Decimal = 0
    '                            StrSql = "SELECT a.* FROM [Quota] a WITH(NOLOCK),[Quota Document] b WITH(NOLOCK)"
    '                            StrSql &= " WHERE a.[Quota Type] = 0 AND a.[Document No_] = b.No_ "
    '                            StrSql &= " AND a.[Quota Remaining Quantity] > 0"
    '                            StrSql &= " AND (a.[Item No_] = N'" & ItemNo & "' )"
    '                            StrSql &= " AND (a.[Source No_] = N'" & SourceNo & "' )"
    '                            StrSql &= " And " & CodeLibrary.CheckRange.ParseFilter(CStr(docLines(k)("Cross-Reference No_")), "a.[Document No_]", 3)
    '                            StrSql &= " ORDER BY a.[Expiration Date] ASC"
    '                            Dim DtQuota As DataTable = Query.Sql(StrSql).Transaction(True).ToTable()
    '                            If (DtQuota.Rows.Count <= 0) Then
    '                                Query.RollBack()
    '                                WorkSession.MsgML(String.Format("(*) Item '{0}' must be setup for Quota", ItemNo))
    '                                Return
    '                            End If
    '                            Dim ExpDate As String = ""
    '                            qtyofUOM = CDec(IIf(CStr(docLines(k)("Unit of Measure Code")) <> "", ItemInfo.GetQtyPer(ItemNo, CStr(docLines(k)("Unit of Measure Code"))), 1))
    '                            Dim QtyOnOder As Decimal = CDec(docLines(k)("Quantity")) * qtyofUOM
    '                            For lo As Integer = 0 To DtQuota.Rows.Count - 1
    '                                ExpDate = CStr(DtQuota.Rows(lo)("Expiration Date"))
    '                                If (Convert.ToDateTime(ExpDate) < Convert.ToDateTime(docLines(k)("Document Date"))) Then
    '                                    Query.RollBack()
    '                                    WorkSession.MsgML(String.Format("(*) Quota for '{0}' is Exprired date", ItemNo))
    '                                    Return
    '                                End If
    '                                UnitQtyQuo = CStr(DtQuota.Rows(lo)("Unit of Measure Code"))
    '                                qtyperQuo = CDec(IIf(UnitQtyQuo <> "", ItemInfo.GetQtyPer(ItemNo, UnitQtyQuo), 1))
    '                                Qotaremain = CDec(DtQuota.Rows(lo)("Quota Remaining Quantity"))
    '                                Tam += (Qotaremain * qtyperQuo)
    '                            Next
    '                            If (Tam < QtyOnOder) Then
    '                                Query.RollBack()
    '                                WorkSession.MsgML(String.Format("(*) Quota for '{0}' is not enough", ItemNo))
    '                                Return
    '                            End If
    '                            For lo As Integer = 0 To DtQuota.Rows.Count - 1
    '                                UnitQtyQuo = CStr(DtQuota.Rows(lo)("Unit of Measure Code"))
    '                                qtyperQuo = CDec(IIf(UnitQtyQuo <> "", ItemInfo.GetQtyPer(ItemNo, UnitQtyQuo), 1))
    '                                Qotaremain = CDec(DtQuota.Rows(lo)("Quota Remaining Quantity"))
    '                                Tam = (Qotaremain * qtyperQuo)
    '                                If QtyOnOder <= 0 Then
    '                                    Continue For
    '                                End If
    '                                If QtyOnOder >= Tam Then
    '                                    q = Query.Update("Quota")
    '                                    q.Fields("Quota Remaining Quantity") = 0
    '                                    q.Where("Item No_").Is(ItemNo)
    '                                    q.And("Quota Type").Is(0)
    '                                    q.And("Document No_").Is(DtQuota.Rows(lo)("Document No_")) ' cái náy cực kỳ quan trọng nhé.
    '                                    q.Execute()
    '                                Else
    '                                    q = Query.Update("Quota")
    '                                    q.Fields("Quota Remaining Quantity") = (Tam - QtyOnOder) / qtyperQuo
    '                                    q.Where("Item No_").Is(ItemNo)
    '                                    q.And("Quota Type").Is(0)
    '                                    q.And("Document No_").Is(DtQuota.Rows(lo)("Document No_")) ' cái náy cực kỳ quan trọng nhé.
    '                                    q.Execute()
    '                                End If
    '                                QtyOnOder -= Tam
    '                            Next
    '                        End If
    '                        QLine = Query.From("Purchase Order Header").Transaction(True)
    '                        QLine.Where("No_").Is(rLine("Originally Ordered No_"))
    '                        HeaderPostingGroup = CStr(QLine.Value("Vendor Posting Group"))
    '                        q = Query.From("Purchase Order Line")
    '                        q.Where("Document No_").Is(CStr(docLines(k)("Originally Ordered No_")))
    '                        q.And("No_").Is(ItemNo)
    '                        q.And("Line No_").Is(CInt(docLines(k)("Line No_")))
    '                        OrderLineTable = q.Transaction(True).ToTable
    '                        For Each irow As DataRow In OrderLineTable.Rows
    '                            If CStr(irow("No_")) = ItemNo And CInt(irow("Line No_")) = CInt(docLines(k)("Line No_")) Then
    '                                OrderLineRow = irow
    '                            End If
    '                        Next
    '                        adjtype = 0
    '                        Sourcetype = 3
    '                        sign = 1
    '                        doctype = 3 'negative 

    '                    Case 2, 4, 6, 8, 10 '10 is return shipment from customer
    '                        For Each irow As DataRow In OrderLineTable.Rows
    '                            If CStr(irow("No_")) = ItemNo And CInt(irow("Line No_")) = CInt(docLines(k)("Line No_")) Then
    '                                OrderLineRow = irow
    '                            End If
    '                        Next
    '                        adjtype = 0
    '                        Sourcetype = 3
    '                        sign = 1
    '                        doctype = 3 'negative 
    '                        QLine = Query.From("Sales Return Order Header").Transaction(True)
    '                        QLine.Where("No_").Is(rLine("Originally Ordered No_"))
    '                        Dim AppliesDocno As String = CStr(QLine.Value("Applies-to Doc_ No_"))
    '                        If (AppliesDocno <> "") Then
    '                            StrSql = "SELECT TOP 1 A.[Shipment No_], B.[Posting Date], C.[Journal Batch Name]"
    '                            StrSql &= " FROM [Sales Order Line] A WITH(NOLOCK), [Sales Order Header] B WITH(NOLOCK), [G_L Entry] C WITH(NOLOCK)"
    '                            StrSql &= " WHERE A.[Document No_] = B.No_"
    '                            StrSql &= " AND A.[Shipment No_] = C.[Document No_] AND A.[Shipment No_] <> N''"
    '                            StrSql &= String.Format(" AND A.[No_] = N'{0}'", AppliesDocno)
    '                            Dim DsSource As DataTable = Query.Sql(StrSql).Transaction(True).ToTable()
    '                            If (DsSource.Rows.Count > 0) Then
    '                                Dim OrderDate As DateTime = CDate(CodeLibrary.Library.ISDBNULL(DsSource.Rows(0)("Posting Date"), Now))
    '                                Dim SInvoice As String = CStr(CodeLibrary.Library.ISDBNULL(DsSource.Rows(0)("Shipment No_"), ""))
    '                                Dim BachName As String = CStr(CodeLibrary.Library.ISDBNULL(DsSource.Rows(0)("Journal Batch Name"), ""))
    '                                If (BachName.IndexOf("Inventory Costing") >= 0) Then
    '                                    Adjustment = 1
    '                                End If
    '                            End If
    '                        End If
    '                    Case 3, 5, 7, 9 '9 is return receipt to vendor
    '                        For Each irow As DataRow In OrderLineTable.Rows
    '                            If CStr(irow("No_")) = ItemNo And CInt(irow("Line No_")) = CInt(docLines(k)("Line No_")) Then
    '                                OrderLineRow = irow
    '                            End If
    '                        Next
    '                        adjtype = 3
    '                        Sourcetype = 4
    '                        sign = -1
    '                        doctype = 2 'positive
    '                        QLine = Query.From("Purchase Return Order Header").Transaction(True)
    '                        QLine.Where("No_").Is(rLine("Originally Ordered No_"))
    '                        HeaderPostingGroup = CStr(QLine.Value("Vendor Posting Group"))
    '                    Case 1 'ship
    '                        Dim oQuota As Quota = New Quota(ItemNo, CStr(docLines(k)("Document Date")), Qt4Customer, CStr(docLines(k)("Cross-Reference No_")))
    '                        If (oQuota.QuotaRequire > 1 AndAlso oQuota.GetMessage <> "") Then
    '                            Query.RollBack()
    '                            WorkSession.MsgML(oQuota.GetMessage)
    '                            Return
    '                        End If
    '                        If (oQuota.QuotaRequire > 1 AndAlso CDec(docLines(k)("Quantity")) > oQuota.QuotaQuantityRemain) Then
    '                            Query.RollBack()
    '                            WorkSession.MsgML(String.Format("(**) Quota for {0} is not enough", ItemNo))
    '                            Return
    '                        End If
    '                        If (oQuota.QuotaRequire > 1 AndAlso CDec(docLines(k)("Quantity")) <= oQuota.QuotaQuantityRemain) Then
    '                            Dim salesQty As Decimal = CDec(docLines(k)("Quantity"))
    '                            salesQty *= CDec(IIf(CStr(docLines(k)("Unit of Measure Code")) <> "", ItemInfo.GetQtyPer(ItemNo, CStr(docLines(k)("Unit of Measure Code"))), 1))
    '                            Dim tblQuota As DataTable = oQuota.Table_Quota
    '                            Dim j As Integer = 0
    '                            While (j <= tblQuota.Rows.Count - 1 AndAlso salesQty > 0 AndAlso tblQuota.Rows.Count > 0)
    '                                Dim QuotaRow As DataRow = tblQuota.Rows(j)
    '                                Dim UnitQtyQuo As String = CStr(QuotaRow("Unit of Measure Code"))
    '                                Dim qtyperQuo As Decimal = ItemInfo.GetQtyPer(ItemNo, UnitQtyQuo)
    '                                If (qtyperQuo = 0) Then qtyperQuo = 1
    '                                Dim QuotaQty As Decimal = qtyperQuo * CDec(QuotaRow("Quota Remaining Quantity"))
    '                                q = Query.Update("Quota")
    '                                If (salesQty >= QuotaQty) Then
    '                                    q.Fields("Quota Remaining Quantity") = 0
    '                                    salesQty -= QuotaQty
    '                                Else
    '                                    q.Fields("Quota Remaining Quantity", "-") = salesQty / qtyperQuo
    '                                    salesQty = 0
    '                                End If
    '                                q.Where("Common Item No_").Is(QuotaRow("Common Item No_"))
    '                                q.And("Quota Type").Is(1)
    '                                q.And("Document No_").Is(QuotaRow("Document No_")) ' cái náy cực kỳ quan trọng nhé.
    '                                q.Execute()
    '                                j += 1
    '                            End While
    '                            If (salesQty > 0) Then
    '                                Query.RollBack()
    '                                WorkSession.MsgML(String.Format("(*) Quota for {0} is not enough", ItemNo))
    '                                Return
    '                            End If
    '                        End If
    '                        q = Query.From("Sales Order Line")
    '                        q.Where("Document No_").Is(CStr(docLines(k)("Originally Ordered No_")))
    '                        q.And("No_").Is(ItemNo)
    '                        q.And("Line No_").Is(CInt(docLines(k)("Line No_")))
    '                        OrderLineTable = q.Transaction(True).ToTable
    '                        For Each irow As DataRow In OrderLineTable.Rows
    '                            If CStr(irow("No_")) = ItemNo And CInt(irow("Line No_")) = CInt(docLines(k)("Line No_")) Then
    '                                OrderLineRow = irow
    '                            End If
    '                        Next
    '                        adjtype = 3
    '                        Sourcetype = 4
    '                        sign = -1
    '                        doctype = 2 'positive
    '                End Select
    '                InventoryAccount = CStr(hstItemAccount("Inventory Account"))
    '                If (InventoryAccount Is Nothing OrElse InventoryAccount = "") Then
    '                    Query.RollBack()
    '                    WorkSession.MsgML(objItem.GetMessages & " Inventory Account is empty!")
    '                    Return
    '                End If
    '                Dim oGLAccount As New GLAccount(InventoryAccount)
    '                Dim iErro As Integer = 0
    '                Dim sMsg As String = ""
    '                If (oGLAccount.AllowPosting(iErro) = False) Then
    '                    Query.RollBack()
    '                    WorkSession.MsgML("(*) 'Inventory Account' {0} {1} Must Setup For Item Account {2}", InventoryAccount, oGLAccount.ErrorPost, objItem.GetItemNo)
    '                    Return
    '                End If
    '                '3. Query Inventory Adjustment Account
    '                Select Case CInt(docLines(k)("Document Type"))
    '                    Case 1 'sales
    '                        InventoryAdjAccount = CStr(hstItemAccount("COGS Account"))
    '                        If InventoryAdjAccount = "" Then 'errMsg.Add("COGS Account is empty")
    '                            Query.RollBack()
    '                            WorkSession.MsgML("(*) COGS Account is empty for Item '{0}' ", CStr(docLines(k)("Item No_")))
    '                            Return
    '                        End If
    '                    Case 10
    '                        InventoryAdjAccount = CStr(hstItemAccount("COGS Account"))
    '                        If InventoryAdjAccount = "" Then 'errMsg.Add("Sales Credit Memo Account is empty")
    '                            Query.RollBack()
    '                            WorkSession.MsgML("(*) COGS Account is empty for Item '{0}' ", CStr(docLines(k)("Item No_")))
    '                            Return
    '                        End If
    '                    Case 0 'Purchase Account
    '                        Dim objVendor As New CodeLibrary.Vendor(SourceNo)
    '                        If (objVendor.GetMessage <> "") Then
    '                            Query.RollBack()
    '                            WorkSession.MsgML(objVendor.GetMessage)
    '                            Return
    '                        End If
    '                        Dim hVendor As Hashtable = Nothing
    '                        If (HeaderPostingGroup Is Nothing OrElse HeaderPostingGroup = "") Then
    '                            HeaderPostingGroup = objVendor.GetPostingGroup
    '                        End If
    '                        hVendor = objVendor.GetAccountSetting(HeaderPostingGroup)

    '                        If (hVendor Is Nothing OrElse hVendor.Count <= 0 OrElse hVendor.ContainsKey("Payables Account") = False) Then
    '                            Query.RollBack()
    '                            WorkSession.MsgML(objVendor.GetMessage & " Payables Account must setup for Vendor '{0}' AND posting group '{1}'", objVendor.GetName, HeaderPostingGroup)
    '                            Return
    '                        End If
    '                        InventoryAdjAccount = CStr(hVendor("Payables Account"))
    '                        If InventoryAdjAccount = "" Then
    '                            Query.RollBack()
    '                            WorkSession.MsgML("(*) Payment Discount Account is empty for Vendor '{0}' " & vbCrLf & " Vendor Posting Group '{1}' must be setup first!", SourceNo, HeaderPostingGroup)
    '                            Return
    '                        End If
    '                    Case 9 'return shipment
    '                        Dim objVendor As New CodeLibrary.Vendor(SourceNo)
    '                        If (objVendor.GetMessage <> "") Then
    '                            Query.RollBack()
    '                            WorkSession.MsgML(objVendor.GetMessage)
    '                            Return
    '                        End If
    '                        Dim hVendor As Hashtable = Nothing
    '                        If (HeaderPostingGroup Is Nothing OrElse HeaderPostingGroup = "") Then
    '                            HeaderPostingGroup = objVendor.GetPostingGroup
    '                        End If
    '                        hVendor = objVendor.GetAccountSetting(HeaderPostingGroup)
    '                        If (hVendor Is Nothing OrElse hVendor.Count <= 0 OrElse hVendor.ContainsKey("Payables Account") = False) Then
    '                            Query.RollBack()
    '                            WorkSession.MsgML(objVendor.GetMessage & " Payables Account must setup for Vendor '{0}' AND posting group '{1}'", objVendor.GetName, HeaderPostingGroup)
    '                            Return
    '                        End If
    '                        InventoryAdjAccount = CStr(hVendor("Payables Account"))
    '                        If InventoryAdjAccount = "" Then 'errMsg.Add("Purchase Credit Memo Account is empty")
    '                            Query.RollBack()
    '                            WorkSession.MsgML("(*) Payment Discount Account is empty for Vendor '{0}' ", SourceNo)
    '                            Return
    '                        End If
    '                End Select
    '                If (blInterim = True) Then
    '                    ItemInterimAccount = CStr(hstItemAccount("Inventory Account (Interim)"))  'CoreLogics.CoreLogics.GetGLAccount(ItemNo, enTableModule.asInventory, 100, LocationCode) 'q.Value("Inventory Account (Interim))
    '                    If InventoryAdjAccount = "" Then 'errMsg.Add("Purchase Credit Memo Account is empty")
    '                        Query.RollBack()
    '                        WorkSession.MsgML("(*) Inventory Account (Interim) is empty for Item '{0}' ", CStr(docLines(k)("Item No_")))
    '                        Return
    '                    End If
    '                End If
    '                oGLAccount = New GLAccount(InventoryAdjAccount)
    '                If (oGLAccount.AllowPosting(iErro) = False) Then
    '                    Query.RollBack()
    '                    WorkSession.MsgML("(*) 'Inventory Account' {0} {1} Must Setup For Item Account {2}", InventoryAdjAccount, oGLAccount.ErrorPost, objItem.GetItemNo)
    '                    Return
    '                End If
    '                '________++++++_____ Finished expected posting ___________++++___________
    '                StrSql = String.Format("SELECT [No_], [Unit Cost], [Quantity], [Amount (LCY)] FROM [BOM Component] A WITH(NOLOCK)")
    '                StrSql &= String.Format(" WHERE [Journal Template] = N'{0}'", CStr(docLines(k)("Journal Template Name")))
    '                StrSql &= String.Format(" AND [Journal Batch Name] = N'{0}'", CStr(docLines(k)("Journal Batch Name")))
    '                StrSql &= String.Format(" AND [Parent Item No_] = N'{0}'", CStr(docLines(k)("Item No_")))
    '                Dim Component As DataTable = Query.Sql(StrSql).Transaction(True).ToTable
    '                If Component.Rows.Count > 0 Then 'Co BOM Journal
    '                    '---------------------------------------
    '                    For Each record As DataRow In Component.Rows
    '                        Dim objitemrecord As New ItemInfo(CStr(record("No_")))
    '                        Dim hstRecordAcc As Hashtable = objLlocation.GetPostingSetup(objitemrecord.GetInventoryGroup)
    '                        UnitCost = oCurr.RoundAmt(CDec(record("Unit Cost")) * CDec(record("Quantity")))
    '                        unitcostLCY = oCurr.RoundAmt(CDec(record("Amount (LCY)")) * CDec(record("Quantity")))
    '                        totalPrice = 0 'totalprice + unitprice
    '                        Unitprice = 0
    '                        If (isDirectPosting = 1) Then
    '                            InvAccount = CStr(hstRecordAcc("Inventory Account"))        'GetGLAccount(record("No_"), enTableModule.asInventory, 0, LocationCode) 'q.Value("Inventory Account", "")
    '                            If InvAccount = "" Then
    '                                Query.RollBack()
    '                                WorkSession.MsgML("(*) Inventory Account Must Specify for Item '{0}'", CStr(record("No_")))
    '                                Return
    '                            End If
    '                            InvAdjAccount = CStr(hstRecordAcc("Outbound Inventory Account"))       'GetGLAccount(record("No_"), enTableModule.asInventory, 3, LocationCode) 'q.Value("Outbound Inventory Account", "")
    '                            If InvAdjAccount = "" Then
    '                                Query.RollBack()
    '                                WorkSession.MsgML("(*) Outbound Inventory Account Must Specify for Item '{0}'", CStr(record("No_")))
    '                                Return
    '                            End If
    '                            Insert2GL(docLines(k), UnitCost, InvAccount, InvAdjAccount, EntryNo, TransNo, 0, -1, ExchRate, 4, CStr(record("No_")), 4, CStr(docLines(k)("Item No_")), unitcostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                            EntryNo = EntryNo + 1
    '                            Insert2GL(docLines(k), UnitCost, InvAdjAccount, InvAccount, EntryNo, TransNo, 1, 1, ExchRate, 4, CStr(docLines(k)("Item No_")), 4, CStr(record("No_")), unitcostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                            regToEntry = EntryNo
    '                            ItemEntryNo = EntryNo - 1
    '                            EntryNo = EntryNo + 1
    '                        End If
    '                        If CInt(docLines(k)("Document Type")) = 0 Or CInt(docLines(k)("Document Type")) = 10 Then  'Nhap kho
    '                            'ghi nhan dc giam
    '                            Transfer2Value(record, InvAccount, InvAdjAccount, ItemEntryNo, 3, 4, -1, isDirectPosting, CStr(docLines(k)("Currency Code")), CStr(docLines(k)("Location Code")), CDate(docLines(k)("Posting Date")), CDate(docLines(k)("Document Date")), CStr(docLines(k)("Document No_")), CStr(docLines(k)("External Document No_")), CStr(docLines(k)("Item No_")), regSourceCode, TemplateName, regJounalBatch, CStr(docLines(k)("Reason Code")), UnitCost, Unitprice, ExchRate, 0, objitemrecord, CStr(docLines(k)("Source No_")), CStr(docLines(k)("Responsibility Center")), unitcostLCY, 0, RndQtyBase)
    '                            ItemEntryNo = ItemEntryNo + 1
    '                        End If
    '                        Transfer2Value(record, InvAccount, InvAdjAccount, ItemEntryNo, adjtype, Sourcetype, sign, isDirectPosting, CStr(docLines(k)("Currency Code")), CStr(docLines(k)("Location Code")), CDate(docLines(k)("Posting Date")), CDate(docLines(k)("Document Date")), CStr(docLines(k)("Document No_")), CStr(docLines(k)("External Document No_")), CStr(docLines(k)("Item No_")), regSourceCode, TemplateName, regJounalBatch, CStr(docLines(k)("Reason Code")), UnitCost, Unitprice, ExchRate, 0, objitemrecord, CStr(docLines(k)("Source No_")), CStr(docLines(k)("Responsibility Center")), unitcostLCY, 0, RndQtyBase)
    '                        ItemEntryNo = ItemEntryNo + 1
    '                    Next
    '                    If CInt(docLines(k)("Document Type")) = 1 Then 'Xuat kho
    '                        InventoryAdjAccount = CStr(hstItemAccount("WIP Account")) '     GetGLAccount(ItemNo, 4, 9, LocationCode) 'q.Value("WIP Account", "")
    '                        If InventoryAdjAccount = "" Then
    '                            Query.RollBack()
    '                            WorkSession.MsgML("(*) Inventory WIP Account Must Specify for Item '{0}'", CStr(docLines(k)("Item No_")))
    '                            Return
    '                        End If
    '                        If isDirectPosting = 1 Then
    '                            Insert2GL(docLines(k), TotalCost, InventoryAccount, InventoryAdjAccount, EntryNo, TransNo, 0, 1, ExchRate, 4, CStr(docLines(k)("Item No_")), 0, InventoryAdjAccount, TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                            EntryNo = EntryNo + 1
    '                            Insert2GL(docLines(k), TotalCost, InventoryAdjAccount, InventoryAccount, EntryNo, TransNo, 1, -1, ExchRate, 0, InventoryAdjAccount, 4, CStr(docLines(k)("Item No_")), TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                            regToEntry = EntryNo
    '                            ItemEntryNo = EntryNo - 1
    '                            EntryNo = EntryNo + 1
    '                        End If
    '                        Insert2Value(docLines(k), TotalCost, totalPrice, InventoryAccount, InventoryAdjAccount, ItemEntryNo, doctype, 4, -sign, isDirectPosting, 0, objItem, ExchRate, TotalCostLCY, 0, RndQtyBase)
    '                        ItemEntryNo = ItemEntryNo + 1
    '                    End If
    '                End If
    '                If Component.Rows.Count > 0 AndAlso (CInt(docLines(k)("Document Type")) = 0 OrElse CInt(docLines(k)("Document Type")) = 10) Then
    '                    'get account for component
    '                    InventoryAdjAccount = CStr(hstItemAccount("WIP Account")) ' GetGLAccount(ItemNo, enTableModule.asInventory, 9, LocationCode) 'q.Value("WIP Account", "")
    '                    If InventoryAdjAccount = "" Then
    '                        Query.RollBack()
    '                        WorkSession.MsgML("(*) Inventory WIP Account Must Specify for Item '{0}'", CStr(docLines(k)("Item No_")))
    '                        Return
    '                    End If
    '                    If isDirectPosting = 1 AndAlso TotalCostLCY <> 0 Then
    '                        Insert2GL(docLines(k), TotalCost, InventoryAccount, InventoryAdjAccount, EntryNo, TransNo, 0, 1, ExchRate, 4, CStr(docLines(k)("Item No_")), 0, InventoryAdjAccount, TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                        ItemEntryNo = EntryNo
    '                        EntryNo = EntryNo + 1
    '                        Insert2GL(docLines(k), TotalCost, InventoryAdjAccount, InventoryAccount, EntryNo, TransNo, 1, -1, ExchRate, 0, InventoryAdjAccount, 4, CStr(docLines(k)("Item No_")), TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                        regToEntry = EntryNo
    '                        EntryNo = EntryNo + 1
    '                    End If
    '                    objItem.BOMValueTransactionInsert(docLines(k), ExchRate, TotalCost, totalPrice, InventoryAccount, InventoryAdjAccount, ItemEntryNo, 2, 4, sign, isDirectPosting, 0, 1, TotalCostLCY, 0, RndQtyBase, Adjustment)
    '                Else ' neu khong Tuc la khong co BOM hay CO BOM nhung la xuat kho
    '                    InventoryAccount = CStr(hstItemAccount("Inventory Account"))    '
    '                    If InventoryAccount = "" Then
    '                        Query.RollBack()
    '                        WorkSession.MsgML("(*) Inventory Account is empty for Item '{0}' ", CStr(docLines(k)("Item No_")))
    '                        Return
    '                    End If
    '                    Dim iLineNo As Integer = CInt(docLines(k)("Line No_"))
    '                    If isDirectPosting = 1 Then
    '                        Select Case CInt(docLines(k)("Document Type"))
    '                            Case 0 'Purchase Account
    '                                If TotalCostLCY <> 0 Then
    '                                    Dim oVendor As New CodeLibrary.Vendor(SourceNo)
    '                                    If (oVendor.GetMessage <> "") Then
    '                                        Query.RollBack()
    '                                        WorkSession.MsgML(oVendor.GetMessage)
    '                                        Return
    '                                    End If
    '                                    If ReceiptOnVendorLedger = 1 Then
    '                                        InventoryAdjAccount = oVendor.GetGLAccount(0) 'q.Value("Purch_ Account", "")
    '                                        If InventoryAdjAccount = "" Then
    '                                            Query.RollBack()
    '                                            WorkSession.MsgML("(*) Purchase Account is empty for Vendor {0} ", SourceNo)
    '                                            Return
    '                                        End If
    '                                        If (blInterim = True AndAlso ItemInterimAccount = InventoryAccount) Then
    '                                            Insert2GL(docLines(k), TotalCost, ItemInterimAccount, InventoryAdjAccount, EntryNo, TransNo, 0, 1, ExchRate, 4, CStr(docLines(k)("Item No_")), 3, SourceNo, TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)

    '                                            EntryNo = EntryNo + 1
    '                                            Insert2GL(docLines(k), TotalCost, InventoryAdjAccount, ItemInterimAccount, EntryNo, TransNo, 1, -1, ExchRate, 3, SourceNo, 4, CStr(docLines(k)("Item No_")), TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                                            ItemEntryNo = EntryNo
    '                                            regToEntry = EntryNo
    '                                        Else
    '                                            Insert2GL(docLines(k), TotalCost, InventoryAccount, InventoryAdjAccount, EntryNo, TransNo, 0, 1, ExchRate, 4, CStr(docLines(k)("Item No_")), 3, SourceNo, TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)

    '                                            EntryNo = EntryNo + 1
    '                                            Insert2GL(docLines(k), TotalCost, InventoryAdjAccount, InventoryAccount, EntryNo, TransNo, 1, -1, ExchRate, 3, SourceNo, 4, CStr(docLines(k)("Item No_")), TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                                            regToEntry = EntryNo
    '                                            ItemEntryNo = EntryNo
    '                                        End If
    '                                        Dim VendEntry As Integer = regToEntry
    '                                        Dim rHeader As New Hashtable
    '                                        For Each col As DataColumn In docLines(k).Table.Columns
    '                                            rHeader.Add(col.ColumnName, docLines(k)(col))
    '                                        Next
    '                                        TRDVendorLedgerPost(rHeader, TotalCost, 0, CStr(docLines(k)("Source No_")), VendEntry, TransNo, ExchRate, regSourceCode, regJounalBatch, 100, CStr(docLines(k)("Description")), 2, CStr(docLines(k)("Item No_")), 0, "", CInt(docLines(k)("Line No_")), 0, TotalCostLCY)
    '                                        If (flVATPPost = 1) Then
    '                                            Dim VATRegistrationNo As String = oVendor.GetVATRegistNo
    '                                            Dim VATPro As String = ""
    '                                            If (CodeLibrary.CLObject.ExistColumnsinRow("VAT Prod_ Posting Group", docLines(k))) Then
    '                                                VATPro = CStr(IIf(Not (docLines(k)("VAT Prod_ Posting Group") Is System.DBNull.Value), docLines(k)("VAT Prod_ Posting Group"), ""))
    '                                            End If
    '                                            Dim VATBus As String = ""
    '                                            If (CodeLibrary.CLObject.ExistColumnsinRow("VAT Bus_ Posting Group", docLines(k))) Then
    '                                                VATBus = CStr(IIf(Not (docLines(k)("VAT Bus_ Posting Group") Is System.DBNull.Value), docLines(k)("VAT Bus_ Posting Group"), ""))
    '                                            End If
    '                                            If (VATBus = "" OrElse VATPro = "") Then
    '                                                Query.RollBack()
    '                                                WorkSession.MsgML("VAT Account is empty for Line No '{0}'", iLineNo)
    '                                                Return
    '                                            End If
    '                                            Dim objVATGroup As New VATBusGroup(VATPro, VATBus)
    '                                            If (objVATGroup.GetMessage <> "") Then
    '                                                Query.RollBack()
    '                                                WorkSession.MsgML(objVATGroup.GetMessage)
    '                                                Return
    '                                            End If
    '                                            Dim PurchaseVATInterim As String = ""
    '                                            Dim hVATAcc As Hashtable = objVATGroup.GetPostingSetup
    '                                            If (hVATAcc.ContainsKey("Purchase Interim VAT")) Then
    '                                                PurchaseVATInterim = CStr(CodeLibrary.Library.ISDBNULL(hVATAcc("Purchase Interim VAT"), ""))
    '                                            End If
    '                                            Dim hVendorAcc As Hashtable = oVendor.GetAccountSetting(oVendor.GetPostingGroup)
    '                                            Dim PayablesAccount As String = oVendor.GetPayablesAcc

    '                                            TRDGLPost(iLineNo, rHeader, VATAmt / ExchRate, PurchaseVATInterim, PayablesAccount, EntryNo, TransNo, ExchRate, -5, regSourceCode, regJounalBatch, CStr(docLines(k)("Description")), 2, 0, objItem.GetItemNo, oVendor.GetVendorNo, -1, "", ExtDocumentNo, Nothing, "", "", "", 0, CStr(rLine("Lot No_")), 0, PurchaseVATInterim, 3, oVendor.GetVendorNo, ResponsibilityCenter)
    '                                            'TRDVATPost(2, 3, rHeader, rLine, VATRegistrationNo, PurchaseVATAccount, PurchaseVATAccount, 1, SourceCode, regJounalBatch, EntryNo, TransNo, objVATGroup.GetRate)
    '                                        End If
    '                                    Else ' Khong post vao vendor ledger
    '                                        Dim hVendorAcc As Hashtable = oVendor.GetAccountSetting(oVendor.GetPostingGroup)
    '                                        If (hVendorAcc.Count <= 0) Then
    '                                            Query.RollBack()
    '                                            WorkSession.MsgML(oVendor.GetMessage)
    '                                            Return
    '                                        End If
    '                                        InventoryAdjAccount = CStr(hVendorAcc("Interim Payables Account"))
    '                                        If InventoryAdjAccount = "" Then
    '                                            Query.RollBack()
    '                                            WorkSession.MsgML("(*) Interim Payables Account is empty for Item '{0}' !", objItem.GetItemNo)
    '                                            Return
    '                                        End If
    '                                        If (blInterim = True AndAlso ItemInterimAccount <> InventoryAccount) Then
    '                                            Insert2GL(docLines(k), TotalCost, ItemInterimAccount, InventoryAdjAccount, EntryNo, TransNo, 0, 1, ExchRate, 4, CStr(docLines(k)("Item No_")), 3, SourceNo, TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)

    '                                            EntryNo = EntryNo + 1
    '                                            Insert2GL(docLines(k), TotalCost, InventoryAdjAccount, ItemInterimAccount, EntryNo, TransNo, 1, -1, ExchRate, 3, SourceNo, 4, CStr(docLines(k)("Item No_")), TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                                            regToEntry = EntryNo
    '                                            ItemEntryNo = EntryNo
    '                                        Else
    '                                            Insert2GL(docLines(k), TotalCost, InventoryAccount, InventoryAdjAccount, EntryNo, TransNo, 0, 1, ExchRate, 4, CStr(docLines(k)("Item No_")), 3, SourceNo, TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)

    '                                            EntryNo = EntryNo + 1
    '                                            Insert2GL(docLines(k), TotalCost, InventoryAdjAccount, InventoryAccount, EntryNo, TransNo, 1, -1, ExchRate, 3, SourceNo, 4, CStr(docLines(k)("Item No_")), TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                                            regToEntry = EntryNo
    '                                            ItemEntryNo = EntryNo
    '                                        End If
    '                                    End If
    '                                    EntryNo = EntryNo + 1
    '                                End If
    '                            Case 1 'sales
    '                                If TotalCostLCY <> 0 Then
    '                                    InventoryAdjAccount = CStr(hstItemAccount("COGS Account"))        'GetGLAccount(ItemNo, enTableModule.asInventory, 1, LocationCode) 'COGS 
    '                                    If InventoryAdjAccount = "" Then 'errMsg.Add("COGS Account is empty")
    '                                        Query.RollBack()
    '                                        WorkSession.MsgML("(*) COGS Account is empty for Item '{0}' ", CStr(docLines(k)("Item No_")))
    '                                        Return
    '                                    End If
    '                                    Insert2GL(docLines(k), UnitCost, InventoryAccount, InventoryAdjAccount, EntryNo, TransNo, 0, -1, ExchRate, 4, CStr(docLines(k)("Item No_")), 0, InventoryAdjAccount, unitcostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)

    '                                    EntryNo = EntryNo + 1
    '                                    Insert2GL(docLines(k), UnitCost, InventoryAdjAccount, InventoryAccount, EntryNo, TransNo, 1, 1, ExchRate, 0, InventoryAdjAccount, 4, CStr(docLines(k)("Item No_")), unitcostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                                    regToEntry = EntryNo
    '                                    ItemEntryNo = EntryNo
    '                                    EntryNo = EntryNo + 1
    '                                End If
    '                            Case 10 'nhap kho tra lai tu KH
    '                                If TotalCostLCY <> 0 Then
    '                                    InventoryAdjAccount = CStr(hstItemAccount("COGS Account"))    '   GetGLAccount(ItemNo, enTableModule.asInventory, 1, LocationCode) 'COGS
    '                                    If InventoryAdjAccount = "" Then
    '                                        Query.RollBack()
    '                                        WorkSession.MsgML("(*) COGS Account is empty for Item '{0}' ", CStr(docLines(k)("Item No_")))
    '                                        Return
    '                                    End If
    '                                    Insert2GL(docLines(k), UnitCost, InventoryAccount, InventoryAdjAccount, EntryNo, TransNo, 0, 1, ExchRate, 4, CStr(docLines(k)("Item No_")), 0, InventoryAdjAccount, unitcostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)

    '                                    EntryNo = EntryNo + 1
    '                                    Insert2GL(docLines(k), UnitCost, InventoryAdjAccount, InventoryAccount, EntryNo, TransNo, 1, -1, ExchRate, 0, InventoryAdjAccount, 4, CStr(docLines(k)("Item No_")), unitcostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                                    regToEntry = EntryNo
    '                                    ItemEntryNo = EntryNo
    '                                    EntryNo = EntryNo + 1
    '                                End If
    '                            Case 9 'return shipment
    '                                If TotalCostLCY <> 0 Then
    '                                    InventoryAdjAccount = GetGLAccount(SourceNo, CType(3, enTableModule), 0)
    '                                    If InventoryAdjAccount = "" Then 'errMsg.Add("Purchase Credit Memo Account is empty")
    '                                        Query.RollBack()
    '                                        WorkSession.MsgML("(*) Purchase Account is empty for Vendor '{0}' ", SourceNo)
    '                                        Return
    '                                    End If
    '                                    Insert2GL(docLines(k), TotalCost, InventoryAdjAccount, InventoryAccount, EntryNo, TransNo, 0, 1, ExchRate, 3, SourceNo, 4, CStr(docLines(k)("Item No_")), TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                                    EntryNo = EntryNo + 1
    '                                    Insert2GL(docLines(k), TotalCost, InventoryAccount, InventoryAdjAccount, EntryNo, TransNo, 1, -1, ExchRate, 4, CStr(docLines(k)("Item No_")), 3, SourceNo, TotalCostLCY, CStr(docLines(k)("Lot No_")), ItemEntryNo)
    '                                    ItemEntryNo = EntryNo
    '                                    regToEntry = EntryNo
    '                                    'If totalcostLCY <> 0 Then
    '                                    Dim VendEntry As Integer = regToEntry
    '                                    If ReceiptOnVendorLedger = 1 Then
    '                                        Dim rHeader As New Hashtable
    '                                        For Each col As DataColumn In docLines(k).Table.Columns
    '                                            rHeader.Add(col.ColumnName, docLines(k)(col))
    '                                        Next
    '                                        TRDVendorLedgerPost(rHeader, -TotalCost, 0, CStr(docLines(k)("Source No_")), VendEntry, TransNo, ExchRate, regSourceCode, regJounalBatch, 100, CStr(docLines(k)("Description")), 3, CStr(docLines(k)("Item No_")), 0, "", CInt(docLines(k)("Line No_")), 0, -TotalCostLCY, docLines(k))
    '                                    End If
    '                                    EntryNo = EntryNo + 1
    '                                End If
    '                        End Select
    '                    End If
    '                    Dim JobNo As String = ""
    '                    JobNo = ISDBNULL(docLines(k)("Job No_"), "")
    '                    'If docLines(k). IsNot Nothing Then
    '                    '   
    '                    'End If
    '                    Dim QNonStock As Integer = 0
    '                    Dim QItem As Query = Query.From("Item").Transaction(True)
    '                    QItem.WhereAs("No_") = CStr(docLines(k)("Item No_"))
    '                    QNonStock = QItem.Value("Nonstock")
    '                    If QNonStock = 0 Then
    '                        objItem.BOMValueTransactionInsert(docLines(k), ExchRate, TotalCostLCY, totalPrice, InventoryAccount, InventoryAdjAccount, ItemEntryNo, docLines(k)("Document Type"), docLines(k)("Source Type"), sign, isDirectPosting, 0, 1, JobNo)
    '                    End If


    '                    '14/12/2020 update xuat nhap kho ban thau
    '                    Dim CustomerNo As String = ""
    '                    CustomerNo = docLines(k)("Source No_")
    '                    Select Case docLines(k)("Document Type")
    '                        Case 1

    '                            Dim QueryFrom As Query = Query.From("Customer By Project")
    '                            QueryFrom.WhereAs("No_") = JobNo
    '                            QueryFrom.WhereAs("Bill-to Customer No_") = CustomerNo

    '                            If QueryFrom.Value("Join") = 0 Then

    '                                Dim QueryUpdate As Query = Query.Update("Customer Item By Project")
    '                                QueryUpdate.WhereAs("Project No_") = JobNo
    '                                QueryUpdate.WhereAs("Customer No_") = CustomerNo
    '                                QueryUpdate.WhereAs("Item No_") = ItemNo
    '                                QueryUpdate.Fields("Remaining Quantity", "-") = docLines(k)("Quantity")
    '                                QueryUpdate.Fields("Export Quality", "+") = docLines(k)("Quantity")
    '                                QueryUpdate.Fields("Estimated Quantity", "-") = docLines(k)("Quantity")
    '                                QueryUpdate.Execute()

    '                                Dim QueryUpdateItem As Query = Query.Update("Item By Project")
    '                                QueryUpdateItem.WhereAs("Project No_") = JobNo
    '                                QueryUpdateItem.WhereAs("Item No_") = ItemNo
    '                                QueryUpdateItem.Fields("Remaining Quantity", "-") = docLines(k)("Quantity")
    '                                QueryUpdateItem.Fields("Export Quality", "+") = docLines(k)("Quantity")
    '                                QueryUpdateItem.Fields("Estimated Quantity", "-") = docLines(k)("Quantity")
    '                                QueryUpdateItem.Execute()

    '                            End If
    '                            'Case 0
    '                            '    Dim QueryUpdate As Query = Query.Update("Customer Item By Project")
    '                            '    QueryUpdate.WhereAs("Project No_") = JobNo
    '                            '    QueryUpdate.WhereAs("Customer No_") = CustomerNo
    '                            '    QueryUpdate.WhereAs("Item No_") = ItemNo
    '                            '    QueryUpdate.Fields("Remaining Quantity", "+") = docLines(k)("Quantity")
    '                            '    QueryUpdate.Execute()

    '                    End Select

    '                End If
    '                'Specific Costing
    '                If docApplyEntry <> 0 Then 'for specific
    '                    q = Query.From("Value Entry").Select("[Remaining Quantity],[Unit of Measure Code]").Transaction(True)
    '                    q.WhereAs("Entry No_") = docApplyEntry
    '                    Dim RemainQty As Decimal = CDec(q.Value("Remaining Quantity"))
    '                    Dim qtyPerUnit As Decimal, QtyPerUnitCurr As Decimal
    '                    qtyPerUnit = ItemInfo.GetQtyPer(CStr(docLines(k)("Item No_")), CStr(q.Value("Unit of Measure Code")))
    '                    'query for QtyPerunit
    '                    QtyPerUnitCurr = ItemInfo.GetQtyPer(CStr(docLines(k)("Item No_")), CStr(docLines(k)("Unit of Measure Code")))
    '                    If ((RemainQty * qtyPerUnit - CDec(docLines(k)("Quantity")) * QtyPerUnitCurr < 0) And costMethod = 3 And (CInt(docLines(k)("Document Type")) = 1 Or CInt(docLines(k)("Document Type")) = 9)) Then 'specific
    '                        Query.RollBack()
    '                        WorkSession.MsgML("(*) Item {0} - Quantity input must < {1}", CStr(CStr(docLines(k)("Item No_"))), RemainQty)
    '                        Return
    '                    End If
    '                    Dim updateItem As Query = Query.Update("Value Entry")
    '                    updateItem.WhereAs("Entry No_") = docApplyEntry
    '                    If (Math.Abs(RemainQty * qtyPerUnit) = Math.Abs(CDec(docLines(k)("Quantity")) * QtyPerUnitCurr)) Then
    '                        updateItem.Fields("Open") = 0
    '                        updateItem.Fields("Remaining Quantity") = 0
    '                    Else
    '                        If RemainQty < 0 Then 'outbound
    '                            updateItem.Fields("Remaining Quantity") = RemainQty + CDec(docLines(k)("Quantity")) * QtyPerUnitCurr / qtyPerUnit
    '                        Else
    '                            updateItem.Fields("Remaining Quantity") = RemainQty - CDec(docLines(k)("Quantity")) * QtyPerUnitCurr / qtyPerUnit
    '                        End If
    '                    End If
    '                    updateItem.Execute()
    '                End If
    '                'Update order entry 
    '                If UpdateOrderstatus(docLines(k), OrderLineRow, QtyTolerant) = -1 Then
    '                    Query.RollBack()
    '                    WorkSession.MsgML("(*) Update Order False!" & vbCrLf & "System Roll Back: Please check again!")
    '                    Return
    '                End If

    '                ItemEntryNo = ItemEntryNo + 1
    '                ItemregToEntry = ItemregToEntry + 1
    '                If (EntryNo < ItemEntryNo) Then EntryNo = ItemEntryNo
    '                Dim delete As Query = Query.Delete("Journal Line Dimension")
    '                delete.WhereAs("Journal Line No_") = CInt(docLines(k)("Line No_"))
    '                delete.WhereAs("Journal Template Name") = CStr(docLines(k)("Journal Template Name"))
    '                delete.WhereAs("Journal Batch Name") = CStr(docLines(k)("Journal Batch Name"))
    '                delete.Execute()
    '                'delete BOM Component
    '                Dim deletecomp As Query = Query.Delete("BOM Component")
    '                deletecomp.WhereAs("Parent Item No_") = CStr(docLines(k)("Item No_"))
    '                deletecomp.WhereAs("Journal Template") = CStr(docLines(k)("Journal Template Name"))
    '                deletecomp.WhereAs("Journal Batch Name") = CStr(docLines(k)("Journal Batch Name"))
    '                deletecomp.Execute()

    '                'Dim Transfer As Query = Query.Entity("Item Journal Line Posted").Insert
    '                'Transfer.WithValues(docLines(k))
    '                'Transfer.Execute()

    '                Dim d As Query = Query.Delete("Item Journal Line")
    '                d.WhereAs("Journal Template Name") = JournalTemplate
    '                d.WhereAs("Journal Batch Name") = JournalBatch
    '                d.WhereAs("Source Code") = SourceCode
    '                If (CodeLibrary.CLObject.ExistColumnsinRow("RowID", docLines(k))) Then
    '                    d.WhereAs("RowID") = CInt(docLines(k)("RowID"))
    '                End If
    '                d.Execute()

    '            Next
    '            TransNo = TransNo + 1
    '        Next

    '        Dim Qkill As Query = Query.From("Item Journal Line").Transaction(True).Select("Originally Ordered No_").Distinct()
    '        Qkill.Where("Document No_").Is(rLine("Document No_"))

    '        Dim OrderTables As DataTable = Qkill.ToTable()
    '        Select Case CInt(r("Document Type"))
    '            Case 1
    '                Dim Stringsplit As String = "|"
    '                Dim ArrSO() As String = DocApply.Split({Stringsplit}, StringSplitOptions.RemoveEmptyEntries)
    '                For Each ApplyDocNo As String In ArrSO
    '                    q = Query.From("Sales Order Line")
    '                    q.Where("Document No_").Is(ApplyDocNo)
    '                    'q.Whereas("Document Type") = rInvoice("Document Type")
    '                    Dim InvoiceLine As DataTable = q.Transaction(True).ToTable
    '                    Dim flag As Integer = 0
    '                    For l As Integer = 0 To InvoiceLine.Rows.Count - 1
    '                        '==========flag=================================
    '                        If CDec(InvoiceLine.Rows(l)("Quantity")) - CDec(InvoiceLine.Rows(l)("Quantity Shipped")) > 0 Then
    '                            flag = 1
    '                        End If
    '                        '===============xong flag=============
    '                    Next
    '                    '===================Create Invoice to PO=====================
    '                    'Dim PONo As String = ISDBNULL(r("Originally Ordered No_"), "")
    '                    'Dim QLN As Query = Query.From("Item Journal Line Lot No_").Transaction(True)
    '                    'QLN.Where("Document No_").Is(r("No_"))
    '                    'QLN.And("Quantity").GreaterThan(0)
    '                    'Dim DLN As DataTable = QLN.ToTable
    '                    'Dim checkC As Integer = CreateDetailInvoiceInfo("Sales Order Line", PONo, "Sales Order Line Export Invoice", DLN)
    '                    'If checkC = 1 Then
    '                    '    Query.RollBack()
    '                    '    WorkSession.MsgML("Không thể cập nhật hóa đơn bán hàng!")
    '                    '    Return
    '                    'End If
    '                    Dim UpdateOrder As Query = Query.Update("Sales Order Header")
    '                    UpdateOrder.Where("No_").InRange(DocApply)
    '                    If flag = 0 Then
    '                        UpdateOrder.Fields("Ship") = 1
    '                    Else
    '                        UpdateOrder.Fields("Ship") = 2
    '                    End If
    '                    UpdateOrder.Fields("Shipment Date") = CodeLibrary.DatePro.ConvertDatetime(CStr(rLine("Posting Date")), 0, 2)
    '                    UpdateOrder.Fields("Status") = 6
    '                    UpdateOrder.Execute()

    '                    'Dim QLc As Query = Query.From("Location").Transaction(True)
    '                    'QLc.Where("Code").Is(r("Location Code"))
    '                    'Dim YG As String = "N"
    '                    'If QLc.RecordCount = 1 Then
    '                    '    YG = QLc.Value("Asset No_")
    '                    'End If
    '                    'If YG = "Y" Then
    '                    '    Dim QG As Query = Query.From("G_L Entry").Transaction(True)
    '                    '    QG.Where("Document No_").Is(r("No_"))
    '                    '    If QG.RecordCount > 0 Then
    '                    '        Dim UpdateGL As Query = Query.Update("G_L Entry")
    '                    '        UpdateGL.Where("Document No_").Is(r("No_"))
    '                    '        UpdateGL.Fields("Open") = 1
    '                    '        UpdateGL.Execute()
    '                    '    End If

    '                    '    Dim QV As Query = Query.From("Cust_ Ledger Entry").Transaction(True)
    '                    '    QV.Where("Document No_").Is(r("No_"))
    '                    '    If QV.RecordCount > 0 Then
    '                    '        Dim UpdateV As Query = Query.Update("Cust_ Ledger Entry")
    '                    '        UpdateV.Where("Document No_").Is(r("No_"))
    '                    '        UpdateV.Fields("Open") = 1
    '                    '        UpdateV.Execute()
    '                    '    End If
    '                    'ElseIf YG = "N" Then
    '                    '    Dim QG As Query = Query.From("G_L Entry").Transaction(True)
    '                    '    QG.Where("Document No_").Is(r("No_"))
    '                    '    If QG.RecordCount > 0 Then
    '                    '        Dim UpdateGL As Query = Query.Update("G_L Entry")
    '                    '        UpdateGL.Where("Document No_").Is(r("No_"))
    '                    '        UpdateGL.Fields("Open") = 0
    '                    '        UpdateGL.Execute()
    '                    '    End If

    '                    '    Dim QV As Query = Query.From("Cust_ Ledger Entry").Transaction(True)
    '                    '    QV.Where("Document No_").Is(r("No_"))
    '                    '    If QV.RecordCount > 0 Then
    '                    '        Dim UpdateV As Query = Query.Update("Cust_ Ledger Entry")
    '                    '        UpdateV.Where("Document No_").Is(r("No_"))
    '                    '        UpdateV.Fields("Open") = 0
    '                    '        UpdateV.Execute()
    '                    '    End If
    '                    'End If
    '                Next
    '            Case 0
    '                Dim Stringsplit As String = "|"
    '                Dim ArrSO() As String = DocApply.Split({Stringsplit}, StringSplitOptions.RemoveEmptyEntries)
    '                For Each ApplyDocNo As String In ArrSO
    '                    q = Query.From("Purchase Order Line")
    '                    q.WhereAs("Document No_") = ApplyDocNo
    '                    'q.Whereas("Document Type") = rInvoice("Document Type")
    '                    Dim InvoiceLine As DataTable = q.Transaction(True).ToTable
    '                    Dim flag As Integer = 0
    '                    For l As Integer = 0 To InvoiceLine.Rows.Count - 1
    '                        '==========flag=================================
    '                        If Math.Abs(CDec(InvoiceLine.Rows(l)("Quantity")) - CDec(InvoiceLine.Rows(l)("Quantity Received"))) > 0 Then
    '                            flag = 1
    '                            Exit For
    '                        End If
    '                        '===============xong flag=============
    '                    Next
    '                    '===================Create Invoice to PO=====================
    '                    Dim PONo As String = ISDBNULL(r("Originally Ordered No_"), "")
    '                    Dim QLN As Query = Query.From("Item Journal Line Lot No_").Transaction(True)
    '                    QLN.Where("Document No_").Is(r("No_"))
    '                    QLN.And("Quantity").GreaterThan(0)
    '                    Dim DLN As DataTable = QLN.ToTable
    '                    Dim checkC As Integer = CreateDetailInvoiceInfo("Purchase Order Line", PONo, "Purchase Order Line Import Invoice", DLN)
    '                    If checkC = 1 Then
    '                        Query.RollBack()
    '                        WorkSession.MsgML("Không thể cập nhật hóa đơn mua hàng!")
    '                        Return
    '                    End If

    '                    Dim UpdateOrder As Query = Query.Update("Purchase Order Header")
    '                    UpdateOrder.WhereAs("No_") = CStr(ApplyDocNo)
    '                    If flag = 0 Then
    '                        UpdateOrder.Fields("Receive") = 1
    '                    Else
    '                        UpdateOrder.Fields("Receive") = 2
    '                    End If
    '                    UpdateOrder.Fields("Date Received") = CodeLibrary.DatePro.ConvertDatetime(CStr(rLine("Document Date")), 0, 2)
    '                    UpdateOrder.Execute()
    '                    'Dim QLc As Query = Query.From("Location").Transaction(True)
    '                    'QLc.Where("Code").Is(r("Location Code"))
    '                    'Dim YG As String = "N"
    '                    'If QLc.RecordCount = 1 Then
    '                    '    YG = QLc.Value("Asset No_")
    '                    'End If
    '                    'If YG = "Y" Then
    '                    '    Dim QG As Query = Query.From("G_L Entry").Transaction(True)
    '                    '    QG.Where("Document No_").Is(r("No_"))
    '                    '    If QG.RecordCount > 0 Then
    '                    '        Dim UpdateGL As Query = Query.Update("G_L Entry")
    '                    '        UpdateGL.Where("Document No_").Is(r("No_"))
    '                    '        UpdateGL.Fields("Open") = 1
    '                    '        UpdateGL.Execute()
    '                    '    End If

    '                    '    Dim QV As Query = Query.From("Vendor Ledger Entry").Transaction(True)
    '                    '    QV.Where("Document No_").Is(r("No_"))
    '                    '    If QV.RecordCount > 0 Then
    '                    '        Dim UpdateV As Query = Query.Update("Vendor Ledger Entry")
    '                    '        UpdateV.Where("Document No_").Is(r("No_"))
    '                    '        UpdateV.Fields("On Hold") = "Y"
    '                    '        UpdateV.Execute()
    '                    '    End If
    '                    'ElseIf YG = "N" Then
    '                    '    Dim QG As Query = Query.From("G_L Entry").Transaction(True)
    '                    '    QG.Where("Document No_").Is(r("No_"))
    '                    '    If QG.RecordCount > 0 Then
    '                    '        Dim UpdateGL As Query = Query.Update("G_L Entry")
    '                    '        UpdateGL.Where("Document No_").Is(r("No_"))
    '                    '        UpdateGL.Fields("Open") = 0
    '                    '        UpdateGL.Execute()
    '                    '    End If

    '                    '    Dim QV As Query = Query.From("Vendor Ledger Entry").Transaction(True)
    '                    '    QV.Where("Document No_").Is(r("No_"))
    '                    '    If QV.RecordCount > 0 Then
    '                    '        Dim UpdateV As Query = Query.Update("Vendor Ledger Entry")
    '                    '        UpdateV.Where("Document No_").Is(r("No_"))
    '                    '        UpdateV.Fields("Open") = 0
    '                    '        UpdateV.Execute()
    '                    '    End If
    '                    'End If
    '                Next
    '            Case 9 'xuat tra ncc
    '                Dim Stringsplit As String = "|"
    '                Dim ArrSO() As String = DocApply.Split({Stringsplit}, StringSplitOptions.RemoveEmptyEntries)
    '                For Each ApplyDocNo As String In ArrSO
    '                    q = Query.From("Purchase Return Order Line")
    '                    q.WhereAs("Document No_") = ApplyDocNo
    '                    'q.Whereas("Document Type") = rInvoice("Document Type")
    '                    Dim InvoiceLine As DataTable = q.Transaction(True).ToTable
    '                    Dim flag As Integer = 0
    '                    For l As Integer = 0 To InvoiceLine.Rows.Count - 1
    '                        '==========flag=================================
    '                        If Math.Abs(CDec(InvoiceLine.Rows(l)("Quantity")) - CDec(InvoiceLine.Rows(l)("Quantity Received"))) > 0 Then
    '                            flag = 1
    '                            Exit For
    '                        End If
    '                        '===============xong flag=============
    '                    Next
    '                    Dim UpdateOrder As Query = Query.Update("Purchase Return Order Header")
    '                    UpdateOrder.WhereAs("No_") = CStr(ApplyDocNo)
    '                    If flag = 0 Then
    '                        UpdateOrder.Fields("Receive") = 1
    '                    Else
    '                        UpdateOrder.Fields("Receive") = 2
    '                    End If
    '                    'UpdateOrder.Fields("Date Received") = DatePro.ConvertDatetime(CStr(rLine("Document Date")), 0, 2)
    '                    UpdateOrder.Execute()
    '                Next
    '            Case 10 'Nhap khach tra
    '                Dim Stringsplit As String = "|"
    '                Dim ArrSO() As String = DocApply.Split({Stringsplit}, StringSplitOptions.RemoveEmptyEntries)
    '                For Each ApplyDocNo As String In ArrSO
    '                    q = Query.From("Sales Return Order Line")
    '                    q.WhereAs("Document No_") = ApplyDocNo
    '                    'q.Whereas("Document Type") = rInvoice("Document Type")
    '                    Dim InvoiceLine As DataTable = q.Transaction(True).ToTable
    '                    Dim flag As Integer = 0
    '                    For l As Integer = 0 To InvoiceLine.Rows.Count - 1
    '                        '==========flag=================================
    '                        If Math.Abs(CDec(InvoiceLine.Rows(l)("Quantity")) - CDec(InvoiceLine.Rows(l)("Quantity Shipped"))) > 0 Then
    '                            flag = 1
    '                            Exit For
    '                        End If
    '                        '===============xong flag=============
    '                    Next
    '                    Dim UpdateOrder As Query = Query.Update("Sales Return Order Header")
    '                    UpdateOrder.WhereAs("No_") = ApplyDocNo
    '                    If flag = 0 Then
    '                        UpdateOrder.Fields("Ship") = 1
    '                    Else
    '                        UpdateOrder.Fields("Ship") = 2
    '                    End If
    '                    UpdateOrder.Fields("Date Received") = CodeLibrary.DatePro.ConvertDatetime(CStr(rLine("Document Date")), 0, 2)
    '                    UpdateOrder.Execute()
    '                Next
    '        End Select
    '        'objSeries.Update_2DocNo_(LineCode)
    '        Select Case CInt(r("Document Type"))
    '            Case 0
    '                objSeries.Update_2DocNo_(SeriesCode)
    '        End Select
    '        'objSeries.Update_2DocNo_(SeriesCode)
    '        'Post information to GL Register
    '        If regFromEntry <> regToEntry Then
    '            Post2GLRegister(regJounalBatch, regFromEntry, regToEntry, regFromVATEntry, regToVATEntry, doc, ExtDocStr, regSourceCode, ResponsibilityCenter, Framework.UserID)
    '        End If
    '        'Post information to Item Register
    '        If ItemregToEntry >= ItemregFromEntry Then
    '            Post2ItemRegister(regJounalBatch, ItemregFromEntry, ItemregToEntry, doc, ExtDocStr, regSourceCode, ResponsibilityCenter, ItemregFromEntry, ItemregToEntry, Framework.UserID)


    '            Dim TransferHeader As Query = Query.Entity("Item Journal Header Posted").Insert
    '            TransferHeader.WithValues(r)
    '            TransferHeader.Execute()

    '            Dim d As Query = Query.Delete("Item Journal Header")
    '            d.WhereAs("No_") = r("No_")
    '            d.Execute()

    '            d = Query.Delete("Item Journal Line")
    '            d.WhereAs("Document No_") = r("No_")
    '            d.Execute()

    '            Dim Transfer As Query = Query.Entity("Item Journal Line Posted").Insert
    '            For i As Integer = 0 To dt.Rows.Count - 1
    '                Transfer.WithValues(dt.Rows(i))
    '                Transfer.Execute()
    '            Next

    '            Qkill = Query.From("Item Journal Line").Transaction(True).Select("[Originally Ordered No_],[Document Lot],[Item No_],[Line No_]").Distinct()
    '            Qkill.Where("Document No_").Is(rLine("Document No_"))

    '            OrderTables = Qkill.ToTable()

    '            For Each Rows As DataRow In OrderTables.Rows
    '                Dim Qd As Query = Query.Delete("Lot Journal Line")
    '                Qd.Where("Originally Ordered No_").Is(Rows("Originally Ordered No_"))
    '                Qd.And("Document No_").Is(Rows("Document Lot"))
    '                Qd.And("Item No_").Is(Rows("Item No_"))
    '                Qd.And("Line No_").Is(Rows("Line No_"))
    '                Qd.Execute()
    '            Next
    '        End If
    '        DeleteItemJournalLineLotNo(DocNo1, DocType1)
    '        Query.EndTransaction()
    '        'WorkSession.Save("parentEntityID", sender.ClientID)
    '        Dim parentID As String = CStr(WorkSession.Read("parentEntityID"))
    '        Framework.RefreshSource(parentID)
    '        sender.RefreshSource()
    '        ' WorkSession.MsgML(String.Format("Chứng từ '{0}' ghi sổ thành công!!!", DocumentNo))
    '        Select Case CInt(r("Document Type"))
    '            Case 1
    '                If sender.TableName <> "Sales Order Header" Then
    '                    WorkSession.Client.Close()
    '                End If

    '        End Select
    '    Catch ex As Exception
    '        Query.RollBack()
    '        WorkSession.MsgML(ex.ToString)
    '    End Try

    'End Sub

    Public Shared Sub UpdateLotNoAndExpirationDate(ByVal sender As WXSource, ByVal e As WXArgs)
        'Dim rM As Hashtable = sender.CurrentRow
        Dim FFItemNo As String = sender.GetParameter("FFItemNo")
        Dim FFLotNo As String = sender.GetParameter("FFLotNo")
        Dim FFExp As String = sender.GetParameter("FFExp")
        Dim FFVariant As String = sender.GetParameter("FFVariant")
        If Convert.ToDateTime(Code.Logics.CodeLogics.ISDBNULL(FFExp, "1/1/1900")) = Convert.ToDateTime("1/1/1900") Then
            WorkSession.Msg("Vui lòng nhập hạn sử dụng của số lô")
            Return
        End If
        If FFLotNo = "" Then
            WorkSession.Msg("Vui lòng nhập sô lô cần điều chỉnh")
            Return
        End If
        Dim vendorName As String = Code.Library.TradingSys.GetVendorName(FFVariant)
        If Code.Logics.CodeLogics.ISDBNULL(vendorName, "") = "" And FFVariant <> "" Then
            WorkSession.Msg("Vui lòng nhập mã nhà cung cấp cần điều chỉnh")
            Return
        End If

        Try
            Query.BeginTransaction()
            Dim Q As Query = Query.From("Value Entry").Transaction(True)
            Q.Where("Item No_").Is(FFItemNo)
            Q.And("Lot No_").Is(FFLotNo)
            If Q.RecordCount < 1 Then
                Query.RollBack()
                WorkSession.MsgML("Kiểm tra lại mã hàng hóa {0} hoặc số lô {1} không đúng !!!", FFItemNo, FFLotNo)
                Return
            End If
            Dim Update As Query = Query.Update("Value Entry")
            Update.Where("Item No_").Is(FFItemNo)
            Update.And("Lot No_").Is(FFLotNo)
            Update.Fields("Expiration Date") = DTOS(FFExp)
            If FFVariant <> "" Then
                Update.Fields("Variant Code") = FFVariant
            End If
            Update.Execute()
            Dim UpdateLN As Query = Query.Update("Item Lot Number")
            UpdateLN.Where("Item No_").Is(FFItemNo)
            UpdateLN.And("Lot No_").Is(FFLotNo)
            UpdateLN.Fields("Expiration Date") = DTOS(FFExp)
            If FFVariant <> "" Then
                UpdateLN.Fields("Variant Code") = FFVariant
            End If
            UpdateLN.Execute()


            Dim UpdateSOL As Query = Query.Update("Sales Order Line")
            UpdateSOL.Where("No_").Is(FFItemNo)
            UpdateSOL.And("Lot No_").Is(FFLotNo)
            UpdateSOL.Fields("Expiration Date") = DTOS(FFExp)
            If (FFVariant <> "") Then
                UpdateSOL.Fields("Variant Code") = FFVariant
            End If
            UpdateSOL.Execute()

            Dim UpdateTransfer As Query = Query.Update("Transfer Order Line")
            UpdateTransfer.Where("Item No_").Is(FFItemNo)
            UpdateTransfer.And("Lot No_").Is(FFLotNo)
            UpdateTransfer.Fields("Expiration Date") = DTOS(FFExp)
            If (FFVariant <> "") Then
                UpdateTransfer.Fields("Variant Code") = FFVariant
            End If
            UpdateTransfer.Execute()

            Dim UpdateSRLP As Query = Query.Update("Sales Retail Line Posted")
            UpdateSRLP.Where("No_").Is(FFItemNo)
            UpdateSRLP.And("Lot No_").Is(FFLotNo)
            UpdateSRLP.Fields("Expiration Date") = DTOS(FFExp)
            If (FFVariant <> "") Then
                UpdateSRLP.Fields("Variant Code") = FFVariant
            End If
            UpdateSRLP.Execute()

            Dim UpdateTransferPosted As Query = Query.Update("Transfer Order Line Require Posted")
            UpdateTransferPosted.Where("Item No_").Is(FFItemNo)
            UpdateTransferPosted.And("Lot No_").Is(FFLotNo)
            UpdateTransferPosted.Fields("Expiration Date") = DTOS(FFExp)
            If (FFVariant <> "") Then
                UpdateTransferPosted.Fields("Variant Code") = FFVariant
            End If
            UpdateTransferPosted.Execute()

            Dim UpdateItemJournalLotNo_Posted As Query = Query.Update("Item Journal Line Lot No_ Posted")
            UpdateItemJournalLotNo_Posted.Where("Item No_").Is(FFItemNo)
            UpdateItemJournalLotNo_Posted.And("Lot No_").Is(FFLotNo)
            UpdateItemJournalLotNo_Posted.Fields("Expiration Date") = DTOS(FFExp)
            If (FFVariant <> "") Then
                UpdateItemJournalLotNo_Posted.Fields("Variant Code") = FFVariant
            End If
            UpdateItemJournalLotNo_Posted.Execute()

            Dim UpdateItemJournalPosted As Query = Query.Update("Item Journal Line Posted")
            UpdateItemJournalPosted.Where("Item No_").Is(FFItemNo)
            UpdateItemJournalPosted.And("Lot No_").Is(FFLotNo)
            UpdateItemJournalPosted.Fields("Expiration Date") = DTOS(FFExp)
            If (FFVariant <> "") Then
                UpdateItemJournalPosted.Fields("Variant Code") = FFVariant
            End If
            UpdateItemJournalPosted.Execute()

            Query.EndTransaction()
            sender.RefreshSource()
            WorkSession.Msg("Thành công!!!")
        Catch ex As Exception
            Query.RollBack()
            WorkSession.Msg(ex.ToString)
            Return
        End Try
    End Sub
    Public Shared Sub IVApprovePosting101(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim r As Hashtable = sender.MasterRow
        Dim JournalTemplate As String = r("Journal Template Name")
        Dim JournalBatch As String = r("Name")
        Dim SourceCode As String = r("Source Code")
        Dim SeriesCode As String = r("No_ Series")
        Dim LineCode As String = r("Posting No_ Series")

        Dim q As Query = Query.From("Item Journal Line").Transaction(True)
        q.WhereAs("Journal Template Name") = JournalTemplate
        q.WhereAs("Journal Batch Name") = JournalBatch
        q.WhereAs("Source Code") = SourceCode
        Dim dt As DataTable = q.ToTable
        If dt.Rows.Count = 0 Then Return

        q = Query.From("Purchases Payables Setup")
        Dim ReceiptOnVendorLedger As Integer = q.Value("Receipt On Vendor Ledger")
        Dim QtyTolerant As Decimal = q.Value("Quantity Tolerant Percent")
        Dim GLPosting As Integer = q.WithDefault(1).Value("GL Posting")

        Dim str As String = ""

        If sender.Entity.Name = "Item Positive Adjustment Line Value" Or sender.Entity.Name = "Item Negative Adjustment Line Value" Then

        Else

            For Each rline As DataRow In dt.Rows
                If rline("Lot No_") = "" Then
                    WorkSession.MsgML("Số lô không được rỗng")
                    Return
                End If
                If rline("Variant Code") = "" Then
                    WorkSession.MsgML("NCC không được rỗng")
                    Return
                End If
            Next

            If Not ItemJournalValidateCheck(dt, str) Then
                WorkSession.MsgML(str)
                sender.RefreshSource()
                Return
            End If
        End If
        'Check validate
        If Not Code.Logics.CodeLogics.ItemPostingCheck(dt, str, SeriesCode, LineCode) Then
            WorkSession.MsgML(str)
            sender.RefreshSource()
            Return
        End If

        If Not PostingDateValid(dt, str) Then
            WorkSession.MsgML(str)
            Return
        End If
        If Not DimensionValid(dt, str) Then
            WorkSession.MsgML(str)
            Return
        End If

        Dim Item As String = ""
        Dim amount As Decimal
        Dim Warning As Integer = IVCheckItemAvailable(dt, Item, amount)
        Select Case Warning
            Case -1 'Prohibited
                WorkSession.MsgML("Item {0} is stockout under {1}", Item, amount)
                Return
            Case 1 'Out of stock without safety stock Quantity calculation
                WorkSession.MsgML("Item {0} is stockout under {1}. Continue ?", Item, amount)
            Case 2 'Out of Stock with safety stock calculation
                WorkSession.MsgML("Item {0} is under safety stock {1}. Continue ?", Item, amount)
        End Select
        Warning = IVApplyCheckItemAvailable(dt, Item, amount, QtyTolerant)

        If Warning = 1 Then
            WorkSession.MsgML("Quantity of item {0} is over the Order {1}", Item, amount)
            Return
        End If

        ''If WorkSession.MsgML("Approve now?") Then Return

        Dim docs As Object() = Code.Logics.CodeLogics.GetDistinctValues(dt, "Document No_")
        Try

            Query.BeginTransaction()
            Dim FFGLAccount As String = ""
            Dim BalFFGLAccount As String = ""


            'Update
            For i As Integer = 0 To docs.Length - 1

                Dim doc As String = docs(i)("Document No_")

                Dim update As Query = Query.Update("Item Journal Line")
                update.WhereAs("Journal Template Name") = JournalTemplate
                update.WhereAs("Journal Batch Name") = JournalBatch
                update.WhereAs("Source Code") = SourceCode
                update.WhereAs("Document No_") = doc
                update.Fields("Status") = 2 'approval
                update.Execute()

                'Update child relation
                Dim updateLine As Query = Query.Update("Journal Line Dimension")
                updateLine.WhereAs("Journal Template Name") = JournalTemplate
                updateLine.WhereAs("Journal Batch Name") = JournalBatch
                updateLine.WhereAs("Journal Line No_") = docs(i)("Line No_")
                updateLine.Fields("Status") = 2 'approval
                updateLine.Execute()
                'update component
                Dim updateBOM As Query = Query.Update("BOM component")
                updateBOM.WhereAs("Journal Template") = JournalTemplate
                updateBOM.WhereAs("Journal Batch Name") = JournalBatch
                updateBOM.WhereAs("Parent Item No_") = docs(i)("Item No_")
                updateBOM.Fields("Status") = 2
                updateBOM.Execute()

                'End If
                'Next
            Next

            Query.EndTransaction()
            'WorkSession.MsgML("Approve completed")
            sender.RefreshSource()
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub


    Public Shared Sub InsertValueLotNo(ByVal LocationCode As String, ByVal AccNo As String,
                                       ByVal newValue As Decimal, ByVal entry As Integer,
                                       ByVal DateChange As Date, ExpiredDate As Date,
                                       ByVal CurrencyCode As String, ByVal Exchrate As Decimal,
                                       ByVal userID As String, ByVal docno As String, ByVal Extdocno As String, ByVal type As Integer, Optional ByVal Unitcost As Decimal = 0,
                                       Optional ByVal VariantCode As String = "", Optional ByVal SourceCode As String = "", Optional ByVal SourceNo As String = "", Optional ByVal LotNo As String = "", Optional ByVal ResponsibilityCenter As String = "")
        Dim insertLedger As Query = Query.Entity("Physical Value Entry").Insert

        'insertLedger.Fields("Transaction No_") = -1
        insertLedger.Fields("Entry No_") = entry
        insertLedger.Fields("Item Ledger Entry No_") = entry
        insertLedger.Fields("Line No_") = entry
        insertLedger.Fields("Item No_") = AccNo
        insertLedger.Fields("Variant Code") = VariantCode
        insertLedger.Fields("Lot No_") = LotNo
        insertLedger.Fields("Expiration Date") = ExpiredDate
        insertLedger.Fields("Document Date") = DateChange
        insertLedger.Fields("Posting Date") = DateChange

        insertLedger.Fields("External Document No_") = Extdocno
        insertLedger.Fields("Document No_") = docno
        insertLedger.Fields("Description") = "Physical inventory counting"

        insertLedger.Fields("Currency Code") = CurrencyCode
        insertLedger.Fields("Location Code") = LocationCode

        insertLedger.Fields("Valued Quantity") = newValue
        insertLedger.Fields("Invoiced Quantity") = newValue
        insertLedger.Fields("Journal Batch Name") = "PhysicalCounting"
        insertLedger.Fields("Reason Code") = "PhysicalCounting"

        insertLedger.Fields("User ID") = userID
        insertLedger.Fields("Source Code") = SourceCode
        insertLedger.Fields("Responsibility Center") = ResponsibilityCenter
        insertLedger.Fields("Source No_") = SourceNo

        Select Case type
            Case 0
                insertLedger.Fields("Document Type") = IIf(newValue > 0, 2, 3)
            Case 1
                insertLedger.Fields("Document Type") = IIf(newValue > 0, 12, 11)
            Case 2
                insertLedger.Fields("Document Type") = IIf(newValue > 0, 6, 7)
            Case 3
                insertLedger.Fields("Document Type") = IIf(newValue > 0, 4, 5)
                insertLedger.Fields("Source Type") = 11
        End Select

        insertLedger.Fields("Cost Per Unit") = IIf(newValue > 0, Unitcost, -Unitcost)
        insertLedger.Fields("Cost Per Unit (LCY)") = Exchrate * IIf(newValue > 0, Unitcost, -Unitcost)
        insertLedger.Fields("Cost Actual") = Unitcost * newValue
        insertLedger.Fields("Cost Actual (LCY)") = Unitcost * newValue * Exchrate
        insertLedger.Fields("Sales Actual") = 0
        insertLedger.Fields("Sales Actual (LCY)") = 0

        insertLedger.Execute()

    End Sub
    Public Shared Sub PhysicalCountingExcelImportLotNo(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim ExtDocumentNo As String = sender.GetParameter("DocumentNo")
        Dim LocationCode As String = sender.GetParameter("Code")
        Dim SourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("Responsibility")

        If SourceCode = "" Then
            WorkSession.MsgML("Source Code must be input ! Run View Again")
            Return
        End If
        If LocationCode = "" Then
            WorkSession.MsgML("Location Code must be input ! Run View Again")
            Return
        End If

        If ExtDocumentNo = "" Then
            WorkSession.MsgML("Document must input !")
            Return
        End If

        If ExistExternalDocument(ExtDocumentNo, "Physical Value Entry") = 1 Then
            WorkSession.MsgML("Already exist !")
            Return
        End If
        Dim queryseries As Query = Query.From("Number Sequence", "AdjustCost")
        If queryseries.Value("AdjustCost") = "" Then
            WorkSession.MsgML("Inventory Counting Sequence Number must setup first")
            Return
        End If
        Dim SaleSequence As String = queryseries.Value("AdjustCost")

        queryseries = Query.From("No_ Series Line").Transaction(True)
        queryseries.WhereAs("Series Code") = SaleSequence
        If SourceCode <> "" Then
            queryseries.WhereAs("Source Code") = SourceCode
        End If
        queryseries.OrderBy("Code")

        If queryseries.ToTable.Rows.Count = 0 Then
            Query.RollBack()
            WorkSession.MsgML("Inventory Counting Series number must setup first")
            Return
        End If
        Dim SeriesRowID As Integer = queryseries.Value("RowID")

        Dim StartDocPrefix As String = queryseries.Value("Starting No_")
        Dim LastClientUsed As Integer = queryseries.Value("Last No_ Used")
        Dim IncByNo As Integer = queryseries.Value("Increment-By No_")
        Dim EndNo_ As Integer = queryseries.Value("Ending No_")
        LastClientUsed = LastClientUsed + IncByNo

        Dim DocumentNo As String = StartDocPrefix & FormatDocumentNumber(EndNo_, LastClientUsed)

        'If WorkSession.MsgML("Insert to Ledger ?") Then Return

        Dim AccNo As String

        'Get document list and for each document we post line by line

        Dim Q As Query = Query.From("Physical Value Entry").Select("([Entry No_]+1) AS EntryNo").Top(1).OrderBy("EntryNo").DESC
        Dim Entry As Integer = Q.Value("Entryno") ' GetMaxEntry(4, 0)


        Dim FromEntryNo As Integer = Entry
        Dim ToEntryNo As Integer

        Dim userID As String = Framework.UserID
        Dim DataSource As New DataTable
        DataSource = WorkSession.Client.DataSource
        Dim ToDate As String = sender.GetParameter("ToDate")
        Try
            Query.BeginTransaction()
            Dim updateSeries As Query = Query.Update("No_ Series Line")
            updateSeries.Fields("Last No_ Used") = LastClientUsed
            updateSeries.WhereAs("RowID") = SeriesRowID
            updateSeries.Execute()

            For i As Integer = 0 To DataSource.Rows.Count - 1
                AccNo = DataSource.Rows(i)(1)
                'SettingConfig.SetProgress(i + 1, DataSource.Rows.count - 1, AccNo)

                'Dim UnitCost As Decimal = DataSource.Rows(i)(5)
                Dim UnitCost As Decimal = 0
                Dim ExpirationDate As Date = Convert.ToDateTime(DataSource.Rows(i)(4))
                Dim LotNo As String = Code.Library.Library.ISDBNULL(DataSource.Rows(i)(3), "")

                For j As Integer = 5 To DataSource.Columns.Count - 1
                    'Dim DateChange As DateTime = Convert.ToDateTime(DataSource.Columns(j).Caption)
                    Dim DateChange As DateTime = Convert.ToDateTime(ToDate)
                    Dim newValue As Decimal = DataSource.Rows(i)(j)

                    If newValue <> 0 Then
                        InsertValueLotNo(LocationCode, AccNo, newValue, Entry, DateChange,
                                         ExpirationDate, GetLCY(), 1, userID, DocumentNo,
                                         ExtDocumentNo, 0, UnitCost, "", SourceCode, "", LotNo, ResponsibilityCenter)
                        Entry += 1
                        ToEntryNo = Entry
                    End If

                    'Dim LotNo_itemexist As Query = Query.From("Item Lot Number").Transaction(True)
                    'LotNo_itemexist.WhereAs("Lot No_") = LotNo
                    'LotNo_itemexist.WhereAs("Item No_") = AccNo
                    'LotNo_itemexist.WhereAs("Source Code") = SourceCode
                    'LotNo_itemexist.WhereAs("Location Code") = LocationCode

                    ''LotNo_itemexist.WhereAs("External Document No_") = rLine("Experiment No_")
                    'If LotNo_itemexist.RecordCount <= 0 And LotNo <> "" Then
                    '    Dim InsertItemLotNo As Query = Query.Entity("Item Lot Number").Insert
                    '    InsertItemLotNo.Fields("Lot No_") = LotNo
                    '    InsertItemLotNo.Fields("Item No_") = AccNo
                    '    InsertItemLotNo.Fields("Variant Code") = ""
                    '    InsertItemLotNo.Fields("External Document No_") = ""
                    '    InsertItemLotNo.Fields("Source Code") = SourceCode
                    '    'InsertItemLotNo.Fields("Responsibility Center") = ResponsibilityCenter
                    '    InsertItemLotNo.Fields("Location Code") = LocationCode
                    '    InsertItemLotNo.Fields("Description") = "Created from Physical Counting"
                    '    InsertItemLotNo.Fields("Created Date") = Now()
                    '    'InsertItemLotNo.Fields("Usage %") = rLine("Overhead Rate")
                    '    InsertItemLotNo.Fields("Expiration Date") = ExpirationDate
                    '    'InsertItemLotNo.Fields("Production Date") = rLine("FA Posting Date")
                    '    InsertItemLotNo.Fields("Valued Quantity") = newValue 'rLine("Qty_ to Receive") * rLine("Qty_ per Unit of Measure")
                    '    InsertItemLotNo.Fields("Quantity") = newValue 'rLine("Qty_ to Receive") ' * rLine("Qty_ per Unit of Measure")
                    '    InsertItemLotNo.Fields("Begin Quantity") = newValue 'rLine("Qty_ to Receive") '* rLine("Qty_ per Unit of Measure")
                    '    InsertItemLotNo.Fields("Unit of Measure Code") = ""
                    '    InsertItemLotNo.Fields("Qty_ per Unit of Measure") = 1 'rLine("Qty_ per Unit of Measure")
                    '    InsertItemLotNo.Execute()
                    'Else 'Update if same lot no_
                    '    If LotNo <> "" And LotNo_itemexist.RecordCount > 0 Then
                    '        Dim QtyPerLotNo As Decimal = LotNo_itemexist.Value("Qty_ per Unit of Measure")
                    '        If QtyPerLotNo = 0 Then QtyPerLotNo = 1
                    '        Dim Qty As Decimal = 1 'rLine("Quantity") * rLine("Qty_ per Unit of Measure") / QtyPerLotNo

                    '        Dim updateLotTable As Query = Query.Update("Item Lot Number")
                    '        updateLotTable.WhereAs("Lot No_") = LotNo
                    '        updateLotTable.WhereAs("Item No_") = AccNo
                    '        updateLotTable.WhereAs("Source Code") = SourceCode
                    '        updateLotTable.WhereAs("Location Code") = LocationCode
                    '        updateLotTable.Fields("Quantity", "+") = newValue
                    '        updateLotTable.Fields("Valued Quantity", "+") = newValue
                    '        updateLotTable.Execute()
                    '    End If
                    'End If

                Next
            Next

            ''Post information to Item Register
            'If ToEntryNo >= FromEntryNo Then

            '    Dim regItemNo As Integer = GetMaxEntry(-2, 0)
            '    'If regItemNo = 0 Then regItemNo = 1

            '    Dim insertItemReg As Query = Query.Entity("Item Register").Insert

            '    insertItemReg.Fields("No_") = regItemNo
            '    insertItemReg.Fields("From Entry No_") = FromEntryNo
            '    insertItemReg.Fields("To Entry No_") = ToEntryNo - 1
            '    insertItemReg.Fields("From Value Entry No_") = FromEntryNo
            '    insertItemReg.Fields("To Value Entry No_") = ToEntryNo
            '    insertItemReg.Fields("User ID") = Framework.UserID
            '    insertItemReg.Fields("Creation Date") = Now.Date
            '    insertItemReg.Fields("Journal Batch Name") = "Item Counting"
            '    insertItemReg.Fields("Source Code") = SourceCode
            '    insertItemReg.Fields("Responsibility Center") = ResponsibilityCenter
            '    insertItemReg.Fields("From Capacity Entry No_") = FromEntryNo
            '    insertItemReg.Fields("To Capacity Entry No_") = ToEntryNo
            '    insertItemReg.Fields("Document No_") = DocumentNo
            '    insertItemReg.Execute()
            'End If

            Query.EndTransaction()
            WorkSession.MsgML("Successfull !")
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub
    Public Sub PhysicalCountingExcelImportLotNo_VariantCode(ByVal sender As WXSource, ByVal e As WXArgs)
        Dim ExtDocumentNo As String = sender.GetParameter("DocumentNo")
        Dim LocationCode As String = sender.GetParameter("Code")
        Dim SourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("Responsibility")

        If SourceCode = "" Then
            WorkSession.MsgML("Source Code must be input ! Run View Again")
            Return
        End If
        If LocationCode = "" Then
            WorkSession.MsgML("Location Code must be input ! Run View Again")
            Return
        End If

        If ExtDocumentNo = "" Then
            WorkSession.MsgML("Document must input !")
            Return
        End If

        If ExistExternalDocument(ExtDocumentNo, "Physical Value Entry") = 1 Then
            WorkSession.MsgML("Already exist !")
            Return
        End If
        Dim queryseries As Query = Query.From("Number Sequence", "AdjustCost")
        If queryseries.Value("AdjustCost") = "" Then
            WorkSession.MsgML("Inventory Counting Sequence Number must setup first")
            Return
        End If
        Dim SaleSequence As String = queryseries.Value("AdjustCost")

        queryseries = Query.From("No_ Series Line").Transaction(True)
        queryseries.WhereAs("Series Code") = SaleSequence
        If SourceCode <> "" Then
            queryseries.WhereAs("Source Code") = SourceCode
        End If
        queryseries.OrderBy("Code")

        If queryseries.ToTable.Rows.Count = 0 Then
            Query.RollBack()
            WorkSession.MsgML("Inventory Counting Series number must setup first")
            Return
        End If
        Dim SeriesRowID As Integer = queryseries.Value("RowID")

        Dim StartDocPrefix As String = queryseries.Value("Starting No_")
        Dim LastClientUsed As Integer = queryseries.Value("Last No_ Used")
        Dim IncByNo As Integer = queryseries.Value("Increment-By No_")
        Dim EndNo_ As Integer = queryseries.Value("Ending No_")
        LastClientUsed = LastClientUsed + IncByNo

        Dim DocumentNo As String = StartDocPrefix & FormatDocumentNumber(EndNo_, LastClientUsed)

        'If WorkSession.MsgML("Insert to Ledger ?") Then Return

        Dim AccNo As String

        'Get document list and for each document we post line by line

        Dim Q As Query = Query.From("Physical Value Entry").Select("([Entry No_]+1) AS EntryNo").Top(1).OrderBy("EntryNo").DESC
        Dim Entry As Integer = Q.Value("Entryno") ' GetMaxEntry(4, 0)


        Dim FromEntryNo As Integer = Entry
        Dim ToEntryNo As Integer

        Dim userID As String = Framework.UserID
        Dim DataSource As New DataTable
        DataSource = WorkSession.Client.DataSource
        Dim ToDate As String = sender.GetParameter("ToDate")
        Try
            Query.BeginTransaction()
            Dim updateSeries As Query = Query.Update("No_ Series Line")
            updateSeries.Fields("Last No_ Used") = LastClientUsed
            updateSeries.WhereAs("RowID") = SeriesRowID
            updateSeries.Execute()

            For i As Integer = 0 To DataSource.Rows.Count - 1
                AccNo = DataSource.Rows(i)(1)
                'SettingConfig.SetProgress(i + 1, DataSource.Rows.count - 1, AccNo)

                'Dim UnitCost As Decimal = DataSource.Rows(i)(5)
                Dim UnitCost As Decimal = 0
                Dim ExpirationDate As Date = Convert.ToDateTime(DataSource.Rows(i)(5))
                Dim LotNo As String = Code.Library.Library.ISDBNULL(DataSource.Rows(i)(3), "")
                Dim VariantCode As String = Code.Library.Library.ISDBNULL(DataSource.Rows(i)(4), "")
                For j As Integer = 6 To DataSource.Columns.Count - 1
                    'Dim DateChange As DateTime = Convert.ToDateTime(DataSource.Columns(j).Caption)
                    Dim DateChange As DateTime = Convert.ToDateTime(ToDate)
                    Dim newValue As Decimal = DataSource.Rows(i)(j)

                    If newValue <> 0 Then
                        InsertValueLotNo(LocationCode, AccNo, newValue, Entry, DateChange,
                                         ExpirationDate, GetLCY(), 1, userID, DocumentNo,
                                         ExtDocumentNo, 0, UnitCost, VariantCode, SourceCode, "", LotNo, ResponsibilityCenter)
                        Entry += 1
                        ToEntryNo = Entry
                    End If

                Next
            Next


            Query.EndTransaction()
            WorkSession.MsgML("Successfull !")
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try
    End Sub

    <ThreadingWorker()> Public Function PhysicalCountingComparisionViewReport_VariantCode(ByVal sender As WXSource, ByVal e As WXArgs)

        WorkSession.SetProgress("Physical Counting Running ...")

        Dim Interval As Integer = sender.GetParameter("Interval")
        Dim ColumnType As Integer = sender.GetParameter("ColumnType") '1- Net change, 2- Balance at date, 4-YTD
        Dim ResultBy As Integer = sender.GetParameter("ShowBudgetValue")  '0: value, 1: Physical, 2 Comparision

        Dim LocationCode As String = sender.GetParameter("Code")
        Dim SourceCode As String = sender.GetParameter("SourceCode")
        Dim ResponsibilityCenter As String = sender.GetParameter("Responsibility")

        Dim FromDate As String = sender.GetParameter("FromDate")
        Dim ToDate As String = sender.GetParameter("ToDate")
        Dim DateComp As Integer = sender.GetParameter("Interval")

        Dim PostingGroup As String = sender.GetParameter("PostingGroup")
        Dim Category As String = sender.GetParameter("Category")
        Dim ProductGroup As String = sender.GetParameter("ProductGroup")

        'Dim ColumnType As Integer = sender.GetParameter("ColumnType")
        Dim AccountFilter As String = sender.GetParameter("AccountFilter")

        'Dim ShowValue As Integer = sender.GetParameter("ShowBudgetValue")
        Dim StockBy As Integer = sender.GetParameter("StockBy")
        If PostingGroup = "" Then
            WorkSession.MsgML("Item group must be selected ! Run View Again")
            Return Nothing
        End If
        If LocationCode = "" Then
            WorkSession.MsgML("Location Code must be selected ! Run View Again")
            Return Nothing
        End If

        Dim DataSource As New DataTable



        'PeriodDevide(DataSource, FromDate, ToDate, DateComp)

        'Calculate
        'Dim TotalAmount As Decimal
        Dim Amount As Decimal = 0
        Dim BudgetDS As New DataTable

        Select Case ResultBy
            Case 0
                Dim ActualDS As New DataTable
                Dim q As Query = Query.StoredProc("GetInventoryLotNoBalanceV1_VariantCode")
                q.Parameters("Account") = ""
                q.Parameters("LotNo") = ""
                q.Parameters("From") = Convert.ToDateTime(FromDate)
                q.Parameters("To") = Convert.ToDateTime(ToDate)
                q.Parameters("SourceCode") = SourceCode
                q.Parameters("LocationCode") = LocationCode
                q.Parameters("Doctype") = -1
                q.Parameters("Entrytype") = -1
                q.Parameters("CurrencyCode") = ""
                q.Parameters("BalAccount") = ""
                DataSource = q.ToTable

            Case 1 'Physical Counting
                Dim qPhysical As Query = Query.StoredProc("GetInventoryLotNoBalance_PhysicalV1_VariantCode")
                qPhysical.Parameters("Account") = ""
                qPhysical.Parameters("LotNo") = ""
                qPhysical.Parameters("From") = Convert.ToDateTime(FromDate)
                qPhysical.Parameters("To") = Convert.ToDateTime(ToDate)
                qPhysical.Parameters("SourceCode") = SourceCode
                qPhysical.Parameters("LocationCode") = LocationCode
                qPhysical.Parameters("Doctype") = -1
                qPhysical.Parameters("Entrytype") = -1
                qPhysical.Parameters("CurrencyCode") = ""
                qPhysical.Parameters("BalAccount") = ""
                DataSource = qPhysical.ToTable
            Case 2
                Dim qPhysical As Query = Query.StoredProc("GetInventoryLotNoBalanceValue_PhysicalV1_VariantCode")
                qPhysical.Parameters("Account") = ""
                qPhysical.Parameters("LotNo") = ""
                qPhysical.Parameters("From") = Convert.ToDateTime(FromDate)
                qPhysical.Parameters("To") = Convert.ToDateTime(ToDate)
                qPhysical.Parameters("SourceCode") = SourceCode
                qPhysical.Parameters("LocationCode") = LocationCode
                qPhysical.Parameters("Doctype") = -1
                qPhysical.Parameters("Entrytype") = -1
                qPhysical.Parameters("CurrencyCode") = ""
                qPhysical.Parameters("BalAccount") = ""
                DataSource = qPhysical.ToTable
        End Select



        Dim gridView As GridView = WorkSession.Client.GridView
        gridView.DataSource = DataSource
        gridView.ColumnReadOnly(0) = True
        gridView.ColumnReadOnly(1) = True
        gridView.ColumnReadOnly(2) = True
        gridView.ColumnReadOnly(3) = True
        gridView.ColumnReadOnly(4) = True
        gridView.ColumnReadOnly(5) = True
        gridView.NumericColumnFrom = 6
        gridView.FixColumnCount = 6
        'gridView.ColumnWidth(1) = 200
        gridView.DrillDownColumnFrom = 6
        gridView.DrillDownHandler = "PhysicalCountingDrillDownLotNo"

        Return Nothing
    End Function
    Public Sub Delete_PhysicalValueEntry(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Query.BeginTransaction()
            Dim DocumentNo As String = sender.GetParameter("DocumentNo")
            If DocumentNo <> "" Then
                Dim qDeletePhysicalValue As Query = Query.Delete("Physical Value Entry")
                qDeletePhysicalValue.WhereAs("External Document No_") = DocumentNo
                qDeletePhysicalValue.Execute()
            End If
            Query.EndTransaction()
            sender.RefreshSource()
            WorkSession.MsgML("Thành Công!")
        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub PhysicalCountingGetStockLotNoV1(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim LocationCode As String = sender.GetParameter("Code")
            Dim SourceCode As String = sender.GetParameter("SourceCode")
            Dim ResponsibilityCenter As String = sender.GetParameter("Responsibility")

            Dim FromDate As String = sender.GetParameter("FromDate")
            Dim ToDate As String = sender.GetParameter("ToDate")
            Dim DateComp As Integer = sender.GetParameter("Interval")

            Dim PostingGroup As String = sender.GetParameter("PostingGroup")
            Dim Category As String = sender.GetParameter("Category")
            Dim ProductGroup As String = sender.GetParameter("ProductGroup")

            Dim ColumnType As Integer = sender.GetParameter("ColumnType")
            Dim AccountFilter As String = sender.GetParameter("AccountFilter")

            Dim ShowValue As Integer = sender.GetParameter("ShowBudgetValue")
            Dim StockBy As Integer = sender.GetParameter("StockBy")
            If PostingGroup = "" Then
                WorkSession.MsgML("Item group must be selected ! Run View Again")
                Return
            End If
            If LocationCode = "" Then
                WorkSession.MsgML("Location Code must be selected ! Run View Again")
                Return
            End If
            Dim DataSource As New DataTable
            Dim dateFrom As String = FromDate
            Dim dateTo As String = ToDate

            'If ShowValue = 0 Then
            Dim q As Query = Query.StoredProc("GetInventoryLotNoBalanceV1")
            q.Parameters("Account") = ""
            q.Parameters("LotNo") = ""

            q.Parameters("From") = Convert.ToDateTime(dateFrom)
            q.Parameters("To") = Convert.ToDateTime(dateTo)
            q.Parameters("SourceCode") = SourceCode
            q.Parameters("LocationCode") = LocationCode
            q.Parameters("Doctype") = -1
            q.Parameters("Entrytype") = -1
            q.Parameters("CurrencyCode") = ""
            q.Parameters("BalAccount") = ""
            Dim RS As DataTable = q.ToTable
            Dim gridView As GridView = WorkSession.Client.GridView
            gridView.DataSource = RS
            gridView.ColumnReadOnly(0) = True
            gridView.ColumnReadOnly(1) = True
            gridView.ColumnReadOnly(2) = True
            gridView.ColumnReadOnly(3) = True
            gridView.ColumnReadOnly(4) = True
            gridView.NumericColumnFrom = 5
            gridView.FixColumnCount = 5
            'gridView.ColumnWidth(1) = 200
            gridView.DrillDownColumnFrom = 5

        Catch ex As Exception
            WorkSession.MsgML(ex.ToString())
        End Try
    End Sub

    Public Sub GenerateTransferOrder(ByVal sender As WXSource, ByVal e As WXArgs)
        WorkSession.Save("parentEntityID", sender.ClientID)
        'Now query sequence numer of sales Order
        Try
            Dim rOrder As Hashtable = sender.CurrentRow
            If rOrder Is Nothing Or rOrder.Count = 0 Then Return
            If rOrder("Status") < 3 Then
                WorkSession.MsgML("This Document must be Released first !")
                Return
            End If
            If rOrder("Status") = 100 Then
                WorkSession.Msg("Đơn hàng đã được dự trù trước đó, Xin xem lại!")
                Return
            End If

            Dim strGroup As String = ""
            strGroup = " select A.[To Location Code] from [Transfer Planning Line] A"
            strGroup &= " where A.[Document No_]='" & rOrder("No_") & "'"
            strGroup &= " group by A.[To Location Code]"

            Dim QGroup As Query = Query.Sql(strGroup).Transaction(True)
            Dim tblGroup As New DataTable
            tblGroup = QGroup.ToTable
            '-------------Tách đơn hàng-------------------------
            Query.BeginTransaction()

            Dim orderTable As String = sender.TableName
            Dim LineControler As WXSource = sender.Relations(0)
            Dim LineTable As String = LineControler.TableName

            '----------------Khai bao truoc khi chay vong tim series chung tu
            Dim q As Query = Query.From("Number Sequence").Transaction(True).Select("TransferOrder")
            If q.Value("TransferOrder") = "" Then
                Query.RollBack()
                WorkSession.MsgML("Transfer Order Sequence Number must setup first")
                Return
            End If
            Dim SaleSequence As String = q.Value("TransferOrder")
            Dim qSeries As Query = Query.From("No_ Series Line").Transaction(True)
            qSeries.WhereAs("Series Code") = SaleSequence
            qSeries.WhereAs("Source Code") = rOrder("To Source Code")
            If rOrder("To Responsibility Center") <> "" Then
                qSeries.WhereAs("Responsibility Center") = rOrder("To Responsibility Center")
            End If
            If rOrder("Transaction Type") = 0 Then
                qSeries.WhereAs("Type") = 0
            ElseIf rOrder("Transaction Type") = 1 Then
                qSeries.WhereAs("Type") = 1
            End If
            qSeries.OrderBy("Code")
            If qSeries.ToTable.Rows.Count = 0 Then
                Query.RollBack()
                WorkSession.MsgML("Sales Order Series number must setup first")
                Return
            End If
            Dim lastNumberUsed As Integer = qSeries.Value("Last No_ Used")
            Dim incrementBy As Integer = qSeries.Value("Increment-by No_")
            Dim startPrefix As String = qSeries.Value("Starting No_")
            Dim EndingNo_ As Integer = qSeries.Value("Ending No_")
            '-------------------------------------
            Dim LineCount As Integer = 0

            For Each trowGroup As DataRow In tblGroup.Rows
                LineCount = LineCount + incrementBy
                Dim ToLocationCode As String = trowGroup("To Location Code")
                Dim FromLocationCode As String = rOrder("From Location Code")
                q = Query.From(LineTable).Transaction(True)
                'q.Where("Document No_").Is(rOrder("No_")).And
                q.Where("Document No_").Is(rOrder("No_"))
                q.And("To Location Code").Is(ToLocationCode)
                q.And("From Location Code").IsNot("")

                Dim OrderLine As DataTable = q.ToTable
                If OrderLine.Rows.Count = 0 Then Continue For
                For Each rLine As DataRow In OrderLine.Rows
                    If rLine("Lot No_") = "" Then
                        Query.RollBack()
                        WorkSession.MsgML("Hàng hóa {0} không có số lô hạn dùng, Vui lòng bốc lại số lô", rLine("Item No_"))
                        Return
                    End If
                    If rLine("Qty_ to Ship") + rLine("Quantity Shipped") > rLine("Quantity") Then
                        Query.RollBack()
                        WorkSession.MsgML("This Order had over Quantity !")
                        Return
                    End If
                    Dim amount As Decimal = 0
                    Dim Warning As String = IVCheckStockItemLotNoTransfer(rOrder("No_"), rLine("From Location Code"), rLine("Item No_"), amount, rLine("Lot No_"), rLine("Variant Code"))
                    Select Case Warning
                        Case -1 'Prohibited
                            Query.RollBack()
                            WorkSession.MsgML("Hàng hóa {0} số lô {1} dưới mức tồn kho {2}", rLine("Item No_"), rLine("Lot No_"), amount)
                            Return
                    End Select
                Next
                Dim SalesOrderCode As String = startPrefix & FormatDocumentNumber(EndingNo_, lastNumberUsed + LineCount)

                Dim insertSalesHeader As Query = Query.Entity("Transfer Order Header").WithValues(rOrder).Insert
                insertSalesHeader.Fields("No_") = SalesOrderCode
                insertSalesHeader.Fields("Login ID") = Framework.UserID
                insertSalesHeader.Fields("Originally Ordered No_") = rOrder("No_")
                'If rOrder("Transaction Type") = "0" Then
                insertSalesHeader.Fields("From Location Code") = ToLocationCode
                insertSalesHeader.Fields("From Source Code") = GetSourceCode4Location(ToLocationCode)
                insertSalesHeader.Fields("From Responsibility Center") = GetResponsibility4Location(ToLocationCode)

                insertSalesHeader.Fields("To Location Code") = FromLocationCode
                insertSalesHeader.Fields("To Source Code") = GetSourceCode4Location(FromLocationCode)
                insertSalesHeader.Fields("To Responsibility Center") = GetResponsibility4Location(FromLocationCode)

                insertSalesHeader.Fields("Source Code") = GetSourceCode4Location(ToLocationCode)
                insertSalesHeader.Fields("Responsibility Center") = GetResponsibility4Location(ToLocationCode)
                'ElseIf rOrder("Transaction Type") = "1" Then
                '    insertSalesHeader.Fields("From Location Code") = ToLocationCode
                '    insertSalesHeader.Fields("From Source Code") = GetSourceCode4Location(ToLocationCode)
                '    insertSalesHeader.Fields("From Responsibility Center") = GetResponsibility4Location(ToLocationCode)

                '    insertSalesHeader.Fields("To Location Code") = FromLocationCode
                '    insertSalesHeader.Fields("To Source Code") = GetSourceCode4Location(FromLocationCode)
                '    insertSalesHeader.Fields("To Responsibility Center") = GetResponsibility4Location(FromLocationCode)

                '    insertSalesHeader.Fields("Source Code") = GetSourceCode4Location(ToLocationCode)
                '    insertSalesHeader.Fields("Responsibility Center") = GetResponsibility4Location(ToLocationCode)
                'End If
                insertSalesHeader.Fields("Status") = 2
                insertSalesHeader.Fields("Posting Date") = DTOS(DateTime.Now)
                insertSalesHeader.Fields("Printed") = 0
                insertSalesHeader.Fields("Time") = Date.Now()
                insertSalesHeader.Execute()
                Dim insertSalesLine As Query = Query.Entity("Transfer Order Line").Insert
                For Each rLine As DataRow In OrderLine.Rows
                    If rLine("Qty_ to Ship") <> 0 Then
                        Dim gia As Decimal = 0
                        If rOrder("Transaction Type") = "0" Then
                            gia = GetUnitCost(rLine("Item No_"), rOrder("Posting Date"), rOrder("To Source Code"), rOrder("To Responsibility Center")) * Code.Logics.CodeLogics.ISDBNULL(rLine("Qty_ per Unit of Measure"), 1)
                        Else
                            gia = GetUnitCost(rLine("Item No_"), rOrder("Posting Date"), rOrder("From Source Code"), rOrder("From Responsibility Center")) * Code.Logics.CodeLogics.ISDBNULL(rLine("Qty_ per Unit of Measure"), 1)
                        End If
                        insertSalesLine.WithValues(rLine)
                        insertSalesLine.Fields("Unit Cost") = gia
                        insertSalesLine.Fields("Unit Cost (LCY)") = gia
                        insertSalesLine.Fields("Unit Price") = gia
                        insertSalesLine.Fields("Unit Price (LCY)") = gia
                        insertSalesLine.Fields("Document No_") = SalesOrderCode
                        insertSalesLine.Fields("Quantity") = rLine("Qty_ to Ship")
                        insertSalesLine.Fields("Qty_ to Ship") = rLine("Qty_ to Ship")
                        insertSalesLine.Fields("Qty_ to Receive") = 0
                        insertSalesLine.Fields("Amount") = rLine("Qty_ to Ship") * gia 'rLine("Unit Price")
                        insertSalesLine.Fields("Amount (LCY)") = rLine("Qty_ to Ship") * gia ' rLine("Unit Price (LCY)")
                        'If rOrder("Transaction Type") = "0" Then
                        insertSalesLine.Fields("From Location Code") = rLine("To Location Code")
                        insertSalesLine.Fields("To Location Code") = rLine("From Location Code")
                        'End If
                        insertSalesLine.Fields("Quantity Shipped") = 0
                        insertSalesLine.Fields("Quantity Received") = 0
                        insertSalesLine.Fields("VAT Base Amount") = rLine("Qty_ to Ship") * gia 'rLine("Unit Price (LCY)")
                        insertSalesLine.Fields("VAT Amount") = RoundWithCurrency(rLine("Qty_ to Ship") * gia * rLine("VAT %") / 100) 'RoundWithCurrency(rLine("Qty_ to Ship") * rLine("Unit Price (LCY)") * rLine("VAT %") / 100)
                        insertSalesLine.Fields("Status") = 2
                        insertSalesLine.Execute()

                        Dim updateLine As Query = Query.Update(LineTable)
                        updateLine.WhereAs("RowID") = rLine("RowID")
                        updateLine.Fields("Qty_ to Ship") = 0 'rLine("Qty_ to Ship")
                        updateLine.Fields("Quantity Shipped") = rLine("Quantity Shipped") + rLine("Qty_ to Ship")
                        updateLine.Fields("Quantity Received") = rLine("Quantity Received") + rLine("Qty_ to Ship")
                        If rLine("Applies-to Entry") = "" Then
                            updateLine.Fields("Applies-to Entry") = SalesOrderCode
                        Else
                            updateLine.Fields("Applies-to Entry") = rLine("Applies-to Entry") & "|" & SalesOrderCode
                        End If
                        updateLine.Execute()
                    End If
                Next
            Next
            Dim SeriesRowID As Integer = qSeries.Value("RowID")
            Dim updateSeries As Query = Query.Update("No_ Series Line")
            updateSeries.Fields("Last No_ Used") = lastNumberUsed + LineCount
            updateSeries.WhereAs("RowID") = SeriesRowID
            updateSeries.Execute()

            '------------------------Kết thúc tách đơn
            UpdateStatus(sender, e, 100)
            Query.EndTransaction()
            sender.RefreshSource() 'Refresh
            WorkSession.MsgML("Thành công!!!")
            If rOrder("Transaction Type") = 0 Then
                Framework.OpenEntity("Transfer Order Header 4 Ship", String.Format("[Originally Ordered No_]='{0}' ", rOrder("No_")))
            ElseIf rOrder("Transaction Type") = 1 Then
                Framework.OpenEntity("Transfer Return Order Header", String.Format("[Originally Ordered No_]='{0}' ", rOrder("No_")))
            End If

        Catch ex As Exception
            Query.RollBack()
            WorkSession.MsgML(ex.ToString)
        End Try

    End Sub
    Public Shared Function UpdateStatus(ByVal sender As WXSource, ByVal e As WXArgs, ByVal stus As Integer, Optional ByVal nonRel As Integer = 0, Optional ByVal ParamDocNo As String = "") As Integer

        Dim rOrder As Hashtable = sender.CurrentRow
        If rOrder Is Nothing Or rOrder.Count = 0 Then Return 0
        Dim orderTable As String = sender.TableName
        If sender.Entity.Name = "Quality Header" Then
            orderTable = "Require Receipt Header"
        End If
        Dim documentNo As String = ""
        If rOrder.Contains("No_") Then
            documentNo = rOrder("No_")
        ElseIf rOrder.Contains("Code") Then
            documentNo = rOrder("Code")
        ElseIf rOrder.Contains("Document No_") Then
            documentNo = rOrder("Document No_")
        Else
            Return 0
        End If
        If sender.Entity.Name = "Quality Header" Then
            documentNo = rOrder("Document No_")
        End If
        If nonRel = 0 Then
            Dim LineControler As WXSource

            For i As Integer = 0 To sender.Relations.Count - 1
                'If WorkSession.MsgML("Do you want to release this document?") Then Return
                LineControler = sender.Relations(i)
                Dim LineTable As String = LineControler.TableName

                If sender.Entity.Name = "Quality Header" Then
                    LineTable = "Require Receipt Line"
                End If

                Dim q As Query = Query.From(LineTable).Transaction(True)
                If ParamDocNo = "" Then
                    q.Where("Document No_").Is(documentNo)
                Else
                    q.Where(ParamDocNo).Is(documentNo)
                End If

                Dim OrderLine As DataTable = q.ToTable
                If OrderLine.Rows.Count = 0 Then Continue For


                Dim updateLine As Query = Query.Update(LineTable)
                If ParamDocNo = "" Then
                    updateLine.WhereAs("Document No_") = documentNo
                Else
                    updateLine.WhereAs(ParamDocNo) = documentNo
                End If
                updateLine.Fields("Status") = stus
                updateLine.Execute()
                LineControler.RefreshSource()
            Next
        End If
        Dim updateOrder As Query = Query.Update(orderTable)
        If rOrder.Contains("No_") Then
            updateOrder.WhereAs("No_") = documentNo
        ElseIf rOrder.Contains("Code") Then
            updateOrder.WhereAs("Code") = documentNo
        Else
            updateOrder.WhereAs("Document No_") = documentNo
        End If
        updateOrder.Fields("Status") = stus
        If rOrder.Contains("Login ID") Then
            updateOrder.Fields("Login ID") = Framework.UserID
        Else
            updateOrder.Fields("User ID") = Framework.UserID
        End If
        updateOrder.Execute()
        Return 1
    End Function
    Public Shared Function GetResponsibility4Location(ByVal code As String) As String
        Dim q As Query = Query.From("Location")
        q.Where("Code").Is(code)
        Dim sc As String = q.Value("Responsibility Center")
        Return sc
    End Function

    Public Shared Function GetSourceCode4Location(ByVal code As String) As String
        Dim q As Query = Query.From("Location")
        q.Where("Code").Is(code)
        Dim sc As String = q.Value("Source Code")
        Return sc
    End Function
    Public Shared Function CheckColImportItemJournal(ByVal DBSource As DataTable)
        Dim TError As String = ""
        Try
            If DBSource.Columns.Contains("TYGIA") = False Then
                TError = TError & "File Excel Import không có cột TYGIA \n"
            End If
            If DBSource.Columns.Contains("TIENTE") = False Then
                TError = TError & "File Excel Import không có cột TIENTE \n"
            End If
            If DBSource.Columns.Contains("MA_HH") = False Then
                TError = TError & "File Excel Import không có cột MA_HH \n"
            End If
            If DBSource.Columns.Contains("VARIANT") = False Then
                TError = TError & "File Excel Import không có cột VARIANT \n"
            End If
            If DBSource.Columns.Contains("NGAY_GS") = False Then
                TError = TError & "File Excel Import không có cột NGAY_GS \n"
            End If
            If DBSource.Columns.Contains("SO_LUONG") = False Then
                TError = TError & "File Excel Import không có cột SO_LUONG \n"
            End If
            If DBSource.Columns.Contains("DONGIAVON") = False Then
                TError = TError & "File Excel Import không có cột DONGIAVON \n"
            End If
            If DBSource.Columns.Contains("THANHTIEN") = False Then
                TError = TError & "File Excel Import không có cột THANHTIEN \n"
            End If
            If DBSource.Columns.Contains("DVT") = False Then
                TError = TError & "File Excel Import không có cột DVT \n"
            End If
            If DBSource.Columns.Contains("SOLO") = False Then
                TError = TError & "File Excel Import không có cột SOLO \n"
            End If

        Catch ex As Exception

        End Try
        Return TError
    End Function
    <ThreadingWorker()> Public Shared Sub ImportJournalLine(ByVal sender As WXSource, ByVal e As WXArgs)
        Try
            Dim DBSource As DataTable = WorkSession.FileUpload.OpenAsXLSource


            Dim TError As String = CheckColImportItemJournal(DBSource)
            If TError <> "" Then
                WorkSession.MsgML(TError)
                Return
            End If
            Query.BeginTransaction()

            Dim r As Hashtable = sender.CurrentRow
            Dim rmaster As Hashtable = sender.MasterRow
            Dim EntityName As String = sender.Entity.Name

            Dim q As Query
            q = Query.From("Number Sequence").Select("Reminder")
            If q.Value("Reminder") = "" Then
                Query.RollBack()
                WorkSession.MsgML("Item Negative Sequence Number must setup first")
                Return
            End If
            Dim SaleSequence As String = rmaster("No_ Series")
            q = Query.From("No_ Series Line")
            q.WhereAs("Series Code") = SaleSequence
            q.WhereAs("Source Code") = rmaster("Source Code")
            If r("Responsibility Center") <> "" Then
                q.WhereAs("Responsibility Center") = rmaster("Responsibility Center")
            End If
            q.WhereAs("Code") = rmaster("Posting No_ Series")
            q.WhereAs("Location Code") = rmaster("Location Code")
            q.OrderBy("Code")
            If q.ToTable.Rows.Count = 0 Then
                Query.RollBack()
                WorkSession.MsgML("Item Negative Series number must setup first")
                Return
            End If
            Dim lastNumberUsed As Integer = q.Value("Last No_ Used")
            Dim incrementBy As Integer = q.Value("Increment-by No_")
            Dim startPrefix As String = q.Value("Starting No_")
            Dim SalesOrderCode As String = startPrefix & FormatDocumentNumber(q.Value("Ending No_"), lastNumberUsed + incrementBy)
            Dim SeriesRowID As Integer = q.Value("RowID")
            Dim JournalTemplateName As String = rmaster("Journal Template Name")
            Dim JournalBatchName As String = rmaster("Name")
            Dim DocType As String = rmaster("Document Type")
            Dim LocationCode As String = rmaster("Location Code")
            Dim RC As String = rmaster("Responsibility Center")
            Dim SourceCode As String = rmaster("Source Code")

            Dim SQLMaxLine As String = ""
            SQLMaxLine = "select isnull(max([Line No_]),0) MaxlineNo_  from [Item Journal Line]"
            SQLMaxLine &= " where 1=1 "
            SQLMaxLine &= " and [Journal Template Name]='" & JournalTemplateName & "'"
            SQLMaxLine &= " and [Journal Batch Name]='" & JournalBatchName & "'"
            SQLMaxLine &= " and [Document Type]='" & DocType & "'"
            SQLMaxLine &= " and [Location Code]='" & LocationCode & "'"
            SQLMaxLine &= " and [Responsibility Center]='" & RC & "'"
            SQLMaxLine &= " and [Source Code]='" & SourceCode & "'"
            Dim QMax As Query = Query.Sql(SQLMaxLine).Transaction(True)
            Dim LineNo_ As Integer = QMax.Value("MaxlineNo_") + 1
            For Each Trow As DataRow In DBSource.Rows
                If Trow("MA_HH") <> "" Then
                    Dim Qty_UOM As Decimal = GetQtyPer(Trow("MA_HH"), Trow("DVT"))
                    If Qty_UOM < 1 Then
                        Query.RollBack()
                        WorkSession.MsgML("Vui lòng kiểm tra lại mã hàng hóa {0}, hoặc đơn vị tính {1}!!!", Trow("MA_HH"), Trow("DVT"))
                        Return
                    End If

                    Dim QV As Query = Query.From("Vendor").Transaction(True)
                    QV.Where("No_").Is(Trow("VARIANT"))
                    If QV.RecordCount < 1 Then
                        Query.RollBack()
                        WorkSession.MsgML("Vui lòng kiểm tra lại mã NCC {0}!!!!!!", Trow("VARIANT"))
                        Return
                    End If
                    Dim CurrFactor As Decimal = Code.Logics.CodeLogics.ISDBNULL(Trow("TYGIA"), 1)
                    If CurrFactor = 0 Then CurrFactor = 1
                    Dim CurrCode As String = Code.Logics.CodeLogics.ISDBNULL(Trow("TIENTE"), "VND")
                    Dim InsertEntity As Query = Nothing
                    Select Case EntityName

                        Case "Item Negative Adjustment Line"
                            InsertEntity = Query.Entity("Item Negative Adjustment Line").Insert

                        Case "Item Positive Adjustment Line"
                            InsertEntity = Query.Entity("Item Positive Adjustment Line").Insert

                    End Select
                    If InsertEntity IsNot Nothing Then
                        InsertEntity.Fields("Line No_") = LineNo_
                        InsertEntity.Fields("Journal Template Name") = JournalTemplateName
                        InsertEntity.Fields("Journal Batch Name") = JournalBatchName
                        InsertEntity.Fields("Document Type") = DocType
                        InsertEntity.Fields("Location Code") = LocationCode
                        InsertEntity.Fields("Responsibility Center") = RC
                        InsertEntity.Fields("Source Code") = SourceCode


                        InsertEntity.Fields("Item No_") = Trow("MA_HH")
                        InsertEntity.Fields("Variant Code") = Trow("VARIANT")
                        InsertEntity.Fields("Posting Date") = CDate(Trow("NGAY_GS"))
                        InsertEntity.Fields("Document Date") = CDate(Trow("NGAY_CT"))
                        InsertEntity.Fields("Quantity") = Trow("SO_LUONG")
                        InsertEntity.Fields("Unit Cost") = Trow("DONGIAVON")
                        InsertEntity.Fields("Unit Cost (LCY)") = Trow("DONGIAVON") * CurrFactor

                        InsertEntity.Fields("Amount") = Trow("THANHTIEN")
                        InsertEntity.Fields("Amount (LCY)") = Trow("THANHTIEN") * CurrFactor


                        InsertEntity.Fields("Unit of Measure Code") = Trow("DVT")

                        InsertEntity.Fields("Qty_ per Unit of Measure") = Qty_UOM
                        InsertEntity.Fields("Expiration Date") = CDate(Trow("HANDUNG"))
                        InsertEntity.Fields("Lot No_") = Trow("SOLO")
                        InsertEntity.Fields("Overhead Rate") = CurrFactor
                        InsertEntity.Fields("Currency Code") = CurrCode
                        InsertEntity.Fields("Document No_") = SalesOrderCode
                        InsertEntity.Fields("User ID") = Framework.UserID
                        InsertEntity.Execute()
                        LineNo_ = LineNo_ + 1
                    End If

                End If
            Next
            Query.EndTransaction()
            sender.RefreshSource()
            WorkSession.MsgML("Thành Công!")
        Catch ex As Exception
            WorkSession.MsgML(ex.ToString())
            Query.RollBack()
        End Try
    End Sub
#End Region

End Class
